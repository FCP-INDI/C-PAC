name: Build and test C-PAC

on:
  workflow_dispatch:

jobs:
  C-PAC:
    name: Build Docker C-PAC images
    strategy:
      matrix:
        variant:
          - ''
          - lite
          - fMRIPrep-LTS
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v4
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          root-reserve-mb: 30000
      - name: Check out C-PAC
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set tag & Dockerfile
        run: |
          if [[ "${{ matrix.variant }}" != "" ]]
          then
            VARIANT=-${{ matrix.variant }}
          fi
          if [[ "${{ matrix.variant }}" == "fMRIPrep-LTS" ]]
          then
            OS=xenial
          else
            OS=bionic
          fi
          GITHUB_BRANCH=$(echo ${GITHUB_REF} | cut -d '/' -f 3-)
          if [[ ! $GITHUB_BRANCH == 'main' ]] && [[ ! $GITHUB_BRANCH == 'develop' ]]
          then
            TAG=${GITHUB_BRANCH//\//_}
            DOCKERFILE=.github/Dockerfiles/C-PAC.develop$VARIANT-$OS.Dockerfile
          elif [[ $GITHUB_BRANCH == 'develop' ]]
          then
            TAG=nightly$VARIANT
            DOCKERFILE=.github/Dockerfiles/C-PAC.develop$VARIANT-$OS.Dockerfile
          elif [[ $GITHUB_BRANCH == 'main' ]]
          then
            TAG=latest$VARIANT
            if [[ $VARIANT == "" ]]
            then
              DOCKERFILE=Dockerfile
            else
              DOCKERFILE=variant$VARIANT.Dockerfile
            fi
          fi
          TAG=$TAG$VARIANT
          echo DOCKER_TAG=$(echo "ghcr.io/${{ github.repository }}:$TAG" | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo DOCKERFILE="${DOCKERFILE}" >> $GITHUB_ENV
          cat $GITHUB_ENV
      - name: Prep Dockerfiles for forked repository
        if: ${{ github.repository_owner }} != 'FCP-INDI'
        run: .github/scripts/local_ghcr $DOCKERFILE ${{ github.repository_owner }}
      - name: See Dockerfile
        run: |
          echo $DOCKERFILE
          cat $DOCKERFILE
      - name: Build and push Docker image
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: |
            ${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Circle_tests:
    name: Run tests on CircleCI
    needs: C-PAC
    runs-on: ubuntu-latest
    steps:
      - name: Check out C-PAC
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Trigger CircleCI tests
        run: |
            export GITHUB_BRANCH=$(echo ${GITHUB_REF#refs/heads/})
            TEXT="Triggered pipeline at "
            PIPELINE_NUMBER=$(curl \
              --request POST \
              --url "https://circleci.com/api/v2/project/gh/${GITHUB_REPOSITORY}/pipeline" \
              -u ${{ secrets.CIRCLE_API_USER_TOKEN }}: \
              --header 'content-type: application/json' \
              --data "{\"branch\":\"$GITHUB_BRANCH\", \"parameters\": {\"run_tests\": true}}" |
              jq '.number')
            PIPELINE_ID=$(curl \
              --request GET \
              --url "https://circleci.com/api/v2/project/gh/${GITHUB_REPOSITORY}/pipeline/${PIPELINE_NUMBER}" \
              -u "${{ secrets.CIRCLE_API_USER_TOKEN }}:" |
              jq '.id' |
              tr -d '"')
            # wait for workflow to get an ID
            sleep 20
            WORKFLOW_ID=$(curl \
              --request GET \
              --url "https://circleci.com/api/v2/pipeline/${PIPELINE_ID}/workflow" \
              -u "${{ secrets.CIRCLE_API_USER_TOKEN }}:" |
              jq '.items[0].id' |
              tr -d '"')
            echo ${TEXT}https://app.circleci.com/pipelines/github/${GITHUB_REPOSITORY}/${PIPELINE_NUMBER}/workflows/${WORKFLOW_ID}