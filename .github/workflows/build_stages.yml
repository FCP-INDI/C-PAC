# Copyright (C) 2022-2023  C-PAC Developers

# This file is part of C-PAC.

# C-PAC is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.

# C-PAC is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with C-PAC. If not, see <https://www.gnu.org/licenses/>.

# Requires secret `ACTIONS_WORKFLOW_TOKEN` with `workflow` scope
name: Build stages

on:
  workflow_call:
    inputs:
      phase_one:
        description: 'first phase of staging images to include (OS & data)'
        type: string
        required: true
      rebuild_phase_one:
        description: 'first phase of staging images to rebuild (OS & data)'
        type: string
        required: true
      phase_two:
        description: 'second phase of staging images to include (dependencies)'
        type: string
        required: true
      rebuild_phase_two:
        description: 'second phase of staging images to rebuild (dependencies)'
        type: string
        required: true
      phase_three:
        description: 'third phase of staging images to include (base images)'
        type: string
        required: true
      rebuild_phase_three:
        description: 'third phase of staging images to rebuild (base images)'
        type: string
        required: true

jobs:
  Ubuntu:
    name: Build C-PAC stage images for Ubuntu & FSL data
    strategy:
      matrix:
        Dockerfile: ${{ fromJSON(inputs.phase_one) }}
    env:
      REBUILD: ${{ inputs.rebuild_phase_one }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set tag & see if it exists
        continue-on-error: true
        id: docker_tag
        if: always()
        run: |
          TAG=$(sed 's/\./:/' <(echo ${{ matrix.Dockerfile }}))
          DOCKER_TAG=$(echo "ghcr.io/${{ github.repository }}/$TAG" | tr '[:upper:]' '[:lower:]')
          echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_ENV
          docker buildx imagetools inspect $DOCKER_TAG >/dev/null || echo "not_yet_exists=1" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Clear up some space on runner
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Set up Docker Buildx
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/setup-buildx-action@v2.2.1
      - name: Log in to GitHub Container Registry
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/build-push-action@v3.2.0
        with:
          file: .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
  
  stages:
    name: Build C-PAC Docker stage images for dependencies
    needs: Ubuntu
    strategy:
      matrix:
        Dockerfile: ${{ fromJSON(inputs.phase_two) }}
    env:
      REBUILD: ${{ inputs.rebuild_phase_two }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set tag & see if it exists
        continue-on-error: true
        id: docker_tag
        run: |
          TAG=$(sed 's/\./:/' <(echo ${{ matrix.Dockerfile }}))
          DOCKER_TAG=$(echo "ghcr.io/${{ github.repository }}/$TAG" | tr '[:upper:]' '[:lower:]')
          echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_ENV
          docker buildx imagetools inspect $DOCKER_TAG >/dev/null || echo "not_yet_exists=1" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        if: always()
      - name: Prep Dockerfiles for forked repository
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        run: |
            .github/scripts/local_ghcr .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile ${{ github.repository_owner }} $DOCKER_TAG
            cat .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
      - name: See Dockerfile
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        run: cat .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
      - name: Clear up some space on runner
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Set up Docker Buildx
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/setup-buildx-action@v2.2.1
      - name: Log in to GitHub Container Registry
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        if: contains(fromJSON(env.REBUILD), matrix.Dockerfile) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

  build-base:
    name: Build C-PAC base stage images
    needs: stages
    runs-on: ubuntu-latest
    env:
      BUILD_CACHE: /home/runner/.docker/buildkit
      REBUILD: ${{ inputs.rebuild_phase_three }}
    strategy:
      matrix:
        variant: ${{ fromJSON(inputs.phase_three) }}
    steps:
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Prep source files
        run: |
            sed -i -e 's/^/\.github\/Dockerfiles\//' .github/stage_requirements/${{ matrix.variant }}.txt
            echo 'dev/docker_data/required_afni_pkgs.txt' >> .github/stage_requirements/${{ matrix.variant }}.txt
            echo '.github/workflows/build_stages.yml' >> .github/stage_requirements/${{ matrix.variant }}.txt
            echo '.github/stage_requirements/${{ matrix.variant }}.txt' >> .github/stage_requirements/${{ matrix.variant }}.txt
      - name: Set tag & see if it exists
        continue-on-error: true
        run: |
          TAG="stage-base:${{ matrix.variant }}-$(cat version)"
          DOCKER_TAG=$(echo "ghcr.io/${{ github.repository }}/$TAG" | tr '[:upper:]' '[:lower:]')
          echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_ENV
          docker buildx imagetools inspect $DOCKER_TAG >/dev/null || echo "not_yet_exists=1" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        id: docker_tag
        if: always()
      - name: Maximize build space
        if: contains(fromJSON(env.REBUILD), matrix.variant) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: easimon/maximize-build-space@v4
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          overprovision-lvm: 'true'
      - name: Clear up some space on runner
        if: contains(fromJSON(env.REBUILD), matrix.variant) || steps.docker_tag.outputs.not_yet_exists == 1
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Set up Docker Buildx
        if: contains(fromJSON(env.REBUILD), matrix.variant) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/setup-buildx-action@v2.2.1
      - name: Log in to GitHub Container Registry
        if: contains(fromJSON(env.REBUILD), matrix.variant) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Prep Dockerfiles for forked repository
        if: contains(fromJSON(env.REBUILD), matrix.variant) || steps.docker_tag.outputs.not_yet_exists == 1
        run: |
            .github/scripts/local_ghcr .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile ${{ github.repository_owner }} $DOCKER_TAG
            cat .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile
      - name: See Dockerfile
        if: contains(fromJSON(env.REBUILD), matrix.variant) || steps.docker_tag.outputs.not_yet_exists == 1
        run: cat .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile
      - name: Build and push base image
        if: contains(fromJSON(env.REBUILD), matrix.variant) || steps.docker_tag.outputs.not_yet_exists == 1
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

  build-and-test:
    name: Build and test C-PAC images
    needs: build-base
    uses: ./.github/workflows/build_and_test.yml
    secrets: inherit
