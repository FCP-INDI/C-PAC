version: 2.1

commands:
  combine-coverage:
    steps:
      - run:
          name: "Combining and reporting coverage"
          command: |
            coverage combine
            coverage html
  install-singularity:
    steps:
      - install-singularity-requirements
      - run:
          name: "Cloning Singularity v2.5.2 source code"
          command: git clone -b 2.5.2 https://github.com/sylabs/singularity
      - set-up-singularity
  install-singularity-requirements:
    steps:
      - run:
          name: "Installing Singularity v2.5.2 requirements"
          command: sudo apt-get update && sudo apt-get install flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl1.0.0 libarchive-dev libgpgme11-dev libseccomp-dev -y
  run-random:
    parameters:
      platform:
        description: "Docker or Singularity"
        type: string
    steps:
      - run:
          name: "Running one random subject through one random preconfig"
          command: $(python dev/circleci_data/generate_run_command.py << parameters.platform >>)
  set-python-version:
    steps:
      - run:
          name: "Setting Python Version"
          command: |
            pyenv install 3.6.3
            pyenv global 3.6.3
  set-up-singularity:
    steps:
      - install-singularity-requirements
      - run:
          name: "Setting up Singularity v2.5.2"
          command: |
            cd singularity
            ./autogen.sh
            ./configure --prefix=/usr/local --sysconfdir=/etc
            make
            sudo make install
            cd ..

jobs:
  combine-coverage:
    machine: true
    steps:
      - attach_workspace:
          at: /home/circleci
      - set-python-version
      - combine-coverage
      - store_test_results:        
          path: test-results
      - store_artifacts:
          path: htmlcov
  pytest-docker:
    machine: true
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /home/circleci/
      - set-python-version
      - run:
          name: Get Sample BIDS Data
          command: git clone https://github.com/bids-standard/bids-examples.git
      - run:
          name: pytest
          command: |
            docker load < cpac-docker-image.tar.gz
            docker run -dit -P -e COVERAGE_FILE=.coverage.docker-test -v /home/circleci/project/test-results:/code/test-results -v /home/circleci/project:/home/circleci/project --workdir=/home/circleci/project --entrypoint=/bin/bash --name docker_test fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            docker exec docker_test /bin/bash ./code/dev/circleci_data/test_in_image.sh
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: .coverage*
  pytest-singularity:
    machine: true
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /home/circleci/
      - set-python-version
      - set-up-singularity
      - run:
          name: "Testing C-PAC installation in Singularity Image"
          command: |
            pip install -r dev/circleci_data/requirements.txt
            COVERAGE_FILE=.coverage.singularity-install
            coverage run -m pytest --junitxml=test-results/junit.xml --continue-on-collection-errors  dev/circleci_data/test_install.py
      - run:
          name: "Running unit tests in Singularity image"
          command: SINGULARITYENV_COVERAGE_FILE=.coverage.singularity singularity exec C-PAC-CI.simg python -m coverage run -m pytest /code
      - store_artifacts:
          path: .coverage*
  run-docker:
    machine: true
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /home/circleci/
      - set-python-version
      - run-random:
          platform: docker
      - store_artifacts:
          path: .coverage*
  run-singularity:
    machine: true
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /home/circleci/
      - set-python-version
      - set-up-singularity
      - run-random:
          platform: singularity
      - store_artifacts:
          path: .coverage*
  build:
    machine: true
    steps:
      - checkout
      - set-python-version
      - run:
          name: "Building Docker image"
          command: |
            docker build -t fcpindi/c-pac:${CIRCLE_BRANCH//\//_} .
            docker save fcpindi/c-pac:${CIRCLE_BRANCH//\//_} | gzip > cpac-docker-image.tar.gz
          # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - run:
          name: "Starting local Docker registry"
          command: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - install-singularity
      - run:
          name: "Building Singularity image"
          command: |
            docker load < cpac-docker-image.tar.gz
            docker tag fcpindi/c-pac:${CIRCLE_BRANCH//\//_} localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            docker push localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            SINGULARITY_NOHTTPS=1 singularity build C-PAC-CI.simg docker://localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_} 
      - store_artifacts:
          path: cpac-docker-image.tar.gz
      - store_artifacts:
          path: C-PAC-CI.simg
          destination: cpac-singularity-image.simg
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: /home/circleci/
          # Must be relative path from root
          paths: project
  test:
    machine: true
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /home/circleci/
      - set-python-version
      - run:
          name: Running C-PAC pipe-test
          command: |
            docker load < cpac-docker-image.tar.gz
            docker run -i --rm -v $HOME:/output -v /tmp:/tmp cpac:${CIRCLE_BRANCH//\//_} s3://fcp-indi/data/Projects/RocklandSample/RawDataBIDS /output participant --participant_label A00028185 --pipeline_file /cpac_resources/pipe-test_ci.yml
          no_output_timeout: 3h

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - master
      - pytest-docker:
          requires:
            - build
      - pytest-singularity:
          requires:
            - build
      - run-docker:
          requires:
            - build
      - run-singularity:
          requires:
            - build
      - combine-coverage:
          requires:
            - pytest-docker
            - pytest-singularity
            - run-docker
            - run-singularity