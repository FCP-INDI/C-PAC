version: 2.1

commands:
  build-images:
    steps:
      - run:
          name: "Building Docker image"
          command: |
            docker build -t fcpindi/c-pac:${CIRCLE_BRANCH//\//_} .
            docker save fcpindi/c-pac:${CIRCLE_BRANCH//\//_} | gzip > cpac-docker-image.tar.gz
          no_output_timeout: 5h
          # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - run:
          name: "Starting local registry"
          command: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - install-singularity-requirements
      - run: 
          name: "Cloning Singularity 2.5.2"
          command: git clone -b 2.5.2 https://github.com/sylabs/singularity
      - set-up-singularity
      - run:
          name: "Building Singularity image from Docker image"
          command: |
            docker load < cpac-docker-image.tar.gz
            docker tag fcpindi/c-pac:${CIRCLE_BRANCH//\//_} localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            docker push localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            SINGULARITY_NOHTTPS=1 singularity build C-PAC-CI.simg docker://localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
          no_output_timeout: 5h
      - store_artifacts:
          path: cpac-docker-image.tar.gz
      - store_artifacts:
          path: C-PAC-CI.simg
          destination: cpac-singularity-image.simg
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: /home/circleci/
          # Must be relative path from root
          paths: project
  check-for-built-images:
    steps:
      - run:
          name: "Checking for locally built images"
          command: |
            if [[ ! -f cpac-docker-image.tar.gz || ! -f cpac-singularity-image.simg ]]
            then
              circleci step halt
            fi
  combine-coverage:
    steps:
      - run:
          name: "Combining and reporting coverage"
          command: |
            coverage combine
            coverage html
  configure-git-user:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "12:bc:f2:e4:31:cc:72:54:54:bc:f5:5b:89:e6:d8:ee"
      - run:
          name: "Configuring git user"
          command: |
            sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 78BD65473CB3BD13
            curl -L https://packagecloud.io/circleci/trusty/gpgkey | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install git -y
            git config --global user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
            git config --global user.name "${CIRCLE_USERNAME} @ CircleCI"
  create-docker-test-container:
    parameters:
      coverage-file:
        description: "Filename for coverage file"
        type: string
        default: .coverage.docker
    steps:
      - load-docker-image
      - run:
          name: "Creating Docker container"
          command: docker run -dit -P -e COVERAGE_FILE=<< parameters.coverage-file >> -v /home/circleci/project/test-results:/code/test-results -v /home/circleci/project:/home/circleci/project -v /home/circleci/project/CPAC/resources/configs/test_configs:/test_configs -v $PWD:/code -v $PWD/dev/circleci_data:$PWD/dev/circleci_data --workdir=/home/circleci/project --entrypoint=/bin/bash --name docker_test fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
  generate-random-run:
    steps:
      - run:
          name: "Generating run command"
          command: python dev/circleci_data/generate_run_command.py
  install-singularity:
    steps:
      - install-singularity-requirements
      - run:
          name: "Cloning Singularity v2.5.2 source code"
          command: git clone -b 2.5.2 https://github.com/sylabs/singularity
      - set-up-singularity
  install-singularity-requirements:
    steps:
      - run:
          name: "Installing Singularity v2.5.2 requirements"
          command: sudo apt-get update && sudo apt-get install flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl1.0.0 libarchive-dev libgpgme11-dev libseccomp-dev -y
  load-docker-image:
    steps:
      - run:
          name: "Loading Docker image"
          command: docker load < cpac-docker-image.tar.gz
  set-python-version:
    steps:
      - run:
          name: "Setting Python Version"
          command: |
            pyenv install 3.9.0
            pyenv global 3.9.0
            pip install -r dev/circleci_data/requirements.txt
  set-up-singularity:
    steps:
      - install-singularity-requirements
      - run:
          name: "Setting up Singularity v2.5.2"
          command: |
            cd singularity
            ./autogen.sh
            ./configure --prefix=/usr/local --sysconfdir=/etc
            make
            sudo make install
            cd ..

jobs:
  combine-coverage:
    machine: true
    steps:
      - attach_workspace:
          at: /home/circleci
      - set-python-version
      - combine-coverage
      - store_test_results:        
          path: test-results
      - store_artifacts:
          path: htmlcov
  pytest-docker:
    machine: true
    steps:
      - attach_workspace:
          at: /home/circleci/
      - check-for-built-images
      - set-python-version
      - run:
          name: Getting Sample BIDS Data
          command: git clone https://github.com/bids-standard/bids-examples.git
      - create-docker-test-container
      - run:
          name: "Running unit tests in Docker image"
          command: docker exec docker_test /bin/bash /code/dev/circleci_data/test_in_image.sh
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
  pytest-singularity:
    machine: true
    steps:
      - attach_workspace:
          at: /home/circleci/
      - set-python-version
      - set-up-singularity
      - run:
          name: "Testing C-PAC installation in Singularity Image"
          command: |
            COVERAGE_FILE=.coverage.singularity-install
            coverage run -m pytest --junitxml=test-results/junit.xml --continue-on-collection-errors dev/circleci_data/test_install.py
      - run:
          name: "Running unit tests in Singularity image"
          command: SINGULARITYENV_COVERAGE_FILE=.coverage.singularity singularity exec -B $PWD:/code C-PAC-CI.simg ./dev/circleci_data/test_in_image.sh
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
  run-docker:
    machine: true
    steps:
      - attach_workspace:
          at: /home/circleci/
      - set-python-version
      - generate-random-run
      - create-docker-test-container:
          coverage-file: .coverage.docker-run
      - run:
          name: "Running one participant in Docker"
          command: docker exec docker_test dev/circleci_data/run_command.sh
          no_output_timeout: 5h
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
      - store_artifacts:
          path: dev/circleci_data/run_command.sh
      - store_artifacts:
          path: outputs
  run-singularity:
    machine: true
    steps:
      - attach_workspace:
          at: /home/circleci/
      - check-for-built-images
      - set-python-version
      - install-singularity-requirements
      - set-up-singularity
      - generate-random-run
      - run:
          name: "Running one participant in Singularity"
          command: SINGULARITYENV_COVERAGE_FILE=.coverage.singularity-test-run singularity exec -H /home/circleci/project -B CPAC/resources/configs/test_configs:/test_configs C-PAC-CI.simg dev/circleci_data/run_command.sh
          no_output_timeout: 5h
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
      - store_artifacts:
          path: dev/circleci_data/run_command.sh
      - store_artifacts:
          path: outputs
  build:
    machine: true
    steps:
      - checkout
      - set-python-version
      - configure-git-user
      - run:
          name: "Checking if version needs updated"
          # update version if version needs updated, otherwise just move on
          command: |
            if [[ ! $(git log -1 --pretty=%B) == *"Update version to"* ]]
            then
              cd $HOME/project/CPAC
              VERSION=$(python -c "from info import __version__; print(__version__)")
              cd ..
              if ! [[ $CIRCLE_BRANCH = 'master' ]]
                then
                  git fetch --all
                  if [[ -n ${CIRCLE_PR_NUMBER} && -n ${GITHUB_PR_BASE_TOKEN} ]]
                    then
                      curl -L "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" -o jq
                      chmod +x jq
                      REBASE_BASE=origin/$(curl -u shnizzedy:$GITHUB_PR_BASE_TOKEN "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$CIRCLE_PR_NUMBER" | jq '.base.ref' | tr -d '"')
                  else
                    REBASE_BASE=$(git rev-parse --short HEAD~30)
                  fi
                GIT_SEQUENCE_EDITOR=dev/circleci_data/drop_version_bump_commits git rebase -X ours -i $REBASE_BASE --empty drop
              fi
              echo "v${VERSION}" > version
              sed -i -r "s/^(# [Vv]ersion ).*$/# Version ${VERSION}/g" dev/docker_data/default_pipeline.yml
              find ./CPAC/resources/configs -name "*.yml" -exec sed -i -r "s/^(# [Vv]ersion ).*$/# Version ${VERSION}/g" {} \;
              git add version CPAC/resources/configs dev/docker_data/default_pipeline.yml
              if [[ ! -z $(git diff origin/${CIRCLE_BRANCH}) ]]
              then
                git commit -m ":bookmark: Update version to ${VERSION}"
                git push origin HEAD:${CIRCLE_BRANCH} -f || true
                circleci step halt
              fi
              cd ..
            fi
      - build-images

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - pytest-docker:
          requires:
            - build
      - pytest-singularity:
          requires:
            - build
      - run-docker:
          requires:
            - build
      - run-singularity:
          requires:
            - build
      - combine-coverage:
          requires:
            - pytest-docker
            - pytest-singularity
            - run-docker
            - run-singularity
