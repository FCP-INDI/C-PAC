--- 
version: 2.1

parameters:
  branch:
    type: string
    default: unknown
  owner:
    type: string
    default: unknown

commands:
  push-to-docker-hub:
    parameters:
      tag:
        type: string
    steps:
      - run:
          name: "Log in to Docker Hub"
          command: docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PUSH}
      - run:
          name: "Tag image for Docker Hub"
          command: "docker tag fcpindi/c-pac:${DOCKER_TAG} fcpindi/c-pac:<< parameters.tag >>${VARIANT}"
      - run:
          name: "Push to Docker Hub"
          command: "docker push fcpindi/c-pac:<< parameters.tag >>${VARIANT}"
  build-images:
    parameters:
      variant:
        type: string
        default: ""
    steps:
      - set-up-variant:
          variant: "<< parameters.variant >>"
      - run:
          name: "Building Docker image"
          command: |
            docker build -t fcpindi/c-pac:${DOCKER_TAG} . ${DOCKERFILE}
            docker save fcpindi/c-pac:${DOCKER_TAG} | gzip > ${DOCKER_TARBALL}.tar.gz
          no_output_timeout: 5h
      - when:
          condition:
            equal: [ << pipeline.parameters.owner >>, "FCP-INDI" ]
          steps:
            - when:
                condition:
                  or:
                    - equal: [ << pipeline.parameters.branch >>, "main" ]
                    - equal: [ << pipeline.parameters.branch >>, "master" ]
                steps:
                  - push-to-docker-hub:
                      tag: latest
            - when:
                condition:
                  equal: [ << pipeline.parameters.branch >>, "develop" ]
                steps:
                  - push-to-docker-hub:
                      tag: nightly
      # - when:
      #     condition:
      #       not:
      #         equal: [ << parameters.variant >>, fMRIPrep-LTS ]
      #     steps:
      #     - run:
      #         name: "Starting local registry"
      #         command: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      #     - get-singularity
      #     - run:
      #         name: "Building Singularity image from Docker image"
      #         command: |
      #           docker load < ${DOCKER_TARBALL}.tar.gz
      #           docker tag fcpindi/c-pac:${DOCKER_TAG} localhost:5000/fcpindi/c-pac:${DOCKER_TAG}
      #           docker push localhost:5000/fcpindi/c-pac:${DOCKER_TAG}
      #           SINGULARITY_NOHTTPS=1 singularity build cpac-singularity-image${VARIANT}.simg docker://localhost:5000/fcpindi/c-pac:${DOCKER_TAG}
      #         no_output_timeout: 5h
  check-updated:
    steps:
      - restore_cache:
          key: updated--{{ .Revision }}
      - run:
          name: "Halt if version updated"
          command: if [[ $(cat /home/circleci/HALT) == true ]]; then circleci step halt; fi
  clear-up-space:
    parameters:
      filepath:
        type: string
    steps:
      - run:
          name: "Delete file we're done with"
          command: rm -rf << parameters.filepath >>
  combine-coverage:
    steps:
      - run:
          name: "Combining and reporting coverage"
          command: |
              coverage combine
              coverage html --ignore-errors
  configure-git-user:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e0:d6:95:7b:bf:44:ff:9c:3f:91:d5:30:57:37:3c:1f"
      - run:
          name: "Configuring git user"
          command: |
            sudo apt-get update
            sudo apt-get install git -y
            git config --global user.email "CMI_CPAC_Support@childmind.org"
            git config --global user.name "Theodore (machine user) @ CircleCI"
  create-docker-test-container:
    parameters:
      coverage-file:
        default: .coverage.docker
        description: "Filename for coverage file"
        type: string
    steps:
      - load-docker-image
      - run:
          name: "Creating Docker container"
          command: "docker run -dit -P -e COVERAGE_FILE=<< parameters.coverage-file >> -v /home/circleci/project/test-results:/code/test-results -v /home/circleci/project:/home/circleci/project -v /home/circleci/project/CPAC/resources/configs/test_configs:/test_configs -v $PWD:/code -v $PWD/dev/circleci_data:$PWD/dev/circleci_data --workdir=/home/circleci/project --entrypoint=/bin/bash --name docker_test fcpindi/c-pac:${DOCKER_TAG}"
  get-sample-bids-data:
    steps:
      - run:
          name: Getting Sample BIDS Data
          command: git clone https://github.com/bids-standard/bids-examples.git
  get-singularity:
    parameters:
      version:
        description: "Version of Singularity to clone"
        type: string
        default: v3.7.2
    steps:
      - install-singularity-requirements
      - restore_cache:
          keys:
            - singularity-<< parameters.version >>
      - run:
          name: "Cloning Singularity << parameters.version >>"
          command: |
            if [[ ! -d singularity-<< parameters.version >> ]]
            then
              git clone -b << parameters.version >> https://github.com/sylabs/singularity singularity-<< parameters.version >>
            fi
      - save_cache:
          key: singularity-<< parameters.version >>
          paths:
            - singularity-<< parameters.version >>
      - run:
         name: "Setting up Singularity"
         command: |
           cd singularity-<< parameters.version >>
           ./mconfig
           make -C builddir
           sudo make -C builddir install
           cd ..
  install-singularity-requirements:
    steps:
      - run:
          name: "Installing Singularity requirements"
          command: |
           sudo apt-get update && sudo apt-get install flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl1.1 libarchive-dev libgpgme11-dev libseccomp-dev -y
  load-docker-image:
    steps:
      - run:
          name: "Loading Docker image"
          command: "docker load < cpac-docker-image${VARIANT}.tar.gz"
  run-pytest-docker:
    steps:
      - create-docker-test-container:
          coverage-file: .coverage.docker${VARIANT}
      - run:
          name: Running pytest in Docker image
          command: docker exec docker_test /bin/bash /code/dev/circleci_data/test_in_image.sh
  set-python-version:
    steps:
      - run:
          name: "Setting Python Version"
          command: |
            cd /opt/circleci/.pyenv/plugins/python-build/../.. && git pull && cd -
            pyenv install -v 3.7.9
            pyenv global 3.7.9
      - restore_cache:
          keys:
            - pip-ci-requirements-{{ checksum "dev/circleci_data/requirements.txt" }}-3.7.9
      - run:
          name: "Installing CI dependencies"
          command: pip install -r dev/circleci_data/requirements.txt
      - save_cache:
          key: pip-ci-requirements-{{ checksum "dev/circleci_data/requirements.txt" }}-3.7.9
          paths: 
            - /opt/circleci/.pyenv/versions/3.7.9
  set-up-variant:
    parameters:
      variant:
        type: string
    steps:
      - run:
          name: "Setting up variant"
          command: |
            DOCKER_TARBALL="cpac-docker-image"
            if [[ -n "<< parameters.variant >>" ]]
            then
              DOCKERFILE="variant-<< parameters.variant >>.Dockerfile"
              if [[ -f ${DOCKERFILE} ]]
              then
                sed -i "s|c-pac:latest|c-pac:${CIRCLE_BRANCH//\//_}|g" ${DOCKERFILE}
              fi
              DOCKER_TARBALL="${DOCKER_TARBALL}-<< parameters.variant >>"
              VARIANT="-<< parameters.variant >>"
              echo "export DOCKERFILE=\"-f ${DOCKERFILE}\"" >> $BASH_ENV
            fi
            echo "export DOCKER_TARBALL=${DOCKER_TARBALL}" >> $BASH_ENV
            echo "export VARIANT=${VARIANT}" >> $BASH_ENV
            DOCKER_TAG=${CIRCLE_BRANCH//\//_}${VARIANT}
            echo "export DOCKER_TAG=${DOCKER_TAG}" >> $BASH_ENV
  test-singularity-installation:
    steps:
      - run:
          name: Testing Singularity installation
          command: |
            pip install -r dev/circleci_data/requirements.txt
            coverage run -m pytest --junitxml=test-results/junit.xml --continue-on-collection-errors  dev/circleci_data/test_install.py

jobs:         
  build:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - check-updated
      - set-python-version
      - build-images
      - store_artifacts:
          path: cpac-docker-image.tar.gz
      # - store_artifacts:
      #     path: cpac-singularity-image.simg
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project/cpac-docker-image.tar.gz
            # - project/cpac-singularity-image.simg
  build-ABCD-HCP:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - check-updated
      - set-python-version
      - build-images:
          variant: ABCD-HCP
      - store_artifacts:
          path: cpac-docker-image-ABCD-HCP.tar.gz
      # - store_artifacts:
      #     path: cpac-singularity-image-ABCD-HCP.simg
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project/cpac-docker-image-ABCD-HCP.tar.gz
            # - project/cpac-singularity-image-ABCD-HCP.simg
  build-fMRIPrep-LTS:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - check-updated
      - set-python-version
      - build-images:
          variant: fMRIPrep-LTS
      - store_artifacts:
          path: cpac-docker-image-fMRIPrep-LTS.tar.gz
      # - store_artifacts:
      #     path: cpac-singularity-image-fMRIPrep-LTS.simg
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project/cpac-docker-image-fMRIPrep-LTS.tar.gz
            # - project/cpac-singularity-image-fMRIPrep-LTS.simg
  build-lite:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - check-updated
      - set-python-version
      - build-images:
          variant: lite
      - store_artifacts:
          path: cpac-docker-image-lite.tar.gz
      # - store_artifacts:
      #     path: cpac-singularity-image-lite.simg
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project/cpac-docker-image-lite.tar.gz
            # - project/cpac-singularity-image-lite.simg
  check-version:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - set-python-version
      - configure-git-user
      - run:
          name: "Checking if version needs updated"
          # update version if version needs updated, otherwise just move on
          command: |
            HALT=false
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            if [[ ! "$COMMIT_MESSAGE" == *"Update version to"* ]]
            then
              cd $HOME/project/CPAC
              VERSION=$(python -c "from info import __version__; print('.'.join(('.'.join(__version__[::-1].split('-')[1].split('.')[1:])[::-1], __version__.split('-')[1])) if '-' in __version__ else __version__)")
              cd ..
              echo "v${VERSION}" > version
              sed -i -r "s/^(# [Vv]ersion ).*$/# Version ${VERSION}/g" dev/docker_data/default_pipeline.yml
              find ./CPAC/resources/configs -name "*.yml" -exec sed -i -r "s/^(# [Vv]ersion ).*$/# Version ${VERSION}/g" {} \;
              git add version CPAC/resources/configs dev/docker_data/default_pipeline.yml
              if [[ ! -z $(git diff origin/${CIRCLE_BRANCH}) ]]
              then
                git commit -m ":bookmark: Update version to ${VERSION} ($COMMIT_MESSAGE)"
                git push origin HEAD:${CIRCLE_BRANCH} || true
                HALT=true
              fi
              cd ..
            fi
            echo "${HALT}" > /home/circleci/HALT
      - save_cache:
          key: updated--{{ .Revision }}
          paths:
            - /home/circleci/HALT
  combine-coverage:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - check-updated
      - restore_cache:
          key: coverage-docker--{{ .Revision }}
      # - restore_cache:
      #     key: coverage-singularity--{{ .Revision }}
      - restore_cache:
          key: coverage-docker-ABCD-HCP-{{ .Revision }}
      # - restore_cache:
      #     key: coverage-singularity-ABCD-HCP-{{ .Revision }}
      - restore_cache:
          key: coverage-docker-lite-{{ .Revision }}
      # - restore_cache:
      #     key: coverage-singularity-lite-{{ .Revision }}
      - set-python-version
      - combine-coverage
      - store_artifacts:
          path: htmlcov
  pytest-docker:
    parameters:
      variant:
        type: string
        default: ""
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - check-updated
      - set-up-variant:
          variant: "<< parameters.variant >>"
      - attach_workspace:
          at: /home/circleci/
      - set-python-version
      - get-sample-bids-data
      - run-pytest-docker
      - clear-up-space:
          filepath: ${DOCKER_TARBALL}.tar.gz
      - store_test_results:
          path: test-results
      - save_cache:
          key: coverage-docker-<< parameters.variant >>-{{ .Revision }}
          paths: 
            - .coverage.docker
            - .coverage.docker-<< parameters.variant >>
  pytest-singularity:
    parameters:
      variant:
        type: string
        default: ""
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - check-updated
      - set-up-variant:
          variant: "<< parameters.variant >>"
      - attach_workspace:
          at: /home/circleci/
      - set-python-version
      - get-singularity
      - test-singularity-installation
      - run:
          command: "SINGULARITYENV_COVERAGE_FILE=.coverage.singularity${VARIANT} singularity exec -B $PWD:/code cpac-singularity-image${VARIANT}.simg /code/dev/circleci_data/test_in_image.sh"
          name: "Running unit tests in Singularity image"
      - clear-up-space:
          filepath: cpac-singularity-image${VARIANT}.simg
      - store_test_results:
          path: test-results
      - save_cache:
          key: coverage-singularity-<< parameters.variant >>-{{ .Revision }}
          paths: 
            - .coverage.singularity
            - .coverage.singularity-<<parameters.variant >>
workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          name: "Build images"
          requires:
            - "Checking for updated version"
      # - build-ABCD-HCP:
      #     name: "Build ABCD-HCP variant images"
      #     requires:
      #       - "Checking for updated version"
      # - build-fMRIPrep-LTS:
      #     name: "Build fMRIPrep-LTS variant images"
      #     requires:
      #       - "Checking for updated version"
      - build-lite:
          name: "Build lite variant images"
          requires:
            - "Checking for updated version"
      - check-version:
          name: "Checking for updated version"
      - combine-coverage:
          name: "Combine coverage"
          requires:
            - "Test in Docker"
            # - "Test in Singularity"
            - "Test lite variant in Docker"
            # - "Test lite variant in Singularity"
            # - "Test ABCD-HCP variant in Docker"
            # - "Test ABCD-HCP variant in Singularity"
            # - "Test fMRIPrep-LTS variant in Docker"
      - pytest-docker:
          name: "Test in Docker"
          requires:
            - "Build images"
      # - pytest-docker:
      #     name: "Test ABCD-HCP variant in Docker"
      #     requires:
      #       - "Build ABCD-HCP variant images"
      #     variant: ABCD-HCP
      # - pytest-docker:
      #     name: "Test fMRIPrep-LTS variant in Docker"
      #     requires:
      #       - "Build fMRIPrep-LTS variant images"
      #     variant: fMRIPrep-LTS
      - pytest-docker:
          name: "Test lite variant in Docker"
          requires:
            - "Build lite variant images"
          variant: lite
      # - pytest-singularity:
      #     name: "Test in Singularity"
      #     requires:
      #       - "Build images"
      # - pytest-singularity:
      #     name: "Test ABCD-HCP variant in Singularity"
      #     requires:
      #       - "Build ABCD-HCP variant images"
      #     variant: ABCD-HCP
      # - pytest-singularity:
      #     name: "Test lite variant in Singularity"
      #     requires:
      #       - "Build lite variant images"
      #     variant: lite
