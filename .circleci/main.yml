--- 
version: 2.1

parameters:
  branch:
    type: string
    default: unknown
  owner:
    type: string
    default: unknown
  run_tests:
    type: boolean
    default: false

commands:
  push-to-docker-hub:
    parameters:
      tag:
        type: string
    steps:
      - run:
          name: "Log in to Docker Hub"
          command: docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PUSH}
      - run:
          name: "Tag image for Docker Hub"
          command: |
            docker pull ${DOCKER_TAG}
            docker tag ${DOCKER_TAG} fcpindi/c-pac:<< parameters.tag >>${VARIANT}
      - run:
          name: "Push to Docker Hub"
          command: "docker push fcpindi/c-pac:<< parameters.tag >>${VARIANT}"
  combine-coverage:
    steps:
      - run:
          name: "Combining and reporting coverage"
          command: |
              coverage combine
              coverage html --ignore-errors
  configure-git-user:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e0:d6:95:7b:bf:44:ff:9c:3f:91:d5:30:57:37:3c:1f"
      - run:
          name: "Configuring git user"
          command: |
            sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 78BD65473CB3BD13
            curl -L https://packagecloud.io/circleci/trusty/gpgkey | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install git -y
            git config --global user.email "CMI_CPAC_Support@childmind.org"
            git config --global user.name "Theodore (machine user) @ CircleCI"
  create-docker-test-container:
    parameters:
      coverage-file:
        default: .coverage.docker
        description: "Filename for coverage file"
        type: string
    steps:
      - run:
          name: "Creating Docker container"
          command: |
            mkdir -p ~/project/test-results
            docker pull ${DOCKER_TAG}
            docker run -v /etc/passwd:/etc/passwd --user=$(id -u):c-pac -dit -P -e COVERAGE_FILE=<< parameters.coverage-file >> -v /home/circleci/project/test-results:/code/test-results -v /home/circleci:/home/circleci -v /home/circleci/project/CPAC/resources/configs/test_configs:/test_configs -v $PWD:/code -v $PWD/dev/circleci_data:$PWD/dev/circleci_data --workdir=/home/circleci/project --entrypoint=/bin/bash --name docker_test ${DOCKER_TAG}
  get-sample-bids-data:
    steps:
      - run:
          name: Getting Sample BIDS Data
          command: git clone https://github.com/bids-standard/bids-examples.git
  get-singularity:
    parameters:
      version:
        description: "Version of Singularity to clone"
        type: string
        default: v3.7.2
    steps:
      - install-singularity-requirements
      - restore_cache:
          keys:
            - singularity-<< parameters.version >>
      - run:
          name: "Cloning Singularity << parameters.version >>"
          command: |
            if [[ ! -d singularity-<< parameters.version >> ]]
            then
              git clone -b << parameters.version >> https://github.com/sylabs/singularity singularity-<< parameters.version >>
            fi
      - save_cache:
          key: singularity-<< parameters.version >>
          paths:
            - singularity-<< parameters.version >>
      - run:
         name: "Setting up Singularity"
         command: |
           cd singularity-<< parameters.version >>
           ./mconfig
           make -C builddir
           sudo make -C builddir install
           cd ..
  install-singularity-requirements:
    steps:
      - run:
          name: "Installing Singularity requirements"
          command: |
           sudo apt-get update && sudo apt-get install flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl1.1 libarchive-dev libgpgme11-dev libseccomp-dev -y
  run-pytest-docker:
    steps:
      - create-docker-test-container:
          coverage-file: .coverage.docker${VARIANT}
      - run:
          name: Running pytest in Docker image
          command: docker exec --user $(id -u) docker_test /bin/bash /code/dev/circleci_data/test_in_image.sh
  set-python-version:
    steps:
      - restore_cache:
          keys:
            - pip-ci-requirements-{{ checksum "dev/circleci_data/requirements.txt" }}-3.8.5
      - run:
          name: "Installing CI dependencies"
          command: |
            pyenv global 3.8.5
            pip install --upgrade pip
            pip install -r dev/circleci_data/requirements.txt
      - save_cache:
          key: pip-ci-requirements-{{ checksum "dev/circleci_data/requirements.txt" }}-3.8.5
          paths: 
            - /opt/circleci/.pyenv/versions/3.8.5
  set-up-variant:
    parameters:
      variant:
        type: string
    steps:
      - run:
          name: "Setting up variant"
          command: |
            if [[ ${CIRCLE_BRANCH} == 'main' ]]
            then
              TAG=latest
            elif [[ ${CIRCLE_BRANCH} == 'develop' ]]
            then
              TAG=nightly
            else
              TAG="${CIRCLE_BRANCH//\//_}"
            fi
            DOCKER_TAG="ghcr.io/${CIRCLE_PROJECT_USERNAME,,}/${CIRCLE_PROJECT_REPONAME,,}:${TAG,,}"
            if [[ -n "<< parameters.variant >>" ]]
            then
              VARIANT="-<< parameters.variant >>"
            fi
            echo "export VARIANT=${VARIANT}" >> $BASH_ENV
            DOCKER_TAG="${DOCKER_TAG}${VARIANT}"
            echo "export DOCKER_TAG=${DOCKER_TAG}" >> $BASH_ENV
  test-singularity-installation:
    steps:
      - run:
          name: Testing Singularity installation
          command: |
            pip install -r dev/circleci_data/requirements.txt
            coverage run -m pytest --junitxml=test-results/junit.xml --continue-on-collection-errors dev/circleci_data/test_install.py

jobs:
  combine-coverage:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - restore_cache:
          key: coverage-docker--{{ .Revision }}
      - restore_cache:
          key: coverage-singularity--{{ .Revision }}
      - restore_cache:
          key: coverage-docker-ABCD-HCP-{{ .Revision }}
      - restore_cache:
          key: coverage-singularity-ABCD-HCP-{{ .Revision }}
      - restore_cache:
          key: coverage-docker-lite-{{ .Revision }}
      - restore_cache:
          key: coverage-singularity-lite-{{ .Revision }}
      - set-python-version
      - combine-coverage
      - store_artifacts:
          path: htmlcov
  push-branch-to-docker-hub:
    parameters:
      variant:
        type: string
        default: ""
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - checkout
      - when:
          condition:
            equal: [ << pipeline.parameters.owner >>, "FCP-INDI" ]
          steps:
            - set-up-variant:
                variant: "<< parameters.variant >>"
            - when:
                condition:
                  equal: [ << pipeline.parameters.branch >>, "develop" ]
                steps:
                  - push-to-docker-hub:
                      tag: nightly
  pytest-docker:
    parameters:
      variant:
        type: string
        default: ""
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - checkout
      - set-up-variant:
          variant: "<< parameters.variant >>"
      - set-python-version
      - get-sample-bids-data
      - run-pytest-docker
      - store_test_results:
          path: test-results
      - save_cache:
          key: coverage-docker-<< parameters.variant >>-{{ .Revision }}
          paths: 
            - .coverage.docker
            - .coverage.docker-<< parameters.variant >>
  pytest-singularity:
    parameters:
      variant:
        type: string
        default: ""
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - checkout
      - set-up-variant:
          variant: "<< parameters.variant >>"
      - set-python-version
      - get-singularity
      - run:
          command: singularity pull cpac-singularity-image${VARIANT}.sif docker://${DOCKER_TAG}
          name: "Pull Singularity image"
          no_output_timeout: 1h
      - test-singularity-installation
      - run:
          command: "SINGULARITYENV_COVERAGE_FILE=.coverage.singularity${VARIANT} singularity exec -B $PWD:/code cpac-singularity-image${VARIANT}.sif /code/dev/circleci_data/test_in_image.sh"
          name: "Running unit tests in Singularity image"
      - store_test_results:
          path: test-results
      - save_cache:
          key: coverage-singularity-<< parameters.variant >>-{{ .Revision }}
          paths: 
            - .coverage.singularity
            - .coverage.singularity-<<parameters.variant >>
workflows:
  version: 2
  test:
    jobs:
      - combine-coverage:
          name: "Combine coverage"
          requires:
            - "Test in Docker"
            - "Test in Singularity"
            - "Test lite variant in Docker"
            - "Test lite variant in Singularity"
            - "Test ABCD-HCP variant in Docker"
            - "Test ABCD-HCP variant in Singularity"
            - "Test fMRIPrep-LTS variant in Docker"
      - push-branch-to-docker-hub:
          filters:
            branches:
              only:
                - develop
          matrix:
            parameters:
              variant:
                - ""
                - lite
                - ABCD-HCP
                - fMRIPrep-LTS
          requires:
            - "Combine coverage"
      - pytest-docker:
          name: "Test in Docker"
      - pytest-docker:
          name: "Test ABCD-HCP variant in Docker"
          variant: ABCD-HCP
      - pytest-docker:
          name: "Test fMRIPrep-LTS variant in Docker"
          variant: fMRIPrep-LTS
      - pytest-docker:
          name: "Test lite variant in Docker"
      - pytest-singularity:
          name: "Test in Singularity"
      - pytest-singularity:
          name: "Test ABCD-HCP variant in Singularity"
          variant: ABCD-HCP
      - pytest-singularity:
          name: "Test lite variant in Singularity"
          variant: lite
