%YAML 1.1
---
# CPAC Pipeline Configuration YAML file
# Version 1.8.0.dev
#
# http://fcp-indi.github.io for more info.
#
# Tip: This file can be edited manually with a text editor for quick modifications.

FROM: default


pipeline_setup: 

  # Name for this pipeline configuration - useful for identification.
  pipeline_name: ndmg

  output_directory: 

    # Output directory format and structure.
    # Options: default, ndmg
    output_tree: ndmg

  log_directory: 

    path: /tmp

  crash_log_directory: 

    # Directory where CPAC should write crash logs.
    path: /tmp

  system_config: 

    # The number of cores to allocate to ANTS-based anatomical registration per participant.
    # - Multiple cores can greatly speed up this preprocessing step.
    # - This number cannot be greater than the number of cores per participant.
    num_ants_threads: 4

# PREPROCESSING
# -------------

anatomical_preproc: 

  registration_workflow: 

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    template_brain_only_for_anat: /usr/share/fsl/5.0/data/standard/MNI152_T1_${anatomical_preproc.registration_workflow.resolution_for_anat}_brain.nii.gz

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    template_skull_for_anat: /usr/share/fsl/5.0/data/standard/MNI152_T1_${anatomical_preproc.registration_workflow.resolution_for_anat}.nii.gz

    registration: 

      # using: ['ANTS', 'FSL']
      # this is a fork point
      #   selecting both ['ANTS', 'FSL'] will run both and fork the pipeline
      using: [FSL]

      FSL-FNIRT: 

        # Configuration file to be used by FSL to set FNIRT parameters.
        # It is not necessary to change this path unless you intend to use custom FNIRT parameters or a non-standard template.
        ref_mask: /usr/share/fsl/5.0/data/standard/MNI152_T1_${anatomical_preproc.registration_workflow.resolution_for_anat}_brain_mask_dil.nii.gz

functional_preproc: 

  run: On

  distortion_correction: 

    # option parameters
    PhaseDiff: 

      # Since the quality of the distortion heavily relies on the skull-stripping step, we provide a choice of method ('AFNI' for AFNI 3dSkullStrip or 'BET' for FSL BET).
      fmap_skullstrip_option: BET

      # Set the fraction value for the skull-stripping of the magnitude file. Depending on the data, a tighter extraction may be necessary in order to prevent noisy voxels from interfering with preparing the field map.
      # The default value is 0.5.
      fmap_skullstrip_frac: 0.5

nuisance_corrections: 

  1-ICA-AROMA: 

    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

  2-nuisance_regression: 

    # Select which nuisance signal corrections to apply
    Regressors: 
      - Bandpass:
          bottom_frequency: 0.01
          top_frequency: 0.1
        CerebrospinalFluid:
          extraction_resolution: 2
          summary: Mean
        PolyOrt:
          degree: 2
        aCompCor:
          extraction_resolution: 2
          summary:
            components: 5
            method: DetrendPC
          tissues:
          - WhiteMatter
          - CerebrospinalFluid

    # Standard Lateral Ventricles Binary Mask
    # used in CSF mask refinement for CSF signal-related regressions
    lateral_ventricles_mask: /usr/share/fsl/5.0/data/atlases/HarvardOxford/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz

    # Whether to run frequency filtering before or after nuisance regression.
    # Options: 'After' or 'Before'
    bandpass_filtering_order: After

functional_registration: 

  2-func_registration_to_template: 

    output_resolution: 

      # The resolution (in mm) to which the preprocessed, registered functional timeseries outputs are written into.
      # NOTE:
      #   selecting a 1 mm or 2 mm resolution might substantially increase your RAM needs- these resolutions should be selected with caution.
      #   for most cases, 3 mm or 4 mm resolutions are suggested.
      # NOTE:
      #   this also includes the single-volume 3D preprocessed functional data,
      #   such as the mean functional (mean EPI) in template space
      func_preproc_outputs: 2mm

      # The resolution (in mm) to which the registered derivative outputs are written into.
      # NOTE:
      #   this is for the single-volume functional-space outputs (i.e. derivatives)
      #   thus, a higher resolution may not result in a large increase in RAM needs as above
      func_derivative_outputs: 2mm

    target_template: 

      # option parameters
      T1_template: 

        # Standard Skull Stripped Template. Used as a reference image for functional registration.
        # This can be different than the template used as the reference/fixed for T1-to-template registration.
        template_brain: /usr/share/fsl/5.0/data/standard/MNI152_T1_${functional_registration.2-func_registration_to_template.output_resolution.func_preproc_outputs}_brain.nii.gz

        # Standard Anatomical Brain Image with Skull.
        # This can be different than the template used as the reference/fixed for T1-to-template registration.
        template_skull: /usr/share/fsl/5.0/data/standard/MNI152_T1_${functional_registration.2-func_registration_to_template.output_resolution.func_preproc_outputs}.nii.gz

# OUTPUTS AND DERIVATIVES
# -----------------------
post_processing: 

  spatial_smoothing: 

    # Smooth the derivative outputs.
    run: On

    # Tool to use for smoothing.
    # 'FSL' for FSL MultiImageMaths for FWHM provided
    # 'AFNI' for AFNI 3dBlurToFWHM for FWHM provided
    smoothing_method: FSL

    # Choose whether to smooth outputs before or after z-scoring.
    # options: 'Before' or 'After'
    smoothing_order: Before

  z-scoring: 

    # z-score standardize the derivatives. This may be needed for group-level analysis.
    run: On

timeseries_extraction: 

  run: On

  # Functional time-series and ROI realignment method: ['ROI_to_func'] or ['func_to_ROI']
  # 'ROI_to_func' will realign the atlas/ROI to functional space (fast)
  # 'func_to_ROI' will realign the functional time series to the atlas/ROI space
  #
  #     NOTE: in rare cases, realigning the ROI to the functional space may
  #           result in small misalignments for very small ROIs - please double
  #           check your data if you see issues
  realignment: ROI_to_func

seed_based_correlation_analysis: 

  # SCA - Seed-Based Correlation Analysis
  # For each extracted ROI Average time series, CPAC will generate a whole-brain correlation map.
  # It should be noted that for a given seed/ROI, SCA maps for ROI Average time series will be the same.
  run: Off

amplitude_low_frequency_fluctuation: 

  # ALFF & f/ALFF
  # Calculate Amplitude of Low Frequency Fluctuations (ALFF) and and fractional ALFF (f/ALFF) for all voxels.
  run: Off

regional_homogeneity: 

  # ReHo
  # Calculate Regional Homogeneity (ReHo) for all voxels.
  run: Off

voxel_mirrored_homotopic_connectivity: 

  # VMHC
  # Calculate Voxel-mirrored Homotopic Connectivity (VMHC) for all voxels.
  run: Off

  symmetric_registration: 

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    template_symmetric_brain_only: $FSLDIR/data/standard/MNI152_T1_${anatomical_preproc.registration_workflow.resolution_for_anat}_brain_symmetric.nii.gz

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    template_symmetric_skull: $FSLDIR/data/standard/MNI152_T1_${anatomical_preproc.registration_workflow.resolution_for_anat}_symmetric.nii.gz

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    dilated_symmetric_brain_mask: $FSLDIR/data/standard/MNI152_T1_${anatomical_preproc.registration_workflow.resolution_for_anat}_brain_mask_symmetric_dil.nii.gz

network_centrality: 

  # Calculate Degree, Eigenvector Centrality, or Functional Connectivity Density.
  # this is a fork point
  #   run: [On, Off] - this will run both and fork the pipeline
  run: [Off]

  degree_centrality: 

    # Enable/Disable degree centrality by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [True, True]

    # Select the type of threshold used when creating the degree centrality adjacency matrix.
    # options:
    #   'Significance threshold', 'Sparsity threshold', 'Correlation threshold'
    correlation_threshold_option: [Sparsity threshold]

  eigenvector_centrality: 

    # Enable/Disable eigenvector centrality by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [False, True]

    # Select the type of threshold used when creating the eigenvector centrality adjacency matrix.
    # options:
    #   'Significance threshold', 'Sparsity threshold', 'Correlation threshold'
    correlation_threshold_option: [Sparsity threshold]

  local_functional_connectivity_density: 

    # Enable/Disable lFCD by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [True, True]

    # Select the type of threshold used when creating the lFCD adjacency matrix.
    # options:
    #   'Significance threshold', 'Correlation threshold'
    correlation_threshold_option: [Correlation threshold]

# PACKAGE INTEGRATIONS
# --------------------
PyPEER: 

  # Template-space eye mask
  eye_mask_path: $FSLDIR/data/standard/MNI152_T1_${functional_registration.2-func_registration_to_template.output_resolution.func_preproc_outputs}_eye_mask.nii.gz