%YAML 1.1
---
# CPAC Pipeline Configuration YAML file
# Version 1.8.1
#
# http://fcp-indi.github.io for more info.
#
# Tip: This file can be edited manually with a text editor for quick modifications.

FROM: default


pipeline_setup: 

  # Name for this pipeline configuration - useful for identification.
  pipeline_name: cpac_abcd-options

  output_directory: 

    # Directory where C-PAC should write out processed data, logs, and crash reports.
    # - If running in a container (Singularity/Docker), you can simply set this to an arbitrary
    #   name like '/output', and then map (-B/-v) your desired output directory to that label.
    # - If running outside a container, this should be a full path to a directory.
    path: /outputs/output

    # Generate quality control pages containing preprocessing and derivative outputs.
    generate_quality_control_images: Off

  working_directory: 

    # Directory where C-PAC should store temporary and intermediate files.
    # - This directory must be saved if you wish to re-run your pipeline from where you left off (if not completed).
    # - NOTE: As it stores all intermediate files, this directory can grow to become very
    #   large, especially for data with a large amount of TRs.
    # - If running in a container (Singularity/Docker), you can simply set this to an arbitrary
    #   name like '/work', and then map (-B/-v) your desired output directory to that label.
    # - If running outside a container, this should be a full path to a directory.
    # - This can be written to '/tmp' if you do not intend to save your working directory.
    path: /outputs/working

  log_directory: 

    path: /outputs/log

  system_config: 

    # The maximum amount of memory each participant's workflow can allocate.
    # Use this to place an upper bound of memory usage.
    # - Warning: 'Memory Per Participant' multiplied by 'Number of Participants to Run Simultaneously'
    #   must not be more than the total amount of RAM.
    # - Conversely, using too little RAM can impede the speed of a pipeline run.
    # - It is recommended that you set this to a value that when multiplied by
    #   'Number of Participants to Run Simultaneously' is as much RAM you can safely allocate.
    maximum_memory_per_participant: 10.0

anatomical_preproc: 

  # Non-local means filtering via ANTs DenoiseImage
  non_local_means_filtering:

    # this is a fork option
    run: [On]

    # options: 'Gaussian' or 'Rician'
    noise_model: 'Rician'

  # N4 bias field correction via ANTs
  n4_bias_field_correction:

    # this is a fork option
    run: [On]

    # An integer to resample the input image to save computation time. Shrink factors <= 4 are commonly used.
    shrink_factor: 4

  acpc_alignment: 

    run: On

    # Run ACPC alignment before non-local means filtering or N4 bias
    # correction
    run_before_preproc: False

    # ACPC aligned template
    T1w_ACPC_template: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_1mm.nii.gz

  brain_extraction: 

    # using: ['3dSkullStrip', 'BET', 'UNet', 'niworkflows-ants', 'FreeSurfer-ABCD']
    # this is a fork option
    using: [FreeSurfer-ABCD]

registration_workflows: 

  anatomical_registration: 

    # The resolution to which anatomical images should be transformed during registration.
    # This is the resolution at which processed anatomical files will be output.
    resolution_for_anat: 1mm

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    T1w_brain_template: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_${resolution_for_anat}_brain.nii.gz

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    T1w_brain_template_mask: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz

    # Register skull-on anatomical image to a template.
    reg_with_skull: True

    registration: 

      # option parameters
      ANTs: 

        # ANTs parameters for T1-template-based registration
        T1_registration: 
          - verbose: 1
          - float: 0
          - collapse-output-transforms: 0
          - dimensionality: 3
          - winsorize-image-intensities:
              lowerQuantile: 0.005
              upperQuantile: 0.995
          - initial-moving-transform:
              initializationFeature: 1
          - transforms:
            - Rigid:
                convergence:
                  convergenceThreshold: 1e-6
                  convergenceWindowSize: 10
                  iteration: 1000x500x250x100
                gradientStep: 0.1
                masks: Off
                metric:
                  metricWeight: 1
                  numberOfBins: 32
                  samplingPercentage: 0.25
                  samplingStrategy: Regular
                  type: MI
                shrink-factors: 8x4x2x1
                smoothing-sigmas: 3.0x2.0x1.0x0.0
                use-histogram-matching: Off
            - Affine:
                convergence:
                  convergenceThreshold: 1e-6
                  convergenceWindowSize: 10
                  iteration: 1000x500x250x100
                gradientStep: 0.1
                masks: Off
                metric:
                  metricWeight: 1
                  numberOfBins: 32
                  samplingPercentage: 0.25
                  samplingStrategy: Regular
                  type: MI
                shrink-factors: 8x4x2x1
                smoothing-sigmas: 3.0x2.0x1.0x0.0
                use-histogram-matching: Off
            - SyN:
                convergence:
                  convergenceThreshold: 1e-6
                  convergenceWindowSize: 10
                  iteration: 100x70x50x20
                gradientStep: 0.1
                masks: On
                metric:
                  metricWeight: 1
                  radius: 4
                  type: CC
                shrink-factors: 8x4x2x1
                smoothing-sigmas: 3.0x2.0x1.0x0.0
                totalFieldVarianceInVoxelSpace: 0.0
                updateFieldVarianceInVoxelSpace: 3.0
                use-histogram-matching: Off

        # Interpolation method for writing out transformed anatomical images.
        # Possible values: Linear, BSpline, LanczosWindowedSinc
        interpolation: Linear

      FSL-FNIRT:

        # Configuration file to be used by FSL to set FNIRT parameters.
        # It is not necessary to change this path unless you intend to use custom FNIRT parameters or a non-standard template.
        fnirt_config: T1_2_MNI152_2mm

        # Reference mask with 2mm resolution to be used during FNIRT-based brain extraction in ABCD-options pipeline.
        ref_mask_res-2: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_2mm_brain_mask_dil.nii.gz

        # Template with 2mm resolution to be used during FNIRT-based brain extraction in ABCD-options pipeline.
        T1w_template_res-2: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_2mm.nii.gz

    overwrite_transform:

      run: On

      # Choose the tool to overwrite transform, currently only support 'FSL' to overwrite 'ANTs' transforms in ABCD-options pipeline.
      # using: 'FSL'
      using: FSL

  functional_registration: 

    coregistration: 

      # reference: 'brain' or 'restore-brain'
      # In ABCD-options pipeline, 'restore-brain' is used as coregistration reference
      reference: restore-brain

      # interpolation for coregistration
      interpolation: spline

      # degree of freedom for coregistration
      dof: 12

      func_input_prep: 

        # Choose whether to use functional brain or skull as the input to functional-to-anatomical registration
        reg_with_skull: On

        # Choose whether to use the mean of the functional/EPI as the input to functional-to-anatomical registration or one of the volumes from the functional 4D timeseries that you choose.
        # input: ['Mean Functional', 'Selected_Functional_Volume']
        input: [Selected_Functional_Volume]

      boundary_based_registration: 

        # this is a fork point
        #   run: [On, Off] - this will run both and fork the pipeline
        run: [Off]

    func_registration_to_template: 

      output_resolution: 

        # The resolution (in mm) to which the preprocessed, registered functional timeseries outputs are written into.
        # NOTE:
        #   selecting a 1 mm or 2 mm resolution might substantially increase your RAM needs- these resolutions should be selected with caution.
        #   for most cases, 3 mm or 4 mm resolutions are suggested.
        # NOTE:
        #   this also includes the single-volume 3D preprocessed functional data,
        #   such as the mean functional (mean EPI) in template space
        func_preproc_outputs: 2mm

        # The resolution (in mm) to which the registered derivative outputs are written into.
        # NOTE:
        #   this is for the single-volume functional-space outputs (i.e. derivatives)
        #   thus, a higher resolution may not result in a large increase in RAM needs as above
        func_derivative_outputs: 2mm

      target_template: 

        # option parameters
        T1_template:

          # Standard Skull Stripped Template. Used as a reference image for functional registration.
          # This can be different than the template used as the reference/fixed for T1-to-template registration.
          T1w_brain_template_funcreg: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_${func_resolution}_brain.nii.gz

          # Standard Anatomical Brain Image with Skull.
          # This can be different than the template used as the reference/fixed for T1-to-template registration.
          T1w_template_funcreg: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_${func_resolution}.nii.gz

          # Template to be used during registration.
          # It is not necessary to change this path unless you intend to use a non-standard template.
          T1w_brain_template_mask_funcreg: /opt/dcan-tools/pipeline/global/templates/MNI152_T1_${func_resolution}_brain_mask.nii.gz

      ANTs_pipelines: 

        # Interpolation method for writing out transformed functional images.
        # Possible values: Linear, BSpline, LanczosWindowedSinc
        interpolation: Linear

      apply_transform:

        # options: 'default', 'abcd'
        # 'default': apply func-to-anat and anat-to-template transforms on motion corrected functional image.
        # 'abcd': apply motion correction, func-to-anat and anat-to-template transforms on each of raw functional volume same as ABCD-HCP pipeline.
        using: 'abcd'

functional_preproc: 

  slice_timing_correction: 

    # Interpolate voxel time courses so they are sampled at the same time points.
    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

  motion_estimates_and_correction: 

    motion_estimates: 

      # calculate motion statistics BEFORE slice-timing correction
      calculate_motion_first: On

      # calculate motion statistics AFTER motion correction
      calculate_motion_after: Off

    motion_correction: 

      # using: ['3dvolreg', 'mcflirt']
      # this is a fork point
      using: [mcflirt]

      # Choose motion correction reference. Options: mean, median, selected_volume
      motion_correction_reference: ['selected_volume']

      # Choose motion correction reference volume
      motion_correction_reference_volume: 0

  func_masking: 

    # using: ['AFNI', 'FSL', 'FSL_AFNI', 'Anatomical_Refined', 'Anatomical_Based', 'Anatomical_Resampled']
    # this is a fork point
    using: [Anatomical_Resampled]

    # Apply functional mask in native space
    apply_func_mask_in_native_space: Off

  generate_func_mean:

    # Generate mean functional image
    run: Off

  normalize_func:

    # Normalize functional image
    run: Off


nuisance_corrections: 

  2-nuisance_regression: 

    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

    # switch to Off if nuisance regression is off and you don't want to write out the regressors
    create_regressors: Off

    # Select which nuisance signal corrections to apply
    Regressors: 
      - Bandpass:
          bottom_frequency: 0.01
          method: default
          top_frequency: 0.1
        Motion:
          include_delayed: On
          include_delayed_squared: On
          include_squared: On
        Name: default

timeseries_extraction: 

  run: Off

seed_based_correlation_analysis: 

  # SCA - Seed-Based Correlation Analysis
  # For each extracted ROI Average time series, CPAC will generate a whole-brain correlation map.
  # It should be noted that for a given seed/ROI, SCA maps for ROI Average time series will be the same.
  run: Off

  # Enter paths to region-of-interest (ROI) NIFTI files (.nii or .nii.gz) to be used for seed-based correlation analysis, and then select which types of analyses to run.
  # Denote which analyses to run for each ROI path by listing the names below. For example, if you wish to run Avg and MultReg, you would enter: '/path/to/ROI.nii.gz': Avg, MultReg
  # available analyses:
  #   /path/to/atlas.nii.gz: Avg, DualReg, MultReg
  sca_roi_paths: 

    /cpac_templates/CC400.nii.gz: Avg

amplitude_low_frequency_fluctuation: 

  # ALFF & f/ALFF
  # Calculate Amplitude of Low Frequency Fluctuations (ALFF) and and fractional ALFF (f/ALFF) for all voxels.
  run: Off

regional_homogeneity: 

  # ReHo
  # Calculate Regional Homogeneity (ReHo) for all voxels.
  run: Off

voxel_mirrored_homotopic_connectivity: 

  # VMHC
  # Calculate Voxel-mirrored Homotopic Connectivity (VMHC) for all voxels.
  run: Off

network_centrality: 

  # Calculate Degree, Eigenvector Centrality, or Functional Connectivity Density.
  run: Off