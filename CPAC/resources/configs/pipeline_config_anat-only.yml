%YAML 1.1
---
# CPAC Pipeline Configuration YAML file
# Version 1.8.0.dev
#
# http://fcp-indi.github.io for more info.
#
# Tip: This file can be edited manually with a text editor for quick modifications.

FROM: default


pipeline_setup: 

  # Name for this pipeline configuration - useful for identification.
  pipeline_name: cpac_anat

  output_directory: 

    # Directory where C-PAC should write out processed data, logs, and crash reports.
    # - If running in a container (Singularity/Docker), you can simply set this to an arbitrary
    #   name like '/output', and then map (-B/-v) your desired output directory to that label.
    # - If running outside a container, this should be a full path to a directory.
    path: ./cpac_runs/anat/output

    # Include extra versions and intermediate steps of functional preprocessing in the output directory.
    write_func_outputs: [Off]

    # Include extra outputs in the output directory that may be of interest when more information is needed.
    write_debugging_outputs: [Off]

    # Generate quality control pages containing preprocessing and derivative outputs.
    generate_quality_control_images: [On]

  working_directory: 

    # Directory where C-PAC should store temporary and intermediate files.
    # - This directory must be saved if you wish to re-run your pipeline from where you left off (if not completed).
    # - NOTE: As it stores all intermediate files, this directory can grow to become very
    #   large, especially for data with a large amount of TRs.
    # - If running in a container (Singularity/Docker), you can simply set this to an arbitrary
    #   name like '/work', and then map (-B/-v) your desired output directory to that label.
    # - If running outside a container, this should be a full path to a directory.
    # - This can be written to '/tmp' if you do not intend to save your working directory.
    path: ./cpac_runs/anat/working

  log_directory: 

    path: ./cpac_runs/anat/log

  crash_log_directory: 

    # Directory where CPAC should write crash logs.
    path: ./cpac_runs/anat/crash

  system_config: 

    # Select Off if you intend to run CPAC on a single machine.
    # If set to On, CPAC will attempt to submit jobs through the job scheduler / resource manager selected below.
    on_grid: 

      SGE: 

        # SGE Parallel Environment to use when running CPAC.
        # Only applies when you are running on a grid or compute cluster using SGE.
        parallel_environment: cpac

    # The maximum amount of memory each participant's workflow can allocate.
    # Use this to place an upper bound of memory usage.
    # - Warning: 'Memory Per Participant' multiplied by 'Number of Participants to Run Simultaneously'
    #   must not be more than the total amount of RAM.
    # - Conversely, using too little RAM can impede the speed of a pipeline run.
    # - It is recommended that you set this to a value that when multiplied by
    #   'Number of Participants to Run Simultaneously' is as much RAM you can safely allocate.
    maximum_memory_per_participant: 3

  Amazon-AWS: 

    # Enable server-side 256-AES encryption on data to the S3 bucket
    s3_encryption: [On]

# Full path to the FSL version to be used by CPAC.
# If you have specified an FSL path in your .bashrc file, this path will be set automatically.
FSLDIR: FSLDIR

# PREPROCESSING
# -------------

anatomical_preproc: 

  # N4 bias field correction via ANTs
  n4_bias_field_correction: On

  brain_extraction: 

    # Disables skull-stripping on the anatomical inputs if they are already skull-stripped outside of C-PAC.
    # Set this to True if your input images are already skull-stripped.
    already_skullstripped: [Off]

    extraction: 

      # using: ['3dSkullStrip', 'BET', 'UNet', 'niworkflows-ants']
      # this is a fork option
      using: [AFNI]

  segmentation_workflow: 

    1-segmentation: 

      Template_Based: 

        # These masks should be in the same space of your registration template, e.g. if
        # you choose 'EPI Template' , below tissue masks should also be EPI template tissue masks.
        #
        # Options: ['EPI Template', 'T1 Template']
        template_for_segmentation: [None]

    3-custom_thresholding: 

      # Use threshold to further refine the resulting segmentation tissue masks.
      run: [FSL-FAST Thresholding]

  registration_workflow: 

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    template_brain_only_for_anat: $FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    template_skull_for_anat: $FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz

    # Register skull-on anatomical image to a template.
    reg_with_skull: [Off]

    registration: 

      # option parameters
      ANTs: 

        # If a lesion mask is available for a T1w image, use it to improve the ANTs' registration
        # ANTS registration only.
        use_lesion_mask: [Off]

      FSL-FNIRT: 

        # Configuration file to be used by FSL to set FNIRT parameters.
        # It is not necessary to change this path unless you intend to use custom FNIRT parameters or a non-standard template.
        ref_mask: $FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz

functional_preproc: 

  run: [Off]

  distortion_correction: 

    # using: ['PhaseDiff', 'Blip']
    #   PhaseDiff - Perform field map correction using a single phase difference image, a subtraction of the two phase images from each echo. Default scanner for this method is SIEMENS.
    #   Blip - Uses AFNI 3dQWarp to calculate the distortion unwarp for EPI field maps of opposite/same phase encoding direction.
    #   NOTE:
    #     this is NOT a fork point - instead, the technique used will depend on what type of distortion correction field data accompanies the dataset
    #     for example, phase-difference field maps will lead to phase-difference distortion correction, and phase-encoding direction field maps will lead to blip-up/blip-down
    using: [None]

    # option parameters
    PhaseDiff: 

      # Since the quality of the distortion heavily relies on the skull-stripping step, we provide a choice of method ('AFNI' for AFNI 3dSkullStrip or 'BET' for FSL BET).
      fmap_skullstrip_option: [BET]

      # Set the fraction value for the skull-stripping of the magnitude file. Depending on the data, a tighter extraction may be necessary in order to prevent noisy voxels from interfering with preparing the field map.
      # The default value is 0.5.
      fmap_skullstrip_frac: [0.5]

nuisance_corrections: 

  1-ICA-AROMA: 

    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

  2-nuisance_regression: 

    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

    # Whether to run frequency filtering before or after nuisance regression.
    # Options: 'After' or 'Before'
    bandpass_filtering_order: [After]

functional_registration: 

  1-coregistration: 

    boundary_based_registration: 

      # this is a fork point
      #   run: [On, Off] - this will run both and fork the pipeline
      run: [Off]

  2-func_registration_to_template: 

    target_template: 

      # option parameters
      T1_template: 

        # Standard Skull Stripped Template. Used as a reference image for functional registration.
        # This can be different than the template used as the reference/fixed for T1-to-template registration.
        template_brain: $FSLDIR/data/standard/MNI152_T1_${resolution_for_func_preproc}_brain.nii.gz

        # Standard Anatomical Brain Image with Skull.
        # This can be different than the template used as the reference/fixed for T1-to-template registration.
        template_skull: $FSLDIR/data/standard/MNI152_T1_${resolution_for_func_preproc}.nii.gz

    FNIRT_pipelines: 

      # Identity matrix used during FSL-based resampling of functional-space data throughout the pipeline.
      # It is not necessary to change this path unless you intend to use a different template.
      identity_matrix: $FSLDIR/etc/flirtsch/ident.mat

# OUTPUTS AND DERIVATIVES
# -----------------------
post_processing: 

  spatial_smoothing: 

    # Smooth the derivative outputs.
    run: [On]

    # Tool to use for smoothing.
    # 'FSL' for FSL MultiImageMaths for FWHM provided
    # 'AFNI' for AFNI 3dBlurToFWHM for FWHM provided
    smoothing_method: [FSL]

    # Choose whether to smooth outputs before or after z-scoring.
    # options: 'Before' or 'After'
    smoothing_order: [Before]

  z-scoring: 

    # z-score standardize the derivatives. This may be needed for group-level analysis.
    run: [On]

timeseries_extraction: 

  run: [Off]

  # Functional time-series and ROI realignment method: ['ROI_to_func'] or ['func_to_ROI']
  # 'ROI_to_func' will realign the atlas/ROI to functional space (fast)
  # 'func_to_ROI' will realign the functional time series to the atlas/ROI space
  #
  #     NOTE: in rare cases, realigning the ROI to the functional space may
  #           result in small misalignments for very small ROIs - please double
  #           check your data if you see issues
  realignment: [ROI_to_func]

  # By default, extracted time series are written as both a text file and a 1D file. Additional output formats are as a .csv spreadsheet or a Numpy array.
  roi_tse_outputs: [True, True]

seed_based_correlation_analysis: 

  # SCA - Seed-Based Correlation Analysis
  # For each extracted ROI Average time series, CPAC will generate a whole-brain correlation map.
  # It should be noted that for a given seed/ROI, SCA maps for ROI Average time series will be the same.
  run: [Off]

amplitude_low_frequency_fluctuation: 

  # ALFF & f/ALFF
  # Calculate Amplitude of Low Frequency Fluctuations (ALFF) and and fractional ALFF (f/ALFF) for all voxels.
  run: [Off]

regional_homogeneity: 

  # ReHo
  # Calculate Regional Homogeneity (ReHo) for all voxels.
  run: [Off]

voxel_mirrored_homotopic_connectivity: 

  # VMHC
  # Calculate Voxel-mirrored Homotopic Connectivity (VMHC) for all voxels.
  run: [Off]

  symmetric_registration: 

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    template_symmetric_brain_only: $FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_brain_symmetric.nii.gz

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    template_symmetric_skull: $FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_symmetric.nii.gz

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    dilated_symmetric_brain_mask: $FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_symmetric_dil.nii.gz

network_centrality: 

  # Calculate Degree, Eigenvector Centrality, or Functional Connectivity Density.
  # this is a fork point
  #   run: [On, Off] - this will run both and fork the pipeline
  run: [Off]

  # Maximum amount of RAM (in GB) to be used when calculating Degree Centrality.
  # Calculating Eigenvector Centrality will require additional memory based on the size of the mask or number of ROI nodes.
  memory_allocation: 3.0

  # Full path to a NIFTI file describing the mask. Centrality will be calculated for all voxels within the mask.
  template_specification_file: s3://fcp-indi/resources/cpac/resources/mask-thr50-3mm.nii.gz

  degree_centrality: 

    # Enable/Disable degree centrality by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [True, True]

    # Select the type of threshold used when creating the degree centrality adjacency matrix.
    # options:
    #   'Significance threshold', 'Sparsity threshold', 'Correlation threshold'
    correlation_threshold_option: [Sparsity threshold]

  eigenvector_centrality: 

    # Enable/Disable eigenvector centrality by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [True, True]

    # Select the type of threshold used when creating the eigenvector centrality adjacency matrix.
    # options:
    #   'Significance threshold', 'Sparsity threshold', 'Correlation threshold'
    correlation_threshold_option: [Sparsity threshold]

  local_functional_connectivity_density: 

    # Enable/Disable lFCD by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [True, True]

    # Select the type of threshold used when creating the lFCD adjacency matrix.
    # options:
    #   'Significance threshold', 'Correlation threshold'
    correlation_threshold_option: [Significance threshold]

    # Based on the Threshold Type selected above, enter a Threshold Value.
    # P-value for Significance Threshold
    # Sparsity value for Sparsity Threshold
    # Pearson's r value for Correlation Threshold
    correlation_threshold: 0.001

# PACKAGE INTEGRATIONS
# --------------------
PyPEER: 

  # Template-space eye mask
  eye_mask_path: $FSLDIR/data/standard/MNI152_T1_${resolution_for_func_preproc}_eye_mask.nii.gz