%YAML 1.1
---
# CPAC Pipeline Configuration YAML file
# Version 1.8.3
#
# http://fcp-indi.github.io for more info.
#
# Tip: This file can be edited manually with a text editor for quick modifications.

FROM: default


pipeline_setup: 

  # Name for this pipeline configuration - useful for identification.
  pipeline_name: cpac_default_monkey_skullstrip

  output_directory: 

    # Directory where C-PAC should write out processed data, logs, and crash reports.
    # - If running in a container (Singularity/Docker), you can simply set this to an arbitrary
    #   name like '/output', and then map (-B/-v) your desired output directory to that label.
    # - If running outside a container, this should be a full path to a directory.
    path: ./cpac_runs/default/output

  working_directory: 

    # Directory where C-PAC should store temporary and intermediate files.
    # - This directory must be saved if you wish to re-run your pipeline from where you left off (if not completed).
    # - NOTE: As it stores all intermediate files, this directory can grow to become very
    #   large, especially for data with a large amount of TRs.
    # - If running in a container (Singularity/Docker), you can simply set this to an arbitrary
    #   name like '/work', and then map (-B/-v) your desired output directory to that label.
    # - If running outside a container, this should be a full path to a directory.
    # - This can be written to '/tmp' if you do not intend to save your working directory.
    path: ./cpac_runs/default/working

    # Deletes the contents of the Working Directory after running.
    # This saves disk space, but any additional preprocessing or analysis will have to be completely re-run.
    remove_working_dir: Off

  log_directory: 

    path: ./cpac_runs/default/log

  system_config: 

    # Select Off if you intend to run CPAC on a single machine.
    # If set to On, CPAC will attempt to submit jobs through the job scheduler / resource manager selected below.
    on_grid: 

      SGE: 

        # SGE Parallel Environment to use when running CPAC.
        # Only applies when you are running on a grid or compute cluster using SGE.
        parallel_environment: cpac

    # The maximum amount of memory each participant's workflow can allocate.
    # Use this to place an upper bound of memory usage.
    # - Warning: 'Memory Per Participant' multiplied by 'Number of Participants to Run Simultaneously'
    #   must not be more than the total amount of RAM.
    # - Conversely, using too little RAM can impede the speed of a pipeline run.
    # - It is recommended that you set this to a value that when multiplied by
    #   'Number of Participants to Run Simultaneously' is as much RAM you can safely allocate.
    maximum_memory_per_participant: 9

    # The number of participant workflows to run at the same time.
    # - The maximum number of cores your run can possibly employ will be this setting
    #   multiplied by the number of cores dedicated to each participant (the 'Maximum Number of Cores Per Participant' setting).
    num_participants_at_once: 3

    # Full path to the FSL version to be used by CPAC.
    # If you have specified an FSL path in your .bashrc file, this path will be set automatically.
    FSLDIR: FSLDIR

  Amazon-AWS: 

    # Enable server-side 256-AES encryption on data to the S3 bucket
    s3_encryption: On

anatomical_preproc: 

  run_t2: On

  # Non-local means filtering via ANTs DenoiseImage
  non_local_means_filtering: False

  # N4 bias field correction via ANTs
  n4_bias_field_correction: False

  # Bias field correction based on square root of T1w * T2w
  t1t2_bias_field_correction: 

    run: On

  acpc_alignment: 

    run: On

    # ACPC size of brain in z-dimension in mm.
    # Default: 150mm for human data.
    brain_size: 150

    # Choose a tool to crop the FOV in ACPC alignment. 
    # Using FSL's robustfov or flirt command. 
    # Default: robustfov for human data, flirt for monkey data. 
    FOV_crop: flirt

    # ACPC Target
    # options: 'brain' or 'whole-head'
    #   note: 'brain' requires T1w_brain_ACPC_template below to be populated
    acpc_target: 'brain'

    # ACPC aligned template
    T1w_ACPC_template: /cpac_templates/MacaqueYerkes19_T1w_0.5mm.nii.gz
    T1w_brain_ACPC_template: /cpac_templates/MacaqueYerkes19_T1w_0.5mm_brain.nii.gz
    T2w_ACPC_template: /cpac_templates/MacaqueYerkes19_T2w_0.5mm.nii.gz
    T2w_brain_ACPC_template: /cpac_templates/MacaqueYerkes19_T2w_0.5mm_brain.nii.gz

  brain_extraction: 

    # using: ['3dSkullStrip', 'BET', 'UNet', 'niworkflows-ants']
    # this is a fork option
    using: [3dSkullStrip]  #Note, if no mask provide, use UNet. 

    # option parameters
    AFNI-3dSkullStrip: 

      # Set it as True if processing monkey data with AFNI
      monkey: On

    FSL-BET: 

      # Set the threshold value controling the brain vs non-brain voxels, default is 0.5
      frac: 0.3

segmentation: 

  # Automatically segment anatomical images into white matter, gray matter,
  # and CSF based on prior probability maps.
  run: On

  tissue_segmentation: 

    using: ['ANTs_Prior_Based']

    # option parameters
    FSL-FAST: 

      use_priors: 

        # Use template-space tissue priors to refine the binary tissue masks generated by segmentation.
        run: Off

        # Full path to a directory containing binarized prior probability maps.
        # These maps are included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
        # It is not necessary to change this path unless you intend to use non-standard priors.
        priors_path: $FSLDIR/data/standard/tissuepriors/2mm

    Template_Based: 

      # These masks should be in the same space of your registration template, e.g. if
      # you choose 'EPI Template' , below tissue masks should also be EPI template tissue masks.
      #
      # Options: ['T1_Template', 'EPI_Template']
      template_for_segmentation: []

      # These masks are included as part of the 'Image Resource Files' package available
      # on the Install page of the User Guide.

      # Full path to a binarized White Matter mask.
      WHITE: $FSLDIR/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz

      # Full path to a binarized Gray Matter mask.
      GRAY: $FSLDIR/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz

      # Full path to a binarized CSF mask.
      CSF: $FSLDIR/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz

    ANTs_Prior_Based: 

      # Generate white matter, gray matter, CSF masks based on antsJointLabelFusion
      # ANTs Prior-based Segmentation workflow that has shown optimal results for non-human primate data.

      # The atlas image assumed to be used in ANTs Prior-based Segmentation.
      template_brain_list: 
        - s3://fcp-indi/resources/cpac/resources/MacaqueYerkes19_T1w_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_11mo_atlas_oACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_21mo_atlas_nACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_21mo_atlas_oACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_36mo_atlas_nACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_36mo_atlas_oACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_4mo_atlas_nACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_4mo_atlas_oACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_6mo_atlas_nACQ_194x252x160space_0.5mm/T1w_brain.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_6mo_atlas_oACQ_194x252x160space_0.5mm/T1w_brain.nii.gz

      # The atlas segmentation images.
      # For performing ANTs Prior-based segmentation method
      # the number of specified segmentations should be identical to the number of atlas brain image sets.
      # eg.
      # ANTs_prior_seg_template_brain_list :
      #   - atlas1.nii.gz
      #   - atlas2.nii.gz
      # ANTs_prior_seg_template_segmentation_list:
      #   - segmentation1.nii.gz
      #   - segmentation1.nii.gz
      template_segmentation_list: 
        - s3://fcp-indi/resources/cpac/resources/MacaqueYerkes19_T1w_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_11mo_atlas_oACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_21mo_atlas_nACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_21mo_atlas_oACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_36mo_atlas_nACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_36mo_atlas_oACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_4mo_atlas_nACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_4mo_atlas_oACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_6mo_atlas_nACQ_194x252x160space_0.5mm/Segmentation.nii.gz
        - s3://fcp-indi/resources/cpac/resources/J_Macaque_6mo_atlas_oACQ_194x252x160space_0.5mm/Segmentation.nii.gz

registration_workflows: 

  anatomical_registration: 

    # The resolution to which anatomical images should be transformed during registration.
    # This is the resolution at which processed anatomical files will be output.
    resolution_for_anat: 0.5mm

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    T1w_brain_template: /cpac_templates/MacaqueYerkes19_T1w_0.5mm_brain.nii.gz

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    T1w_template: /cpac_templates/MacaqueYerkes19_T1w_0.5mm.nii.gz
    
    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    T1w_brain_template_mask: /cpac_templates/MacaqueYerkes19_T1w_0.5mm_brain_mask.nii.gz

    # Register skull-on anatomical image to a template.
    reg_with_skull: Off

    registration: 

      # using: ['ANTS', 'FSL', 'FSL-linear']
      # this is a fork point
      #   selecting both ['ANTS', 'FSL'] will run both and fork the pipeline
      using: ['FSL']

      FSL-FNIRT: 

        # The resolution to which anatomical images should be transformed during registration.
        # This is the resolution at which processed anatomical files will be output. 
        # specifically for monkey pipeline
        ref_resolution: 1mm

        # Reference mask for FSL registration.
        ref_mask: /cpac_templates/MacaqueYerkes19_T1w_1.0mm_brain_mask.nii.gz
        
        # Template to be used during registration.
        # It is not necessary to change this path unless you intend to use a non-standard template.
        FNIRT_T1w_brain_template: /cpac_templates/MacaqueYerkes19_T1w_1.0mm_brain.nii.gz

        # Template to be used during registration.
        # It is not necessary to change this path unless you intend to use a non-standard template.
        FNIRT_T1w_template: /cpac_templates/MacaqueYerkes19_T1w_1.0mm.nii.gz
        
        # Interpolation method for writing out transformed anatomical images.
        # Possible values: trilinear, sinc, spline
        interpolation: spline

  functional_registration: 

    coregistration: 
      
      # Choose coregistration interpolation
      interpolation: spline

      # Choose coregistration cost function
      cost: mutualinfo
      
      # Extra arguments for FSL flirt
      arguments: '-searchrx -30 30 -searchry -30 30 -searchrz -30 30'

      func_input_prep:

        # Choose whether to use the mean of the functional/EPI as the input to functional-to-anatomical registration or one of the volumes from the functional 4D timeseries that you choose.
        # input: ['Mean_Functional', 'Selected_Functional_Volume']
        input: ['Mean_Functional']

        Mean Functional: 

          # Run ANTs’ N4 Bias Field Correction on the input BOLD (EPI)
          # this can increase tissue contrast which may improve registration quality in some data
          n4_correct_func: Off

        Selected Functional Volume:

          # Only for when 'Use as Functional-to-Anatomical Registration Input' is set to 'Selected Functional Volume'.
          #Input the index of which volume from the functional 4D timeseries input file you wish to use as the input for functional-to-anatomical registration.
          func_reg_input_volume: 0
      
      boundary_based_registration: 

        # this is a fork point
        #   run: [On, Off] - this will run both and fork the pipeline
        run: [Off]

    EPI_registration: 

      ANTs: 

        # EPI registration configuration - synonymous with T1_registration
        # parameters under anatomical registration above
        parameters: 

      FSL-FNIRT: 

        # Identity matrix used during FSL-based resampling of BOLD-space data throughout the pipeline.
        # It is not necessary to change this path unless you intend to use a different template.
        identity_matrix: $FSLDIR/etc/flirtsch/ident.mat

    func_registration_to_template: 

      output_resolution: 

        # The resolution (in mm) to which the preprocessed, registered functional timeseries outputs are written into.
        # NOTE:
        #   selecting a 1 mm or 2 mm resolution might substantially increase your RAM needs- these resolutions should be selected with caution.
        #   for most cases, 3 mm or 4 mm resolutions are suggested.
        # NOTE:
        #   this also includes the single-volume 3D preprocessed functional data,
        #   such as the mean functional (mean EPI) in template space
        func_preproc_outputs: 1.5mm

        # The resolution (in mm) to which the registered derivative outputs are written into.
        # NOTE:
        #   this is for the single-volume functional-space outputs (i.e. derivatives)
        #   thus, a higher resolution may not result in a large increase in RAM needs as above
        func_derivative_outputs: 1.5mm

      target_template: 

        # using: ['T1_template', 'EPI_template', 'DCAN_NHP']
        # this is a fork point
        # NOTE:
        #   this will determine which registration transform to use to warp the functional
        #   outputs and derivatives to template space
        using: ['T1_template']

        # option parameters
        T1_template: 

          # Standard Skull Stripped Template. Used as a reference image for functional registration.
          # This can be different than the template used as the reference/fixed for T1-to-template registration.
          T1w_brain_template_funcreg: /cpac_templates/MacaqueYerkes19_T1w_1.5mm_brain.nii.gz

          # Standard Anatomical Brain Image with Skull.
          # This can be different than the template used as the reference/fixed for T1-to-template registration.
          T1w_template_funcreg: /cpac_templates/MacaqueYerkes19_T1_0.5mm.nii.gz

          # Template to be used during registration.
          # It is not necessary to change this path unless you intend to use a non-standard template.
          T1w_brain_template_mask_funcreg: /cpac_templates/MacaqueYerkes19_T1w_1.5mm_brain_mask.nii.gz

          # a standard template for resampling if using float resolution
          T1w_template_for_resample:  /cpac_templates/MacaqueYerkes19_T1w_0.5mm.nii.gz
      
      FNIRT_pipelines:

        # Interpolation method for writing out transformed functional images.
        # Possible values: trilinear, sinc, spline
        interpolation: spline

      apply_transform:

        # options: 'default', 'abcd', 'single_step_resampling', 'dcan_nhp'
        # 'default': apply func-to-anat and anat-to-template transforms on motion corrected functional image.
        # 'abcd': apply motion correction, func-to-anat and anat-to-template transforms on each of raw functional volume using FSL applywarp based on ABCD-HCP pipeline.
        # 'single_step_resampling': apply motion correction, func-to-anat and anat-to-template transforms on each of raw functional volume using ANTs antsApplyTransform based on fMRIPrep pipeline.
        using: 'dcan_nhp'

functional_preproc:

  run: On  
  
  despiking: 

    # Run AFNI 3dDespike
    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

  slice_timing_correction:

    # Interpolate voxel time courses so they are sampled at the same time points.
    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

  motion_estimates_and_correction:

    motion_correction:

      # using: ['3dvolreg', 'mcflirt']
      # this is a fork point
      using: ['mcflirt']

      # Choose motion correction reference. Options: mean, median, selected_volume
      motion_correction_reference: ['selected_volume']

      # Choose motion correction reference volume
      motion_correction_reference_volume: 0

  distortion_correction: 

    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

    # using: ['PhaseDiff', 'Blip']
    #   PhaseDiff - Perform field map correction using a single phase difference image, a subtraction of the two phase images from each echo. Default scanner for this method is SIEMENS.
    #   Blip - Uses AFNI 3dQWarp to calculate the distortion unwarp for EPI field maps of opposite/same phase encoding direction.
    #   NOTE:
    #     this is NOT a fork point - instead, the technique used will depend on what type of distortion correction field data accompanies the dataset
    #     for example, phase-difference field maps will lead to phase-difference distortion correction, and phase-encoding direction field maps will lead to blip-up/blip-down
    using: []

  func_masking: 

    # using: ['AFNI', 'FSL', 'FSL_AFNI', 'Anatomical_Refined', 'Anatomical_Based']
    # this is a fork point
    using: [Anatomical_Based]

nuisance_corrections: 

  2-nuisance_regression: 

    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

    # Select which nuisance signal corrections to apply
    Regressors: 
      - Bandpass:
          bottom_frequency: 0.01
          top_frequency: 0.1
        CerebrospinalFluid:
          summary:
            components: 5
            method: PC
        GlobalSignal:
          summary: Mean
        Motion:
          include_delayed: On
          include_delayed_squared: On
          include_squared: On
        Name: Regressor-1
        PolyOrt:
          degree: 2
        WhiteMatter:
          summary:
            components: 5
            method: PC
      - CerebrospinalFluid:
          summary:
            components: 5
            method: PC
        GlobalSignal:
          summary: Mean
        Motion:
          include_delayed: true
          include_delayed_squared: true
          include_squared: true
        PolyOrt:
          degree: 2
        WhiteMatter:
          summary:
            components: 5
            method: PC
    # Standard Lateral Ventricles Binary Mask
    # used in CSF mask refinement for CSF signal-related regressions
    lateral_ventricles_mask: 


# OUTPUTS AND DERIVATIVES
# -----------------------
post_processing:

  spatial_smoothing:

    # Smooth the derivative outputs.
    # Set as ['nonsmoothed'] to disable smoothing. Set as both to get both.
    #
    # Options:
    #     ['smoothed', 'nonsmoothed']
    output: ['smoothed', 'nonsmoothed']


timeseries_extraction: 

  run: Off

  # Enter paths to region-of-interest (ROI) NIFTI files (.nii or .nii.gz) to be used for time-series extraction, and then select which types of analyses to run.
  # Denote which analyses to run for each ROI path by listing the names below. For example, if you wish to run Avg and SpatialReg, you would enter: '/path/to/ROI.nii.gz': Avg, SpatialReg
  # available analyses:
  #   /path/to/atlas.nii.gz: Avg, Voxel, SpatialReg
  tse_roi_paths: 
    /Template/DMN-Ghahremani2016/thr_bin_hjin/HRzstat_DMN_1_thr4.nii.gz: Avg
    /Template/DMN-Ghahremani2016/thr_bin_hjin/HRzstat_DMN_2_thr4.nii.gz: Avg
    /Template/DMN-Ghahremani2016/thr_bin_hjin/HRzstat_DMN_3_thr4.nii.gz: Avg
    s3://fcp-indi/resources/cpac/resources/parcellation/Markov91_L_0.5mm.nii.gz: Avg
    s3://fcp-indi/resources/cpac/resources/parcellation/Markov91_R_0.5mm.nii.gz: Avg

seed_based_correlation_analysis: 

  # SCA - Seed-Based Correlation Analysis
  # For each extracted ROI Average time series, CPAC will generate a whole-brain correlation map.
  # It should be noted that for a given seed/ROI, SCA maps for ROI Average time series will be the same.
  run: Off

  # Enter paths to region-of-interest (ROI) NIFTI files (.nii or .nii.gz) to be used for seed-based correlation analysis, and then select which types of analyses to run.
  # Denote which analyses to run for each ROI path by listing the names below. For example, if you wish to run Avg and MultReg, you would enter: '/path/to/ROI.nii.gz': Avg, MultReg
  # available analyses:
  #   /path/to/atlas.nii.gz: Avg, DualReg, MultReg
  sca_roi_paths: 
    /Template/DMN-Ghahremani2016/HRzstat_DMN_1.nii.gz: DualReg
    /Template/DMN-Ghahremani2016/HRzstat_DMN_2.nii.gz: DualReg
    /Template/DMN-Ghahremani2016/HRzstat_DMN_3.nii.gz: DualReg
    /Template/DMN-Ghahremani2016/thr_bin_hjin/HRzstat_DMN_1_thr4.nii.gz: Avg
    /Template/DMN-Ghahremani2016/thr_bin_hjin/HRzstat_DMN_2_thr4.nii.gz: Avg
    /Template/DMN-Ghahremani2016/thr_bin_hjin/HRzstat_DMN_3_thr4.nii.gz: Avg
    s3://fcp-indi/resources/cpac/resources/parcellation/Markov91_L_0.5mm.nii.gz: Avg
    s3://fcp-indi/resources/cpac/resources/parcellation/Markov91_R_0.5mm.nii.gz: Avg

amplitude_low_frequency_fluctuation: 

  # ALFF & f/ALFF
  # Calculate Amplitude of Low Frequency Fluctuations (ALFF) and and fractional ALFF (f/ALFF) for all voxels.
  run: Off

regional_homogeneity: 

  # ReHo
  # Calculate Regional Homogeneity (ReHo) for all voxels.
  run: Off

voxel_mirrored_homotopic_connectivity: 

  # VMHC
  # Calculate Voxel-mirrored Homotopic Connectivity (VMHC) for all voxels.
  run: Off

  symmetric_registration: 

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    T1w_brain_template_symmetric: /cpac_templates/MacaqueYerkes19_T1w_1.0mm_brain.nii.gz

    # A reference symmetric brain template for resampling
    T1w_brain_template_symmetric_for_resample: /cpac_templates/MacaqueYerkes19_T1w_1.0mm.nii.gz

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    T1w_template_symmetric: /cpac_templates/MacaqueYerkes19_T1w_1.0mm.nii.gz

    # A reference symmetric skull template for resampling
    T1w_template_symmetric_for_resample: /cpac_templates/MacaqueYerkes19_T1w_1.0mm.nii.gz

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    dilated_symmetric_brain_mask: /cpac_templates/MacaqueYerkes19_T1w_2mm_brain_mask.nii.gz

    # A reference symmetric brain mask template for resampling
    dilated_symmetric_brain_mask_for_resample: /cpac_templates/MacaqueYerkes19_T1w_2mm_brain_mask.nii.gz

network_centrality: 

  # Calculate Degree, Eigenvector Centrality, or Functional Connectivity Density.
  run: Off

  # Maximum amount of RAM (in GB) to be used when calculating Degree Centrality.
  # Calculating Eigenvector Centrality will require additional memory based on the size of the mask or number of ROI nodes.
  memory_allocation: 3.0

  # Full path to a NIFTI file describing the mask. Centrality will be calculated for all voxels within the mask.
  template_specification_file: s3://fcp-indi/resources/cpac/resources/mask-thr50-3mm.nii.gz

  eigenvector_centrality: 

    # Enable/Disable eigenvector centrality by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [Binarized, Weighted]

  local_functional_connectivity_density: 

    # Select the type of threshold used when creating the lFCD adjacency matrix.
    # options:
    #   'Significance threshold', 'Correlation threshold'
    correlation_threshold_option: Significance threshold

    # Based on the Threshold Type selected above, enter a Threshold Value.
    # P-value for Significance Threshold
    # Sparsity value for Sparsity Threshold
    # Pearson's r value for Correlation Threshold
    correlation_threshold: 0.001

# PACKAGE INTEGRATIONS
# --------------------
PyPEER: 

  # Template-space eye mask
  eye_mask_path: $FSLDIR/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz
