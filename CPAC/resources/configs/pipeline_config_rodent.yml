%YAML 1.1
---
# CPAC Pipeline Configuration YAML file
# Version 1.8.0.dev
#
# http://fcp-indi.github.io for more info.
#
# Tip: This file can be edited manually with a text editor for quick modifications.

FROM: default


pipeline_setup: 

  # Name for this pipeline configuration - useful for identification.
  pipeline_name: analysis

  output_directory: 

    # Include extra versions and intermediate steps of functional preprocessing in the output directory.
    write_func_outputs: [Off]

    # Include extra outputs in the output directory that may be of interest when more information is needed.
    write_debugging_outputs: [Off]

    # Generate quality control pages containing preprocessing and derivative outputs.
    generate_quality_control_images: [On]

  log_directory: 

    path: /tmp

  crash_log_directory: 

    # Directory where CPAC should write crash logs.
    path: /tmp

  system_config: 

    # The maximum amount of memory each participant's workflow can allocate.
    # Use this to place an upper bound of memory usage.
    # - Warning: 'Memory Per Participant' multiplied by 'Number of Participants to Run Simultaneously'
    #   must not be more than the total amount of RAM.
    # - Conversely, using too little RAM can impede the speed of a pipeline run.
    # - It is recommended that you set this to a value that when multiplied by
    #   'Number of Participants to Run Simultaneously' is as much RAM you can safely allocate.
    maximum_memory_per_participant: 6.0

    # The maximum amount of cores (on a single machine) or slots on a node (on a cluster/grid)
    # to allocate per participant.
    # - Setting this above 1 will parallelize each participant's workflow where possible.
    #   If you wish to dedicate multiple cores to ANTS-based anatomical registration (below),
    #   this value must be equal or higher than the amount of cores provided to ANTS.
    # - The maximum number of cores your run can possibly employ will be this setting multiplied
    #   by the number of participants set to run in parallel (the 'Number of Participants to Run
    #   Simultaneously' setting).
    max_cores_per_participant: 4

    # The number of cores to allocate to ANTS-based anatomical registration per participant.
    # - Multiple cores can greatly speed up this preprocessing step.
    # - This number cannot be greater than the number of cores per participant.
    num_ants_threads: 4

  Amazon-AWS: 

    # Enable server-side 256-AES encryption on data to the S3 bucket
    s3_encryption: [Off]

# Full path to the FSL version to be used by CPAC.
# If you have specified an FSL path in your .bashrc file, this path will be set automatically.
FSLDIR: FSLDIR

# PREPROCESSING
# -------------

anatomical_preproc: 

  # N4 bias field correction via ANTs
  n4_bias_field_correction: On

  brain_extraction: 

    # Disables skull-stripping on the anatomical inputs if they are already skull-stripped outside of C-PAC.
    # Set this to True if your input images are already skull-stripped.
    already_skullstripped: [Off]

    extraction: 

      # using: ['3dSkullStrip', 'BET', 'UNet', 'niworkflows-ants']
      # this is a fork option
      using: [FSL]

      FSL-BET: 

        # Integer value of head radius
        radius: 50

        # Robust brain center estimation. Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces
        robust: On

  segmentation_workflow: 

    # Automatically segment anatomical images into white matter, gray matter, and CSF based on prior probability maps.
    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

    1-segmentation: 

      Template_Based: 

        # These masks should be in the same space of your registration template, e.g. if
        # you choose 'EPI Template' , below tissue masks should also be EPI template tissue masks.
        #
        # Options: ['EPI Template', 'T1 Template']
        template_for_segmentation: [EPI_template]

        # These masks are included as part of the 'Image Resource Files' package available
        # on the Install page of the User Guide.

        # Full path to a binarized White Matter mask.
        WHITE: /template/chd8_functional_template_ventricles_ag.nii.gz

        # Full path to a binarized Gray Matter mask.
        GRAY: /template/chd8_functional_template_ventricles_ag.nii.gz

        # Full path to a binarized CSF mask.
        CSF: /template/chd8_functional_template_ventricles_ag.nii.gz

    2-use_priors: 

      # Full path to a directory containing binarized prior probability maps.
      # These maps are included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
      # It is not necessary to change this path unless you intend to use non-standard priors.
      priors_path: /template

      # Full path to a binarized White Matter prior probability map.
      # It is not necessary to change this path unless you intend to use non-standard priors.
      WM_path: study_based_functional_template_mask.nii.gz

      # Full path to a binarized Gray Matter prior probability map.
      # It is not necessary to change this path unless you intend to use non-standard priors.
      GM_path: study_based_functional_template_mask.nii.gz

      # Full path to a binarized CSF prior probability map.
      # It is not necessary to change this path unless you intend to use non-standard priors.
      CSF_path: study_based_functional_template_mask.nii.gz

    3-custom_thresholding: 

      # Use threshold to further refine the resulting segmentation tissue masks.
      run: [FSL-FAST Thresholding]

  registration_workflow: 

    # The resolution to which anatomical images should be transformed during registration.
    # This is the resolution at which processed anatomical files will be output.
    resolution_for_anat: 2.3mmx2.3mmx6mm

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    template_brain_only_for_anat: /template/study_based_functional_template_sk.nii.gz

    # Template to be used during registration.
    # It is not necessary to change this path unless you intend to use a non-standard template.
    template_skull_for_anat: /template/study_based_functional_template.nii.gz

    # Register skull-on anatomical image to a template.
    reg_with_skull: [On]

    registration: 

      # option parameters
      ANTs: 

        # If a lesion mask is available for a T1w image, use it to improve the ANTs' registration
        # ANTS registration only.
        use_lesion_mask: [Off]

        # ANTs parameters for T1-template-based registration
        T1_registration: 
          - dimensionality: 3
          - initial-moving-transform:
              initializationFeature: 1
          - transforms:
            - Affine:
                convergence:
                  iteration: 100x100x30
                gradientStep: 0.25
                metric:
                  metricWeight: 1
                  radius: 2
                  type: CC
                shrink-factors: 5x3x1
                smoothing-sigmas: 5x3x0
            - SyN:
                convergence:
                  iteration: 100x100x30
                gradientStep: 0.15
                metric:
                  metricWeight: 1
                  radius: 2
                  type: CC
                shrink-factors: 5x3x1
                smoothing-sigmas: 5x3x0
                totalFieldVarianceInVoxelSpace: 1
                updateFieldVarianceInVoxelSpace: 5

        # See "Configuration Without the GUI" at
        # https://fcp-indi.github.io/docs/latest/user/func for example
        # EPI_registration configuration
        EPI_registration: 
          - dimensionality: 3
          - initial-moving-transform:
              initializationFeature: 1
          - transforms:
            - Affine:
                convergence:
                  iteration: 100x100x30
                gradientStep: 0.25
                metric:
                  metricWeight: 1
                  radius: 2
                  type: CC
                shrink-factors: 5x3x1
                smoothing-sigmas: 5x3x0
            - SyN:
                convergence:
                  iteration: 100x100x30
                gradientStep: 0.15
                metric:
                  metricWeight: 1
                  radius: 2
                  type: CC
                shrink-factors: 5x3x1
                smoothing-sigmas: 5x3x0
                totalFieldVarianceInVoxelSpace: 1
                updateFieldVarianceInVoxelSpace: 5

      FSL-FNIRT: 

        # Configuration file to be used by FSL to set FNIRT parameters.
        # It is not necessary to change this path unless you intend to use custom FNIRT parameters or a non-standard template.
        ref_mask: /usr/share/fsl/5.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz

functional_preproc: 

  run: [On]

  slice_timing_correction: 

    # Interpolate voxel time courses so they are sampled at the same time points.
    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

  distortion_correction: 

    # using: ['PhaseDiff', 'Blip']
    #   PhaseDiff - Perform field map correction using a single phase difference image, a subtraction of the two phase images from each echo. Default scanner for this method is SIEMENS.
    #   Blip - Uses AFNI 3dQWarp to calculate the distortion unwarp for EPI field maps of opposite/same phase encoding direction.
    #   NOTE:
    #     this is NOT a fork point - instead, the technique used will depend on what type of distortion correction field data accompanies the dataset
    #     for example, phase-difference field maps will lead to phase-difference distortion correction, and phase-encoding direction field maps will lead to blip-up/blip-down
    using: [None]

    # option parameters
    PhaseDiff: 

      # Since the quality of the distortion heavily relies on the skull-stripping step, we provide a choice of method ('AFNI' for AFNI 3dSkullStrip or 'BET' for FSL BET).
      fmap_skullstrip_option: [BET]

      # Set the fraction value for the skull-stripping of the magnitude file. Depending on the data, a tighter extraction may be necessary in order to prevent noisy voxels from interfering with preparing the field map.
      # The default value is 0.5.
      fmap_skullstrip_frac: [0.5]

  func_masking: 

    # using: ['AFNI', 'FSL', 'FSL_AFNI', 'Anatomical_Refined']
    # this is a fork point
    using: [FSL]

    FSL-BET: 

      # Apply to 4D FMRI data, if bold_bet_functional_mean_boolean : Off.
      # Mutually exclusive with functional, reduce_bias, robust, padding, remove_eyes, surfaces
      # It must be 'on' if select 'reduce_bias', 'robust', 'padding', 'remove_eyes', or 'bet_surfaces' on
      functional_mean_boolean: On

nuisance_corrections: 

  1-ICA-AROMA: 

    # this is a fork point
    #   run: [On, Off] - this will run both and fork the pipeline
    run: [Off]

  2-nuisance_regression: 

    # Select which nuisance signal corrections to apply
    Regressors: 
      - Bandpass:
          bottom_frequency: 0.01
          top_frequency: 0.1
        CerebrospinalFluid:
          erode_mask: false
          summary: Mean
        GlobalSignal:
          summary: Mean
        Motion:
          include_delayed: false
          include_delayed_squared: false
          include_squared: false

    # Standard Lateral Ventricles Binary Mask
    # used in CSF mask refinement for CSF signal-related regressions
    lateral_ventricles_mask: /template/chd8_functional_template_ventricles_ag.nii.gz

    # Whether to run frequency filtering before or after nuisance regression.
    # Options: 'After' or 'Before'
    bandpass_filtering_order: [After]

functional_registration: 

  1-coregistration: 

    boundary_based_registration: 

      # this is a fork point
      #   run: [On, Off] - this will run both and fork the pipeline
      run: [Off]

  2-func_registration_to_template: 

    output_resolution: 

      # The resolution (in mm) to which the preprocessed, registered functional timeseries outputs are written into.
      # NOTE:
      #   selecting a 1 mm or 2 mm resolution might substantially increase your RAM needs- these resolutions should be selected with caution.
      #   for most cases, 3 mm or 4 mm resolutions are suggested.
      # NOTE:
      #   this also includes the single-volume 3D preprocessed functional data,
      #   such as the mean functional (mean EPI) in template space
      func_preproc_outputs: 2.3mmx2.3mmx6mm

      # The resolution (in mm) to which the registered derivative outputs are written into.
      # NOTE:
      #   this is for the single-volume functional-space outputs (i.e. derivatives)
      #   thus, a higher resolution may not result in a large increase in RAM needs as above
      func_derivative_outputs: 2.3mmx2.3mmx6mm

      # a standard template for resampling if using float resolution
      template_for_resample: /template/study_based_functional_template_sk.nii.gz

    target_template: 

      # using: ['T1_template', 'EPI_template']
      # this is a fork point
      # NOTE:
      #   'EPI_template' registers the mean-functional directly to the template (chosen below under EPI_template)
      #   instead of applying the anatomical T1-to-template transform to the functional data that has been
      #   coregistered to anatomical/T1 space
      using: [EPI_template]

      # option parameters
      T1_template: 

        # Standard Skull Stripped Template. Used as a reference image for functional registration.
        # This can be different than the template used as the reference/fixed for T1-to-template registration.
        template_brain: /template/study_based_functional_template_sk.nii.gz

        # Standard Anatomical Brain Image with Skull.
        # This can be different than the template used as the reference/fixed for T1-to-template registration.
        template_skull: /template/study_based_functional_template.nii.gz

      EPI_template: 

        # EPI template for direct functional-to-template registration
        # (bypassing coregistration and the anatomical-to-template transforms)
        template_epi: /template/study_based_functional_template_sk.nii.gz

# OUTPUTS AND DERIVATIVES
# -----------------------
post_processing: 

  spatial_smoothing: 

    # Smooth the derivative outputs.
    run: [On]

    # Tool to use for smoothing.
    # 'FSL' for FSL MultiImageMaths for FWHM provided
    # 'AFNI' for AFNI 3dBlurToFWHM for FWHM provided
    smoothing_method: [AFNI]

    # Full Width at Half Maximum of the Gaussian kernel used during spatial smoothing.
    # this is a fork point
    #   i.e. multiple kernels - fwhm: [4,6,8]
    fwhm: [6]

    # Choose whether to smooth outputs before or after z-scoring.
    # options: 'Before' or 'After'
    smoothing_order: [Before]

  z-scoring: 

    # z-score standardize the derivatives. This may be needed for group-level analysis.
    run: [Off]

timeseries_extraction: 

  run: [Off]

  # By default, extracted time series are written as both a text file and a 1D file. Additional output formats are as a .csv spreadsheet or a Numpy array.
  roi_tse_outputs: [True, True]

seed_based_correlation_analysis: 

  # SCA - Seed-Based Correlation Analysis
  # For each extracted ROI Average time series, CPAC will generate a whole-brain correlation map.
  # It should be noted that for a given seed/ROI, SCA maps for ROI Average time series will be the same.
  run: [Off]

amplitude_low_frequency_fluctuation: 

  # ALFF & f/ALFF
  # Calculate Amplitude of Low Frequency Fluctuations (ALFF) and and fractional ALFF (f/ALFF) for all voxels.
  run: [Off]

regional_homogeneity: 

  # ReHo
  # Calculate Regional Homogeneity (ReHo) for all voxels.
  run: [Off]

voxel_mirrored_homotopic_connectivity: 

  # VMHC
  # Calculate Voxel-mirrored Homotopic Connectivity (VMHC) for all voxels.
  run: [Off]

  symmetric_registration: 

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    template_symmetric_brain_only: /template/study_based_functional_template_sk.nii.gz

    # A reference symmetric brain template for resampling
    template_symmetric_brain_for_resample: /template/study_based_functional_template_sk.nii.gz

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    template_symmetric_skull: /template/study_based_functional_template.nii.gz

    # A reference symmetric skull template for resampling
    template_symmetric_skull_for_resample: /template/study_based_functional_template.nii.g

    # Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.
    # It is not necessary to change this path unless you intend to use a non-standard symmetric template.
    dilated_symmetric_brain_mask: /template/tudy_based_functional_template_mask.nii.gz

    # A reference symmetric brain mask template for resampling
    dilated_symmetric_brain_mask_for_resample: /template/tudy_based_functional_template_mask.nii.gz

network_centrality: 

  # Calculate Degree, Eigenvector Centrality, or Functional Connectivity Density.
  # this is a fork point
  #   run: [On, Off] - this will run both and fork the pipeline
  run: [Off]

  degree_centrality: 

    # Enable/Disable degree centrality by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [True, True]

    # Select the type of threshold used when creating the degree centrality adjacency matrix.
    # options:
    #   'Significance threshold', 'Sparsity threshold', 'Correlation threshold'
    correlation_threshold_option: [Sparsity threshold]

  eigenvector_centrality: 

    # Enable/Disable eigenvector centrality by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [False, True]

    # Select the type of threshold used when creating the eigenvector centrality adjacency matrix.
    # options:
    #   'Significance threshold', 'Sparsity threshold', 'Correlation threshold'
    correlation_threshold_option: [Sparsity threshold]

  local_functional_connectivity_density: 

    # Enable/Disable lFCD by selecting the connectivity weights
    #   weight_options: ['Binarized', 'Weighted']
    # disable this type of centrality with:
    #   weight_options: []
    weight_options: [True, True]

    # Select the type of threshold used when creating the lFCD adjacency matrix.
    # options:
    #   'Significance threshold', 'Correlation threshold'
    correlation_threshold_option: [Correlation threshold]

# PACKAGE INTEGRATIONS
# --------------------
PyPEER: 

  # Template-space eye mask
  eye_mask_path: $FSLDIR/data/standard/MNI152_T1_${resolution_for_func_preproc}_eye_mask.nii.gz