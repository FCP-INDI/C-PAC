(lp0
(ccopy_reg
_reconstructor
p1
(cnipype.pipeline.engine
MapNode
p2
c__builtin__
object
p3
Ntp4
Rp5
(dp6
S'input_source'
p7
(dp8
sS'_interface'
p9
g1
(cnipype.interfaces.fsl.maths
MultiImageMaths
p10
g3
Ntp11
Rp12
(dp13
S'inputs'
p14
ctraits.traits
__newobj__
p15
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p16
tp17
Rp18
(dp19
S'ignore_exception'
p20
I00
sS'nan2zeros'
p21
ctraits.trait_base
_Undefined
p22
(tRp23
sS'op_string'
p24
g23
sS'out_file'
p25
g23
sS'args'
p26
g23
sS'internal_datatype'
p27
g23
sS'__traits_version__'
p28
S'4.0.0'
p29
sS'terminal_output'
p30
S'stream'
p31
sS'environ'
p32
g1
(ctraits.trait_handlers
TraitDictObject
p33
c__builtin__
dict
p34
(dp35
S'FSLOUTPUTTYPE'
p36
S'NIFTI_GZ'
p37
stp38
Rp39
(dp40
S'name_items'
p41
S'environ_items'
p42
sS'name'
p43
g32
sbsS'in_file'
p44
g23
sS'output_type'
p45
g37
sS'output_datatype'
p46
g23
sS'operand_files'
p47
g23
sbsS'_output_type'
p48
g37
sS'_environ'
p49
NsS'_terminal_output'
p50
g31
sbsS'_result'
p51
NsS'_inputs'
p52
g15
(cnipype.interfaces.base
DynamicTraitedSpec
p53
tp54
Rp55
(dp56
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp57
g36
g37
stp58
Rp59
(dp60
g41
S'environ_items'
p61
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'network_centrality_smooth_0'
p62
sS'plugin_args'
p63
(dp64
sS'_hierarchy'
p65
S'resting_preproc_0010128_session_1'
p66
sS'iterfield'
p67
(lp68
g44
asS'itersource'
p69
NsS'run_without_submitting'
p70
I00
sS'synchronize'
p71
I00
sS'parameterization'
p72
NsS'iterables'
p73
NsS'_got_inputs'
p74
I00
sS'_id'
p75
g62
sS'config'
p76
NsS'needed_outputs'
p77
(lp78
sS'overwrite'
p79
NsS'base_dir'
p80
Nsbg1
(cnipype.pipeline.engine
Workflow
p81
g3
Ntp82
Rp83
(dp84
S'_graph'
p85
g1
(cnetworkx.classes.digraph
DiGraph
p86
g3
Ntp87
Rp88
(dp89
S'node'
p90
(dp91
g1
(cnipype.pipeline.engine
Node
p92
g3
Ntp93
Rp94
(dp95
g7
(dp96
sg9
g1
(cnipype.interfaces.utility
IdentityInterface
p97
g3
Ntp98
Rp99
(dp100
g14
g15
(g53
tp101
Rp102
(dp103
g28
g29
sS'index'
p104
I0
sg14
g23
sS'log_dir'
p105
S'/home/rtungaraza/CPAC_testData/o-a/logs/0010128_session_1'
p106
sS'workflow'
p107
g62
sbsS'_fields'
p108
(lp109
g107
ag105
ag104
ag14
asS'_mandatory_inputs'
p110
I01
sbsg51
Nsg43
S'inputspec'
p111
sg63
(dp112
sg65
S'log_network_centrality_smooth_0'
p113
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp114
sg79
Nsg80
Nsb(dp115
sg1
(g92
g3
Ntp116
Rp117
(dp118
g7
(dp119
sg9
g1
(g97
g3
Ntp120
Rp121
(dp122
g14
g15
(g53
tp123
Rp124
(dp125
g28
g29
sg25
g23
sbsg108
(lp126
g25
asg110
I01
sbsg51
Nsg43
S'outputspec'
p127
sg63
(dp128
sg65
g113
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp129
sg79
Nsg80
Nsb(dp130
sg1
(g92
g3
Ntp131
Rp132
(dp133
g7
(dp134
sg9
g1
(cnipype.interfaces.utility
Function
p135
g3
Ntp136
Rp137
(dp138
S'_input_names'
p139
(lp140
g107
ag105
ag104
ag14
aS'scan_id'
p141
asg14
g15
(cnipype.interfaces.utility
FunctionInputSpec
p142
tp143
Rp144
(dp145
g20
I00
sg104
g23
sg141
Nsg107
g23
sS'function_str'
p146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p147
sg14
g23
sg105
g23
sg28
g29
sbsS'_out'
p148
(dp149
g25
NssS'_output_names'
p150
(lp151
g25
asS'imports'
p152
Nsbsg51
Nsg43
S'write_log'
p153
sg63
(dp154
sg65
g113
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp155
sg79
Nsg80
Nsb(dp156
ssS'graph'
p157
(dp158
sS'succ'
p159
(dp160
g94
(dp161
g132
(dp162
S'connect'
p163
(lp164
(g107
g107
tp165
a(g105
g105
tp166
a(g104
g104
tp167
a(g14
g14
tp168
asssg117
(dp169
sg132
(dp170
g117
(dp171
g163
(lp172
(g25
g25
tp173
assssS'edge'
p174
g160
sS'pred'
p175
(dp176
g94
(dp177
sg117
(dp178
g132
g171
ssg132
(dp179
g94
g162
sssS'adj'
p180
g160
sbsg43
g113
sg65
g66
sg75
g113
sg76
ccollections
OrderedDict
p181
((lp182
(lp183
S'logging'
p184
ag181
((lp185
(lp186
S'__name__'
p187
ag184
aa(lp188
S'workflow_level'
p189
aS'INFO'
p190
aa(lp191
S'filemanip_level'
p192
aS'INFO'
p193
aa(lp194
S'interface_level'
p195
aS'INFO'
p196
aa(lp197
S'log_to_file'
p198
aS'True'
p199
aa(lp200
S'log_directory'
p201
ag106
aa(lp202
S'log_size'
p203
aS'16384000'
p204
aa(lp205
S'log_rotate'
p206
aS'4'
p207
aatp208
Rp209
aa(lp210
S'execution'
p211
ag181
((lp212
(lp213
g187
ag211
aa(lp214
S'create_report'
p215
aS'true'
p216
aa(lp217
S'crashdump_dir'
p218
aS'/home/rtungaraza/C-PAC/test/unit/CPAC/pipeline'
p219
aa(lp220
S'display_variable'
p221
aS':1'
p222
aa(lp223
S'hash_method'
p224
aS'timestamp'
p225
aa(lp226
S'job_finished_timeout'
p227
aS'5'
p228
aa(lp229
S'keep_inputs'
p230
aS'false'
p231
aa(lp232
S'local_hash_check'
p233
aS'true'
p234
aa(lp235
S'matplotlib_backend'
p236
aS'Agg'
p237
aa(lp238
S'plugin'
p239
aS'Linear'
p240
aa(lp241
S'remove_node_directories'
p242
aS'false'
p243
aa(lp244
S'remove_unnecessary_outputs'
p245
aS'true'
p246
aa(lp247
S'single_thread_matlab'
p248
aS'true'
p249
aa(lp250
S'stop_on_first_crash'
p251
aS'false'
p252
aa(lp253
S'stop_on_first_rerun'
p254
aS'false'
p255
aa(lp256
S'use_relative_paths'
p257
aS'false'
p258
aa(lp259
S'stop_on_unknown_version'
p260
aS'false'
p261
aa(lp262
S'write_provenance'
p263
aS'false'
p264
aa(lp265
S'parameterize_dirs'
p266
aS'true'
p267
aatp268
Rp269
aa(lp270
S'check'
p271
ag181
((lp272
(lp273
g187
ag271
aa(lp274
S'interval'
p275
aS'1209600'
p276
aatp277
Rp278
aatp279
Rp280
sg80
Nsbtp281
a(g1
(g2
g3
Ntp282
Rp283
(dp284
g7
(dp285
sg9
g1
(g10
g3
Ntp286
Rp287
(dp288
g14
g15
(g16
tp289
Rp290
(dp291
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp292
g36
g37
stp293
Rp294
(dp295
g41
S'environ_items'
p296
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp297
Rp298
(dp299
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp300
g36
g37
stp301
Rp302
(dp303
g41
S'environ_items'
p304
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'network_centrality_smooth_1'
p305
sg63
(dp306
sg65
g66
sg67
(lp307
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g305
sg76
Nsg77
(lp308
sg79
Nsg80
Nsbg1
(g81
g3
Ntp309
Rp310
(dp311
g85
g1
(g86
g3
Ntp312
Rp313
(dp314
g90
(dp315
g1
(g92
g3
Ntp316
Rp317
(dp318
g7
(dp319
sg9
g1
(g97
g3
Ntp320
Rp321
(dp322
g14
g15
(g53
tp323
Rp324
(dp325
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g305
sbsg108
(lp326
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp327
sg65
S'log_network_centrality_smooth_1'
p328
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp329
sg79
Nsg80
Nsb(dp330
sg1
(g92
g3
Ntp331
Rp332
(dp333
g7
(dp334
sg9
g1
(g135
g3
Ntp335
Rp336
(dp337
g139
(lp338
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp339
Rp340
(dp341
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p342
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp343
g25
Nssg150
(lp344
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp345
sg65
g328
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp346
sg79
Nsg80
Nsb(dp347
sg1
(g92
g3
Ntp348
Rp349
(dp350
g7
(dp351
sg9
g1
(g97
g3
Ntp352
Rp353
(dp354
g14
g15
(g53
tp355
Rp356
(dp357
g28
g29
sg25
g23
sbsg108
(lp358
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp359
sg65
g328
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp360
sg79
Nsg80
Nsb(dp361
ssg157
(dp362
sg159
(dp363
g317
(dp364
g332
(dp365
g163
(lp366
(g107
g107
tp367
a(g105
g105
tp368
a(g104
g104
tp369
a(g14
g14
tp370
asssg332
(dp371
g349
(dp372
g163
(lp373
(g25
g25
tp374
asssg349
(dp375
ssg174
g363
sg175
(dp376
g317
(dp377
sg332
(dp378
g317
g365
ssg349
(dp379
g332
g372
sssg180
g363
sbsg43
g328
sg65
g66
sg75
g328
sg76
g181
((lp380
(lp381
g184
ag181
((lp382
(lp383
g187
ag184
aa(lp384
g189
ag190
aa(lp385
g192
ag193
aa(lp386
g195
ag196
aa(lp387
g198
ag199
aa(lp388
g201
ag106
aa(lp389
g203
ag204
aa(lp390
g206
ag207
aatp391
Rp392
aa(lp393
g211
ag181
((lp394
(lp395
g187
ag211
aa(lp396
g215
ag216
aa(lp397
g218
ag219
aa(lp398
g221
ag222
aa(lp399
g224
ag225
aa(lp400
g227
ag228
aa(lp401
g230
ag231
aa(lp402
g233
ag234
aa(lp403
g236
ag237
aa(lp404
g239
ag240
aa(lp405
g242
ag243
aa(lp406
g245
ag246
aa(lp407
g248
ag249
aa(lp408
g251
ag252
aa(lp409
g254
ag255
aa(lp410
g257
ag258
aa(lp411
g260
ag261
aa(lp412
g263
ag264
aa(lp413
g266
ag267
aatp414
Rp415
aa(lp416
g271
ag181
((lp417
(lp418
g187
ag271
aa(lp419
g275
ag276
aatp420
Rp421
aatp422
Rp423
sg80
Nsbtp424
a(g1
(g2
g3
Ntp425
Rp426
(dp427
g7
(dp428
sg9
g1
(g10
g3
Ntp429
Rp430
(dp431
g14
g15
(g16
tp432
Rp433
(dp434
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp435
g36
g37
stp436
Rp437
(dp438
g41
S'environ_items'
p439
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp440
Rp441
(dp442
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp443
g36
g37
stp444
Rp445
(dp446
g41
S'environ_items'
p447
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_tempreg_maps_stack_smooth_0'
p448
sg63
(dp449
sg65
g66
sg67
(lp450
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g448
sg76
Nsg77
(lp451
sg79
Nsg80
Nsbg1
(g81
g3
Ntp452
Rp453
(dp454
g85
g1
(g86
g3
Ntp455
Rp456
(dp457
g90
(dp458
g1
(g92
g3
Ntp459
Rp460
(dp461
g7
(dp462
sg9
g1
(g135
g3
Ntp463
Rp464
(dp465
g139
(lp466
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp467
Rp468
(dp469
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p470
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp471
g25
Nssg150
(lp472
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp473
sg65
S'log_sca_tempreg_maps_stack_smooth_0'
p474
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp475
sg79
Nsg80
Nsb(dp476
sg1
(g92
g3
Ntp477
Rp478
(dp479
g7
(dp480
sg9
g1
(g97
g3
Ntp481
Rp482
(dp483
g14
g15
(g53
tp484
Rp485
(dp486
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g448
sbsg108
(lp487
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp488
sg65
g474
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp489
sg79
Nsg80
Nsb(dp490
sg1
(g92
g3
Ntp491
Rp492
(dp493
g7
(dp494
sg9
g1
(g97
g3
Ntp495
Rp496
(dp497
g14
g15
(g53
tp498
Rp499
(dp500
g28
g29
sg25
g23
sbsg108
(lp501
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp502
sg65
g474
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp503
sg79
Nsg80
Nsb(dp504
ssg157
(dp505
sg159
(dp506
g460
(dp507
g492
(dp508
g163
(lp509
(g25
g25
tp510
asssg478
(dp511
g460
(dp512
g163
(lp513
(g107
g107
tp514
a(g105
g105
tp515
a(g104
g104
tp516
a(g14
g14
tp517
asssg492
(dp518
ssg174
g506
sg175
(dp519
g460
(dp520
g478
g512
ssg478
(dp521
sg492
(dp522
g460
g508
sssg180
g506
sbsg43
g474
sg65
g66
sg75
g474
sg76
g181
((lp523
(lp524
g184
ag181
((lp525
(lp526
g187
ag184
aa(lp527
g189
ag190
aa(lp528
g192
ag193
aa(lp529
g195
ag196
aa(lp530
g198
ag199
aa(lp531
g201
ag106
aa(lp532
g203
ag204
aa(lp533
g206
ag207
aatp534
Rp535
aa(lp536
g211
ag181
((lp537
(lp538
g187
ag211
aa(lp539
g215
ag216
aa(lp540
g218
ag219
aa(lp541
g221
ag222
aa(lp542
g224
ag225
aa(lp543
g227
ag228
aa(lp544
g230
ag231
aa(lp545
g233
ag234
aa(lp546
g236
ag237
aa(lp547
g239
ag240
aa(lp548
g242
ag243
aa(lp549
g245
ag246
aa(lp550
g248
ag249
aa(lp551
g251
ag252
aa(lp552
g254
ag255
aa(lp553
g257
ag258
aa(lp554
g260
ag261
aa(lp555
g263
ag264
aa(lp556
g266
ag267
aatp557
Rp558
aa(lp559
g271
ag181
((lp560
(lp561
g187
ag271
aa(lp562
g275
ag276
aatp563
Rp564
aatp565
Rp566
sg80
Nsbtp567
a(g1
(g2
g3
Ntp568
Rp569
(dp570
g7
(dp571
sg9
g1
(g10
g3
Ntp572
Rp573
(dp574
g14
g15
(g16
tp575
Rp576
(dp577
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp578
g36
g37
stp579
Rp580
(dp581
g41
S'environ_items'
p582
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp583
Rp584
(dp585
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp586
g36
g37
stp587
Rp588
(dp589
g41
S'environ_items'
p590
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_tempreg_maps_stack_smooth_1'
p591
sg63
(dp592
sg65
g66
sg67
(lp593
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g591
sg76
Nsg77
(lp594
sg79
Nsg80
Nsbg1
(g81
g3
Ntp595
Rp596
(dp597
g85
g1
(g86
g3
Ntp598
Rp599
(dp600
g90
(dp601
g1
(g92
g3
Ntp602
Rp603
(dp604
g7
(dp605
sg9
g1
(g97
g3
Ntp606
Rp607
(dp608
g14
g15
(g53
tp609
Rp610
(dp611
g28
g29
sg25
g23
sbsg108
(lp612
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp613
sg65
S'log_sca_tempreg_maps_stack_smooth_1'
p614
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp615
sg79
Nsg80
Nsb(dp616
sg1
(g92
g3
Ntp617
Rp618
(dp619
g7
(dp620
sg9
g1
(g97
g3
Ntp621
Rp622
(dp623
g14
g15
(g53
tp624
Rp625
(dp626
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g591
sbsg108
(lp627
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp628
sg65
g614
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp629
sg79
Nsg80
Nsb(dp630
sg1
(g92
g3
Ntp631
Rp632
(dp633
g7
(dp634
sg9
g1
(g135
g3
Ntp635
Rp636
(dp637
g139
(lp638
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp639
Rp640
(dp641
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p642
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp643
g25
Nssg150
(lp644
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp645
sg65
g614
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp646
sg79
Nsg80
Nsb(dp647
ssg157
(dp648
sg159
(dp649
g603
(dp650
sg618
(dp651
g632
(dp652
g163
(lp653
(g107
g107
tp654
a(g105
g105
tp655
a(g104
g104
tp656
a(g14
g14
tp657
asssg632
(dp658
g603
(dp659
g163
(lp660
(g25
g25
tp661
assssg174
g649
sg175
(dp662
g603
(dp663
g632
g659
ssg618
(dp664
sg632
(dp665
g618
g652
sssg180
g649
sbsg43
g614
sg65
g66
sg75
g614
sg76
g181
((lp666
(lp667
g184
ag181
((lp668
(lp669
g187
ag184
aa(lp670
g189
ag190
aa(lp671
g192
ag193
aa(lp672
g195
ag196
aa(lp673
g198
ag199
aa(lp674
g201
ag106
aa(lp675
g203
ag204
aa(lp676
g206
ag207
aatp677
Rp678
aa(lp679
g211
ag181
((lp680
(lp681
g187
ag211
aa(lp682
g215
ag216
aa(lp683
g218
ag219
aa(lp684
g221
ag222
aa(lp685
g224
ag225
aa(lp686
g227
ag228
aa(lp687
g230
ag231
aa(lp688
g233
ag234
aa(lp689
g236
ag237
aa(lp690
g239
ag240
aa(lp691
g242
ag243
aa(lp692
g245
ag246
aa(lp693
g248
ag249
aa(lp694
g251
ag252
aa(lp695
g254
ag255
aa(lp696
g257
ag258
aa(lp697
g260
ag261
aa(lp698
g263
ag264
aa(lp699
g266
ag267
aatp700
Rp701
aa(lp702
g271
ag181
((lp703
(lp704
g187
ag271
aa(lp705
g275
ag276
aatp706
Rp707
aatp708
Rp709
sg80
Nsbtp710
a(g1
(g2
g3
Ntp711
Rp712
(dp713
g7
(dp714
sg9
g1
(g10
g3
Ntp715
Rp716
(dp717
g14
g15
(g16
tp718
Rp719
(dp720
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp721
g36
g37
stp722
Rp723
(dp724
g41
S'environ_items'
p725
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp726
Rp727
(dp728
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp729
g36
g37
stp730
Rp731
(dp732
g41
S'environ_items'
p733
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_roi_Z_to_standard_smooth_2'
p734
sg63
(dp735
sg65
g66
sg67
(lp736
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g734
sg76
Nsg77
(lp737
sg79
Nsg80
Nsbg1
(g2
g3
Ntp738
Rp739
(dp740
g7
(dp741
sg9
g1
(cnipype.interfaces.afni.preprocess
Maskave
p742
g3
Ntp743
Rp744
(dp745
g14
g15
(cnipype.interfaces.afni.preprocess
MaskaveInputSpec
p746
tp747
Rp748
(dp749
g20
I00
sg28
g29
sg25
g23
sg26
g23
sS'mask'
p750
g23
sS'quiet'
p751
g23
sS'outputtype'
p752
S'AFNI'
p753
sg30
g31
sg32
g1
(g33
g34
(dp754
tp755
Rp756
(dp757
g41
S'environ_items'
p758
sg43
g32
sbsg44
g23
sbsS'_outputtype'
p759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp760
Rp761
(dp762
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp763
tp764
Rp765
(dp766
g41
S'environ_items'
p767
sg43
g32
sbsg44
g23
sbsg43
S'sca_roi_Z_to_standard_smooth_mean_2'
p768
sg63
(dp769
sg65
g66
sg67
(lp770
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g768
sg76
Nsg77
(lp771
sg79
Nsg80
Nsbtp772
a(g712
g1
(g81
g3
Ntp773
Rp774
(dp775
g85
g1
(g86
g3
Ntp776
Rp777
(dp778
g90
(dp779
g1
(g92
g3
Ntp780
Rp781
(dp782
g7
(dp783
sg9
g1
(g135
g3
Ntp784
Rp785
(dp786
g139
(lp787
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp788
Rp789
(dp790
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p791
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp792
g25
Nssg150
(lp793
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp794
sg65
S'log_sca_roi_Z_to_standard_smooth_2'
p795
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp796
sg79
Nsg80
Nsb(dp797
sg1
(g92
g3
Ntp798
Rp799
(dp800
g7
(dp801
sg9
g1
(g97
g3
Ntp802
Rp803
(dp804
g14
g15
(g53
tp805
Rp806
(dp807
g28
g29
sg104
I2
sg14
g23
sg105
g106
sg107
g734
sbsg108
(lp808
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp809
sg65
g795
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp810
sg79
Nsg80
Nsb(dp811
sg1
(g92
g3
Ntp812
Rp813
(dp814
g7
(dp815
sg9
g1
(g97
g3
Ntp816
Rp817
(dp818
g14
g15
(g53
tp819
Rp820
(dp821
g28
g29
sg25
g23
sbsg108
(lp822
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp823
sg65
g795
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp824
sg79
Nsg80
Nsb(dp825
ssg157
(dp826
sg159
(dp827
g781
(dp828
g813
(dp829
g163
(lp830
(g25
g25
tp831
asssg799
(dp832
g781
(dp833
g163
(lp834
(g107
g107
tp835
a(g105
g105
tp836
a(g104
g104
tp837
a(g14
g14
tp838
asssg813
(dp839
ssg174
g827
sg175
(dp840
g781
(dp841
g799
g833
ssg799
(dp842
sg813
(dp843
g781
g829
sssg180
g827
sbsg43
g795
sg65
g66
sg75
g795
sg76
g181
((lp844
(lp845
g184
ag181
((lp846
(lp847
g187
ag184
aa(lp848
g189
ag190
aa(lp849
g192
ag193
aa(lp850
g195
ag196
aa(lp851
g198
ag199
aa(lp852
g201
ag106
aa(lp853
g203
ag204
aa(lp854
g206
ag207
aatp855
Rp856
aa(lp857
g211
ag181
((lp858
(lp859
g187
ag211
aa(lp860
g215
ag216
aa(lp861
g218
ag219
aa(lp862
g221
ag222
aa(lp863
g224
ag225
aa(lp864
g227
ag228
aa(lp865
g230
ag231
aa(lp866
g233
ag234
aa(lp867
g236
ag237
aa(lp868
g239
ag240
aa(lp869
g242
ag243
aa(lp870
g245
ag246
aa(lp871
g248
ag249
aa(lp872
g251
ag252
aa(lp873
g254
ag255
aa(lp874
g257
ag258
aa(lp875
g260
ag261
aa(lp876
g263
ag264
aa(lp877
g266
ag267
aatp878
Rp879
aa(lp880
g271
ag181
((lp881
(lp882
g187
ag271
aa(lp883
g275
ag276
aatp884
Rp885
aatp886
Rp887
sg80
Nsbtp888
a(g1
(g2
g3
Ntp889
Rp890
(dp891
g7
(dp892
sg9
g1
(g10
g3
Ntp893
Rp894
(dp895
g14
g15
(g16
tp896
Rp897
(dp898
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp899
g36
g37
stp900
Rp901
(dp902
g41
S'environ_items'
p903
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp904
Rp905
(dp906
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp907
g36
g37
stp908
Rp909
(dp910
g41
S'environ_items'
p911
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_roi_Z_smooth_2'
p912
sg63
(dp913
sg65
g66
sg67
(lp914
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g912
sg76
Nsg77
(lp915
sg79
Nsg80
Nsbg1
(g2
g3
Ntp916
Rp917
(dp918
g7
(dp919
sg9
g1
(g742
g3
Ntp920
Rp921
(dp922
g14
g15
(g746
tp923
Rp924
(dp925
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp926
tp927
Rp928
(dp929
g41
S'environ_items'
p930
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp931
Rp932
(dp933
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp934
tp935
Rp936
(dp937
g41
S'environ_items'
p938
sg43
g32
sbsg44
g23
sbsg43
S'sca_roi_Z_smooth_mean_2'
p939
sg63
(dp940
sg65
g66
sg67
(lp941
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g939
sg76
Nsg77
(lp942
sg79
Nsg80
Nsbtp943
a(g917
g1
(g2
g3
Ntp944
Rp945
(dp946
g7
(dp947
sg9
g1
(g135
g3
Ntp948
Rp949
(dp950
g139
(lp951
g44
aS'output_name'
p952
asg14
g15
(g142
tp953
Rp954
(dp955
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p956
sg952
S'sca_roi_Z_smooth'
p957
sg44
g23
sg28
g29
sbsg148
(dp958
S'output_mean'
p959
Nssg150
(lp960
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp961
Rp962
(dp963
g20
I00
sg146
g956
sg952
g957
sg44
g23
sg28
g29
sbsg43
S'sca_roi_Z_smooth_mean_to_txt_2'
p964
sg63
(dp965
sg65
g66
sg67
(lp966
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g964
sg76
Nsg77
(lp967
sg79
Nsg80
Nsbtp968
a(g739
g1
(g2
g3
Ntp969
Rp970
(dp971
g7
(dp972
sg9
g1
(g135
g3
Ntp973
Rp974
(dp975
g139
(lp976
g44
ag952
asg14
g15
(g142
tp977
Rp978
(dp979
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p980
sg952
S'sca_roi_Z_to_standard_smooth'
p981
sg44
g23
sg28
g29
sbsg148
(dp982
g959
Nssg150
(lp983
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp984
Rp985
(dp986
g20
I00
sg146
g980
sg952
g981
sg44
g23
sg28
g29
sbsg43
S'sca_roi_Z_to_standard_smooth_mean_to_txt_2'
p987
sg63
(dp988
sg65
g66
sg67
(lp989
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g987
sg76
Nsg77
(lp990
sg79
Nsg80
Nsbtp991
a(g1
(g2
g3
Ntp992
Rp993
(dp994
g7
(dp995
sg9
g1
(g10
g3
Ntp996
Rp997
(dp998
g14
g15
(g16
tp999
Rp1000
(dp1001
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1002
g36
g37
stp1003
Rp1004
(dp1005
g41
S'environ_items'
p1006
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1007
Rp1008
(dp1009
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1010
g36
g37
stp1011
Rp1012
(dp1013
g41
S'environ_items'
p1014
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_roi_Z_to_standard_smooth_3'
p1015
sg63
(dp1016
sg65
g66
sg67
(lp1017
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1015
sg76
Nsg77
(lp1018
sg79
Nsg80
Nsbg1
(g81
g3
Ntp1019
Rp1020
(dp1021
g85
g1
(g86
g3
Ntp1022
Rp1023
(dp1024
g90
(dp1025
g1
(g92
g3
Ntp1026
Rp1027
(dp1028
g7
(dp1029
sg9
g1
(g97
g3
Ntp1030
Rp1031
(dp1032
g14
g15
(g53
tp1033
Rp1034
(dp1035
g28
g29
sg25
g23
sbsg108
(lp1036
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp1037
sg65
S'log_sca_roi_Z_to_standard_smooth_3'
p1038
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp1039
sg79
Nsg80
Nsb(dp1040
sg1
(g92
g3
Ntp1041
Rp1042
(dp1043
g7
(dp1044
sg9
g1
(g97
g3
Ntp1045
Rp1046
(dp1047
g14
g15
(g53
tp1048
Rp1049
(dp1050
g28
g29
sg104
I3
sg14
g23
sg105
g106
sg107
g1015
sbsg108
(lp1051
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp1052
sg65
g1038
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp1053
sg79
Nsg80
Nsb(dp1054
sg1
(g92
g3
Ntp1055
Rp1056
(dp1057
g7
(dp1058
sg9
g1
(g135
g3
Ntp1059
Rp1060
(dp1061
g139
(lp1062
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp1063
Rp1064
(dp1065
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p1066
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp1067
g25
Nssg150
(lp1068
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp1069
sg65
g1038
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp1070
sg79
Nsg80
Nsb(dp1071
ssg157
(dp1072
sg159
(dp1073
g1027
(dp1074
sg1042
(dp1075
g1056
(dp1076
g163
(lp1077
(g107
g107
tp1078
a(g105
g105
tp1079
a(g104
g104
tp1080
a(g14
g14
tp1081
asssg1056
(dp1082
g1027
(dp1083
g163
(lp1084
(g25
g25
tp1085
assssg174
g1073
sg175
(dp1086
g1027
(dp1087
g1056
g1083
ssg1042
(dp1088
sg1056
(dp1089
g1042
g1076
sssg180
g1073
sbsg43
g1038
sg65
g66
sg75
g1038
sg76
g181
((lp1090
(lp1091
g184
ag181
((lp1092
(lp1093
g187
ag184
aa(lp1094
g189
ag190
aa(lp1095
g192
ag193
aa(lp1096
g195
ag196
aa(lp1097
g198
ag199
aa(lp1098
g201
ag106
aa(lp1099
g203
ag204
aa(lp1100
g206
ag207
aatp1101
Rp1102
aa(lp1103
g211
ag181
((lp1104
(lp1105
g187
ag211
aa(lp1106
g215
ag216
aa(lp1107
g218
ag219
aa(lp1108
g221
ag222
aa(lp1109
g224
ag225
aa(lp1110
g227
ag228
aa(lp1111
g230
ag231
aa(lp1112
g233
ag234
aa(lp1113
g236
ag237
aa(lp1114
g239
ag240
aa(lp1115
g242
ag243
aa(lp1116
g245
ag246
aa(lp1117
g248
ag249
aa(lp1118
g251
ag252
aa(lp1119
g254
ag255
aa(lp1120
g257
ag258
aa(lp1121
g260
ag261
aa(lp1122
g263
ag264
aa(lp1123
g266
ag267
aatp1124
Rp1125
aa(lp1126
g271
ag181
((lp1127
(lp1128
g187
ag271
aa(lp1129
g275
ag276
aatp1130
Rp1131
aatp1132
Rp1133
sg80
Nsbtp1134
a(g993
g1
(g2
g3
Ntp1135
Rp1136
(dp1137
g7
(dp1138
sg9
g1
(g742
g3
Ntp1139
Rp1140
(dp1141
g14
g15
(g746
tp1142
Rp1143
(dp1144
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp1145
tp1146
Rp1147
(dp1148
g41
S'environ_items'
p1149
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1150
Rp1151
(dp1152
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp1153
tp1154
Rp1155
(dp1156
g41
S'environ_items'
p1157
sg43
g32
sbsg44
g23
sbsg43
S'sca_roi_Z_to_standard_smooth_mean_3'
p1158
sg63
(dp1159
sg65
g66
sg67
(lp1160
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1158
sg76
Nsg77
(lp1161
sg79
Nsg80
Nsbtp1162
a(g1
(g2
g3
Ntp1163
Rp1164
(dp1165
g7
(dp1166
sg9
g1
(g10
g3
Ntp1167
Rp1168
(dp1169
g14
g15
(g16
tp1170
Rp1171
(dp1172
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1173
g36
g37
stp1174
Rp1175
(dp1176
g41
S'environ_items'
p1177
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1178
Rp1179
(dp1180
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1181
g36
g37
stp1182
Rp1183
(dp1184
g41
S'environ_items'
p1185
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_roi_Z_smooth_3'
p1186
sg63
(dp1187
sg65
g66
sg67
(lp1188
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1186
sg76
Nsg77
(lp1189
sg79
Nsg80
Nsbg1
(g2
g3
Ntp1190
Rp1191
(dp1192
g7
(dp1193
sg9
g1
(g742
g3
Ntp1194
Rp1195
(dp1196
g14
g15
(g746
tp1197
Rp1198
(dp1199
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp1200
tp1201
Rp1202
(dp1203
g41
S'environ_items'
p1204
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1205
Rp1206
(dp1207
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp1208
tp1209
Rp1210
(dp1211
g41
S'environ_items'
p1212
sg43
g32
sbsg44
g23
sbsg43
S'sca_roi_Z_smooth_mean_3'
p1213
sg63
(dp1214
sg65
g66
sg67
(lp1215
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1213
sg76
Nsg77
(lp1216
sg79
Nsg80
Nsbtp1217
a(g1191
g1
(g2
g3
Ntp1218
Rp1219
(dp1220
g7
(dp1221
sg9
g1
(g135
g3
Ntp1222
Rp1223
(dp1224
g139
(lp1225
g44
ag952
asg14
g15
(g142
tp1226
Rp1227
(dp1228
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p1229
sg952
S'sca_roi_Z_smooth'
p1230
sg44
g23
sg28
g29
sbsg148
(dp1231
g959
Nssg150
(lp1232
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp1233
Rp1234
(dp1235
g20
I00
sg146
g1229
sg952
g1230
sg44
g23
sg28
g29
sbsg43
S'sca_roi_Z_smooth_mean_to_txt_3'
p1236
sg63
(dp1237
sg65
g66
sg67
(lp1238
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1236
sg76
Nsg77
(lp1239
sg79
Nsg80
Nsbtp1240
a(g1136
g1
(g2
g3
Ntp1241
Rp1242
(dp1243
g7
(dp1244
sg9
g1
(g135
g3
Ntp1245
Rp1246
(dp1247
g139
(lp1248
g44
ag952
asg14
g15
(g142
tp1249
Rp1250
(dp1251
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p1252
sg952
S'sca_roi_Z_to_standard_smooth'
p1253
sg44
g23
sg28
g29
sbsg148
(dp1254
g959
Nssg150
(lp1255
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp1256
Rp1257
(dp1258
g20
I00
sg146
g1252
sg952
g1253
sg44
g23
sg28
g29
sbsg43
S'sca_roi_Z_to_standard_smooth_mean_to_txt_3'
p1259
sg63
(dp1260
sg65
g66
sg67
(lp1261
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1259
sg76
Nsg77
(lp1262
sg79
Nsg80
Nsbtp1263
a(g1
(g2
g3
Ntp1264
Rp1265
(dp1266
g7
(dp1267
sg9
g1
(g10
g3
Ntp1268
Rp1269
(dp1270
g14
g15
(g16
tp1271
Rp1272
(dp1273
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1274
g36
g37
stp1275
Rp1276
(dp1277
g41
S'environ_items'
p1278
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1279
Rp1280
(dp1281
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1282
g36
g37
stp1283
Rp1284
(dp1285
g41
S'environ_items'
p1286
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_seed_Z_smooth_0'
p1287
sg63
(dp1288
sg65
g66
sg67
(lp1289
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1287
sg76
Nsg77
(lp1290
sg79
Nsg80
Nsbg1
(g2
g3
Ntp1291
Rp1292
(dp1293
g7
(dp1294
sg9
g1
(g742
g3
Ntp1295
Rp1296
(dp1297
g14
g15
(g746
tp1298
Rp1299
(dp1300
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp1301
tp1302
Rp1303
(dp1304
g41
S'environ_items'
p1305
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1306
Rp1307
(dp1308
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp1309
tp1310
Rp1311
(dp1312
g41
S'environ_items'
p1313
sg43
g32
sbsg44
g23
sbsg43
S'sca_seed_Z_smooth_mean_0'
p1314
sg63
(dp1315
sg65
g66
sg67
(lp1316
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1314
sg76
Nsg77
(lp1317
sg79
Nsg80
Nsbtp1318
a(g1
(g2
g3
Ntp1319
Rp1320
(dp1321
g7
(dp1322
sg9
g1
(g10
g3
Ntp1323
Rp1324
(dp1325
g14
g15
(g16
tp1326
Rp1327
(dp1328
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1329
g36
g37
stp1330
Rp1331
(dp1332
g41
S'environ_items'
p1333
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1334
Rp1335
(dp1336
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1337
g36
g37
stp1338
Rp1339
(dp1340
g41
S'environ_items'
p1341
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_seed_Z_to_standard_smooth_0'
p1342
sg63
(dp1343
sg65
g66
sg67
(lp1344
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1342
sg76
Nsg77
(lp1345
sg79
Nsg80
Nsbg1
(g2
g3
Ntp1346
Rp1347
(dp1348
g7
(dp1349
sg9
g1
(g742
g3
Ntp1350
Rp1351
(dp1352
g14
g15
(g746
tp1353
Rp1354
(dp1355
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp1356
tp1357
Rp1358
(dp1359
g41
S'environ_items'
p1360
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1361
Rp1362
(dp1363
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp1364
tp1365
Rp1366
(dp1367
g41
S'environ_items'
p1368
sg43
g32
sbsg44
g23
sbsg43
S'sca_seed_Z_to_standard_smooth_mean_0'
p1369
sg63
(dp1370
sg65
g66
sg67
(lp1371
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1369
sg76
Nsg77
(lp1372
sg79
Nsg80
Nsbtp1373
a(g1320
g1
(g81
g3
Ntp1374
Rp1375
(dp1376
g85
g1
(g86
g3
Ntp1377
Rp1378
(dp1379
g90
(dp1380
g1
(g92
g3
Ntp1381
Rp1382
(dp1383
g7
(dp1384
sg9
g1
(g97
g3
Ntp1385
Rp1386
(dp1387
g14
g15
(g53
tp1388
Rp1389
(dp1390
g28
g29
sg25
g23
sbsg108
(lp1391
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp1392
sg65
S'log_sca_seed_Z_to_standard_smooth_0'
p1393
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp1394
sg79
Nsg80
Nsb(dp1395
sg1
(g92
g3
Ntp1396
Rp1397
(dp1398
g7
(dp1399
sg9
g1
(g97
g3
Ntp1400
Rp1401
(dp1402
g14
g15
(g53
tp1403
Rp1404
(dp1405
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g1342
sbsg108
(lp1406
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp1407
sg65
g1393
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp1408
sg79
Nsg80
Nsb(dp1409
sg1
(g92
g3
Ntp1410
Rp1411
(dp1412
g7
(dp1413
sg9
g1
(g135
g3
Ntp1414
Rp1415
(dp1416
g139
(lp1417
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp1418
Rp1419
(dp1420
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p1421
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp1422
g25
Nssg150
(lp1423
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp1424
sg65
g1393
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp1425
sg79
Nsg80
Nsb(dp1426
ssg157
(dp1427
sg159
(dp1428
g1382
(dp1429
sg1397
(dp1430
g1411
(dp1431
g163
(lp1432
(g107
g107
tp1433
a(g105
g105
tp1434
a(g104
g104
tp1435
a(g14
g14
tp1436
asssg1411
(dp1437
g1382
(dp1438
g163
(lp1439
(g25
g25
tp1440
assssg174
g1428
sg175
(dp1441
g1382
(dp1442
g1411
g1438
ssg1397
(dp1443
sg1411
(dp1444
g1397
g1431
sssg180
g1428
sbsg43
g1393
sg65
g66
sg75
g1393
sg76
g181
((lp1445
(lp1446
g184
ag181
((lp1447
(lp1448
g187
ag184
aa(lp1449
g189
ag190
aa(lp1450
g192
ag193
aa(lp1451
g195
ag196
aa(lp1452
g198
ag199
aa(lp1453
g201
ag106
aa(lp1454
g203
ag204
aa(lp1455
g206
ag207
aatp1456
Rp1457
aa(lp1458
g211
ag181
((lp1459
(lp1460
g187
ag211
aa(lp1461
g215
ag216
aa(lp1462
g218
ag219
aa(lp1463
g221
ag222
aa(lp1464
g224
ag225
aa(lp1465
g227
ag228
aa(lp1466
g230
ag231
aa(lp1467
g233
ag234
aa(lp1468
g236
ag237
aa(lp1469
g239
ag240
aa(lp1470
g242
ag243
aa(lp1471
g245
ag246
aa(lp1472
g248
ag249
aa(lp1473
g251
ag252
aa(lp1474
g254
ag255
aa(lp1475
g257
ag258
aa(lp1476
g260
ag261
aa(lp1477
g263
ag264
aa(lp1478
g266
ag267
aatp1479
Rp1480
aa(lp1481
g271
ag181
((lp1482
(lp1483
g187
ag271
aa(lp1484
g275
ag276
aatp1485
Rp1486
aatp1487
Rp1488
sg80
Nsbtp1489
a(g1292
g1
(g2
g3
Ntp1490
Rp1491
(dp1492
g7
(dp1493
sg9
g1
(g135
g3
Ntp1494
Rp1495
(dp1496
g139
(lp1497
g44
ag952
asg14
g15
(g142
tp1498
Rp1499
(dp1500
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p1501
sg952
S'sca_seed_Z_smooth'
p1502
sg44
g23
sg28
g29
sbsg148
(dp1503
g959
Nssg150
(lp1504
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp1505
Rp1506
(dp1507
g20
I00
sg146
g1501
sg952
g1502
sg44
g23
sg28
g29
sbsg43
S'sca_seed_Z_smooth_mean_to_txt_0'
p1508
sg63
(dp1509
sg65
g66
sg67
(lp1510
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1508
sg76
Nsg77
(lp1511
sg79
Nsg80
Nsbtp1512
a(g1347
g1
(g2
g3
Ntp1513
Rp1514
(dp1515
g7
(dp1516
sg9
g1
(g135
g3
Ntp1517
Rp1518
(dp1519
g139
(lp1520
g44
ag952
asg14
g15
(g142
tp1521
Rp1522
(dp1523
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p1524
sg952
S'sca_seed_Z_to_standard_smooth'
p1525
sg44
g23
sg28
g29
sbsg148
(dp1526
g959
Nssg150
(lp1527
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp1528
Rp1529
(dp1530
g20
I00
sg146
g1524
sg952
g1525
sg44
g23
sg28
g29
sbsg43
S'sca_seed_Z_to_standard_smooth_mean_to_txt_0'
p1531
sg63
(dp1532
sg65
g66
sg67
(lp1533
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1531
sg76
Nsg77
(lp1534
sg79
Nsg80
Nsbtp1535
a(g1
(g2
g3
Ntp1536
Rp1537
(dp1538
g7
(dp1539
sg9
g1
(g10
g3
Ntp1540
Rp1541
(dp1542
g14
g15
(g16
tp1543
Rp1544
(dp1545
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1546
g36
g37
stp1547
Rp1548
(dp1549
g41
S'environ_items'
p1550
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1551
Rp1552
(dp1553
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1554
g36
g37
stp1555
Rp1556
(dp1557
g41
S'environ_items'
p1558
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_seed_Z_to_standard_smooth_1'
p1559
sg63
(dp1560
sg65
g66
sg67
(lp1561
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1559
sg76
Nsg77
(lp1562
sg79
Nsg80
Nsbg1
(g81
g3
Ntp1563
Rp1564
(dp1565
g85
g1
(g86
g3
Ntp1566
Rp1567
(dp1568
g90
(dp1569
g1
(g92
g3
Ntp1570
Rp1571
(dp1572
g7
(dp1573
sg9
g1
(g135
g3
Ntp1574
Rp1575
(dp1576
g139
(lp1577
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp1578
Rp1579
(dp1580
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p1581
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp1582
g25
Nssg150
(lp1583
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp1584
sg65
S'log_sca_seed_Z_to_standard_smooth_1'
p1585
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp1586
sg79
Nsg80
Nsb(dp1587
sg1
(g92
g3
Ntp1588
Rp1589
(dp1590
g7
(dp1591
sg9
g1
(g97
g3
Ntp1592
Rp1593
(dp1594
g14
g15
(g53
tp1595
Rp1596
(dp1597
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g1559
sbsg108
(lp1598
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp1599
sg65
g1585
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp1600
sg79
Nsg80
Nsb(dp1601
sg1
(g92
g3
Ntp1602
Rp1603
(dp1604
g7
(dp1605
sg9
g1
(g97
g3
Ntp1606
Rp1607
(dp1608
g14
g15
(g53
tp1609
Rp1610
(dp1611
g28
g29
sg25
g23
sbsg108
(lp1612
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp1613
sg65
g1585
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp1614
sg79
Nsg80
Nsb(dp1615
ssg157
(dp1616
sg159
(dp1617
g1571
(dp1618
g1603
(dp1619
g163
(lp1620
(g25
g25
tp1621
asssg1589
(dp1622
g1571
(dp1623
g163
(lp1624
(g107
g107
tp1625
a(g105
g105
tp1626
a(g104
g104
tp1627
a(g14
g14
tp1628
asssg1603
(dp1629
ssg174
g1617
sg175
(dp1630
g1571
(dp1631
g1589
g1623
ssg1589
(dp1632
sg1603
(dp1633
g1571
g1619
sssg180
g1617
sbsg43
g1585
sg65
g66
sg75
g1585
sg76
g181
((lp1634
(lp1635
g184
ag181
((lp1636
(lp1637
g187
ag184
aa(lp1638
g189
ag190
aa(lp1639
g192
ag193
aa(lp1640
g195
ag196
aa(lp1641
g198
ag199
aa(lp1642
g201
ag106
aa(lp1643
g203
ag204
aa(lp1644
g206
ag207
aatp1645
Rp1646
aa(lp1647
g211
ag181
((lp1648
(lp1649
g187
ag211
aa(lp1650
g215
ag216
aa(lp1651
g218
ag219
aa(lp1652
g221
ag222
aa(lp1653
g224
ag225
aa(lp1654
g227
ag228
aa(lp1655
g230
ag231
aa(lp1656
g233
ag234
aa(lp1657
g236
ag237
aa(lp1658
g239
ag240
aa(lp1659
g242
ag243
aa(lp1660
g245
ag246
aa(lp1661
g248
ag249
aa(lp1662
g251
ag252
aa(lp1663
g254
ag255
aa(lp1664
g257
ag258
aa(lp1665
g260
ag261
aa(lp1666
g263
ag264
aa(lp1667
g266
ag267
aatp1668
Rp1669
aa(lp1670
g271
ag181
((lp1671
(lp1672
g187
ag271
aa(lp1673
g275
ag276
aatp1674
Rp1675
aatp1676
Rp1677
sg80
Nsbtp1678
a(g1537
g1
(g2
g3
Ntp1679
Rp1680
(dp1681
g7
(dp1682
sg9
g1
(g742
g3
Ntp1683
Rp1684
(dp1685
g14
g15
(g746
tp1686
Rp1687
(dp1688
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp1689
tp1690
Rp1691
(dp1692
g41
S'environ_items'
p1693
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1694
Rp1695
(dp1696
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp1697
tp1698
Rp1699
(dp1700
g41
S'environ_items'
p1701
sg43
g32
sbsg44
g23
sbsg43
S'sca_seed_Z_to_standard_smooth_mean_1'
p1702
sg63
(dp1703
sg65
g66
sg67
(lp1704
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1702
sg76
Nsg77
(lp1705
sg79
Nsg80
Nsbtp1706
a(g1
(g2
g3
Ntp1707
Rp1708
(dp1709
g7
(dp1710
sg9
g1
(g10
g3
Ntp1711
Rp1712
(dp1713
g14
g15
(g16
tp1714
Rp1715
(dp1716
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1717
g36
g37
stp1718
Rp1719
(dp1720
g41
S'environ_items'
p1721
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1722
Rp1723
(dp1724
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp1725
g36
g37
stp1726
Rp1727
(dp1728
g41
S'environ_items'
p1729
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_seed_Z_smooth_1'
p1730
sg63
(dp1731
sg65
g66
sg67
(lp1732
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1730
sg76
Nsg77
(lp1733
sg79
Nsg80
Nsbg1
(g2
g3
Ntp1734
Rp1735
(dp1736
g7
(dp1737
sg9
g1
(g742
g3
Ntp1738
Rp1739
(dp1740
g14
g15
(g746
tp1741
Rp1742
(dp1743
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp1744
tp1745
Rp1746
(dp1747
g41
S'environ_items'
p1748
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp1749
Rp1750
(dp1751
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g753
sg751
g23
sg30
g31
sg32
g1
(g33
g34
(dp1752
tp1753
Rp1754
(dp1755
g41
S'environ_items'
p1756
sg43
g32
sbsg44
g23
sbsg43
S'sca_seed_Z_smooth_mean_1'
p1757
sg63
(dp1758
sg65
g66
sg67
(lp1759
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1757
sg76
Nsg77
(lp1760
sg79
Nsg80
Nsbtp1761
a(g1735
g1
(g2
g3
Ntp1762
Rp1763
(dp1764
g7
(dp1765
sg9
g1
(g135
g3
Ntp1766
Rp1767
(dp1768
g139
(lp1769
g44
ag952
asg14
g15
(g142
tp1770
Rp1771
(dp1772
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p1773
sg952
S'sca_seed_Z_smooth'
p1774
sg44
g23
sg28
g29
sbsg148
(dp1775
g959
Nssg150
(lp1776
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp1777
Rp1778
(dp1779
g20
I00
sg146
g1773
sg952
g1774
sg44
g23
sg28
g29
sbsg43
S'sca_seed_Z_smooth_mean_to_txt_1'
p1780
sg63
(dp1781
sg65
g66
sg67
(lp1782
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1780
sg76
Nsg77
(lp1783
sg79
Nsg80
Nsbtp1784
a(g1680
g1
(g2
g3
Ntp1785
Rp1786
(dp1787
g7
(dp1788
sg9
g1
(g135
g3
Ntp1789
Rp1790
(dp1791
g139
(lp1792
g44
ag952
asg14
g15
(g142
tp1793
Rp1794
(dp1795
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p1796
sg952
S'sca_seed_Z_to_standard_smooth'
p1797
sg44
g23
sg28
g29
sbsg148
(dp1798
g959
Nssg150
(lp1799
g959
asg152
Nsbsg51
Nsg52
g15
(g53
tp1800
Rp1801
(dp1802
g20
I00
sg146
g1796
sg952
g1797
sg44
g23
sg28
g29
sbsg43
S'sca_seed_Z_to_standard_smooth_mean_to_txt_1'
p1803
sg63
(dp1804
sg65
g66
sg67
(lp1805
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1803
sg76
Nsg77
(lp1806
sg79
Nsg80
Nsbtp1807
a(g1
(g92
g3
Ntp1808
Rp1809
(dp1810
g7
(dp1811
sg9
g1
(g135
g3
Ntp1812
Rp1813
(dp1814
g139
(lp1815
S'subject'
p1816
aS'scan'
p1817
aS'subject_map'
p1818
aS'start_indx'
p1819
aS'stop_indx'
p1820
asg14
g15
(g142
tp1821
Rp1822
(dp1823
g20
I00
sg28
g29
sg1817
g23
sg146
S'S\'def get_scan_params(subject, scan, subject_map, start_indx, stop_indx):\\n\\n    """\\n    Method to extract slice timing correction parameters\\n    and scan parameters.\\n\\n    Parameters\\n    ----------\\n    subject: a string\\n        subject id\\n    scan : a string\\n        scan id\\n    subject_map : a dictionary\\n        subject map containing all subject information\\n    start_indx : an integer\\n        starting volume index\\n    stop_indx : an integer\\n        ending volume index\\n\\n    Returns\\n    -------\\n    TR : a string\\n        TR value\\n    pattern : a string\\n        slice aquisition pattern string or file path\\n    ref_slice : an integer\\n        reference slice which is used to allign all other slices\\n    first_tr : an integer\\n        starting TR or starting volume index\\n    last_tr : an integer\\n        ending TR or ending volume index\\n    """\\n\\n    import os\\n    import warnings\\n\\n    def check(val, throw_exception):\\n\\n        if isinstance(subject_map[\\\'scan_parameters\\\'][val], dict):\\n            ret_val = subject_map[\\\'scan_parameters\\\'][val][scan]\\n        else:\\n            ret_val = subject_map[\\\'scan_parameters\\\'][val]\\n\\n        if ret_val == \\\'None\\\':\\n            if throw_exception:\\n                raise Exception("None Parameter Value for %s for subject %s" % (val, subject))\\n            else:\\n                ret_val = None\\n\\n        if ret_val == \\\'\\\' and throw_exception:\\n            raise Exception("Missing Value for %s for subject %s" % (val, subject))\\n\\n        return ret_val\\n\\n    check2 = lambda val : val if val == None or val == \\\'\\\' else int(val)\\n\\n    TR = float(check(\\\'tr\\\', True))\\n    pattern = str(check(\\\'acquisition\\\', True))\\n    ref_slice = int(check(\\\'reference\\\', True))\\n    first_tr = check2(check(\\\'first_tr\\\', False))\\n    last_tr = check2(check(\\\'last_tr\\\', False))\\n    unit = \\\'s\\\'\\n    # if empty override with config information\\n    if first_tr == \\\'\\\':\\n        first_tr = start_indx\\n\\n    if last_tr == \\\'\\\':\\n        last_tr = stop_indx\\n\\n    if pattern not in [\\\'alt+z\\\', \\\'altplus\\\', \\\'alt+z2\\\', \\\'alt-z\\\', \\\'altminus\\\',\\n                   \\\'alt-z2\\\', \\\'seq+z\\\', \\\'seqplus\\\', \\\'seq-z\\\', \\\'seqminus\\\']:\\n        if not os.path.exists(pattern):\\n            raise Exception ("Invalid Pattern file path %s , Please provide the correct path" % pattern)\\n        else:\\n            lines = open(pattern, \\\'r\\\').readlines()\\n            if len(lines) < 2:\\n                raise Exception(\\\'Invalid slice timing file format. The file should contain \\\'\\\\\\n                                \\\'only one value per row. Use new line char as delimiter\\\')\\n            pattern = \\\'@\\\' + pattern\\n\\n            slice_timings = [float(l.rstrip(\\\'\\\\r\\\\n\\\')) for l in lines]\\n            slice_timings.sort()\\n            max_slice_offset = slice_timings[-1]\\n            # checking if the unit of TR and slice timing match or not\\n            # if slice timing in ms convert TR to ms as well\\n            if  max_slice_offset > TR:\\n                warnings.warn("TR is in seconds and slice timings are in milliseconds."\\\\\\n                              "Converting TR into milliseconds")\\n                TR = TR * 1000\\n                print "New TR value %.2f ms" % TR\\n                unit = \\\'ms\\\'\\n\\n    else:\\n        # check to see, if TR is in milliseconds, convert it into seconds\\n        if TR > 10:\\n            warnings.warn(\\\'TR is in milliseconds, Converting it into seconds\\\')\\n            TR = TR / 1000.0\\n            print "New TR value %.2f s" % TR\\n            unit = \\\'s\\\'\\n\\n    print "scan_parameters -> ", subject, scan, str(TR) + unit, pattern, ref_slice, first_tr, last_tr\\n\\n    return str(TR) + unit, pattern, ref_slice, first_tr, last_tr\\n\'\n.'
p1824
sg1820
Nsg1818
(dp1825
S'scan_parameters'
p1826
(dp1827
S'acquisition'
p1828
S'seq+z'
p1829
sS'tr'
p1830
S'2.5'
p1831
sS'reference'
p1832
S'24'
p1833
sS'last_tr'
p1834
S''
p1835
sS'first_tr'
p1836
g1835
ssS'subject_id'
p1837
S'0010128'
p1838
sS'anat'
p1839
S'/home/rtungaraza/CPAC_testData/data/unsorted/0010128/session_1/anat_1/mprage.nii.gz'
p1840
sS'unique_id'
p1841
S'session_1'
p1842
sS'rest'
p1843
(dp1844
S'rest_1_rest'
p1845
S'/home/rtungaraza/CPAC_testData/data/unsorted/0010128/session_1/rest_1/rest.nii.gz'
p1846
sssg1819
I0
sg1816
g23
sbsg148
(dp1847
g1819
NsS'tpattern'
p1848
NsS'tr'
p1849
NsS'ref_slice'
p1850
Nsg1820
Nssg150
(lp1851
g1849
ag1848
ag1850
ag1819
ag1820
asg152
Nsbsg51
Nsg43
S'scan_params_0'
p1852
sg63
(dp1853
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1852
sg76
Nsg77
(lp1854
sg79
Nsg80
Nsbg1
(g81
g3
Ntp1855
Rp1856
(dp1857
g85
g1
(g86
g3
Ntp1858
Rp1859
(dp1860
g90
(dp1861
g1
(g92
g3
Ntp1862
Rp1863
(dp1864
g7
(dp1865
sg9
g1
(cnipype.interfaces.afni.preprocess
TShift
p1866
g3
Ntp1867
Rp1868
(dp1869
g14
g15
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p1870
tp1871
Rp1872
(dp1873
g20
I00
sg28
g29
sg1848
g23
sg25
g23
sg1849
g23
sg26
g23
sS'interp'
p1874
g23
sg752
S'NIFTI_GZ'
p1875
sS'tzero'
p1876
g23
sS'ignore'
p1877
g23
sS'rltplus'
p1878
g23
sg30
g31
sS'tslice'
p1879
g23
sg44
g23
sS'rlt'
p1880
g23
sg32
g1
(g33
g34
(dp1881
tp1882
Rp1883
(dp1884
g41
S'environ_items'
p1885
sg43
g32
sbsbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_slice_timing_correction'
p1886
sg63
(dp1887
sg65
S'func_preproc_automask_0'
p1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1886
sg76
Nsg77
(lp1889
sg79
Nsg80
Nsb(dp1890
sg1
(g92
g3
Ntp1891
Rp1892
(dp1893
g7
(dp1894
sg9
g1
(cnipype.interfaces.afni.preprocess
Volreg
p1895
g3
Ntp1896
Rp1897
(dp1898
g14
g15
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p1899
tp1900
Rp1901
(dp1902
S'oned_file'
p1903
g23
sg20
I00
sS'verbose'
p1904
g23
sS'timeshift'
p1905
g23
sS'basefile'
p1906
g23
sg26
S'-Fourier -twopass'
p1907
sg752
g1875
sS'zpad'
p1908
I4
sg30
g31
sS'md1d_file'
p1909
g23
sg44
g23
sS'copyorigin'
p1910
g23
sg32
g1
(g33
g34
(dp1911
tp1912
Rp1913
(dp1914
g41
S'environ_items'
p1915
sg43
g32
sbsS'oned_matrix_save'
p1916
g23
sg28
g29
sg25
g23
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_motion_correct'
p1917
sg63
(dp1918
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1917
sg76
Nsg77
(lp1919
sg79
Nsg80
Nsb(dp1920
sg1
(g92
g3
Ntp1921
Rp1922
(dp1923
g7
(dp1924
sg9
g1
(cnipype.interfaces.afni.preprocess
Automask
p1925
g3
Ntp1926
Rp1927
(dp1928
g14
g15
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p1929
tp1930
Rp1931
(dp1932
g20
I00
sg28
g29
sg26
g23
sS'erode'
p1933
g23
sg25
g23
sS'dilate'
p1934
g23
sS'clfrac'
p1935
g23
sg752
g1875
sS'brain_file'
p1936
g23
sg30
g31
sg32
g1
(g33
g34
(dp1937
tp1938
Rp1939
(dp1940
g41
S'environ_items'
p1941
sg43
g32
sbsg44
g23
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_get_brain_mask'
p1942
sg63
(dp1943
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1942
sg76
Nsg77
(lp1944
sg79
Nsg80
Nsb(dp1945
sg1
(g92
g3
Ntp1946
Rp1947
(dp1948
g7
(dp1949
sg9
g1
(cnipype.interfaces.afni.preprocess
Calc
p1950
g3
Ntp1951
Rp1952
(dp1953
g14
g15
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p1954
tp1955
Rp1956
(dp1957
S'stop_idx'
p1958
g23
sg20
I00
sg28
g29
sg25
g23
sS'expr'
p1959
S'a'
p1960
sg26
g23
sg752
g1875
sS'in_file_b'
p1961
g23
sS'in_file_c'
p1962
g23
sS'in_file_a'
p1963
g23
sg32
g1
(g33
g34
(dp1964
tp1965
Rp1966
(dp1967
g41
S'environ_items'
p1968
sg43
g32
sbsS'single_idx'
p1969
g23
sS'other'
p1970
g23
sS'start_idx'
p1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_drop_trs'
p1972
sg63
(dp1973
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1972
sg76
Nsg77
(lp1974
sg79
Nsg80
Nsb(dp1975
sg1
(g92
g3
Ntp1976
Rp1977
(dp1978
g7
(dp1979
sg9
g1
(cnipype.interfaces.fsl.utils
ImageMaths
p1980
g3
Ntp1981
Rp1982
(dp1983
g14
g15
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p1984
tp1985
Rp1986
(dp1987
g20
I00
sg28
g29
sg24
S'-Tmin -bin'
p1988
sS'out_data_type'
p1989
S'char'
p1990
sg25
g23
sg26
g23
sS'in_file2'
p1991
g23
sg30
g31
sg32
g1
(g33
g34
(dp1992
g36
g37
stp1993
Rp1994
(dp1995
g41
S'environ_items'
p1996
sg43
g32
sbsg44
g23
sg45
g37
sS'suffix'
p1997
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_mask_normalize'
p1998
sg63
(dp1999
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g1998
sg76
Nsg77
(lp2000
sg79
Nsg80
Nsb(dp2001
sg1
(g92
g3
Ntp2002
Rp2003
(dp2004
g7
(dp2005
sg9
g1
(cnipype.interfaces.afni.preprocess
Resample
p2006
g3
Ntp2007
Rp2008
(dp2009
g14
g15
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2010
tp2011
Rp2012
(dp2013
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg752
g1875
sS'resample_mode'
p2014
g23
sS'voxel_size'
p2015
g23
sg30
g31
sS'master'
p2016
g23
sg44
g23
sg32
g1
(g33
g34
(dp2017
tp2018
Rp2019
(dp2020
g41
S'environ_items'
p2021
sg43
g32
sbsS'orientation'
p2022
S'RPI'
p2023
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_reorient'
p2024
sg63
(dp2025
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2024
sg76
Nsg77
(lp2026
sg79
Nsg80
Nsb(dp2027
sg1
(g92
g3
Ntp2028
Rp2029
(dp2030
g7
(dp2031
sg9
g1
(g135
g3
Ntp2032
Rp2033
(dp2034
g139
(lp2035
S'in_files'
p2036
ag1958
ag1971
asg14
g15
(g142
tp2037
Rp2038
(dp2039
g1958
g23
sg20
I00
sg146
S'S\'def get_idx(in_files, stop_idx=None, start_idx=None):\\n\\n    """\\n    Method to get the first and the last slice for\\n    the functional run. It verifies the user specified\\n    first and last slice. If the values are not valid, it \\n    calculates and returns the very first and the last slice \\n\\n    Parameters\\n    ----------\\n    in_file : string (nifti file)\\n       Path to input functional run\\n\\n    stop_idx : int\\n        Last volume to be considered, specified by user\\n        in the configuration file \\n\\n    stop_idx : int\\n        First volume to be considered, specified by user \\n        in the configuration file \\n\\n    Returns\\n    -------\\n    stop_idx :  int\\n        Value of first slice to consider for the functional run \\n\\n    start_idx : int \\n        Value of last slice to consider for the functional run\\n\\n    """\\n\\n    #stopidx = None\\n    #startidx = None\\n    from nibabel import load\\n\\n    img = load(in_files)\\n    hdr = img.get_header()\\n    nvols = int(hdr.get_data_shape()[3])\\n\\n\\n    if (start_idx == None) or (start_idx < 0) or (start_idx > (nvols - 1)):\\n        startidx = 0\\n    else:\\n        startidx = start_idx\\n\\n    if (stop_idx == None) or (stop_idx > (nvols - 1)):\\n        stopidx = nvols - 1\\n    else:\\n        stopidx = stop_idx\\n\\n    return stopidx, startidx\\n\'\n.'
p2040
sg2036
g23
sg1971
g23
sg28
g29
sbsg148
(dp2041
S'startidx'
p2042
NsS'stopidx'
p2043
Nssg150
(lp2044
g2043
ag2042
asg152
Nsbsg51
Nsg43
S'func_get_idx'
p2045
sg63
(dp2046
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2045
sg76
Nsg77
(lp2047
sg79
Nsg80
Nsb(dp2048
sg1
(g92
g3
Ntp2049
Rp2050
(dp2051
g7
(dp2052
sg9
g1
(cnipype.interfaces.afni.preprocess
Refit
p2053
g3
Ntp2054
Rp2055
(dp2056
g14
g15
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2057
tp2058
Rp2059
(dp2060
g20
I00
sg28
g29
sS'deoblique'
p2061
I01
sg26
g23
sS'yorigin'
p2062
g23
sg30
g31
sg32
g1
(g33
g34
(dp2063
tp2064
Rp2065
(dp2066
g41
S'environ_items'
p2067
sg43
g32
sbsg44
g23
sS'xorigin'
p2068
g23
sS'zorigin'
p2069
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
S'func_deoblique'
p2070
sg63
(dp2071
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2070
sg76
Nsg77
(lp2072
sg79
Nsg80
Nsb(dp2073
sg1
(g92
g3
Ntp2074
Rp2075
(dp2076
g7
(dp2077
sg9
g1
(g97
g3
Ntp2078
Rp2079
(dp2080
g14
g15
(g53
tp2081
Rp2082
(dp2083
g28
g29
sg1849
g23
sg1850
g23
sS'acquisition'
p2084
g23
sbsg108
(lp2085
g1849
ag2084
ag1850
asg110
I01
sbsg51
Nsg43
S'scan_params'
p2086
sg63
(dp2087
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2086
sg76
Nsg77
(lp2088
sg79
Nsg80
Nsb(dp2089
sg1
(g92
g3
Ntp2090
Rp2091
(dp2092
g7
(dp2093
sg9
g1
(g1980
g3
Ntp2094
Rp2095
(dp2096
g14
g15
(g1984
tp2097
Rp2098
(dp2099
g20
I00
sg28
g29
sg24
S'-ing 10000'
p2100
sg1989
S'float'
p2101
sg25
g23
sg26
g23
sg1991
g23
sg30
g31
sg32
g1
(g33
g34
(dp2102
g36
g37
stp2103
Rp2104
(dp2105
g41
S'environ_items'
p2106
sg43
g32
sbsg44
g23
sg45
g37
sg1997
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_normalize'
p2107
sg63
(dp2108
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2107
sg76
Nsg77
(lp2109
sg79
Nsg80
Nsb(dp2110
sg1
(g92
g3
Ntp2111
Rp2112
(dp2113
g7
(dp2114
sg9
g1
(cnipype.interfaces.afni.preprocess
TStat
p2115
g3
Ntp2116
Rp2117
(dp2118
g14
g15
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2119
tp2120
Rp2121
(dp2122
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g1875
sg30
g31
sg32
g1
(g33
g34
(dp2123
tp2124
Rp2125
(dp2126
g41
S'environ_items'
p2127
sg43
g32
sbsg44
g23
sS'options'
p2128
S'-mean'
p2129
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2130
sg72
Nsg69
Nsg79
Nsg43
S'func_get_mean_motion'
p2131
sg65
g1888
sg71
I00
sg73
Nsg74
I00
sg75
g2131
sg76
Nsg77
(lp2132
sg80
Nsb(dp2133
sg1
(g92
g3
Ntp2134
Rp2135
(dp2136
g7
(dp2137
sg9
g1
(g2115
g3
Ntp2138
Rp2139
(dp2140
g14
g15
(g2119
tp2141
Rp2142
(dp2143
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g1875
sg30
g31
sg32
g1
(g33
g34
(dp2144
tp2145
Rp2146
(dp2147
g41
S'environ_items'
p2148
sg43
g32
sbsg44
g23
sg2128
g2129
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_get_mean_RPI'
p2149
sg63
(dp2150
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2149
sg76
Nsg77
(lp2151
sg79
Nsg80
Nsb(dp2152
sg1
(g92
g3
Ntp2153
Rp2154
(dp2155
g7
(dp2156
sg9
g1
(g2115
g3
Ntp2157
Rp2158
(dp2159
g14
g15
(g2119
tp2160
Rp2161
(dp2162
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg752
g1875
sg30
g31
sg32
g1
(g33
g34
(dp2163
tp2164
Rp2165
(dp2166
g41
S'environ_items'
p2167
sg43
g32
sbsg44
g23
sg2128
g2129
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_mean_skullstrip'
p2168
sg63
(dp2169
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2168
sg76
Nsg77
(lp2170
sg79
Nsg80
Nsb(dp2171
sg1
(g92
g3
Ntp2172
Rp2173
(dp2174
g7
(dp2175
sg9
g1
(g97
g3
Ntp2176
Rp2177
(dp2178
g14
g15
(g53
tp2179
Rp2180
(dp2181
S'max_displacement'
p2182
g23
sS'motion_correct_ref'
p2183
g23
sg28
g29
sS'preprocessed_mask'
p2184
g23
sg750
g23
sS'refit'
p2185
g23
sS'skullstrip'
p2186
g23
sS'reorient'
p2187
g23
sS'preprocessed'
p2188
g23
sS'drop_tr'
p2189
g23
sS'slice_time_corrected'
p2190
g23
sS'movement_parameters'
p2191
g23
sS'example_func'
p2192
g23
sg1916
g23
sS'reorient_mean'
p2193
g23
sS'motion_correct'
p2194
g23
sbsg108
(lp2195
g2189
ag2185
ag2187
ag2193
ag2194
ag2183
ag2191
ag2182
ag750
ag2186
ag2192
ag2188
ag2184
ag2190
ag1916
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp2196
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp2197
sg79
Nsg80
Nsb(dp2198
sg1
(g92
g3
Ntp2199
Rp2200
(dp2201
g7
(dp2202
sg9
g1
(g1895
g3
Ntp2203
Rp2204
(dp2205
g14
g15
(g1899
tp2206
Rp2207
(dp2208
g1903
g23
sg20
I00
sg1904
g23
sg1905
g23
sg1906
g23
sg26
g1907
sg752
g1875
sg1908
I4
sg30
g31
sg1909
S'max_displacement.1D'
p2209
sg44
g23
sg1910
g23
sg32
g1
(g33
g34
(dp2210
tp2211
Rp2212
(dp2213
g41
S'environ_items'
p2214
sg43
g32
sbsg1916
g23
sg28
g29
sg25
g23
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2215
sg72
Nsg69
Nsg79
Nsg43
S'func_motion_correct_A'
p2216
sg65
g1888
sg71
I00
sg73
Nsg74
I00
sg75
g2216
sg76
Nsg77
(lp2217
sg80
Nsb(dp2218
sg1
(g92
g3
Ntp2219
Rp2220
(dp2221
g7
(dp2222
sg9
g1
(g1950
g3
Ntp2223
Rp2224
(dp2225
g14
g15
(g1954
tp2226
Rp2227
(dp2228
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
S'a*b'
p2229
sg26
g23
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp2230
tp2231
Rp2232
(dp2233
g41
S'environ_items'
p2234
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_edge_detect'
p2235
sg63
(dp2236
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2235
sg76
Nsg77
(lp2237
sg79
Nsg80
Nsb(dp2238
sg1
(g92
g3
Ntp2239
Rp2240
(dp2241
g7
(dp2242
sg9
g1
(g97
g3
Ntp2243
Rp2244
(dp2245
g14
g15
(g53
tp2246
Rp2247
(dp2248
g1958
g23
sg28
g29
sg1971
g23
sS'rest'
p2249
g23
sbsg108
(lp2250
g2249
ag1971
ag1958
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp2251
sg65
g1888
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp2252
sg79
Nsg80
Nsb(dp2253
ssg157
(dp2254
sg159
(dp2255
g1863
(dp2256
g2173
(dp2257
g163
(lp2258
(g25
g2190
tp2259
assg2050
(dp2260
g163
(lp2261
(g25
g44
tp2262
asssg1892
(dp2263
g2112
(dp2264
g163
(lp2265
(g25
g44
tp2266
asssg1922
(dp2267
g2173
(dp2268
g163
(lp2269
(g25
g750
tp2270
assg2220
(dp2271
g163
(lp2272
(g25
g1961
tp2273
asssg1947
(dp2274
g2173
(dp2275
g163
(lp2276
(g25
g2189
tp2277
assg1863
(dp2278
g163
(lp2279
(g25
g44
tp2280
asssg1977
(dp2281
g2173
(dp2282
g163
(lp2283
(g25
g2184
tp2284
asssg2003
(dp2285
g2173
(dp2286
g163
(lp2287
(g25
g2187
tp2288
assg1892
(dp2289
g163
(lp2290
(g25
g44
tp2291
assg2200
(dp2292
g163
(lp2293
(g25
g44
tp2294
assg2135
(dp2295
g163
(lp2296
(g25
g44
tp2297
asssg2029
(dp2298
g1947
(dp2299
g163
(lp2300
(g2042
g1971
tp2301
a(g2043
g1958
tp2302
asssg2050
(dp2303
g2173
(dp2304
g163
(lp2305
(g25
g2185
tp2306
assg2003
(dp2307
g163
(lp2308
(g25
g44
tp2309
asssg2075
(dp2310
g1863
(dp2311
g163
(lp2312
(g1849
g1849
tp2313
a(g2084
g1848
tp2314
a(g1850
g1879
tp2315
asssg2091
(dp2316
g2173
(dp2317
g163
(lp2318
(g25
g2188
tp2319
assg1977
(dp2320
g163
(lp2321
(g25
g44
tp2322
asssg2112
(dp2323
g2173
(dp2324
g163
(lp2325
(g25
g2183
tp2326
assg2200
(dp2327
g163
(lp2328
(g25
g1906
tp2329
asssg2135
(dp2330
g1892
(dp2331
g163
(lp2332
(g25
g1906
tp2333
asssg2154
(dp2334
g2173
(dp2335
g163
(lp2336
(g25
g2192
tp2337
asssg2173
(dp2338
sg2200
(dp2339
g2173
(dp2340
g163
(lp2341
(g25
g2194
tp2342
a(g1909
g2182
tp2343
a(g1903
g2191
tp2344
a(g1916
g1916
tp2345
assg1922
(dp2346
g163
(lp2347
(g25
g44
tp2348
assg2220
(dp2349
g163
(lp2350
(g25
g1963
tp2351
asssg2220
(dp2352
g2173
(dp2353
g163
(lp2354
(g25
g2186
tp2355
assg2091
(dp2356
g163
(lp2357
(g25
g44
tp2358
assg2154
(dp2359
g163
(lp2360
(g25
g44
tp2361
asssg2240
(dp2362
g1947
(dp2363
g163
(lp2364
(g2249
g1963
tp2365
assg2029
(dp2366
g163
(lp2367
(g2249
g2036
tp2368
a(g1971
g1971
tp2369
a(g1958
g1958
tp2370
assssg174
g2255
sg175
(dp2371
g1863
(dp2372
g1947
g2278
sg2075
g2311
ssg1892
(dp2373
g2003
g2289
sg2135
g2331
ssg1922
(dp2374
g2200
g2346
ssg1947
(dp2375
g2240
g2363
sg2029
g2299
ssg1977
(dp2376
g2091
g2320
ssg2003
(dp2377
g2050
g2307
ssg2029
(dp2378
g2240
g2366
ssg2050
(dp2379
g1863
g2260
ssg2075
(dp2380
sg2091
(dp2381
g2220
g2356
ssg2112
(dp2382
g1892
g2264
ssg2135
(dp2383
g2003
g2295
ssg2154
(dp2384
g2220
g2359
ssg2173
(dp2385
g1863
g2257
sg1922
g2268
sg2091
g2317
sg1977
g2282
sg2003
g2286
sg2200
g2340
sg2050
g2304
sg1947
g2275
sg2112
g2324
sg2220
g2353
sg2154
g2335
ssg2200
(dp2386
g2003
g2292
sg2112
g2327
ssg2220
(dp2387
g2200
g2349
sg1922
g2271
ssg2240
(dp2388
ssg180
g2255
sbsg43
g1888
sg65
g66
sg75
g1888
sg76
g181
((lp2389
(lp2390
g184
ag181
((lp2391
(lp2392
g187
ag184
aa(lp2393
g189
ag190
aa(lp2394
g192
ag193
aa(lp2395
g195
ag196
aa(lp2396
g198
ag199
aa(lp2397
g201
ag106
aa(lp2398
g203
ag204
aa(lp2399
g206
ag207
aatp2400
Rp2401
aa(lp2402
g211
ag181
((lp2403
(lp2404
g187
ag211
aa(lp2405
g215
ag216
aa(lp2406
g218
ag219
aa(lp2407
g221
ag222
aa(lp2408
g224
ag225
aa(lp2409
g227
ag228
aa(lp2410
g230
ag231
aa(lp2411
g233
ag234
aa(lp2412
g236
ag237
aa(lp2413
g239
ag240
aa(lp2414
g242
ag243
aa(lp2415
g245
ag246
aa(lp2416
g248
ag249
aa(lp2417
g251
ag252
aa(lp2418
g254
ag255
aa(lp2419
g257
ag258
aa(lp2420
g260
ag261
aa(lp2421
g263
ag264
aa(lp2422
g266
ag267
aatp2423
Rp2424
aa(lp2425
g271
ag181
((lp2426
(lp2427
g187
ag271
aa(lp2428
g275
ag276
aatp2429
Rp2430
aatp2431
Rp2432
sg80
Nsbtp2433
a(g1809
g1
(g92
g3
Ntp2434
Rp2435
(dp2436
g7
(dp2437
sg9
g1
(g135
g3
Ntp2438
Rp2439
(dp2440
g139
(lp2441
g1849
asg14
g15
(g142
tp2442
Rp2443
(dp2444
g20
I00
sg146
S'S\'def get_tr (tr):\\n    """\\n    Method to return TR in seconds\\n    """\\n    import re\\n    if tr != None:\\n        tr = re.search("\\\\d+.\\\\d+", str(tr)).group(0)\\n        tr = float(tr)\\n        if tr > 10:\\n            tr = tr / 1000.0\\n    return tr\\n\'\n.'
p2445
sg1849
g23
sg28
g29
sbsg148
(dp2446
g1849
Nssg150
(lp2447
g1849
asg152
Nsbsg51
Nsg43
S'convert_tr_0'
p2448
sg63
(dp2449
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2448
sg76
Nsg77
(lp2450
sg79
Nsg80
Nsbtp2451
a(g1
(g92
g3
Ntp2452
Rp2453
(dp2454
g7
(dp2455
sg9
g1
(g742
g3
Ntp2456
Rp2457
(dp2458
g14
g15
(g746
tp2459
Rp2460
(dp2461
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp2462
tp2463
Rp2464
(dp2465
g41
S'environ_items'
p2466
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_smooth_mean_0'
p2467
sg63
(dp2468
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2467
sg76
Nsg77
(lp2469
sg79
Nsg80
Nsbg1
(g92
g3
Ntp2470
Rp2471
(dp2472
g7
(dp2473
sg9
g1
(g135
g3
Ntp2474
Rp2475
(dp2476
g139
(lp2477
g44
ag952
asg14
g15
(g142
tp2478
Rp2479
(dp2480
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p2481
sg952
S'alff_smooth'
p2482
sg44
g23
sg28
g29
sbsg148
(dp2483
g959
Nssg150
(lp2484
g959
asg152
Nsbsg51
Nsg43
S'alff_smooth_mean_to_txt_0'
p2485
sg63
(dp2486
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2485
sg76
Nsg77
(lp2487
sg79
Nsg80
Nsbtp2488
a(g1
(g92
g3
Ntp2489
Rp2490
(dp2491
g7
(dp2492
sg9
g1
(g135
g3
Ntp2493
Rp2494
(dp2495
g139
(lp2496
S'realigned_file'
p2497
aS'bandpass_freqs'
p2498
aS'sample_period'
p2499
asg14
g15
(g142
tp2500
Rp2501
(dp2502
g20
I00
sg28
g29
sg2497
g23
sg146
S'S\'def bandpass_voxels(realigned_file, bandpass_freqs, sample_period = None):\\n    """\\n    Performs ideal bandpass filtering on each voxel time-series.\\n\\n    Parameters\\n    ----------\\n    realigned_file : string\\n        Path of a realigned nifti file.\\n    bandpass_freqs : tuple\\n        Tuple containing the bandpass frequencies. (LowCutoff, HighCutoff)\\n    sample_period : float, optional\\n        Length of sampling period in seconds.  If not specified,\\n        this value is read from the nifti file provided.\\n\\n    Returns\\n    -------\\n    bandpassed_file : string\\n        Path of filtered output (nifti file).\\n\\n    """\\n\\n    import os\\n    import nibabel as nb\\n    import numpy as np\\n\\n    def ideal_bandpass(data, sample_period, bandpass_freqs):\\n        #Derived from YAN Chao-Gan 120504 based on REST.\\n        from scipy.fftpack import fft, ifft\\n\\n    #    sample_period = T\\n    #    LowCutoff = 10.\\n    #    HighCutoff = 15.\\n    #    data = x\\n\\n        def nextpow2(n):\\n            x = np.log2(n)\\n            return 2**np.ceil(x)\\n\\n        sample_freq = 1./sample_period\\n        sample_length = data.shape[0]\\n\\n        data_p = np.zeros(nextpow2(sample_length))\\n        data_p[:sample_length] = data\\n\\n        LowCutoff, HighCutoff = bandpass_freqs\\n\\n        if(LowCutoff is None): #No lower cutoff (low-pass filter)\\n            low_cutoff_i = 0\\n        elif(LowCutoff > sample_freq/2.): #Cutoff beyond fs/2 (all-stop filter)\\n            low_cutoff_i = int(data_p.shape[0]/2)\\n        else:\\n            low_cutoff_i = np.ceil(LowCutoff*data_p.shape[0]*sample_period).astype(\\\'int\\\')\\n\\n        if(HighCutoff > sample_freq/2. or HighCutoff is None): #Cutoff beyond fs/2 or unspecified (become a highpass filter)\\n            high_cutoff_i = int(data_p.shape[0]/2)\\n        else:\\n            high_cutoff_i = np.fix(HighCutoff*data_p.shape[0]*sample_period).astype(\\\'int\\\')\\n\\n        freq_mask = np.zeros_like(data_p, dtype=\\\'bool\\\')\\n        freq_mask[low_cutoff_i:high_cutoff_i+1] = True\\n        freq_mask[data_p.shape[0]-high_cutoff_i:data_p.shape[0]+1-low_cutoff_i] = True\\n\\n\\n        f_data = fft(data_p)\\n        f_data[freq_mask != True] = 0.\\n        data_bp = np.real_if_close(ifft(f_data)[:sample_length])\\n\\n        return data_bp\\n\\n    nii = nb.load(realigned_file)\\n    data = nii.get_data().astype(\\\'float64\\\')\\n    mask = (data != 0).sum(-1) != 0\\n    Y = data[mask].T\\n    Yc = Y - np.tile(Y.mean(0), (Y.shape[0], 1))\\n\\n    if not sample_period:\\n        hdr = nii.get_header()\\n        sample_period = float(hdr.get_zooms()[3])\\n        # Sketchy check to convert TRs in millisecond units\\n        if sample_period > 20.0:\\n            sample_period /= 1000.0\\n\\n    print \\\'Frequency filtering using sample period: \\\', sample_period, \\\'sec\\\'\\n\\n    Y_bp = np.zeros_like(Y)\\n    for j in range(Y.shape[1]):\\n        Y_bp[:,j] = ideal_bandpass(Yc[:,j], sample_period, bandpass_freqs)\\n\\n    data[mask] = Y_bp.T\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    bandpassed_file = os.path.join(os.getcwd(), \\\'bandpassed_demeaned_filtered.nii.gz\\\')\\n    img.to_filename(bandpassed_file)\\n\\n    return bandpassed_file\\n\'\n.'
p2503
sg2499
g23
sg2498
g23
sbsg148
(dp2504
S'bandpassed_file'
p2505
Nssg150
(lp2506
g2505
asg152
Nsbsg51
Nsg43
S'frequency_filter_0'
p2507
sg63
(dp2508
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g2498
(lp2509
(lp2510
F0.009
aF0.1
aatp2511
sg74
I00
sg75
g2507
sg76
Nsg77
(lp2512
sg79
Nsg80
Nsbg1
(g81
g3
Ntp2513
Rp2514
(dp2515
g85
g1
(g86
g3
Ntp2516
Rp2517
(dp2518
g90
(dp2519
g1
(g92
g3
Ntp2520
Rp2521
(dp2522
g7
(dp2523
sg9
g1
(g97
g3
Ntp2524
Rp2525
(dp2526
g14
g15
(g53
tp2527
Rp2528
(dp2529
g28
g29
sS'rest_res_filt'
p2530
g23
sS'rest_mask'
p2531
g23
sS'cluster_size'
p2532
I0
sbsg108
(lp2533
g2532
ag2530
ag2531
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp2534
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'reho_0'
p2535
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp2536
sg80
Nsb(dp2537
sg1
(g92
g3
Ntp2538
Rp2539
(dp2540
g7
(dp2541
sg9
g1
(g97
g3
Ntp2542
Rp2543
(dp2544
g14
g15
(g53
tp2545
Rp2546
(dp2547
g28
g29
sS'raw_reho_map'
p2548
g23
sS'z_score'
p2549
g23
sbsg108
(lp2550
g2548
ag2549
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp2551
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
g2535
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp2552
sg80
Nsb(dp2553
sg1
(g92
g3
Ntp2554
Rp2555
(dp2556
g7
(dp2557
sg9
g1
(g10
g3
Ntp2558
Rp2559
(dp2560
g14
g15
(g16
tp2561
Rp2562
(dp2563
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp2564
g36
g37
stp2565
Rp2566
(dp2567
g41
S'environ_items'
p2568
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2569
sg72
Nsg69
Nsg79
Nsg43
g2549
sg65
g2535
sg71
I00
sg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp2570
sg80
Nsb(dp2571
sg1
(g92
g3
Ntp2572
Rp2573
(dp2574
g7
(dp2575
sg9
g1
(g135
g3
Ntp2576
Rp2577
(dp2578
g139
(lp2579
g44
aS'mask_file'
p2580
ag2532
asg14
g15
(g142
tp2581
Rp2582
(dp2583
g20
I00
sg28
g29
sg146
S'S\'def compute_reho(in_file, mask_file, cluster_size):\\n\\n    """\\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\\n    followed by computing Kendall\\\'s coefficient concordance(KCC) of a timeseries with its neighbours\\n\\n    Parameters\\n    ----------\\n\\n    in_file : nifti file\\n        4D EPI File \\n\\n    mask_file : nifti file\\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\\n\\n    cluster_size : integer\\n        for a brain voxel the number of neighbouring brain voxels to use for KCC.\\n\\n\\n    Returns\\n    -------\\n\\n    out_file : nifti file\\n        ReHo map of the input EPI image\\n\\n    """\\n\\n    import nibabel as nb\\n    import numpy as np\\n    import os\\n    import sys\\n    from CPAC.reho.utils import f_kendall\\n\\n    out_file = None\\n\\n    res_fname = (in_file)\\n    res_mask_fname = (mask_file)\\n    CUTNUMBER = 10\\n\\n#    nvoxel = 27\\n\\n    if not (cluster_size == 27 or cluster_size == 19 or cluster_size == 7):\\n        cluster_size = 27\\n\\n    nvoxel = cluster_size\\n\\n    res_img = nb.load(res_fname)\\n    res_mask_img = nb.load(res_mask_fname)\\n\\n\\n    res_data = res_img.get_data()\\n    res_mask_data = res_mask_img.get_data()\\n\\n    print res_data.shape\\n    (n_x, n_y, n_z, n_t) = res_data.shape\\n\\n    res_data = np.reshape(res_data, (n_x*n_y*n_z, n_t), order=\\\'F\\\').T\\n\\n    Ranks_res_data = np.tile((np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\\n    #Ranks_res_data = np.tile(np.uint16(np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\\n\\n    segment_length = np.ceil(float((res_data.shape)[1])/float(CUTNUMBER))\\n\\n    for icut in range(0, CUTNUMBER):\\n\\n        segment = None\\n\\n        if not (icut == (CUTNUMBER - 1)):\\n\\n            segment = np.array(np.arange(icut * segment_length, (icut+1) * segment_length))\\n\\n        else:\\n\\n            segment = np.array(np.arange(icut * segment_length, ((res_data.shape)[1])))\\n\\n        segment = np.int64(segment[np.newaxis])\\n\\n        res_data_piece = res_data[:, segment[0]]\\n        nvoxels_piece = (res_data_piece.shape)[1]\\n\\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\\\'mergesort\\\')\\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\\\'mergesort\\\')\\n\\n        db = np.diff(res_data_sorted, 1, 0)\\n\\n        db = db == 0\\n\\n        sumdb = np.sum(db, 0)\\n\\n        temp_array = np.array(np.arange(0, n_t))\\n        temp_array = temp_array[:, np.newaxis]\\n\\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\\n\\n        if np.any(sumdb[:]):\\n\\n            tie_adjust_index = np.flatnonzero(sumdb)\\n\\n            for i in range(0, len(tie_adjust_index)):\\n\\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\\n\\n                ties = db[:, tie_adjust_index[i]]\\n\\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\\n                maxties = len(tieloc)\\n                tiecount = 0\\n\\n                while(tiecount < maxties -1):\\n                    tiestart = tieloc[tiecount]\\n                    ntied = 2\\n                    while(tieloc[tiecount + 1] == (tieloc[tiecount] + 1)):\\n                        tiecount += 1\\n                        ntied += 1\\n\\n                    ranks[tiestart:tiestart + ntied ] = np.ceil(np.float32(np.sum(ranks[tiestart:tiestart + ntied ]))/np.float32(ntied))\\n                    tiecount += 1\\n\\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\\n\\n        del db, sumdb\\n        sort_index_base = np.tile(np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1])\\n        sort_index += sort_index_base\\n        del sort_index_base\\n\\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\\n\\n        ranks_piece = ranks_piece.flatten(order=\\\'F\\\')\\n        sort_index = sort_index.flatten(order=\\\'F\\\')\\n        sorted_ranks = sorted_ranks.flatten(order=\\\'F\\\')\\n\\n        ranks_piece[sort_index] = np.array(sorted_ranks)\\n\\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\\\'F\\\')\\n\\n#        ranks_piece = np.uint16(ranks_piece)\\n\\n        del sort_index, sorted_ranks\\n\\n        Ranks_res_data[:, segment[0]] = ranks_piece\\n\\n        sys.stdout.write(\\\'.\\\')\\n\\n\\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\\\'F\\\')\\n\\n\\n    K = np.zeros((n_x, n_y, n_z))\\n\\n    mask_cluster = np.ones((3, 3, 3))\\n\\n    if nvoxel == 19:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    elif nvoxel == 7:\\n\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 1, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[0, 0, 1] = 0\\n        mask_cluster[0, 2, 1] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 1, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[1, 0, 0] = 0\\n        mask_cluster[1, 2, 0] = 0\\n        mask_cluster[1, 0, 2] = 0\\n        mask_cluster[1, 2, 2] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 1, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[2, 0, 1] = 0\\n        mask_cluster[2, 2, 1] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 1, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n\\n    for i in range(1, n_x - 1):\\n\\n        for j in range(1, n_y -1):\\n\\n            for k in range(1, n_z -1):\\n\\n\\n\\n                block = Ranks_res_data[:, i-1:i+2, j-1:j+2, k-1:k+2]\\n                mask_block = res_mask_data[i-1:i+2, j-1:j+2, k-1:k+2]\\n\\n\\n                if not(int(mask_block[1, 1, 1]) == 0):\\n\\n\\n                    if nvoxel == 19 or nvoxel == 7:\\n\\n                        mask_block = np.multiply(mask_block, mask_cluster)\\n\\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\\\'F\\\')\\n                    mask_R_block = R_block[:, np.argwhere(np.reshape(mask_block, (1, 27), order=\\\'F\\\') > 0)[:, 1]]\\n\\n                    K[i, j, k] = f_kendall(mask_R_block)\\n\\n\\n    img = nb.Nifti1Image(K, header=res_img.get_header(), affine=res_img.get_affine())\\n\\n    reho_file = os.path.join(os.getcwd(), \\\'ReHo.nii.gz\\\')\\n\\n    img.to_filename(reho_file)\\n\\n    out_file = reho_file\\n\\n    return out_file\\n\'\n.'
p2584
sg44
g23
sg2532
g23
sg2580
g23
sbsg148
(dp2585
g25
Nssg150
(lp2586
g25
asg152
Nsbsg51
Nsg70
I00
sg63
(dp2587
sg72
Nsg69
Nsg79
Nsg43
S'reho_map'
p2588
sg65
g2535
sg71
I00
sg73
Nsg74
I00
sg75
g2588
sg76
Nsg77
(lp2589
sg80
Nsb(dp2590
sg1
(g92
g3
Ntp2591
Rp2592
(dp2593
g7
(dp2594
sg9
g1
(cnipype.interfaces.fsl.utils
ImageStats
p2595
g3
Ntp2596
Rp2597
(dp2598
g14
g15
(cnipype.interfaces.fsl.utils
ImageStatsInputSpec
p2599
tp2600
Rp2601
(dp2602
g20
I00
sg28
g29
sg24
S'-k %s -m'
p2603
sS'split_4d'
p2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp2605
g36
g37
stp2606
Rp2607
(dp2608
g41
S'environ_items'
p2609
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2610
sg72
Nsg69
Nsg79
Nsg43
S'mean'
p2611
sg65
g2535
sg71
I00
sg73
Nsg74
I00
sg75
g2611
sg76
Nsg77
(lp2612
sg80
Nsb(dp2613
sg1
(g92
g3
Ntp2614
Rp2615
(dp2616
g7
(dp2617
sg9
g1
(g2595
g3
Ntp2618
Rp2619
(dp2620
g14
g15
(g2599
tp2621
Rp2622
(dp2623
g20
I00
sg28
g29
sg24
S'-k %s -s'
p2624
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp2625
g36
g37
stp2626
Rp2627
(dp2628
g41
S'environ_items'
p2629
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2630
sg72
Nsg69
Nsg79
Nsg43
S'standard_deviation'
p2631
sg65
g2535
sg71
I00
sg73
Nsg74
I00
sg75
g2631
sg76
Nsg77
(lp2632
sg80
Nsb(dp2633
sg1
(g92
g3
Ntp2634
Rp2635
(dp2636
g7
(dp2637
sg9
g1
(g135
g3
Ntp2638
Rp2639
(dp2640
g139
(lp2641
g2611
aS'std_dev'
p2642
asg14
g15
(g142
tp2643
Rp2644
(dp2645
g20
I00
sg146
S'S\'def getOpString(mean, std_dev):\\n\\n    """\\n    Generate the Operand String to be used in workflow nodes to supply \\n    mean and std deviation to alff workflow nodes\\n\\n    Parameters\\n    ----------\\n\\n    mean: string\\n        mean value in string format\\n\\n    std_dev : string\\n        std deviation value in string format\\n\\n\\n    Returns\\n    -------\\n\\n    op_string : string\\n\\n\\n    """\\n\\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\\n\\n    op_string = str1 + " -mas %s"\\n\\n    return op_string\\n\'\n.'
p2646
sg2642
g23
sg28
g29
sg2611
g23
sbsg148
(dp2647
g24
Nssg150
(lp2648
g24
asg152
Nsbsg51
Nsg70
I00
sg63
(dp2649
sg72
Nsg69
Nsg79
Nsg43
g24
sg65
g2535
sg71
I00
sg73
Nsg74
I00
sg75
g24
sg76
Nsg77
(lp2650
sg80
Nsb(dp2651
ssg159
(dp2652
g2521
(dp2653
g2615
(dp2654
g163
(lp2655
(g2531
g2580
tp2656
assg2555
(dp2657
g163
(lp2658
(g2531
g47
tp2659
assg2592
(dp2660
g163
(lp2661
(g2531
g2580
tp2662
assg2573
(dp2663
g163
(lp2664
(g2530
g44
tp2665
a(g2531
g2580
tp2666
a(g2532
g2532
tp2667
asssg2539
(dp2668
sg2555
(dp2669
g2539
(dp2670
g163
(lp2671
(g25
g2549
tp2672
asssg2573
(dp2673
g2615
(dp2674
g163
(lp2675
(g25
g44
tp2676
assg2555
(dp2677
g163
(lp2678
(g25
g44
tp2679
assg2592
(dp2680
g163
(lp2681
(g25
g44
tp2682
assg2539
(dp2683
g163
(lp2684
(g25
g2548
tp2685
asssg2592
(dp2686
g2635
(dp2687
g163
(lp2688
(S'out_stat'
p2689
g2611
tp2690
asssg2615
(dp2691
g2635
(dp2692
g163
(lp2693
(g2689
g2642
tp2694
asssg2635
(dp2695
g2555
(dp2696
g163
(lp2697
(g24
g24
tp2698
assssg174
g2652
sg175
(dp2699
g2521
(dp2700
sg2539
(dp2701
g2573
g2683
sg2555
g2670
ssg2555
(dp2702
g2521
g2657
sg2635
g2696
sg2573
g2677
ssg2573
(dp2703
g2521
g2663
ssg2592
(dp2704
g2573
g2680
sg2521
g2660
ssg2615
(dp2705
g2573
g2674
sg2521
g2654
ssg2635
(dp2706
g2615
g2692
sg2592
g2687
sssg157
(dp2707
sg180
g2652
sbsg43
g2535
sg65
g66
sg75
g2535
sg76
g181
((lp2708
(lp2709
g184
ag181
((lp2710
(lp2711
g187
ag184
aa(lp2712
g189
ag190
aa(lp2713
g192
ag193
aa(lp2714
g195
ag196
aa(lp2715
g198
ag199
aa(lp2716
g201
ag106
aa(lp2717
g203
ag204
aa(lp2718
g206
ag207
aatp2719
Rp2720
aa(lp2721
g211
ag181
((lp2722
(lp2723
g187
ag211
aa(lp2724
g215
ag216
aa(lp2725
g218
ag219
aa(lp2726
g221
ag222
aa(lp2727
g224
ag225
aa(lp2728
g227
ag228
aa(lp2729
g230
ag231
aa(lp2730
g233
ag234
aa(lp2731
g236
ag237
aa(lp2732
g239
ag240
aa(lp2733
g242
ag243
aa(lp2734
g245
ag246
aa(lp2735
g248
ag249
aa(lp2736
g251
ag252
aa(lp2737
g254
ag255
aa(lp2738
g257
ag258
aa(lp2739
g260
ag261
aa(lp2740
g263
ag264
aa(lp2741
g266
ag267
aatp2742
Rp2743
aa(lp2744
g271
ag181
((lp2745
(lp2746
g187
ag271
aa(lp2747
g275
ag276
aatp2748
Rp2749
aatp2750
Rp2751
sg80
Nsbtp2752
a(g2490
g1
(g81
g3
Ntp2753
Rp2754
(dp2755
g85
g1
(g86
g3
Ntp2756
Rp2757
(dp2758
g90
(dp2759
g1
(g92
g3
Ntp2760
Rp2761
(dp2762
g7
(dp2763
sg9
g1
(g97
g3
Ntp2764
Rp2765
(dp2766
g14
g15
(g53
tp2767
Rp2768
(dp2769
g28
g29
sS'fwhm'
p2770
(lp2771
I4
asbsg108
(lp2772
g2770
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp2773
sg72
Nsg69
Nsg79
Nsg43
S'fwhm_input'
p2774
sg65
S'vmhc_0'
p2775
sg71
I00
sg73
(g2770
(lp2776
I4
atp2777
sg74
I00
sg75
g2774
sg76
Nsg77
(lp2778
sg80
Nsb(dp2779
sg1
(g92
g3
Ntp2780
Rp2781
(dp2782
g7
(dp2783
sg9
g1
(g135
g3
Ntp2784
Rp2785
(dp2786
g139
(lp2787
g2036
asg14
g15
(g142
tp2788
Rp2789
(dp2790
g20
I00
sg28
g29
sg146
S'S\'def get_img_nvols(in_files):\\n\\n    """\\n    Calculates the number of volumes in the given nifti image\\n\\n    Parameters\\n    ----------\\n\\n    in_files : string (nifti file)\\n\\n    Returns\\n    -------\\n\\n    out : int\\n        number of volumes of input nifti file\\n\\n    """\\n\\n    out = None\\n    from nibabel import load\\n    img = load(in_files)\\n    hdr = img.get_header()\\n    nvols = None\\n    if len(hdr.get_data_shape()) > 3:\\n        nvols = int(hdr.get_data_shape()[3])\\n    else:\\n        nvols = 1\\n    out = nvols\\n\\n    return out\\n\'\n.'
p2791
sg2036
g23
sbsg148
(dp2792
S'nvols'
p2793
Nssg150
(lp2794
g2793
asg152
Nsbsg51
Nsg70
I00
sg63
(dp2795
sg72
Nsg69
Nsg79
Nsg43
S'NVOLS'
p2796
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g2796
sg76
Nsg77
(lp2797
sg80
Nsb(dp2798
sg1
(g92
g3
Ntp2799
Rp2800
(dp2801
g7
(dp2802
sg9
g1
(g135
g3
Ntp2803
Rp2804
(dp2805
g139
(lp2806
g2793
asg14
g15
(g142
tp2807
Rp2808
(dp2809
g20
I00
sg2793
g23
sg146
S'S\'def get_operand_expression(nvols):\\n\\n    """\\n    Generates operand string\\n\\n    Parameters\\n    ----------\\n\\n    nvols : int\\n\\n    Returns\\n    -------\\n\\n    expr : string\\n\\n    """\\n\\n    expr = None\\n    vol = int(nvols)\\n    expr = (\\\'a*sqrt(%d-3)\\\' % vol)\\n\\n    return expr\\n\'\n.'
p2810
sg28
g29
sbsg148
(dp2811
g1959
Nssg150
(lp2812
g1959
asg152
Nsbsg51
Nsg70
I00
sg63
(dp2813
sg72
Nsg69
Nsg79
Nsg43
S'generateEXP'
p2814
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g2814
sg76
Nsg77
(lp2815
sg80
Nsb(dp2816
sg1
(g92
g3
Ntp2817
Rp2818
(dp2819
g7
(dp2820
sg9
g1
(cnipype.interfaces.afni.preprocess
TCorrelate
p2821
g3
Ntp2822
Rp2823
(dp2824
g14
g15
(cnipype.interfaces.afni.preprocess
TCorrelateInputSpec
p2825
tp2826
Rp2827
(dp2828
S'polort'
p2829
I-1
sg20
I00
sS'pearson'
p2830
I01
sg25
g23
sg26
g23
sS'xset'
p2831
g23
sg752
g1875
sg30
g31
sg32
g1
(g33
g34
(dp2832
tp2833
Rp2834
(dp2835
g41
S'environ_items'
p2836
sg43
g32
sbsS'yset'
p2837
g23
sg28
g29
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2838
sg72
Nsg69
Nsg79
Nsg43
S'pearson_correlation'
p2839
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g2839
sg76
Nsg77
(lp2840
sg80
Nsb(dp2841
sg1
(g92
g3
Ntp2842
Rp2843
(dp2844
g7
(dp2845
sg9
g1
(cnipype.interfaces.fsl.utils
SwapDimensions
p2846
g3
Ntp2847
Rp2848
(dp2849
g14
g15
(cnipype.interfaces.fsl.utils
SwapDimensionsInputSpec
p2850
tp2851
Rp2852
(dp2853
S'new_dims'
p2854
(S'-x'
p2855
S'y'
p2856
S'z'
p2857
tp2858
sg20
I00
sg25
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp2859
g36
g37
stp2860
Rp2861
(dp2862
g41
S'environ_items'
p2863
sg43
g32
sbsg44
g23
sg45
g37
sg28
g29
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2864
sg72
Nsg69
Nsg79
Nsg43
S'copy_and_L_R_swap'
p2865
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g2865
sg76
Nsg77
(lp2866
sg80
Nsb(dp2867
sg1
(g81
g3
Ntp2868
Rp2869
(dp2870
g85
g1
(g86
g3
Ntp2871
Rp2872
(dp2873
g90
(dp2874
g1
(g92
g3
Ntp2875
Rp2876
(dp2877
g7
(dp2878
sg9
g1
(cnipype.interfaces.c3
C3dAffineTool
p2879
g3
Ntp2880
Rp2881
(dp2882
g14
g15
(cnipype.interfaces.c3
C3dAffineToolInputSpec
p2883
tp2884
Rp2885
(dp2886
g20
I00
sg28
g29
sg26
g23
sS'fsl2ras'
p2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp2888
tp2889
Rp2890
(dp2891
g41
S'environ_items'
p2892
sg43
g32
sbsS'itk_transform'
p2893
I01
sS'source_file'
p2894
g23
sS'transform_file'
p2895
g23
sS'reference_file'
p2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp2897
sg72
Nsg69
Nsg79
Nsg43
S'fsl_reg_2_itk'
p2898
sg65
S'vmhc_0.fsl_to_itk_vmhc'
p2899
sg71
I00
sg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp2900
sg80
Nsb(dp2901
sg1
(g92
g3
Ntp2902
Rp2903
(dp2904
g7
(dp2905
sg9
g1
(g135
g3
Ntp2906
Rp2907
(dp2908
g139
(lp2909
S'input_affine_file'
p2910
asg14
g15
(g142
tp2911
Rp2912
(dp2913
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p2914
sbsg148
(dp2915
S'updated_affine_file'
p2916
Nssg150
(lp2917
g2916
asg152
Nsbsg51
Nsg70
I00
sg63
(dp2918
sg72
Nsg69
Nsg79
Nsg43
S'change_transform_type'
p2919
sg65
S'vmhc_0.fsl_to_itk_vmhc'
p2920
sg71
I00
sg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp2921
sg80
Nsb(dp2922
sg1
(g92
g3
Ntp2923
Rp2924
(dp2925
g7
(dp2926
sg9
g1
(g97
g3
Ntp2927
Rp2928
(dp2929
g14
g15
(g53
tp2930
Rp2931
(dp2932
g28
g29
sS'affine_file'
p2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp2934
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp2935
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_0.fsl_to_itk_vmhc'
p2936
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp2937
sg80
Nsb(dp2938
sg1
(g92
g3
Ntp2939
Rp2940
(dp2941
g7
(dp2942
sg9
g1
(g97
g3
Ntp2943
Rp2944
(dp2945
g14
g15
(g53
tp2946
Rp2947
(dp2948
g28
g29
sg2893
g23
sbsg108
(lp2949
g2893
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp2950
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_0.fsl_to_itk_vmhc'
p2951
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp2952
sg80
Nsb(dp2953
ssg159
(dp2954
g2876
(dp2955
g2903
(dp2956
g163
(lp2957
(g2893
g2910
tp2958
asssg2903
(dp2959
g2940
(dp2960
g163
(lp2961
(g2916
g2893
tp2962
asssg2924
(dp2963
g2876
(dp2964
g163
(lp2965
(g2933
g2895
tp2966
a(g2896
g2896
tp2967
a(g2894
g2894
tp2968
asssg2940
(dp2969
ssg174
g2954
sg175
(dp2970
g2876
(dp2971
g2924
g2964
ssg2903
(dp2972
g2876
g2956
ssg2924
(dp2973
sg2940
(dp2974
g2903
g2960
sssg157
(dp2975
sg180
g2954
sbsg43
S'fsl_to_itk_vmhc'
p2976
sg65
S'vmhc_workflow'
p2977
sg75
g2976
sg76
g181
((lp2978
(lp2979
g184
ag181
((lp2980
(lp2981
g187
ag184
aa(lp2982
g189
ag190
aa(lp2983
g192
ag193
aa(lp2984
g195
ag196
aa(lp2985
g198
ag199
aa(lp2986
g201
ag106
aa(lp2987
g203
ag204
aa(lp2988
g206
ag207
aatp2989
Rp2990
aa(lp2991
g211
ag181
((lp2992
(lp2993
g187
ag211
aa(lp2994
g215
ag216
aa(lp2995
g218
ag219
aa(lp2996
g221
ag222
aa(lp2997
g224
ag225
aa(lp2998
g227
ag228
aa(lp2999
g230
ag231
aa(lp3000
g233
ag234
aa(lp3001
g236
ag237
aa(lp3002
g239
ag240
aa(lp3003
g242
ag243
aa(lp3004
g245
ag246
aa(lp3005
g248
ag249
aa(lp3006
g251
ag252
aa(lp3007
g254
ag255
aa(lp3008
g257
ag258
aa(lp3009
g260
ag261
aa(lp3010
g263
ag264
aa(lp3011
g266
ag267
aatp3012
Rp3013
aa(lp3014
g271
ag181
((lp3015
(lp3016
g187
ag271
aa(lp3017
g275
ag276
aatp3018
Rp3019
aatp3020
Rp3021
sg80
Nsb(dp3022
sg1
(g81
g3
Ntp3023
Rp3024
(dp3025
g85
g1
(g86
g3
Ntp3026
Rp3027
(dp3028
g90
(dp3029
g1
(g92
g3
Ntp3030
Rp3031
(dp3032
g7
(dp3033
sg9
g1
(cnipype.interfaces.utility
Merge
p3034
g3
Ntp3035
Rp3036
(dp3037
S'_numinputs'
p3038
I4
sg14
g15
(cnipype.interfaces.utility
MergeInputSpec
p3039
tp3040
Rp3041
(dp3042
g20
I00
sg28
g29
sS'no_flatten'
p3043
I00
sS'in1'
p3044
g23
sS'in2'
p3045
g23
sS'in3'
p3046
g23
sS'in4'
p3047
g23
sS'axis'
p3048
S'vstack'
p3049
sbsbsg51
Nsg70
I00
sg63
(dp3050
sg72
Nsg69
Nsg79
Nsg43
S'collect_transforms'
p3051
sg65
S'vmhc_0.collect_transforms_vmhc'
p3052
sg71
I00
sg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp3053
sg80
Nsb(dp3054
sg1
(g92
g3
Ntp3055
Rp3056
(dp3057
g7
(dp3058
sg9
g1
(g97
g3
Ntp3059
Rp3060
(dp3061
g14
g15
(g53
tp3062
Rp3063
(dp3064
g28
g29
sS'fsl_to_itk_affine'
p3065
g23
sS'linear_affine'
p3066
g23
sS'warp_file'
p3067
g23
sS'linear_rigid'
p3068
g23
sbsg108
(lp3069
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3070
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_0.collect_transforms_vmhc'
p3071
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp3072
sg80
Nsb(dp3073
sg1
(g92
g3
Ntp3074
Rp3075
(dp3076
g7
(dp3077
sg9
g1
(g97
g3
Ntp3078
Rp3079
(dp3080
g14
g15
(g53
tp3081
Rp3082
(dp3083
g28
g29
sS'transformation_series'
p3084
g23
sbsg108
(lp3085
g3084
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3086
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_0.collect_transforms_vmhc'
p3087
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp3088
sg80
Nsb(dp3089
ssg159
(dp3090
g3031
(dp3091
g3075
(dp3092
g163
(lp3093
(S'out'
p3094
g3084
tp3095
asssg3056
(dp3096
g3031
(dp3097
g163
(lp3098
(g3067
g3044
tp3099
a(g3066
g3045
tp3100
a(g3068
g3046
tp3101
a(g3065
g3047
tp3102
asssg3075
(dp3103
ssg174
g3090
sg175
(dp3104
g3031
(dp3105
g3056
g3097
ssg3056
(dp3106
sg3075
(dp3107
g3031
g3092
sssg157
(dp3108
sg180
g3090
sbsg43
S'collect_transforms_vmhc'
p3109
sg65
g2977
sg75
g3109
sg76
g181
((lp3110
(lp3111
g184
ag181
((lp3112
(lp3113
g187
ag184
aa(lp3114
g189
ag190
aa(lp3115
g192
ag193
aa(lp3116
g195
ag196
aa(lp3117
g198
ag199
aa(lp3118
g201
ag106
aa(lp3119
g203
ag204
aa(lp3120
g206
ag207
aatp3121
Rp3122
aa(lp3123
g211
ag181
((lp3124
(lp3125
g187
ag211
aa(lp3126
g215
ag216
aa(lp3127
g218
ag219
aa(lp3128
g221
ag222
aa(lp3129
g224
ag225
aa(lp3130
g227
ag228
aa(lp3131
g230
ag231
aa(lp3132
g233
ag234
aa(lp3133
g236
ag237
aa(lp3134
g239
ag240
aa(lp3135
g242
ag243
aa(lp3136
g245
ag246
aa(lp3137
g248
ag249
aa(lp3138
g251
ag252
aa(lp3139
g254
ag255
aa(lp3140
g257
ag258
aa(lp3141
g260
ag261
aa(lp3142
g263
ag264
aa(lp3143
g266
ag267
aatp3144
Rp3145
aa(lp3146
g271
ag181
((lp3147
(lp3148
g187
ag271
aa(lp3149
g275
ag276
aatp3150
Rp3151
aatp3152
Rp3153
sg80
Nsb(dp3154
sg1
(g92
g3
Ntp3155
Rp3156
(dp3157
g7
(dp3158
sg9
g1
(g1950
g3
Ntp3159
Rp3160
(dp3161
g14
g15
(g1954
tp3162
Rp3163
(dp3164
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
g23
sg26
g23
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp3165
tp3166
Rp3167
(dp3168
g41
S'environ_items'
p3169
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp3170
sg72
Nsg69
Nsg79
Nsg43
S'z_stat'
p3171
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g3171
sg76
Nsg77
(lp3172
sg80
Nsb(dp3173
sg1
(g92
g3
Ntp3174
Rp3175
(dp3176
g7
(dp3177
sg9
g1
(g97
g3
Ntp3178
Rp3179
(dp3180
g14
g15
(g53
tp3181
Rp3182
(dp3183
S'rest_res'
p3184
g23
sg28
g29
sS'brain_symmetric'
p3185
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_brain_symmetric.nii.gz'
p3186
sS'twomm_brain_mask_dil'
p3187
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_brain_mask_symmetric_dil.nii.gz'
p3188
sS'mean_functional'
p3189
g23
sS'standard'
p3190
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm.nii.gz'
p3191
sg2187
g23
sS'brain'
p3192
g23
sg2531
g23
sS'config_file_twomm'
p3193
S'/usr/share/fsl/5.0/etc/flirtsch/T1_2_MNI152_2mm.cnf'
p3194
sS'example_func2highres_mat'
p3195
g23
sS'symm_standard'
p3196
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_symmetric.nii.gz'
p3197
sbsg108
(lp3198
g3192
ag3185
ag3184
ag2187
ag3195
ag3196
ag3187
ag3193
ag2531
ag3190
ag3189
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3199
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp3200
sg80
Nsb(dp3201
sg1
(g92
g3
Ntp3202
Rp3203
(dp3204
g7
(dp3205
sg9
g1
(g10
g3
Ntp3206
Rp3207
(dp3208
g14
g15
(g16
tp3209
Rp3210
(dp3211
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp3212
g36
g37
stp3213
Rp3214
(dp3215
g41
S'environ_items'
p3216
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp3217
sg72
Nsg69
Nsg79
Nsg43
S'smooth'
p3218
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g3218
sg76
Nsg77
(lp3219
sg80
Nsb(dp3220
sg1
(g81
g3
Ntp3221
Rp3222
(dp3223
g85
g1
(g86
g3
Ntp3224
Rp3225
(dp3226
g90
(dp3227
g1
(g92
g3
Ntp3228
Rp3229
(dp3230
g7
(dp3231
sg9
g1
(g135
g3
Ntp3232
Rp3233
(dp3234
g139
(lp3235
S'warp_list'
p3236
aS'selection'
p3237
asg14
g15
(g142
tp3238
Rp3239
(dp3240
g3236
g23
sg20
I00
sg3237
I2
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p3241
sg28
g29
sbsg148
(dp3242
S'selected_warp'
p3243
Nssg150
(lp3244
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp3245
sg72
Nsg69
Nsg79
Nsg43
S'select_forward_warp'
p3246
sg65
S'vmhc_0.calculate_ants_xfm_vmhc'
p3247
sg71
I00
sg73
Nsg74
I00
sg75
g3246
sg76
Nsg77
(lp3248
sg80
Nsb(dp3249
sg1
(g92
g3
Ntp3250
Rp3251
(dp3252
g7
(dp3253
sg9
g1
(g135
g3
Ntp3254
Rp3255
(dp3256
g139
(lp3257
g3236
ag3237
asg14
g15
(g142
tp3258
Rp3259
(dp3260
g3236
g23
sg20
I00
sg3237
I0
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p3261
sg28
g29
sbsg148
(dp3262
g3243
Nssg150
(lp3263
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp3264
sg72
Nsg69
Nsg79
Nsg43
S'select_inverse_warp'
p3265
sg65
S'vmhc_0.calculate_ants_xfm_vmhc'
p3266
sg71
I00
sg73
Nsg74
I00
sg75
g3265
sg76
Nsg77
(lp3267
sg80
Nsb(dp3268
sg1
(g92
g3
Ntp3269
Rp3270
(dp3271
g7
(dp3272
sg9
g1
(g97
g3
Ntp3273
Rp3274
(dp3275
g14
g15
(g53
tp3276
Rp3277
(dp3278
g28
g29
sS'normalized_output_brain'
p3279
g23
sS'ants_rigid_xfm'
p3280
g23
sS'ants_affine_xfm'
p3281
g23
sS'inverse_warp_field'
p3282
g23
sS'composite_transform'
p3283
g23
sS'warp_field'
p3284
g23
sbsg108
(lp3285
g3280
ag3281
ag3284
ag3282
ag3283
ag3279
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3286
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_0.calculate_ants_xfm_vmhc'
p3287
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp3288
sg80
Nsb(dp3289
sg1
(g92
g3
Ntp3290
Rp3291
(dp3292
g7
(dp3293
sg9
g1
(cnipype.interfaces.ants.registration
Registration
p3294
g3
Ntp3295
Rp3296
(dp3297
g14
g15
(cnipype.interfaces.ants.registration
RegistrationInputSpec
p3298
tp3299
Rp3300
(dp3301
g28
g29
sS'convergence_window_size'
p3302
g1
(ctraits.trait_handlers
TraitListObject
p3303
c__builtin__
list
p3304
(lp3305
I10
atp3306
Rp3307
(dp3308
g41
S'convergence_window_size_items'
p3309
sg43
g3302
sbsS'metric_item_trait'
p3310
g23
sS'metric_weight_item_trait'
p3311
g23
sS'output_inverse_warped_image'
p3312
g23
sS'metric_stage_trait'
p3313
g23
sS'metric'
p3314
g23
sS'sampling_percentage_item_trait'
p3315
g23
sS'moving_image'
p3316
g23
sS'initial_moving_transform'
p3317
g23
sS'sampling_percentage_stage_trait'
p3318
g23
sS'radius_bins_item_trait'
p3319
g23
sS'transforms'
p3320
g23
sS'initial_moving_transform_com'
p3321
g23
sS'metric_weight'
p3322
g1
(g3303
g3304
(lp3323
F1.0
atp3324
Rp3325
(dp3326
g41
S'metric_weight_items'
p3327
sg43
g3322
sbsS'sigma_units'
p3328
g23
sS'invert_initial_moving_transform'
p3329
g23
sS'winsorize_lower_quantile'
p3330
F0.0
sS'sampling_strategy_item_trait'
p3331
g23
sS'convergence_threshold'
p3332
g1
(g3303
g3304
(lp3333
F1e-06
atp3334
Rp3335
(dp3336
g41
S'convergence_threshold_items'
p3337
sg43
g3332
sbsS'sampling_strategy'
p3338
g23
sS'shrink_factors'
p3339
g23
sS'winsorize_upper_quantile'
p3340
F1.0
sS'fixed_image'
p3341
g23
sS'output_transform_prefix'
p3342
S'transform'
p3343
sS'interpolation'
p3344
S'Linear'
p3345
sg20
I00
sS'radius_bins_stage_trait'
p3346
g23
sS'collapse_linear_transforms_to_fixed_image_header'
p3347
I00
sg26
g23
sS'use_estimate_learning_rate_once'
p3348
g23
sg30
g31
sS'metric_weight_stage_trait'
p3349
g23
sS'write_composite_transform'
p3350
I00
sS'moving_image_mask'
p3351
g23
sS'num_threads'
p3352
I-1
sS'output_warped_image'
p3353
I01
sS'sampling_percentage'
p3354
g23
sS'number_of_iterations'
p3355
g23
sS'fixed_image_mask'
p3356
g23
sS'radius_or_number_of_bins'
p3357
g1
(g3303
g3304
(lp3358
I5
atp3359
Rp3360
(dp3361
g41
S'radius_or_number_of_bins_items'
p3362
sg43
g3357
sbsg32
g1
(g33
g34
(dp3363
tp3364
Rp3365
(dp3366
g41
S'environ_items'
p3367
sg43
g32
sbsS'smoothing_sigmas'
p3368
g23
sS'use_histogram_matching'
p3369
I01
sS'transform_parameters'
p3370
g23
sS'dimension'
p3371
I3
sS'sampling_strategy_stage_trait'
p3372
g23
sS'collapse_output_transforms'
p3373
I00
sbsS'_num_threads'
p3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp3375
sg72
Nsg69
Nsg79
Nsg43
S'calculate_ants_warp'
p3376
sg65
S'vmhc_0.calculate_ants_xfm_vmhc'
p3377
sg71
I00
sg73
Nsg74
I00
sg75
g3376
sg76
Nsg77
(lp3378
sg80
Nsb(dp3379
sg1
(g92
g3
Ntp3380
Rp3381
(dp3382
g7
(dp3383
sg9
g1
(g97
g3
Ntp3384
Rp3385
(dp3386
g14
g15
(g53
tp3387
Rp3388
(dp3389
g28
g29
sg3302
(lp3390
I10
aI10
aI15
asg3330
F0.01
sg3368
(lp3391
(lp3392
I3
aI2
aI1
aI0
aa(lp3393
I3
aI2
aI1
aI0
aa(lp3394
I3
aI2
aI1
aI0
aasg3332
(lp3395
F1e-08
aF1e-08
aF1e-09
asg3355
(lp3396
(lp3397
I1000
aI500
aI250
aI100
aa(lp3398
I1000
aI500
aI250
aI100
aa(lp3399
I100
aI100
aI70
aI20
aasg3340
F0.99
sg3339
(lp3400
(lp3401
I8
aI4
aI2
aI1
aa(lp3402
I8
aI4
aI2
aI1
aa(lp3403
I6
aI4
aI2
aI1
aasg3369
I01
sg3357
(lp3404
I32
aI32
aI4
asS'anatomical_brain'
p3405
g23
sg3320
(lp3406
S'Rigid'
p3407
aS'Affine'
p3408
aS'SyN'
p3409
asg3338
(lp3410
S'Regular'
p3411
ag3411
aNasg3354
(lp3412
F0.25
aF0.25
aNasg3350
g23
sg3322
(lp3413
I1
aI1
aI1
asg3370
(lp3414
(lp3415
F0.1
aa(lp3416
F0.1
aa(lp3417
F0.1
aI3
aI0
aasg3371
I3
sg3314
(lp3418
S'MI'
p3419
ag3419
aS'CC'
p3420
asS'reference_brain'
p3421
g23
sbsg108
(lp3422
g3405
ag3421
ag3371
ag3369
ag3330
ag3340
ag3314
ag3322
ag3357
ag3338
ag3354
ag3355
ag3332
ag3302
ag3320
ag3370
ag3339
ag3368
ag3350
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3423
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_0.calculate_ants_xfm_vmhc'
p3424
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp3425
sg80
Nsb(dp3426
sg1
(g92
g3
Ntp3427
Rp3428
(dp3429
g7
(dp3430
sg9
g1
(g135
g3
Ntp3431
Rp3432
(dp3433
g139
(lp3434
g3236
ag3237
asg14
g15
(g142
tp3435
Rp3436
(dp3437
g3236
g23
sg20
I00
sg3237
I1
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p3438
sg28
g29
sbsg148
(dp3439
g3243
Nssg150
(lp3440
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp3441
sg72
Nsg69
Nsg79
Nsg43
S'select_forward_affine'
p3442
sg65
S'vmhc_0.calculate_ants_xfm_vmhc'
p3443
sg71
I00
sg73
Nsg74
I00
sg75
g3442
sg76
Nsg77
(lp3444
sg80
Nsb(dp3445
sg1
(g92
g3
Ntp3446
Rp3447
(dp3448
g7
(dp3449
sg9
g1
(g135
g3
Ntp3450
Rp3451
(dp3452
g139
(lp3453
g3236
ag3237
asg14
g15
(g142
tp3454
Rp3455
(dp3456
g3236
g23
sg20
I00
sg3237
I0
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p3457
sg28
g29
sbsg148
(dp3458
g3243
Nssg150
(lp3459
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp3460
sg72
Nsg69
Nsg79
Nsg43
S'select_forward_rigid'
p3461
sg65
S'vmhc_0.calculate_ants_xfm_vmhc'
p3462
sg71
I00
sg73
Nsg74
I00
sg75
g3461
sg76
Nsg77
(lp3463
sg80
Nsb(dp3464
ssg159
(dp3465
g3229
(dp3466
g3270
(dp3467
g163
(lp3468
(g3243
g3284
tp3469
asssg3251
(dp3470
g3270
(dp3471
g163
(lp3472
(g3243
g3282
tp3473
asssg3270
(dp3474
sg3291
(dp3475
g3229
(dp3476
g163
(lp3477
(S'forward_transforms'
p3478
g3236
tp3479
assg3428
(dp3480
g163
(lp3481
(g3478
g3236
tp3482
assg3270
(dp3483
g163
(lp3484
(g3283
g3283
tp3485
a(S'warped_image'
p3486
g3279
tp3487
assg3447
(dp3488
g163
(lp3489
(g3478
g3236
tp3490
assg3251
(dp3491
g163
(lp3492
(S'reverse_transforms'
p3493
g3236
tp3494
asssg3381
(dp3495
g3291
(dp3496
g163
(lp3497
(g3405
g3316
tp3498
a(g3421
g3341
tp3499
a(g3371
g3371
tp3500
a(g3369
g3369
tp3501
a(g3330
g3330
tp3502
a(g3340
g3340
tp3503
a(g3314
g3314
tp3504
a(g3322
g3322
tp3505
a(g3357
g3357
tp3506
a(g3338
g3338
tp3507
a(g3354
g3354
tp3508
a(g3355
g3355
tp3509
a(g3332
g3332
tp3510
a(g3302
g3302
tp3511
a(g3320
g3320
tp3512
a(g3370
g3370
tp3513
a(g3339
g3339
tp3514
a(g3368
g3368
tp3515
a(g3350
g3350
tp3516
asssg3428
(dp3517
g3270
(dp3518
g163
(lp3519
(g3243
g3281
tp3520
asssg3447
(dp3521
g3270
(dp3522
g163
(lp3523
(g3243
g3280
tp3524
assssg174
g3465
sg175
(dp3525
g3229
(dp3526
g3291
g3476
ssg3251
(dp3527
g3291
g3491
ssg3270
(dp3528
g3447
g3522
sg3428
g3518
sg3229
g3467
sg3291
g3483
sg3251
g3471
ssg3291
(dp3529
g3381
g3496
ssg3381
(dp3530
sg3428
(dp3531
g3291
g3480
ssg3447
(dp3532
g3291
g3488
sssg157
(dp3533
sg180
g3465
sbsg43
S'calculate_ants_xfm_vmhc'
p3534
sg65
g2977
sg75
g3534
sg76
g181
((lp3535
(lp3536
g184
ag181
((lp3537
(lp3538
g187
ag184
aa(lp3539
g189
ag190
aa(lp3540
g192
ag193
aa(lp3541
g195
ag196
aa(lp3542
g198
ag199
aa(lp3543
g201
ag106
aa(lp3544
g203
ag204
aa(lp3545
g206
ag207
aatp3546
Rp3547
aa(lp3548
g211
ag181
((lp3549
(lp3550
g187
ag211
aa(lp3551
g215
ag216
aa(lp3552
g218
ag219
aa(lp3553
g221
ag222
aa(lp3554
g224
ag225
aa(lp3555
g227
ag228
aa(lp3556
g230
ag231
aa(lp3557
g233
ag234
aa(lp3558
g236
ag237
aa(lp3559
g239
ag240
aa(lp3560
g242
ag243
aa(lp3561
g245
ag246
aa(lp3562
g248
ag249
aa(lp3563
g251
ag252
aa(lp3564
g254
ag255
aa(lp3565
g257
ag258
aa(lp3566
g260
ag261
aa(lp3567
g263
ag264
aa(lp3568
g266
ag267
aatp3569
Rp3570
aa(lp3571
g271
ag181
((lp3572
(lp3573
g187
ag271
aa(lp3574
g275
ag276
aatp3575
Rp3576
aatp3577
Rp3578
sg80
Nsb(dp3579
sg1
(g92
g3
Ntp3580
Rp3581
(dp3582
g7
(dp3583
sg9
g1
(g97
g3
Ntp3584
Rp3585
(dp3586
g14
g15
(g53
tp3587
Rp3588
(dp3589
g28
g29
sS'VMHC_FWHM_img'
p3590
g23
sS'VMHC_Z_FWHM_img'
p3591
g23
sS'VMHC_Z_stat_FWHM_img'
p3592
g23
sS'highres2symmstandard'
p3593
g23
sS'highres2symmstandard_warp'
p3594
g23
sS'fnirt_highres2symmstandard'
p3595
g23
sS'highres2symmstandard_mat'
p3596
g23
sS'rest_res_2symmstandard'
p3597
g23
sS'highres2symmstandard_jac'
p3598
g23
sbsg108
(lp3599
g3593
ag3596
ag3594
ag3595
ag3598
ag3597
ag3590
ag3591
ag3592
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3600
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp3601
sg80
Nsb(dp3602
sg1
(g81
g3
Ntp3603
Rp3604
(dp3605
g85
g1
(g86
g3
Ntp3606
Rp3607
(dp3608
g90
(dp3609
g1
(g92
g3
Ntp3610
Rp3611
(dp3612
g7
(dp3613
sg9
g1
(g97
g3
Ntp3614
Rp3615
(dp3616
g14
g15
(g53
tp3617
Rp3618
(dp3619
g28
g29
sS'input_image_type'
p3620
I3
sg3320
g23
sS'reference_image'
p3621
g23
sS'input_image'
p3622
g23
sg3371
g23
sg3344
g3345
sbsg108
(lp3623
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3624
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_0.apply_ants_xfm_vmhc'
p3625
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp3626
sg80
Nsb(dp3627
sg1
(g92
g3
Ntp3628
Rp3629
(dp3630
g7
(dp3631
sg9
g1
(cnipype.interfaces.ants.resampling
ApplyTransforms
p3632
g3
Ntp3633
Rp3634
(dp3635
g14
g15
(cnipype.interfaces.ants.resampling
ApplyTransformsInputSpec
p3636
tp3637
Rp3638
(dp3639
g20
I00
sg3352
I-1
sS'output_image'
p3640
g23
sS'out_postfix'
p3641
S'_antswarp'
p3642
sg26
g23
sS'print_out_composite_warp_file'
p3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp3644
tp3645
Rp3646
(dp3647
g41
S'environ_items'
p3648
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sS'default_value'
p3649
F0.0
sg3371
g23
sS'invert_transform_flags'
p3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp3651
sg72
Nsg69
Nsg79
Nsg43
S'apply_ants_warp'
p3652
sg65
S'vmhc_0.apply_ants_xfm_vmhc'
p3653
sg71
I00
sg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp3654
sg80
Nsb(dp3655
sg1
(g92
g3
Ntp3656
Rp3657
(dp3658
g7
(dp3659
sg9
g1
(g97
g3
Ntp3660
Rp3661
(dp3662
g14
g15
(g53
tp3663
Rp3664
(dp3665
g28
g29
sg3640
g23
sbsg108
(lp3666
g3640
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp3667
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_0.apply_ants_xfm_vmhc'
p3668
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp3669
sg80
Nsb(dp3670
ssg159
(dp3671
g3611
(dp3672
g3629
(dp3673
g163
(lp3674
(g3622
g3622
tp3675
a(g3621
g3621
tp3676
a(g3320
g3320
tp3677
a(g3371
g3371
tp3678
a(g3620
g3620
tp3679
a(g3344
g3344
tp3680
asssg3629
(dp3681
g3657
(dp3682
g163
(lp3683
(g3640
g3640
tp3684
asssg3657
(dp3685
ssg174
g3671
sg175
(dp3686
g3611
(dp3687
sg3629
(dp3688
g3611
g3673
ssg3657
(dp3689
g3629
g3682
sssg157
(dp3690
sg180
g3671
sbsg43
S'apply_ants_xfm_vmhc'
p3691
sg65
g2977
sg75
g3691
sg76
g181
((lp3692
(lp3693
g184
ag181
((lp3694
(lp3695
g187
ag184
aa(lp3696
g189
ag190
aa(lp3697
g192
ag193
aa(lp3698
g195
ag196
aa(lp3699
g198
ag199
aa(lp3700
g201
ag106
aa(lp3701
g203
ag204
aa(lp3702
g206
ag207
aatp3703
Rp3704
aa(lp3705
g211
ag181
((lp3706
(lp3707
g187
ag211
aa(lp3708
g215
ag216
aa(lp3709
g218
ag219
aa(lp3710
g221
ag222
aa(lp3711
g224
ag225
aa(lp3712
g227
ag228
aa(lp3713
g230
ag231
aa(lp3714
g233
ag234
aa(lp3715
g236
ag237
aa(lp3716
g239
ag240
aa(lp3717
g242
ag243
aa(lp3718
g245
ag246
aa(lp3719
g248
ag249
aa(lp3720
g251
ag252
aa(lp3721
g254
ag255
aa(lp3722
g257
ag258
aa(lp3723
g260
ag261
aa(lp3724
g263
ag264
aa(lp3725
g266
ag267
aatp3726
Rp3727
aa(lp3728
g271
ag181
((lp3729
(lp3730
g187
ag271
aa(lp3731
g275
ag276
aatp3732
Rp3733
aatp3734
Rp3735
sg80
Nsb(dp3736
sg1
(g92
g3
Ntp3737
Rp3738
(dp3739
g7
(dp3740
sg9
g1
(g1950
g3
Ntp3741
Rp3742
(dp3743
g14
g15
(g1954
tp3744
Rp3745
(dp3746
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
S'log((1+a)/(1-a))/2'
p3747
sg26
g23
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp3748
tp3749
Rp3750
(dp3751
g41
S'environ_items'
p3752
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp3753
sg72
Nsg69
Nsg79
Nsg43
S'z_trans'
p3754
sg65
g2775
sg71
I00
sg73
Nsg74
I00
sg75
g3754
sg76
Nsg77
(lp3755
sg80
Nsb(dp3756
ssg159
(dp3757
g2761
(dp3758
g3203
(dp3759
g163
(lp3760
((g2770
S'S\'def set_gauss(fwhm):\\n\\n    """\\n    Compute the sigma value, given Full Width Half Max. \\n    Further it builds an operand string and returns it\\n\\n    Parameters\\n    ----------\\n\\n    fwhm : float\\n\\n    Returns\\n    -------\\n\\n    op_string : string\\n\\n    """\\n\\n    op_string = ""\\n\\n    fwhm = float(fwhm)\\n\\n    sigma = float(fwhm / 2.3548)\\n\\n    op = "-kernel gauss %f -fmean -mas " % (sigma) + "%s"\\n    op_string = op\\n\\n    return op_string\\n\'\n.'
p3761
(ttp3762
g24
tp3763
asssg2781
(dp3764
g2800
(dp3765
g163
(lp3766
(g2793
g2793
tp3767
asssg2800
(dp3768
g3156
(dp3769
g163
(lp3770
(g1959
g1959
tp3771
asssg2818
(dp3772
g3581
(dp3773
g163
(lp3774
(g25
g3590
tp3775
assg3738
(dp3776
g163
(lp3777
(g25
g1963
tp3778
asssg2843
(dp3779
g2818
(dp3780
g163
(lp3781
(g25
g2837
tp3782
assg2781
(dp3783
g163
(lp3784
(g25
g2036
tp3785
asssg2869
(dp3786
g3024
(dp3787
g163
(lp3788
(S'outputspec.itk_transform'
p3789
S'inputspec.fsl_to_itk_affine'
p3790
tp3791
asssg3024
(dp3792
g3604
(dp3793
g163
(lp3794
(S'outputspec.transformation_series'
p3795
S'inputspec.transforms'
p3796
tp3797
asssg3156
(dp3798
g3581
(dp3799
g163
(lp3800
(g25
g3592
tp3801
asssg3175
(dp3802
g3203
(dp3803
g163
(lp3804
(g3184
g44
tp3805
a(g2531
g47
tp3806
assg3222
(dp3807
g163
(lp3808
(g3192
S'inputspec.anatomical_brain'
p3809
tp3810
a(g3185
S'inputspec.reference_brain'
p3811
tp3812
assg3604
(dp3813
g163
(lp3814
(g3185
S'inputspec.reference_image'
p3815
tp3816
assg2869
(dp3817
g163
(lp3818
(g3195
S'inputspec.affine_file'
p3819
tp3820
a(g3192
S'inputspec.reference_file'
p3821
tp3822
a(g3189
S'inputspec.source_file'
p3823
tp3824
asssg3203
(dp3825
g3604
(dp3826
g163
(lp3827
(g25
S'inputspec.input_image'
p3828
tp3829
asssg3222
(dp3830
g3581
(dp3831
g163
(lp3832
(S'outputspec.ants_affine_xfm'
p3833
g3596
tp3834
a(S'outputspec.warp_field'
p3835
g3594
tp3836
a(S'outputspec.normalized_output_brain'
p3837
g3595
tp3838
assg3024
(dp3839
g163
(lp3840
(S'outputspec.ants_rigid_xfm'
p3841
S'inputspec.linear_rigid'
p3842
tp3843
a(g3833
S'inputspec.linear_affine'
p3844
tp3845
a(g3835
S'inputspec.warp_file'
p3846
tp3847
asssg3581
(dp3848
sg3604
(dp3849
g2843
(dp3850
g163
(lp3851
(S'outputspec.output_image'
p3852
g44
tp3853
assg3581
(dp3854
g163
(lp3855
(g3852
g3597
tp3856
assg2818
(dp3857
g163
(lp3858
(g3852
g2831
tp3859
asssg3738
(dp3860
g3156
(dp3861
g163
(lp3862
(g25
g1963
tp3863
assg3581
(dp3864
g163
(lp3865
(g25
g3591
tp3866
assssg174
g3757
sg175
(dp3867
g2761
(dp3868
sg2781
(dp3869
g2843
g3783
ssg2800
(dp3870
g2781
g3765
ssg2818
(dp3871
g2843
g3780
sg3604
g3857
ssg2843
(dp3872
g3604
g3850
ssg2869
(dp3873
g3175
g3817
ssg3024
(dp3874
g3222
g3839
sg2869
g3787
ssg3156
(dp3875
g2800
g3769
sg3738
g3861
ssg3175
(dp3876
sg3203
(dp3877
g2761
g3759
sg3175
g3803
ssg3222
(dp3878
g3175
g3807
ssg3581
(dp3879
g2818
g3773
sg3222
g3831
sg3738
g3864
sg3604
g3854
sg3156
g3799
ssg3604
(dp3880
g3203
g3826
sg3024
g3793
sg3175
g3813
ssg3738
(dp3881
g2818
g3776
sssg157
(dp3882
sg180
g3757
sbsg43
g2775
sg65
g66
sg75
g2775
sg76
g181
((lp3883
(lp3884
g184
ag181
((lp3885
(lp3886
g187
ag184
aa(lp3887
g189
ag190
aa(lp3888
g192
ag193
aa(lp3889
g195
ag196
aa(lp3890
g198
ag199
aa(lp3891
g201
ag106
aa(lp3892
g203
ag204
aa(lp3893
g206
ag207
aatp3894
Rp3895
aa(lp3896
g211
ag181
((lp3897
(lp3898
g187
ag211
aa(lp3899
g215
ag216
aa(lp3900
g218
ag219
aa(lp3901
g221
ag222
aa(lp3902
g224
ag225
aa(lp3903
g227
ag228
aa(lp3904
g230
ag231
aa(lp3905
g233
ag234
aa(lp3906
g236
ag237
aa(lp3907
g239
ag240
aa(lp3908
g242
ag243
aa(lp3909
g245
ag246
aa(lp3910
g248
ag249
aa(lp3911
g251
ag252
aa(lp3912
g254
ag255
aa(lp3913
g257
ag258
aa(lp3914
g260
ag261
aa(lp3915
g263
ag264
aa(lp3916
g266
ag267
aatp3917
Rp3918
aa(lp3919
g271
ag181
((lp3920
(lp3921
g187
ag271
aa(lp3922
g275
ag276
aatp3923
Rp3924
aatp3925
Rp3926
sg80
Nsbtp3927
a(g2490
g1
(g81
g3
Ntp3928
Rp3929
(dp3930
g85
g1
(g86
g3
Ntp3931
Rp3932
(dp3933
g90
(dp3934
g1
(g92
g3
Ntp3935
Rp3936
(dp3937
g7
(dp3938
sg9
g1
(g97
g3
Ntp3939
Rp3940
(dp3941
g14
g15
(g53
tp3942
Rp3943
(dp3944
S'normalize'
p3945
I01
sS'subject_rest'
p3946
g23
sS'subject_timeseries'
p3947
g23
sS'subject_mask'
p3948
g23
sS'demean'
p3949
I01
sg28
g29
sbsg108
(lp3950
g3946
ag3947
ag3948
ag3949
ag3945
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp3951
sg65
S'temporal_dual_regression_0'
p3952
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp3953
sg79
Nsg80
Nsb(dp3954
sg1
(g92
g3
Ntp3955
Rp3956
(dp3957
g7
(dp3958
sg9
g1
(cnipype.interfaces.fsl.utils
Split
p3959
g3
Ntp3960
Rp3961
(dp3962
g14
g15
(cnipype.interfaces.fsl.utils
SplitInputSpec
p3963
tp3964
Rp3965
(dp3966
g20
I00
sg28
g29
sg26
g23
sS'out_base_name'
p3967
S'temp_reg_map_z_'
p3968
sg30
g31
sg32
g1
(g33
g34
(dp3969
g36
g37
stp3970
Rp3971
(dp3972
g41
S'environ_items'
p3973
sg43
g32
sbsg44
g23
sg45
g37
sg3371
S't'
p3974
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'split_volumes'
p3975
sg63
(dp3976
sg65
g3952
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3975
sg76
Nsg77
(lp3977
sg79
Nsg80
Nsb(dp3978
sg1
(g92
g3
Ntp3979
Rp3980
(dp3981
g7
(dp3982
sg9
g1
(g97
g3
Ntp3983
Rp3984
(dp3985
g14
g15
(g53
tp3986
Rp3987
(dp3988
S'temp_reg_map_z_stack'
p3989
g23
sg28
g29
sS'temp_reg_map'
p3990
g23
sS'temp_reg_map_z'
p3991
g23
sbsg108
(lp3992
g3990
ag3991
ag3989
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp3993
sg65
g3952
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp3994
sg79
Nsg80
Nsb(dp3995
sg1
(g92
g3
Ntp3996
Rp3997
(dp3998
g7
(dp3999
sg9
g1
(cnipype.interfaces.fsl.model
GLM
p4000
g3
Ntp4001
Rp4002
(dp4003
g14
g15
(cnipype.interfaces.fsl.model
GLMInputSpec
p4004
tp4005
Rp4006
(dp4007
g28
g29
sS'out_sigsq_name'
p4008
g23
sS'dat_norm'
p4009
g23
sg750
g23
sS'out_pf_name'
p4010
g23
sS'out_t_name'
p4011
g23
sS'out_cope'
p4012
g23
sS'design'
p4013
g23
sS'out_res_name'
p4014
g23
sg44
g23
sg3949
g23
sS'out_vnscales_name'
p4015
g23
sg20
I00
sS'out_varcb_name'
p4016
g23
sg26
g23
sS'out_z_name'
p4017
S'temp_reg_map_z.nii.gz'
p4018
sg30
g31
sS'var_norm'
p4019
g23
sS'out_f_name'
p4020
g23
sS'out_data_name'
p4021
g23
sS'contrasts'
p4022
g23
sg25
S'temp_reg_map.nii.gz'
p4023
sS'dof'
p4024
g23
sg32
g1
(g33
g34
(dp4025
g36
g37
stp4026
Rp4027
(dp4028
g41
S'environ_items'
p4029
sg43
g32
sbsg45
g37
sS'des_norm'
p4030
g23
sS'out_p_name'
p4031
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'temporal_regression'
p4032
sg63
(dp4033
sg65
g3952
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4032
sg76
Nsg77
(lp4034
sg79
Nsg80
Nsb(dp4035
sg1
(g92
g3
Ntp4036
Rp4037
(dp4038
g7
(dp4039
sg9
g1
(g135
g3
Ntp4040
Rp4041
(dp4042
g139
(lp4043
g44
asg14
g15
(g142
tp4044
Rp4045
(dp4046
g20
I00
sg28
g29
sg146
S'S"def check_ts(in_file):\\n    import numpy as np\\n    timepoints, rois = np.loadtxt(in_file).shape\\n    if rois > timepoints:\\n        message = (\'\\\\n\\\\n\\\\n****The number of timepoints (\' + str(timepoints)\\n                   + \') is smaller than the number of ROIs to run (\'\\n                   + str(rois) + \') - therefore the GLM is\'\\n                   + \' underspecified and can\\\\\'t run.****\\\\n\\\\n\\\\n\')\\n        print(message)\\n        raise Exception(message)\\n    else:\\n        return in_file\\n"\n.'
p4047
sg44
g23
sbsg148
(dp4048
g25
Nssg150
(lp4049
g25
asg152
Nsbsg51
Nsg43
S'check_timeseries'
p4050
sg63
(dp4051
sg65
g3952
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4050
sg76
Nsg77
(lp4052
sg79
Nsg80
Nsb(dp4053
ssg157
(dp4054
sg159
(dp4055
g3936
(dp4056
g4037
(dp4057
g163
(lp4058
(g3947
g44
tp4059
assg3997
(dp4060
g163
(lp4061
(g3946
g44
tp4062
a(g3949
g3949
tp4063
a(g3945
g4030
tp4064
a(g3948
g750
tp4065
asssg3956
(dp4066
g3980
(dp4067
g163
(lp4068
(S'out_files'
p4069
g3989
tp4070
asssg3980
(dp4071
sg3997
(dp4072
g3980
(dp4073
g163
(lp4074
(g25
g3990
tp4075
a(S'out_z'
p4076
g3991
tp4077
assg3956
(dp4078
g163
(lp4079
(g4076
g44
tp4080
asssg4037
(dp4081
g3997
(dp4082
g163
(lp4083
(g25
g4013
tp4084
assssg174
g4055
sg175
(dp4085
g3936
(dp4086
sg3956
(dp4087
g3997
g4078
ssg3980
(dp4088
g3997
g4073
sg3956
g4067
ssg3997
(dp4089
g3936
g4060
sg4037
g4082
ssg4037
(dp4090
g3936
g4057
sssg180
g4055
sbsg43
g3952
sg65
g66
sg75
g3952
sg76
g181
((lp4091
(lp4092
g184
ag181
((lp4093
(lp4094
g187
ag184
aa(lp4095
g189
ag190
aa(lp4096
g192
ag193
aa(lp4097
g195
ag196
aa(lp4098
g198
ag199
aa(lp4099
g201
ag106
aa(lp4100
g203
ag204
aa(lp4101
g206
ag207
aatp4102
Rp4103
aa(lp4104
g211
ag181
((lp4105
(lp4106
g187
ag211
aa(lp4107
g215
ag216
aa(lp4108
g218
ag219
aa(lp4109
g221
ag222
aa(lp4110
g224
ag225
aa(lp4111
g227
ag228
aa(lp4112
g230
ag231
aa(lp4113
g233
ag234
aa(lp4114
g236
ag237
aa(lp4115
g239
ag240
aa(lp4116
g242
ag243
aa(lp4117
g245
ag246
aa(lp4118
g248
ag249
aa(lp4119
g251
ag252
aa(lp4120
g254
ag255
aa(lp4121
g257
ag258
aa(lp4122
g260
ag261
aa(lp4123
g263
ag264
aa(lp4124
g266
ag267
aatp4125
Rp4126
aa(lp4127
g271
ag181
((lp4128
(lp4129
g187
ag271
aa(lp4130
g275
ag276
aatp4131
Rp4132
aatp4133
Rp4134
sg80
Nsbtp4135
a(g2490
g1
(g81
g3
Ntp4136
Rp4137
(dp4138
g85
g1
(g86
g3
Ntp4139
Rp4140
(dp4141
g90
(dp4142
g1
(g92
g3
Ntp4143
Rp4144
(dp4145
g7
(dp4146
sg9
g1
(g97
g3
Ntp4147
Rp4148
(dp4149
g14
g15
(g53
tp4150
Rp4151
(dp4152
g28
g29
sg25
g23
sbsg108
(lp4153
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp4154
sg65
S'log_frequency_filter_0'
p4155
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp4156
sg79
Nsg80
Nsb(dp4157
sg1
(g92
g3
Ntp4158
Rp4159
(dp4160
g7
(dp4161
sg9
g1
(g97
g3
Ntp4162
Rp4163
(dp4164
g14
g15
(g53
tp4165
Rp4166
(dp4167
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g2507
sbsg108
(lp4168
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp4169
sg65
g4155
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp4170
sg79
Nsg80
Nsb(dp4171
sg1
(g92
g3
Ntp4172
Rp4173
(dp4174
g7
(dp4175
sg9
g1
(g135
g3
Ntp4176
Rp4177
(dp4178
g139
(lp4179
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp4180
Rp4181
(dp4182
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p4183
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp4184
g25
Nssg150
(lp4185
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp4186
sg65
g4155
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp4187
sg79
Nsg80
Nsb(dp4188
ssg157
(dp4189
sg159
(dp4190
g4144
(dp4191
sg4159
(dp4192
g4173
(dp4193
g163
(lp4194
(g107
g107
tp4195
a(g105
g105
tp4196
a(g104
g104
tp4197
a(g14
g14
tp4198
asssg4173
(dp4199
g4144
(dp4200
g163
(lp4201
(g25
g25
tp4202
assssg174
g4190
sg175
(dp4203
g4144
(dp4204
g4173
g4200
ssg4159
(dp4205
sg4173
(dp4206
g4159
g4193
sssg180
g4190
sbsg43
g4155
sg65
g66
sg75
g4155
sg76
g181
((lp4207
(lp4208
g184
ag181
((lp4209
(lp4210
g187
ag184
aa(lp4211
g189
ag190
aa(lp4212
g192
ag193
aa(lp4213
g195
ag196
aa(lp4214
g198
ag199
aa(lp4215
g201
ag106
aa(lp4216
g203
ag204
aa(lp4217
g206
ag207
aatp4218
Rp4219
aa(lp4220
g211
ag181
((lp4221
(lp4222
g187
ag211
aa(lp4223
g215
ag216
aa(lp4224
g218
ag219
aa(lp4225
g221
ag222
aa(lp4226
g224
ag225
aa(lp4227
g227
ag228
aa(lp4228
g230
ag231
aa(lp4229
g233
ag234
aa(lp4230
g236
ag237
aa(lp4231
g239
ag240
aa(lp4232
g242
ag243
aa(lp4233
g245
ag246
aa(lp4234
g248
ag249
aa(lp4235
g251
ag252
aa(lp4236
g254
ag255
aa(lp4237
g257
ag258
aa(lp4238
g260
ag261
aa(lp4239
g263
ag264
aa(lp4240
g266
ag267
aatp4241
Rp4242
aa(lp4243
g271
ag181
((lp4244
(lp4245
g187
ag271
aa(lp4246
g275
ag276
aatp4247
Rp4248
aatp4249
Rp4250
sg80
Nsbtp4251
a(g2490
g1
(g81
g3
Ntp4252
Rp4253
(dp4254
g85
g1
(g86
g3
Ntp4255
Rp4256
(dp4257
g90
(dp4258
g1
(g92
g3
Ntp4259
Rp4260
(dp4261
g7
(dp4262
sg9
g1
(g97
g3
Ntp4263
Rp4264
(dp4265
g14
g15
(g53
tp4266
Rp4267
(dp4268
S'timeseries_one_d'
p4269
g23
sg28
g29
sS'functional_file'
p4270
g23
sbsg108
(lp4271
g4269
ag4270
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp4272
sg65
S'sca_seed_0'
p4273
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp4274
sg79
Nsg80
Nsb(dp4275
sg1
(g92
g3
Ntp4276
Rp4277
(dp4278
g7
(dp4279
sg9
g1
(cnipype.interfaces.afni.preprocess
TCorr1D
p4280
g3
Ntp4281
Rp4282
(dp4283
g14
g15
(cnipype.interfaces.afni.preprocess
TCorr1DInputSpec
p4284
tp4285
Rp4286
(dp4287
g20
I00
sS'spearman'
p4288
g23
sg2830
I01
sg25
g23
sS'y_1d'
p4289
g23
sS'ktaub'
p4290
g23
sg26
g23
sg2831
g23
sg752
g1875
sS'quadrant'
p4291
g23
sg30
g31
sg32
g1
(g33
g34
(dp4292
tp4293
Rp4294
(dp4295
g41
S'environ_items'
p4296
sg43
g32
sbsg28
g29
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'3dTCorr1D'
p4297
sg63
(dp4298
sg65
g4273
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4297
sg76
Nsg77
(lp4299
sg79
Nsg80
Nsb(dp4300
sg1
(g92
g3
Ntp4301
Rp4302
(dp4303
g7
(dp4304
sg9
g1
(g97
g3
Ntp4305
Rp4306
(dp4307
g14
g15
(g53
tp4308
Rp4309
(dp4310
g28
g29
sS'Z_score'
p4311
g23
sS'correlation_file'
p4312
g23
sbsg108
(lp4313
g4312
ag4311
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp4314
sg65
g4273
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp4315
sg79
Nsg80
Nsb(dp4316
sg1
(g92
g3
Ntp4317
Rp4318
(dp4319
g7
(dp4320
sg9
g1
(g135
g3
Ntp4321
Rp4322
(dp4323
g139
(lp4324
g4312
ag4269
asg14
g15
(g142
tp4325
Rp4326
(dp4327
g20
I00
sg4269
g23
sg146
S'S\'def compute_fisher_z_score(correlation_file, timeseries_one_d):\\n\\n    """\\n    Computes the fisher z transform of the input correlation map\\n    If the correlation map contains data for multiple ROIs then \\n    the function returns z score for each ROI as a seperate nifti \\n    file\\n\\n\\n    Parameters\\n    ----------\\n\\n    correlation_file: string\\n        Input correlations file\\n\\n\\n    Returns\\n    -------\\n\\n    out_file : list (nifti files)\\n        list of z_scores for mask or ROI\\n    """\\n\\n    import nibabel as nb\\n    import numpy as np\\n    import os\\n\\n    roi_numbers = []\\n    if \\\'#\\\' in open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\'):\\n        roi_numbers = open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\').replace(\\\'#\\\', \\\'\\\').split(\\\'\\\\t\\\')\\n\\n    corr_img = nb.load(correlation_file)\\n    corr_data = corr_img.get_data()\\n\\n    hdr = corr_img.get_header()\\n\\n    corr_data = np.log((1 + corr_data) / (1 - corr_data)) / 2.0\\n\\n    dims = corr_data.shape\\n\\n    out_file = []\\n\\n    if len(dims) == 5 or len(roi_numbers) > 0:\\n\\n        if len(dims) == 5:\\n            x, y, z, one, roi_number = dims\\n\\n            corr_data = np.reshape(corr_data, (x * y * z, roi_number), order=\\\'F\\\')\\n\\n\\n        for i in range(0, len(roi_numbers)):\\n\\n            sub_data = corr_data\\n            if len(dims) == 5:\\n                sub_data = np.reshape(corr_data[:, i], (x, y, z), order=\\\'F\\\')\\n\\n            sub_img = nb.Nifti1Image(sub_data, header=corr_img.get_header(), affine=corr_img.get_affine())\\n\\n            sub_z_score_file = os.path.join(os.getcwd(), \\\'z_score_ROI_number_%s.nii.gz\\\' % (roi_numbers[i]))\\n\\n            sub_img.to_filename(sub_z_score_file)\\n\\n            out_file.append(sub_z_score_file)\\n\\n    else:\\n\\n        z_score_img = nb.Nifti1Image(corr_data, header=hdr, affine=corr_img.get_affine())\\n\\n        z_score_file = os.path.join(os.getcwd(), \\\'z_score.nii.gz\\\')\\n\\n        z_score_img.to_filename(z_score_file)\\n\\n        out_file.append(z_score_file)\\n\\n\\n    return out_file\\n\'\n.'
p4328
sg4312
g23
sg28
g29
sbsg148
(dp4329
g25
Nssg150
(lp4330
g25
asg152
Nsbsg51
Nsg43
g2549
sg63
(dp4331
sg65
g4273
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp4332
sg79
Nsg80
Nsb(dp4333
ssg157
(dp4334
sg159
(dp4335
g4260
(dp4336
g4318
(dp4337
g163
(lp4338
(g4269
g4269
tp4339
assg4277
(dp4340
g163
(lp4341
(g4269
g4289
tp4342
a(g4270
g2831
tp4343
asssg4277
(dp4344
g4318
(dp4345
g163
(lp4346
(g25
g4312
tp4347
assg4302
(dp4348
g163
(lp4349
(g25
g4312
tp4350
asssg4302
(dp4351
sg4318
(dp4352
g4302
(dp4353
g163
(lp4354
(g25
g4311
tp4355
assssg174
g4335
sg175
(dp4356
g4260
(dp4357
sg4277
(dp4358
g4260
g4340
ssg4302
(dp4359
g4318
g4353
sg4277
g4348
ssg4318
(dp4360
g4260
g4337
sg4277
g4345
sssg180
g4335
sbsg43
g4273
sg65
g66
sg75
g4273
sg76
g181
((lp4361
(lp4362
g184
ag181
((lp4363
(lp4364
g187
ag184
aa(lp4365
g189
ag190
aa(lp4366
g192
ag193
aa(lp4367
g195
ag196
aa(lp4368
g198
ag199
aa(lp4369
g201
ag106
aa(lp4370
g203
ag204
aa(lp4371
g206
ag207
aatp4372
Rp4373
aa(lp4374
g211
ag181
((lp4375
(lp4376
g187
ag211
aa(lp4377
g215
ag216
aa(lp4378
g218
ag219
aa(lp4379
g221
ag222
aa(lp4380
g224
ag225
aa(lp4381
g227
ag228
aa(lp4382
g230
ag231
aa(lp4383
g233
ag234
aa(lp4384
g236
ag237
aa(lp4385
g239
ag240
aa(lp4386
g242
ag243
aa(lp4387
g245
ag246
aa(lp4388
g248
ag249
aa(lp4389
g251
ag252
aa(lp4390
g254
ag255
aa(lp4391
g257
ag258
aa(lp4392
g260
ag261
aa(lp4393
g263
ag264
aa(lp4394
g266
ag267
aatp4395
Rp4396
aa(lp4397
g271
ag181
((lp4398
(lp4399
g187
ag271
aa(lp4400
g275
ag276
aatp4401
Rp4402
aatp4403
Rp4404
sg80
Nsbtp4405
a(g2490
g1
(g81
g3
Ntp4406
Rp4407
(dp4408
g85
g1
(g86
g3
Ntp4409
Rp4410
(dp4411
g90
(dp4412
g1
(g92
g3
Ntp4413
Rp4414
(dp4415
g7
(dp4416
sg9
g1
(g97
g3
Ntp4417
Rp4418
(dp4419
g14
g15
(g53
tp4420
Rp4421
(dp4422
g28
g29
sg3620
I3
sg3320
g23
sg3621
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_brain.nii.gz'
p4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp4424
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp4425
sg65
S'apply_ants_warp_functional_mni_0'
p4426
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp4427
sg79
Nsg80
Nsb(dp4428
sg1
(g92
g3
Ntp4429
Rp4430
(dp4431
g7
(dp4432
sg9
g1
(g3632
g3
Ntp4433
Rp4434
(dp4435
g14
g15
(g3636
tp4436
Rp4437
(dp4438
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp4439
tp4440
Rp4441
(dp4442
g41
S'environ_items'
p4443
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp4444
sg65
g4426
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp4445
sg79
Nsg80
Nsb(dp4446
sg1
(g92
g3
Ntp4447
Rp4448
(dp4449
g7
(dp4450
sg9
g1
(g97
g3
Ntp4451
Rp4452
(dp4453
g14
g15
(g53
tp4454
Rp4455
(dp4456
g28
g29
sg3640
g23
sbsg108
(lp4457
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp4458
sg65
g4426
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp4459
sg79
Nsg80
Nsb(dp4460
ssg157
(dp4461
sg159
(dp4462
g4414
(dp4463
g4430
(dp4464
g163
(lp4465
(g3622
g3622
tp4466
a(g3621
g3621
tp4467
a(g3320
g3320
tp4468
a(g3371
g3371
tp4469
a(g3620
g3620
tp4470
a(g3344
g3344
tp4471
asssg4430
(dp4472
g4448
(dp4473
g163
(lp4474
(g3640
g3640
tp4475
asssg4448
(dp4476
ssg174
g4462
sg175
(dp4477
g4414
(dp4478
sg4430
(dp4479
g4414
g4464
ssg4448
(dp4480
g4430
g4473
sssg180
g4462
sbsg43
g4426
sg65
g66
sg75
g4426
sg76
g181
((lp4481
(lp4482
g184
ag181
((lp4483
(lp4484
g187
ag184
aa(lp4485
g189
ag190
aa(lp4486
g192
ag193
aa(lp4487
g195
ag196
aa(lp4488
g198
ag199
aa(lp4489
g201
ag106
aa(lp4490
g203
ag204
aa(lp4491
g206
ag207
aatp4492
Rp4493
aa(lp4494
g211
ag181
((lp4495
(lp4496
g187
ag211
aa(lp4497
g215
ag216
aa(lp4498
g218
ag219
aa(lp4499
g221
ag222
aa(lp4500
g224
ag225
aa(lp4501
g227
ag228
aa(lp4502
g230
ag231
aa(lp4503
g233
ag234
aa(lp4504
g236
ag237
aa(lp4505
g239
ag240
aa(lp4506
g242
ag243
aa(lp4507
g245
ag246
aa(lp4508
g248
ag249
aa(lp4509
g251
ag252
aa(lp4510
g254
ag255
aa(lp4511
g257
ag258
aa(lp4512
g260
ag261
aa(lp4513
g263
ag264
aa(lp4514
g266
ag267
aatp4515
Rp4516
aa(lp4517
g271
ag181
((lp4518
(lp4519
g187
ag271
aa(lp4520
g275
ag276
aatp4521
Rp4522
aatp4523
Rp4524
sg80
Nsbtp4525
a(g2490
g1
(g81
g3
Ntp4526
Rp4527
(dp4528
g85
g1
(g86
g3
Ntp4529
Rp4530
(dp4531
g90
(dp4532
g1
(g92
g3
Ntp4533
Rp4534
(dp4535
g7
(dp4536
sg9
g1
(g97
g3
Ntp4537
Rp4538
(dp4539
g14
g15
(g53
tp4540
Rp4541
(dp4542
g28
g29
sg4311
g23
sg4312
g23
sbsg108
(lp4543
g4312
ag4311
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp4544
sg65
S'sca_roi_0'
p4545
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp4546
sg79
Nsg80
Nsb(dp4547
sg1
(g92
g3
Ntp4548
Rp4549
(dp4550
g7
(dp4551
sg9
g1
(g4280
g3
Ntp4552
Rp4553
(dp4554
g14
g15
(g4284
tp4555
Rp4556
(dp4557
g20
I00
sg4288
g23
sg2830
I01
sg25
g23
sg4289
g23
sg4290
g23
sg26
g23
sg2831
g23
sg752
g1875
sg4291
g23
sg30
g31
sg32
g1
(g33
g34
(dp4558
tp4559
Rp4560
(dp4561
g41
S'environ_items'
p4562
sg43
g32
sbsg28
g29
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
g4297
sg63
(dp4563
sg65
g4545
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4297
sg76
Nsg77
(lp4564
sg79
Nsg80
Nsb(dp4565
sg1
(g92
g3
Ntp4566
Rp4567
(dp4568
g7
(dp4569
sg9
g1
(g97
g3
Ntp4570
Rp4571
(dp4572
g14
g15
(g53
tp4573
Rp4574
(dp4575
g4269
g23
sg28
g29
sg4270
g23
sbsg108
(lp4576
g4269
ag4270
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp4577
sg65
g4545
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp4578
sg79
Nsg80
Nsb(dp4579
sg1
(g92
g3
Ntp4580
Rp4581
(dp4582
g7
(dp4583
sg9
g1
(g135
g3
Ntp4584
Rp4585
(dp4586
g139
(lp4587
g4312
ag4269
asg14
g15
(g142
tp4588
Rp4589
(dp4590
g20
I00
sg4269
g23
sg146
S'S\'def compute_fisher_z_score(correlation_file, timeseries_one_d):\\n\\n    """\\n    Computes the fisher z transform of the input correlation map\\n    If the correlation map contains data for multiple ROIs then \\n    the function returns z score for each ROI as a seperate nifti \\n    file\\n\\n\\n    Parameters\\n    ----------\\n\\n    correlation_file: string\\n        Input correlations file\\n\\n\\n    Returns\\n    -------\\n\\n    out_file : list (nifti files)\\n        list of z_scores for mask or ROI\\n    """\\n\\n    import nibabel as nb\\n    import numpy as np\\n    import os\\n\\n    roi_numbers = []\\n    if \\\'#\\\' in open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\'):\\n        roi_numbers = open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\').replace(\\\'#\\\', \\\'\\\').split(\\\'\\\\t\\\')\\n\\n    corr_img = nb.load(correlation_file)\\n    corr_data = corr_img.get_data()\\n\\n    hdr = corr_img.get_header()\\n\\n    corr_data = np.log((1 + corr_data) / (1 - corr_data)) / 2.0\\n\\n    dims = corr_data.shape\\n\\n    out_file = []\\n\\n    if len(dims) == 5 or len(roi_numbers) > 0:\\n\\n        if len(dims) == 5:\\n            x, y, z, one, roi_number = dims\\n\\n            corr_data = np.reshape(corr_data, (x * y * z, roi_number), order=\\\'F\\\')\\n\\n\\n        for i in range(0, len(roi_numbers)):\\n\\n            sub_data = corr_data\\n            if len(dims) == 5:\\n                sub_data = np.reshape(corr_data[:, i], (x, y, z), order=\\\'F\\\')\\n\\n            sub_img = nb.Nifti1Image(sub_data, header=corr_img.get_header(), affine=corr_img.get_affine())\\n\\n            sub_z_score_file = os.path.join(os.getcwd(), \\\'z_score_ROI_number_%s.nii.gz\\\' % (roi_numbers[i]))\\n\\n            sub_img.to_filename(sub_z_score_file)\\n\\n            out_file.append(sub_z_score_file)\\n\\n    else:\\n\\n        z_score_img = nb.Nifti1Image(corr_data, header=hdr, affine=corr_img.get_affine())\\n\\n        z_score_file = os.path.join(os.getcwd(), \\\'z_score.nii.gz\\\')\\n\\n        z_score_img.to_filename(z_score_file)\\n\\n        out_file.append(z_score_file)\\n\\n\\n    return out_file\\n\'\n.'
p4591
sg4312
g23
sg28
g29
sbsg148
(dp4592
g25
Nssg150
(lp4593
g25
asg152
Nsbsg51
Nsg43
g2549
sg63
(dp4594
sg65
g4545
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp4595
sg79
Nsg80
Nsb(dp4596
ssg157
(dp4597
sg159
(dp4598
g4534
(dp4599
sg4549
(dp4600
g4581
(dp4601
g163
(lp4602
(g25
g4312
tp4603
assg4534
(dp4604
g163
(lp4605
(g25
g4312
tp4606
asssg4567
(dp4607
g4549
(dp4608
g163
(lp4609
(g4269
g4289
tp4610
a(g4270
g2831
tp4611
assg4581
(dp4612
g163
(lp4613
(g4269
g4269
tp4614
asssg4581
(dp4615
g4534
(dp4616
g163
(lp4617
(g25
g4311
tp4618
assssg174
g4598
sg175
(dp4619
g4534
(dp4620
g4549
g4604
sg4581
g4616
ssg4549
(dp4621
g4567
g4608
ssg4567
(dp4622
sg4581
(dp4623
g4549
g4601
sg4567
g4612
sssg180
g4598
sbsg43
g4545
sg65
g66
sg75
g4545
sg76
g181
((lp4624
(lp4625
g184
ag181
((lp4626
(lp4627
g187
ag184
aa(lp4628
g189
ag190
aa(lp4629
g192
ag193
aa(lp4630
g195
ag196
aa(lp4631
g198
ag199
aa(lp4632
g201
ag106
aa(lp4633
g203
ag204
aa(lp4634
g206
ag207
aatp4635
Rp4636
aa(lp4637
g211
ag181
((lp4638
(lp4639
g187
ag211
aa(lp4640
g215
ag216
aa(lp4641
g218
ag219
aa(lp4642
g221
ag222
aa(lp4643
g224
ag225
aa(lp4644
g227
ag228
aa(lp4645
g230
ag231
aa(lp4646
g233
ag234
aa(lp4647
g236
ag237
aa(lp4648
g239
ag240
aa(lp4649
g242
ag243
aa(lp4650
g245
ag246
aa(lp4651
g248
ag249
aa(lp4652
g251
ag252
aa(lp4653
g254
ag255
aa(lp4654
g257
ag258
aa(lp4655
g260
ag261
aa(lp4656
g263
ag264
aa(lp4657
g266
ag267
aatp4658
Rp4659
aa(lp4660
g271
ag181
((lp4661
(lp4662
g187
ag271
aa(lp4663
g275
ag276
aatp4664
Rp4665
aatp4666
Rp4667
sg80
Nsbtp4668
a(g2490
g1
(g81
g3
Ntp4669
Rp4670
(dp4671
g85
g1
(g86
g3
Ntp4672
Rp4673
(dp4674
g90
(dp4675
g1
(g92
g3
Ntp4676
Rp4677
(dp4678
g7
(dp4679
sg9
g1
(g1950
g3
Ntp4680
Rp4681
(dp4682
g14
g15
(g1954
tp4683
Rp4684
(dp4685
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
g1960
sg26
g23
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp4686
tp4687
Rp4688
(dp4689
g41
S'environ_items'
p4690
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'scrubbed_preprocessed'
p4691
sg63
(dp4692
sg65
S'scrubbing_0'
p4693
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4691
sg76
Nsg77
(lp4694
sg79
Nsg80
Nsb(dp4695
sg1
(g92
g3
Ntp4696
Rp4697
(dp4698
g7
(dp4699
sg9
g1
(g97
g3
Ntp4700
Rp4701
(dp4702
g14
g15
(g53
tp4703
Rp4704
(dp4705
g28
g29
sg2188
g23
sS'scrubbed_movement_parameters'
p4706
g23
sbsg108
(lp4707
g2188
ag4706
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp4708
sg65
g4693
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp4709
sg79
Nsg80
Nsb(dp4710
sg1
(g92
g3
Ntp4711
Rp4712
(dp4713
g7
(dp4714
sg9
g1
(g97
g3
Ntp4715
Rp4716
(dp4717
g14
g15
(g53
tp4718
Rp4719
(dp4720
S'frames_in_1D'
p4721
g23
sg2188
g23
sg28
g29
sg2191
g23
sbsg108
(lp4722
g4721
ag2191
ag2188
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp4723
sg65
g4693
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp4724
sg79
Nsg80
Nsb(dp4725
sg1
(g92
g3
Ntp4726
Rp4727
(dp4728
g7
(dp4729
sg9
g1
(g135
g3
Ntp4730
Rp4731
(dp4732
g139
(lp4733
S'infile_a'
p4734
aS'infile_b'
p4735
asg14
g15
(g142
tp4736
Rp4737
(dp4738
g4735
g23
sg20
I00
sg4734
g23
sg146
S'S\'def get_mov_parameters(infile_a, infile_b):\\n    """\\n    Method to get the new movement parameters\\n    file after removing the offending time frames \\n    (i.e., those exceeding FD 0.5mm/0.2mm threshold)\\n\\n    Parameters\\n    ----------\\n    infile_a : string\\n        path to file containing the valid time frames\\n\\n    infile_b : string\\n        path to the file containing  motion parameters \\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to the file containing motion parameters\\n        for the valid time frames \\n\\n    """\\n    import os\\n    import warnings\\n\\n    out_file = os.path.join(os.getcwd(), \\\'rest_mc_scrubbed.1D\\\')\\n\\n    f1= open(infile_a)\\n    f2=open(infile_b)\\n    l1=f1.readline()\\n    l2=f2.readlines()\\n    f1.close()\\n    f2.close()\\n\\n    if l1:\\n        l1=l1.rstrip(\\\',\\\').split(\\\',\\\')\\n        warnings.warn("number of timepoints remaining after scrubbing -> %d"%len(l1))\\n    else:\\n        raise Exception("No time points remaining after scrubbing.")\\n\\n    f = open(out_file, \\\'a\\\')\\n    for l in l1:\\n        data=l2[int(l.strip())]\\n        f.write(data)\\n    f.close()\\n    return out_file\\n\'\n.'
p4739
sg28
g29
sbsg148
(dp4740
g25
Nssg150
(lp4741
g25
asg152
Nsbsg51
Nsg43
g4706
sg63
(dp4742
sg65
g4693
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4706
sg76
Nsg77
(lp4743
sg79
Nsg80
Nsb(dp4744
ssg157
(dp4745
sg159
(dp4746
g4677
(dp4747
g4697
(dp4748
g163
(lp4749
(g25
g2188
tp4750
asssg4697
(dp4751
sg4712
(dp4752
g4677
(dp4753
g163
(lp4754
(g2188
g1963
tp4755
assg4727
(dp4756
g163
(lp4757
(g2191
g4735
tp4758
a(g4721
g4734
tp4759
asssg4727
(dp4760
g4697
(dp4761
g163
(lp4762
(g25
g4706
tp4763
assssg174
g4746
sg175
(dp4764
g4677
(dp4765
g4712
g4753
ssg4697
(dp4766
g4677
g4748
sg4727
g4761
ssg4712
(dp4767
sg4727
(dp4768
g4712
g4756
sssg180
g4746
sbsg43
g4693
sg65
g66
sg75
g4693
sg76
g181
((lp4769
(lp4770
g184
ag181
((lp4771
(lp4772
g187
ag184
aa(lp4773
g189
ag190
aa(lp4774
g192
ag193
aa(lp4775
g195
ag196
aa(lp4776
g198
ag199
aa(lp4777
g201
ag106
aa(lp4778
g203
ag204
aa(lp4779
g206
ag207
aatp4780
Rp4781
aa(lp4782
g211
ag181
((lp4783
(lp4784
g187
ag211
aa(lp4785
g215
ag216
aa(lp4786
g218
ag219
aa(lp4787
g221
ag222
aa(lp4788
g224
ag225
aa(lp4789
g227
ag228
aa(lp4790
g230
ag231
aa(lp4791
g233
ag234
aa(lp4792
g236
ag237
aa(lp4793
g239
ag240
aa(lp4794
g242
ag243
aa(lp4795
g245
ag246
aa(lp4796
g248
ag249
aa(lp4797
g251
ag252
aa(lp4798
g254
ag255
aa(lp4799
g257
ag258
aa(lp4800
g260
ag261
aa(lp4801
g263
ag264
aa(lp4802
g266
ag267
aatp4803
Rp4804
aa(lp4805
g271
ag181
((lp4806
(lp4807
g187
ag271
aa(lp4808
g275
ag276
aatp4809
Rp4810
aatp4811
Rp4812
sg80
Nsbtp4813
a(g1
(g92
g3
Ntp4814
Rp4815
(dp4816
g7
(dp4817
sg9
g1
(g97
g3
Ntp4818
Rp4819
(dp4820
g14
g15
(g53
tp4821
Rp4822
(dp4823
g28
g29
sg2770
g23
sbsg108
(lp4824
g2770
asg110
I01
sbsg51
Nsg43
g2774
sg63
(dp4825
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g2770
(lp4826
I4
atp4827
sg74
I00
sg75
g2774
sg76
Nsg77
(lp4828
sg79
Nsg80
Nsbg1
(g92
g3
Ntp4829
Rp4830
(dp4831
g7
(dp4832
sg9
g1
(g10
g3
Ntp4833
Rp4834
(dp4835
g14
g15
(g16
tp4836
Rp4837
(dp4838
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4839
g36
g37
stp4840
Rp4841
(dp4842
g41
S'environ_items'
p4843
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_to_standard_smooth_0'
p4844
sg63
(dp4845
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4844
sg76
Nsg77
(lp4846
sg79
Nsg80
Nsbtp4847
a(g4815
g1320
tp4848
a(g4815
g426
tp4849
a(g4815
g1537
tp4850
a(g4815
g1
(g92
g3
Ntp4851
Rp4852
(dp4853
g7
(dp4854
sg9
g1
(g10
g3
Ntp4855
Rp4856
(dp4857
g14
g15
(g16
tp4858
Rp4859
(dp4860
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4861
g36
g37
stp4862
Rp4863
(dp4864
g41
S'environ_items'
p4865
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_to_standard_smooth_0'
p4866
sg63
(dp4867
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4866
sg76
Nsg77
(lp4868
sg79
Nsg80
Nsbtp4869
a(g4815
g1
(g92
g3
Ntp4870
Rp4871
(dp4872
g7
(dp4873
sg9
g1
(g10
g3
Ntp4874
Rp4875
(dp4876
g14
g15
(g16
tp4877
Rp4878
(dp4879
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4880
g36
g37
stp4881
Rp4882
(dp4883
g41
S'environ_items'
p4884
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_smooth_1'
p4885
sg63
(dp4886
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4885
sg76
Nsg77
(lp4887
sg79
Nsg80
Nsbtp4888
a(g4815
g1
(g92
g3
Ntp4889
Rp4890
(dp4891
g7
(dp4892
sg9
g1
(g10
g3
Ntp4893
Rp4894
(dp4895
g14
g15
(g16
tp4896
Rp4897
(dp4898
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4899
g36
g37
stp4900
Rp4901
(dp4902
g41
S'environ_items'
p4903
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_smooth_1'
p4904
sg63
(dp4905
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4904
sg76
Nsg77
(lp4906
sg79
Nsg80
Nsbtp4907
a(g4815
g1
(g92
g3
Ntp4908
Rp4909
(dp4910
g7
(dp4911
sg9
g1
(g10
g3
Ntp4912
Rp4913
(dp4914
g14
g15
(g16
tp4915
Rp4916
(dp4917
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4918
g36
g37
stp4919
Rp4920
(dp4921
g41
S'environ_items'
p4922
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_smooth_1'
p4923
sg63
(dp4924
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4923
sg76
Nsg77
(lp4925
sg79
Nsg80
Nsbtp4926
a(g4815
g1
(g2
g3
Ntp4927
Rp4928
(dp4929
g7
(dp4930
sg9
g1
(g10
g3
Ntp4931
Rp4932
(dp4933
g14
g15
(g16
tp4934
Rp4935
(dp4936
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4937
g36
g37
stp4938
Rp4939
(dp4940
g41
S'environ_items'
p4941
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp4942
Rp4943
(dp4944
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4945
g36
g37
stp4946
Rp4947
(dp4948
g41
S'environ_items'
p4949
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'dr_tempreg_maps_Z_files_smooth_1'
p4950
sg63
(dp4951
sg65
g66
sg67
(lp4952
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4950
sg76
Nsg77
(lp4953
sg79
Nsg80
Nsbtp4954
a(g4815
g1
(g92
g3
Ntp4955
Rp4956
(dp4957
g7
(dp4958
sg9
g1
(g10
g3
Ntp4959
Rp4960
(dp4961
g14
g15
(g16
tp4962
Rp4963
(dp4964
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4965
g36
g37
stp4966
Rp4967
(dp4968
g41
S'environ_items'
p4969
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'dr_tempreg_maps_Z_stack_smooth_1'
p4970
sg63
(dp4971
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4970
sg76
Nsg77
(lp4972
sg79
Nsg80
Nsbtp4973
a(g4815
g1
(g92
g3
Ntp4974
Rp4975
(dp4976
g7
(dp4977
sg9
g1
(g10
g3
Ntp4978
Rp4979
(dp4980
g14
g15
(g16
tp4981
Rp4982
(dp4983
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp4984
g36
g37
stp4985
Rp4986
(dp4987
g41
S'environ_items'
p4988
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_to_standard_smooth_1'
p4989
sg63
(dp4990
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4989
sg76
Nsg77
(lp4991
sg79
Nsg80
Nsbtp4992
a(g4815
g1
(g92
g3
Ntp4993
Rp4994
(dp4995
g7
(dp4996
sg9
g1
(g10
g3
Ntp4997
Rp4998
(dp4999
g14
g15
(g16
tp5000
Rp5001
(dp5002
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5003
g36
g37
stp5004
Rp5005
(dp5006
g41
S'environ_items'
p5007
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_smooth_0'
p5008
sg63
(dp5009
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5008
sg76
Nsg77
(lp5010
sg79
Nsg80
Nsbtp5011
a(g4815
g1
(g92
g3
Ntp5012
Rp5013
(dp5014
g7
(dp5015
sg9
g1
(g10
g3
Ntp5016
Rp5017
(dp5018
g14
g15
(g16
tp5019
Rp5020
(dp5021
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5022
g36
g37
stp5023
Rp5024
(dp5025
g41
S'environ_items'
p5026
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_smooth_0'
p5027
sg63
(dp5028
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5027
sg76
Nsg77
(lp5029
sg79
Nsg80
Nsbtp5030
a(g4815
g1
(g92
g3
Ntp5031
Rp5032
(dp5033
g7
(dp5034
sg9
g1
(g10
g3
Ntp5035
Rp5036
(dp5037
g14
g15
(g16
tp5038
Rp5039
(dp5040
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5041
g36
g37
stp5042
Rp5043
(dp5044
g41
S'environ_items'
p5045
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'dr_tempreg_maps_Z_stack_smooth_0'
p5046
sg63
(dp5047
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5046
sg76
Nsg77
(lp5048
sg79
Nsg80
Nsbtp5049
a(g4815
g1
(g92
g3
Ntp5050
Rp5051
(dp5052
g7
(dp5053
sg9
g1
(g10
g3
Ntp5054
Rp5055
(dp5056
g14
g15
(g16
tp5057
Rp5058
(dp5059
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5060
g36
g37
stp5061
Rp5062
(dp5063
g41
S'environ_items'
p5064
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_smooth_0'
p5065
sg63
(dp5066
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5065
sg76
Nsg77
(lp5067
sg79
Nsg80
Nsbtp5068
a(g4815
g1
(g92
g3
Ntp5069
Rp5070
(dp5071
g7
(dp5072
sg9
g1
(g10
g3
Ntp5073
Rp5074
(dp5075
g14
g15
(g16
tp5076
Rp5077
(dp5078
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5079
g36
g37
stp5080
Rp5081
(dp5082
g41
S'environ_items'
p5083
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_to_standard_smooth_0'
p5084
sg63
(dp5085
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5084
sg76
Nsg77
(lp5086
sg79
Nsg80
Nsbtp5087
a(g4815
g1
(g2
g3
Ntp5088
Rp5089
(dp5090
g7
(dp5091
sg9
g1
(g10
g3
Ntp5092
Rp5093
(dp5094
g14
g15
(g16
tp5095
Rp5096
(dp5097
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5098
g36
g37
stp5099
Rp5100
(dp5101
g41
S'environ_items'
p5102
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp5103
Rp5104
(dp5105
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5106
g36
g37
stp5107
Rp5108
(dp5109
g41
S'environ_items'
p5110
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_tempreg_maps_Z_files_smooth_1'
p5111
sg63
(dp5112
sg65
g66
sg67
(lp5113
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5111
sg76
Nsg77
(lp5114
sg79
Nsg80
Nsbtp5115
a(g4815
g1
(g92
g3
Ntp5116
Rp5117
(dp5118
g7
(dp5119
sg9
g1
(g10
g3
Ntp5120
Rp5121
(dp5122
g14
g15
(g16
tp5123
Rp5124
(dp5125
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5126
g36
g37
stp5127
Rp5128
(dp5129
g41
S'environ_items'
p5130
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_to_standard_smooth_1'
p5131
sg63
(dp5132
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5131
sg76
Nsg77
(lp5133
sg79
Nsg80
Nsbtp5134
a(g4815
g569
tp5135
a(g4815
g1
(g92
g3
Ntp5136
Rp5137
(dp5138
g7
(dp5139
sg9
g1
(g10
g3
Ntp5140
Rp5141
(dp5142
g14
g15
(g16
tp5143
Rp5144
(dp5145
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5146
g36
g37
stp5147
Rp5148
(dp5149
g41
S'environ_items'
p5150
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_smooth_0'
p5151
sg63
(dp5152
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5151
sg76
Nsg77
(lp5153
sg79
Nsg80
Nsbtp5154
a(g4815
g1
(g2
g3
Ntp5155
Rp5156
(dp5157
g7
(dp5158
sg9
g1
(g10
g3
Ntp5159
Rp5160
(dp5161
g14
g15
(g16
tp5162
Rp5163
(dp5164
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5165
g36
g37
stp5166
Rp5167
(dp5168
g41
S'environ_items'
p5169
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp5170
Rp5171
(dp5172
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5173
g36
g37
stp5174
Rp5175
(dp5176
g41
S'environ_items'
p5177
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'dr_tempreg_maps_Z_files_smooth_0'
p5178
sg63
(dp5179
sg65
g66
sg67
(lp5180
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5178
sg76
Nsg77
(lp5181
sg79
Nsg80
Nsbtp5182
a(g4815
g1
(g92
g3
Ntp5183
Rp5184
(dp5185
g7
(dp5186
sg9
g1
(g10
g3
Ntp5187
Rp5188
(dp5189
g14
g15
(g16
tp5190
Rp5191
(dp5192
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5193
g36
g37
stp5194
Rp5195
(dp5196
g41
S'environ_items'
p5197
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_to_standard_smooth_1'
p5198
sg63
(dp5199
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5198
sg76
Nsg77
(lp5200
sg79
Nsg80
Nsbtp5201
a(g4815
g1
(g92
g3
Ntp5202
Rp5203
(dp5204
g7
(dp5205
sg9
g1
(g10
g3
Ntp5206
Rp5207
(dp5208
g14
g15
(g16
tp5209
Rp5210
(dp5211
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5212
g36
g37
stp5213
Rp5214
(dp5215
g41
S'environ_items'
p5216
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_smooth_0'
p5217
sg63
(dp5218
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5217
sg76
Nsg77
(lp5219
sg79
Nsg80
Nsbtp5220
a(g4815
g1
(g92
g3
Ntp5221
Rp5222
(dp5223
g7
(dp5224
sg9
g1
(g10
g3
Ntp5225
Rp5226
(dp5227
g14
g15
(g16
tp5228
Rp5229
(dp5230
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5231
g36
g37
stp5232
Rp5233
(dp5234
g41
S'environ_items'
p5235
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_to_standard_smooth_0'
p5236
sg63
(dp5237
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5236
sg76
Nsg77
(lp5238
sg79
Nsg80
Nsbtp5239
a(g4815
g1
(g92
g3
Ntp5240
Rp5241
(dp5242
g7
(dp5243
sg9
g1
(g10
g3
Ntp5244
Rp5245
(dp5246
g14
g15
(g16
tp5247
Rp5248
(dp5249
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5250
g36
g37
stp5251
Rp5252
(dp5253
g41
S'environ_items'
p5254
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_smooth_2'
p5255
sg63
(dp5256
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5255
sg76
Nsg77
(lp5257
sg79
Nsg80
Nsbtp5258
a(g4815
g283
tp5259
a(g4815
g712
tp5260
a(g4815
g1
(g92
g3
Ntp5261
Rp5262
(dp5263
g7
(dp5264
sg9
g1
(g10
g3
Ntp5265
Rp5266
(dp5267
g14
g15
(g16
tp5268
Rp5269
(dp5270
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5271
g36
g37
stp5272
Rp5273
(dp5274
g41
S'environ_items'
p5275
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_to_standard_smooth_3'
p5276
sg63
(dp5277
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5276
sg76
Nsg77
(lp5278
sg79
Nsg80
Nsbtp5279
a(g4815
g1
(g2
g3
Ntp5280
Rp5281
(dp5282
g7
(dp5283
sg9
g1
(g10
g3
Ntp5284
Rp5285
(dp5286
g14
g15
(g16
tp5287
Rp5288
(dp5289
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5290
g36
g37
stp5291
Rp5292
(dp5293
g41
S'environ_items'
p5294
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp5295
Rp5296
(dp5297
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5298
g36
g37
stp5299
Rp5300
(dp5301
g41
S'environ_items'
p5302
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_tempreg_maps_Z_files_smooth_0'
p5303
sg63
(dp5304
sg65
g66
sg67
(lp5305
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5303
sg76
Nsg77
(lp5306
sg79
Nsg80
Nsbtp5307
a(g4815
g1708
tp5308
a(g4815
g1
(g92
g3
Ntp5309
Rp5310
(dp5311
g7
(dp5312
sg9
g1
(g10
g3
Ntp5313
Rp5314
(dp5315
g14
g15
(g16
tp5316
Rp5317
(dp5318
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5319
g36
g37
stp5320
Rp5321
(dp5322
g41
S'environ_items'
p5323
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_to_standard_smooth_0'
p5324
sg63
(dp5325
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5324
sg76
Nsg77
(lp5326
sg79
Nsg80
Nsbtp5327
a(g4815
g1
(g2
g3
Ntp5328
Rp5329
(dp5330
g7
(dp5331
sg9
g1
(g10
g3
Ntp5332
Rp5333
(dp5334
g14
g15
(g16
tp5335
Rp5336
(dp5337
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5338
g36
g37
stp5339
Rp5340
(dp5341
g41
S'environ_items'
p5342
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp5343
Rp5344
(dp5345
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5346
g36
g37
stp5347
Rp5348
(dp5349
g41
S'environ_items'
p5350
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_tempreg_maps_Z_stack_smooth_0'
p5351
sg63
(dp5352
sg65
g66
sg67
(lp5353
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5351
sg76
Nsg77
(lp5354
sg79
Nsg80
Nsbtp5355
a(g4815
g1265
tp5356
a(g4815
g1
(g92
g3
Ntp5357
Rp5358
(dp5359
g7
(dp5360
sg9
g1
(g10
g3
Ntp5361
Rp5362
(dp5363
g14
g15
(g16
tp5364
Rp5365
(dp5366
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5367
g36
g37
stp5368
Rp5369
(dp5370
g41
S'environ_items'
p5371
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'dr_tempreg_maps_stack_smooth_1'
p5372
sg63
(dp5373
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5372
sg76
Nsg77
(lp5374
sg79
Nsg80
Nsbtp5375
a(g4815
g1
(g92
g3
Ntp5376
Rp5377
(dp5378
g7
(dp5379
sg9
g1
(g10
g3
Ntp5380
Rp5381
(dp5382
g14
g15
(g16
tp5383
Rp5384
(dp5385
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5386
g36
g37
stp5387
Rp5388
(dp5389
g41
S'environ_items'
p5390
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_to_standard_smooth_0'
p5391
sg63
(dp5392
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5391
sg76
Nsg77
(lp5393
sg79
Nsg80
Nsbtp5394
a(g4815
g5
tp5395
a(g4815
g890
tp5396
a(g4815
g1
(g92
g3
Ntp5397
Rp5398
(dp5399
g7
(dp5400
sg9
g1
(g10
g3
Ntp5401
Rp5402
(dp5403
g14
g15
(g16
tp5404
Rp5405
(dp5406
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5407
g36
g37
stp5408
Rp5409
(dp5410
g41
S'environ_items'
p5411
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_smooth_1'
p5412
sg63
(dp5413
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5412
sg76
Nsg77
(lp5414
sg79
Nsg80
Nsbtp5415
a(g4815
g1
(g92
g3
Ntp5416
Rp5417
(dp5418
g7
(dp5419
sg9
g1
(g10
g3
Ntp5420
Rp5421
(dp5422
g14
g15
(g16
tp5423
Rp5424
(dp5425
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5426
g36
g37
stp5427
Rp5428
(dp5429
g41
S'environ_items'
p5430
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_smooth_1'
p5431
sg63
(dp5432
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5431
sg76
Nsg77
(lp5433
sg79
Nsg80
Nsbtp5434
a(g4815
g993
tp5435
a(g4815
g1
(g92
g3
Ntp5436
Rp5437
(dp5438
g7
(dp5439
sg9
g1
(g10
g3
Ntp5440
Rp5441
(dp5442
g14
g15
(g16
tp5443
Rp5444
(dp5445
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5446
g36
g37
stp5447
Rp5448
(dp5449
g41
S'environ_items'
p5450
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'dr_tempreg_maps_stack_smooth_0'
p5451
sg63
(dp5452
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5451
sg76
Nsg77
(lp5453
sg79
Nsg80
Nsbtp5454
a(g4815
g1
(g92
g3
Ntp5455
Rp5456
(dp5457
g7
(dp5458
sg9
g1
(g10
g3
Ntp5459
Rp5460
(dp5461
g14
g15
(g16
tp5462
Rp5463
(dp5464
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5465
g36
g37
stp5466
Rp5467
(dp5468
g41
S'environ_items'
p5469
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_smooth_1'
p5470
sg63
(dp5471
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5470
sg76
Nsg77
(lp5472
sg79
Nsg80
Nsbtp5473
a(g4815
g1
(g92
g3
Ntp5474
Rp5475
(dp5476
g7
(dp5477
sg9
g1
(g10
g3
Ntp5478
Rp5479
(dp5480
g14
g15
(g16
tp5481
Rp5482
(dp5483
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5484
g36
g37
stp5485
Rp5486
(dp5487
g41
S'environ_items'
p5488
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_to_standard_smooth_2'
p5489
sg63
(dp5490
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5489
sg76
Nsg77
(lp5491
sg79
Nsg80
Nsbtp5492
a(g4815
g1
(g92
g3
Ntp5493
Rp5494
(dp5495
g7
(dp5496
sg9
g1
(g10
g3
Ntp5497
Rp5498
(dp5499
g14
g15
(g16
tp5500
Rp5501
(dp5502
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5503
g36
g37
stp5504
Rp5505
(dp5506
g41
S'environ_items'
p5507
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_to_standard_smooth_1'
p5508
sg63
(dp5509
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5508
sg76
Nsg77
(lp5510
sg79
Nsg80
Nsbtp5511
a(g4815
g1
(g2
g3
Ntp5512
Rp5513
(dp5514
g7
(dp5515
sg9
g1
(g10
g3
Ntp5516
Rp5517
(dp5518
g14
g15
(g16
tp5519
Rp5520
(dp5521
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5522
g36
g37
stp5523
Rp5524
(dp5525
g41
S'environ_items'
p5526
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp5527
Rp5528
(dp5529
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5530
g36
g37
stp5531
Rp5532
(dp5533
g41
S'environ_items'
p5534
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
S'sca_tempreg_maps_Z_stack_smooth_1'
p5535
sg63
(dp5536
sg65
g66
sg67
(lp5537
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5535
sg76
Nsg77
(lp5538
sg79
Nsg80
Nsbtp5539
a(g4815
g1
(g92
g3
Ntp5540
Rp5541
(dp5542
g7
(dp5543
sg9
g1
(g10
g3
Ntp5544
Rp5545
(dp5546
g14
g15
(g16
tp5547
Rp5548
(dp5549
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5550
g36
g37
stp5551
Rp5552
(dp5553
g41
S'environ_items'
p5554
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_to_standard_smooth_1'
p5555
sg63
(dp5556
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5555
sg76
Nsg77
(lp5557
sg79
Nsg80
Nsbtp5558
a(g4815
g1
(g92
g3
Ntp5559
Rp5560
(dp5561
g7
(dp5562
sg9
g1
(g10
g3
Ntp5563
Rp5564
(dp5565
g14
g15
(g16
tp5566
Rp5567
(dp5568
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5569
g36
g37
stp5570
Rp5571
(dp5572
g41
S'environ_items'
p5573
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_smooth_1'
p5574
sg63
(dp5575
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5574
sg76
Nsg77
(lp5576
sg79
Nsg80
Nsbtp5577
a(g4815
g1164
tp5578
a(g4815
g1
(g92
g3
Ntp5579
Rp5580
(dp5581
g7
(dp5582
sg9
g1
(g10
g3
Ntp5583
Rp5584
(dp5585
g14
g15
(g16
tp5586
Rp5587
(dp5588
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5589
g36
g37
stp5590
Rp5591
(dp5592
g41
S'environ_items'
p5593
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_to_standard_smooth_0'
p5594
sg63
(dp5595
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5594
sg76
Nsg77
(lp5596
sg79
Nsg80
Nsbtp5597
a(g4815
g1
(g92
g3
Ntp5598
Rp5599
(dp5600
g7
(dp5601
sg9
g1
(g10
g3
Ntp5602
Rp5603
(dp5604
g14
g15
(g16
tp5605
Rp5606
(dp5607
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5608
g36
g37
stp5609
Rp5610
(dp5611
g41
S'environ_items'
p5612
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_smooth_3'
p5613
sg63
(dp5614
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5613
sg76
Nsg77
(lp5615
sg79
Nsg80
Nsbtp5616
a(g4815
g1
(g92
g3
Ntp5617
Rp5618
(dp5619
g7
(dp5620
sg9
g1
(g10
g3
Ntp5621
Rp5622
(dp5623
g14
g15
(g16
tp5624
Rp5625
(dp5626
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5627
g36
g37
stp5628
Rp5629
(dp5630
g41
S'environ_items'
p5631
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_smooth_0'
p5632
sg63
(dp5633
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5632
sg76
Nsg77
(lp5634
sg79
Nsg80
Nsbtp5635
a(g4815
g1
(g92
g3
Ntp5636
Rp5637
(dp5638
g7
(dp5639
sg9
g1
(g10
g3
Ntp5640
Rp5641
(dp5642
g14
g15
(g16
tp5643
Rp5644
(dp5645
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5646
g36
g37
stp5647
Rp5648
(dp5649
g41
S'environ_items'
p5650
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_to_standard_smooth_1'
p5651
sg63
(dp5652
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5651
sg76
Nsg77
(lp5653
sg79
Nsg80
Nsbtp5654
a(g4815
g1
(g92
g3
Ntp5655
Rp5656
(dp5657
g7
(dp5658
sg9
g1
(g10
g3
Ntp5659
Rp5660
(dp5661
g14
g15
(g16
tp5662
Rp5663
(dp5664
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5665
g36
g37
stp5666
Rp5667
(dp5668
g41
S'environ_items'
p5669
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_to_standard_smooth_1'
p5670
sg63
(dp5671
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5670
sg76
Nsg77
(lp5672
sg79
Nsg80
Nsbtp5673
a(g4815
g1
(g92
g3
Ntp5674
Rp5675
(dp5676
g7
(dp5677
sg9
g1
(g10
g3
Ntp5678
Rp5679
(dp5680
g14
g15
(g16
tp5681
Rp5682
(dp5683
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp5684
g36
g37
stp5685
Rp5686
(dp5687
g41
S'environ_items'
p5688
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_smooth_0'
p5689
sg63
(dp5690
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5689
sg76
Nsg77
(lp5691
sg79
Nsg80
Nsbtp5692
a(g1
(g92
g3
Ntp5693
Rp5694
(dp5695
g7
(dp5696
sg9
g1
(cnipype.interfaces.fsl.preprocess
FLIRT
p5697
g3
Ntp5698
Rp5699
(dp5700
g14
g15
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p5701
tp5702
Rp5703
(dp5704
S'rigid2D'
p5705
g23
sg28
g29
sS'in_matrix_file'
p5706
S'/usr/share/fsl/5.0/etc/flirtsch/ident.mat'
p5707
sg1904
g23
sS'reference'
p5708
g23
sS'padding_size'
p5709
g23
sS'sinc_window'
p5710
g23
sg1874
S'nearestneighbour'
p5711
sS'wmnorms'
p5712
g23
sS'coarse_search'
p5713
g23
sS'no_resample'
p5714
g23
sS'sinc_width'
p5715
g23
sS'in_weight'
p5716
g23
sS'fieldmap'
p5717
g23
sS'echospacing'
p5718
g23
sS'ref_weight'
p5719
g23
sS'apply_isoxfm'
p5720
g23
sS'fieldmapmask'
p5721
g23
sg44
g23
sS'bbrtype'
p5722
g23
sS'no_clamp'
p5723
g23
sS'force_scaling'
p5724
g23
sS'pedir'
p5725
g23
sg20
I00
sS'display_init'
p5726
g23
sS'schedule'
p5727
g23
sg26
g23
sS'uses_qform'
p5728
g23
sS'wmcoords'
p5729
g23
sg30
g31
sS'fine_search'
p5730
g23
sS'angle_rep'
p5731
g23
sS'no_search'
p5732
g23
sS'apply_xfm'
p5733
I01
sS'wm_seg'
p5734
g23
sg25
g23
sS'bbrslope'
p5735
g23
sS'datatype'
p5736
g23
sS'save_log'
p5737
g23
sg4024
g23
sS'out_matrix_file'
p5738
g23
sS'no_resample_blur'
p5739
g23
sS'min_sampling'
p5740
g23
sS'cost_func'
p5741
g23
sS'cost'
p5742
g23
sg32
g1
(g33
g34
(dp5743
g36
g37
stp5744
Rp5745
(dp5746
g41
S'environ_items'
p5747
sg43
g32
sbsS'searchr_x'
p5748
g23
sS'out_log'
p5749
g23
sg45
g37
sS'searchr_z'
p5750
g23
sS'bins'
p5751
g23
sS'searchr_y'
p5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_spatial_map_to_native_space_0'
p5753
sg63
(dp5754
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5753
sg76
Nsg77
(lp5755
sg79
Nsg80
Nsbg1
(g81
g3
Ntp5756
Rp5757
(dp5758
g85
g1
(g86
g3
Ntp5759
Rp5760
(dp5761
g90
(dp5762
g1
(g92
g3
Ntp5763
Rp5764
(dp5765
g7
(dp5766
sg9
g1
(g97
g3
Ntp5767
Rp5768
(dp5769
g14
g15
(g53
tp5770
Rp5771
(dp5772
g28
g29
sg3947
g23
sbsg108
(lp5773
g3947
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp5774
sg65
S'spatial_map_timeseries_0'
p5775
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp5776
sg79
Nsg80
Nsb(dp5777
sg1
(g92
g3
Ntp5778
Rp5779
(dp5780
g7
(dp5781
sg9
g1
(g97
g3
Ntp5782
Rp5783
(dp5784
g14
g15
(g53
tp5785
Rp5786
(dp5787
S'spatial_map'
p5788
g23
sg3946
g23
sg3949
I01
sg28
g29
sg3948
g23
sbsg108
(lp5789
g3946
ag3948
ag5788
ag3949
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp5790
sg65
g5775
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp5791
sg79
Nsg80
Nsb(dp5792
sg1
(g92
g3
Ntp5793
Rp5794
(dp5795
g7
(dp5796
sg9
g1
(g4000
g3
Ntp5797
Rp5798
(dp5799
g14
g15
(g4004
tp5800
Rp5801
(dp5802
g28
g29
sg4008
g23
sg4009
g23
sg750
g23
sg4010
g23
sg4011
g23
sg4012
g23
sg4013
g23
sg4014
g23
sg44
g23
sg3949
g23
sg4015
g23
sg20
I00
sg4016
g23
sg26
g23
sg4017
g23
sg30
g31
sg4019
g23
sg4020
g23
sg4021
g23
sg4022
g23
sg25
S'spatial_map_timeseries.txt'
p5803
sg4024
g23
sg32
g1
(g33
g34
(dp5804
g36
g37
stp5805
Rp5806
(dp5807
g41
S'environ_items'
p5808
sg43
g32
sbsg45
g37
sg4030
g23
sg4031
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'spatial_regression'
p5809
sg63
(dp5810
sg65
g5775
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5809
sg76
Nsg77
(lp5811
sg79
Nsg80
Nsb(dp5812
ssg157
(dp5813
sg159
(dp5814
g5764
(dp5815
sg5779
(dp5816
g5794
(dp5817
g163
(lp5818
(g3946
g44
tp5819
a(g3948
g750
tp5820
a(g5788
g4013
tp5821
a(g3949
g3949
tp5822
asssg5794
(dp5823
g5764
(dp5824
g163
(lp5825
(g25
g3947
tp5826
assssg174
g5814
sg175
(dp5827
g5764
(dp5828
g5794
g5824
ssg5779
(dp5829
sg5794
(dp5830
g5779
g5817
sssg180
g5814
sbsg43
g5775
sg65
g66
sg75
g5775
sg76
g181
((lp5831
(lp5832
g184
ag181
((lp5833
(lp5834
g187
ag184
aa(lp5835
g189
ag190
aa(lp5836
g192
ag193
aa(lp5837
g195
ag196
aa(lp5838
g198
ag199
aa(lp5839
g201
ag106
aa(lp5840
g203
ag204
aa(lp5841
g206
ag207
aatp5842
Rp5843
aa(lp5844
g211
ag181
((lp5845
(lp5846
g187
ag211
aa(lp5847
g215
ag216
aa(lp5848
g218
ag219
aa(lp5849
g221
ag222
aa(lp5850
g224
ag225
aa(lp5851
g227
ag228
aa(lp5852
g230
ag231
aa(lp5853
g233
ag234
aa(lp5854
g236
ag237
aa(lp5855
g239
ag240
aa(lp5856
g242
ag243
aa(lp5857
g245
ag246
aa(lp5858
g248
ag249
aa(lp5859
g251
ag252
aa(lp5860
g254
ag255
aa(lp5861
g257
ag258
aa(lp5862
g260
ag261
aa(lp5863
g263
ag264
aa(lp5864
g266
ag267
aatp5865
Rp5866
aa(lp5867
g271
ag181
((lp5868
(lp5869
g187
ag271
aa(lp5870
g275
ag276
aatp5871
Rp5872
aatp5873
Rp5874
sg80
Nsbtp5875
a(g1
(g92
g3
Ntp5876
Rp5877
(dp5878
g7
(dp5879
sg9
g1
(g5697
g3
Ntp5880
Rp5881
(dp5882
g14
g15
(g5701
tp5883
Rp5884
(dp5885
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g5711
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp5886
g36
g37
stp5887
Rp5888
(dp5889
g41
S'environ_items'
p5890
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_spatial_map_to_native_space_1'
p5891
sg63
(dp5892
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5891
sg76
Nsg77
(lp5893
sg79
Nsg80
Nsbg1
(g81
g3
Ntp5894
Rp5895
(dp5896
g85
g1
(g86
g3
Ntp5897
Rp5898
(dp5899
g90
(dp5900
g1
(g92
g3
Ntp5901
Rp5902
(dp5903
g7
(dp5904
sg9
g1
(g97
g3
Ntp5905
Rp5906
(dp5907
g14
g15
(g53
tp5908
Rp5909
(dp5910
g5788
g23
sg3946
g23
sg3949
I01
sg28
g29
sg3948
g23
sbsg108
(lp5911
g3946
ag3948
ag5788
ag3949
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp5912
sg65
S'spatial_map_timeseries_1'
p5913
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp5914
sg79
Nsg80
Nsb(dp5915
sg1
(g92
g3
Ntp5916
Rp5917
(dp5918
g7
(dp5919
sg9
g1
(g97
g3
Ntp5920
Rp5921
(dp5922
g14
g15
(g53
tp5923
Rp5924
(dp5925
g28
g29
sg3947
g23
sbsg108
(lp5926
g3947
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp5927
sg65
g5913
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp5928
sg79
Nsg80
Nsb(dp5929
sg1
(g92
g3
Ntp5930
Rp5931
(dp5932
g7
(dp5933
sg9
g1
(g4000
g3
Ntp5934
Rp5935
(dp5936
g14
g15
(g4004
tp5937
Rp5938
(dp5939
g28
g29
sg4008
g23
sg4009
g23
sg750
g23
sg4010
g23
sg4011
g23
sg4012
g23
sg4013
g23
sg4014
g23
sg44
g23
sg3949
g23
sg4015
g23
sg20
I00
sg4016
g23
sg26
g23
sg4017
g23
sg30
g31
sg4019
g23
sg4020
g23
sg4021
g23
sg4022
g23
sg25
g5803
sg4024
g23
sg32
g1
(g33
g34
(dp5940
g36
g37
stp5941
Rp5942
(dp5943
g41
S'environ_items'
p5944
sg43
g32
sbsg45
g37
sg4030
g23
sg4031
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g5809
sg63
(dp5945
sg65
g5913
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g5809
sg76
Nsg77
(lp5946
sg79
Nsg80
Nsb(dp5947
ssg157
(dp5948
sg159
(dp5949
g5902
(dp5950
g5931
(dp5951
g163
(lp5952
(g3946
g44
tp5953
a(g3948
g750
tp5954
a(g5788
g4013
tp5955
a(g3949
g3949
tp5956
asssg5917
(dp5957
sg5931
(dp5958
g5917
(dp5959
g163
(lp5960
(g25
g3947
tp5961
assssg174
g5949
sg175
(dp5962
g5902
(dp5963
sg5917
(dp5964
g5931
g5959
ssg5931
(dp5965
g5902
g5951
sssg180
g5949
sbsg43
g5913
sg65
g66
sg75
g5913
sg76
g181
((lp5966
(lp5967
g184
ag181
((lp5968
(lp5969
g187
ag184
aa(lp5970
g189
ag190
aa(lp5971
g192
ag193
aa(lp5972
g195
ag196
aa(lp5973
g198
ag199
aa(lp5974
g201
ag106
aa(lp5975
g203
ag204
aa(lp5976
g206
ag207
aatp5977
Rp5978
aa(lp5979
g211
ag181
((lp5980
(lp5981
g187
ag211
aa(lp5982
g215
ag216
aa(lp5983
g218
ag219
aa(lp5984
g221
ag222
aa(lp5985
g224
ag225
aa(lp5986
g227
ag228
aa(lp5987
g230
ag231
aa(lp5988
g233
ag234
aa(lp5989
g236
ag237
aa(lp5990
g239
ag240
aa(lp5991
g242
ag243
aa(lp5992
g245
ag246
aa(lp5993
g248
ag249
aa(lp5994
g251
ag252
aa(lp5995
g254
ag255
aa(lp5996
g257
ag258
aa(lp5997
g260
ag261
aa(lp5998
g263
ag264
aa(lp5999
g266
ag267
aatp6000
Rp6001
aa(lp6002
g271
ag181
((lp6003
(lp6004
g187
ag271
aa(lp6005
g275
ag276
aatp6006
Rp6007
aatp6008
Rp6009
sg80
Nsbtp6010
a(g1
(g92
g3
Ntp6011
Rp6012
(dp6013
g7
(dp6014
sg9
g1
(g5697
g3
Ntp6015
Rp6016
(dp6017
g14
g15
(g5701
tp6018
Rp6019
(dp6020
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
S'trilinear'
p6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp6022
g36
g37
stp6023
Rp6024
(dp6025
g41
S'environ_items'
p6026
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_mask_0'
p6027
sg63
(dp6028
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6027
sg76
Nsg77
(lp6029
sg79
Nsg80
Nsbg1
(g81
g3
Ntp6030
Rp6031
(dp6032
g85
g1
(g86
g3
Ntp6033
Rp6034
(dp6035
g90
(dp6036
g1
(g92
g3
Ntp6037
Rp6038
(dp6039
g7
(dp6040
sg9
g1
(g97
g3
Ntp6041
Rp6042
(dp6043
g14
g15
(g53
tp6044
Rp6045
(dp6046
g28
g29
sg45
(lp6047
I00
aI00
asg2249
g23
sbsg108
(lp6048
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp6049
sg65
S'voxel_timeseries_0'
p6050
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp6051
sg79
Nsg80
Nsb(dp6052
sg1
(g92
g3
Ntp6053
Rp6054
(dp6055
g7
(dp6056
sg9
g1
(g135
g3
Ntp6057
Rp6058
(dp6059
g139
(lp6060
S'data_file'
p6061
aS'template'
p6062
ag45
asg14
g15
(g142
tp6063
Rp6064
(dp6065
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p6066
sg6062
g23
sg45
g23
sbsg148
(dp6067
g25
Nssg150
(lp6068
g25
asg152
Nsbsg51
Nsg43
S'timeseries_voxel'
p6069
sg63
(dp6070
sg65
g6050
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6069
sg76
Nsg77
(lp6071
sg79
Nsg80
Nsb(dp6072
sg1
(g92
g3
Ntp6073
Rp6074
(dp6075
g7
(dp6076
sg9
g1
(g97
g3
Ntp6077
Rp6078
(dp6079
g14
g15
(g53
tp6080
Rp6081
(dp6082
g28
g29
sS'mask_outputs'
p6083
g23
sbsg108
(lp6084
g6083
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp6085
sg65
g6050
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp6086
sg79
Nsg80
Nsb(dp6087
sg1
(g92
g3
Ntp6088
Rp6089
(dp6090
g7
(dp6091
sg9
g1
(g97
g3
Ntp6092
Rp6093
(dp6094
g14
g15
(g53
tp6095
Rp6096
(dp6097
g28
g29
sg750
g23
sbsg108
(lp6098
g750
asg110
I01
sbsg51
Nsg43
S'input_mask'
p6099
sg63
(dp6100
sg65
g6050
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6099
sg76
Nsg77
(lp6101
sg79
Nsg80
Nsb(dp6102
ssg157
(dp6103
sg159
(dp6104
g6038
(dp6105
g6054
(dp6106
g163
(lp6107
(g2249
g6061
tp6108
a(g45
g45
tp6109
asssg6054
(dp6110
g6074
(dp6111
g163
(lp6112
(g25
g6083
tp6113
asssg6074
(dp6114
sg6089
(dp6115
g6054
(dp6116
g163
(lp6117
(g750
g6062
tp6118
assssg174
g6104
sg175
(dp6119
g6038
(dp6120
sg6054
(dp6121
g6038
g6106
sg6089
g6116
ssg6074
(dp6122
g6054
g6111
ssg6089
(dp6123
ssg180
g6104
sbsg43
g6050
sg65
g66
sg75
g6050
sg76
g181
((lp6124
(lp6125
g184
ag181
((lp6126
(lp6127
g187
ag184
aa(lp6128
g189
ag190
aa(lp6129
g192
ag193
aa(lp6130
g195
ag196
aa(lp6131
g198
ag199
aa(lp6132
g201
ag106
aa(lp6133
g203
ag204
aa(lp6134
g206
ag207
aatp6135
Rp6136
aa(lp6137
g211
ag181
((lp6138
(lp6139
g187
ag211
aa(lp6140
g215
ag216
aa(lp6141
g218
ag219
aa(lp6142
g221
ag222
aa(lp6143
g224
ag225
aa(lp6144
g227
ag228
aa(lp6145
g230
ag231
aa(lp6146
g233
ag234
aa(lp6147
g236
ag237
aa(lp6148
g239
ag240
aa(lp6149
g242
ag243
aa(lp6150
g245
ag246
aa(lp6151
g248
ag249
aa(lp6152
g251
ag252
aa(lp6153
g254
ag255
aa(lp6154
g257
ag258
aa(lp6155
g260
ag261
aa(lp6156
g263
ag264
aa(lp6157
g266
ag267
aatp6158
Rp6159
aa(lp6160
g271
ag181
((lp6161
(lp6162
g187
ag271
aa(lp6163
g275
ag276
aatp6164
Rp6165
aatp6166
Rp6167
sg80
Nsbtp6168
a(g1
(g92
g3
Ntp6169
Rp6170
(dp6171
g7
(dp6172
sg9
g1
(g5697
g3
Ntp6173
Rp6174
(dp6175
g14
g15
(g5701
tp6176
Rp6177
(dp6178
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp6179
g36
g37
stp6180
Rp6181
(dp6182
g41
S'environ_items'
p6183
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_mask_for_sca_0'
p6184
sg63
(dp6185
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6184
sg76
Nsg77
(lp6186
sg79
Nsg80
Nsbg1
(g81
g3
Ntp6187
Rp6188
(dp6189
g85
g1
(g86
g3
Ntp6190
Rp6191
(dp6192
g90
(dp6193
g1
(g92
g3
Ntp6194
Rp6195
(dp6196
g7
(dp6197
sg9
g1
(g97
g3
Ntp6198
Rp6199
(dp6200
g14
g15
(g53
tp6201
Rp6202
(dp6203
g28
g29
sg45
(lp6204
I00
aI00
asg2249
g23
sbsg108
(lp6205
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp6206
sg65
S'voxel_timeseries_for_sca_0'
p6207
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp6208
sg79
Nsg80
Nsb(dp6209
sg1
(g92
g3
Ntp6210
Rp6211
(dp6212
g7
(dp6213
sg9
g1
(g135
g3
Ntp6214
Rp6215
(dp6216
g139
(lp6217
g6061
ag6062
ag45
asg14
g15
(g142
tp6218
Rp6219
(dp6220
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p6221
sg6062
g23
sg45
g23
sbsg148
(dp6222
g25
Nssg150
(lp6223
g25
asg152
Nsbsg51
Nsg43
g6069
sg63
(dp6224
sg65
g6207
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6069
sg76
Nsg77
(lp6225
sg79
Nsg80
Nsb(dp6226
sg1
(g92
g3
Ntp6227
Rp6228
(dp6229
g7
(dp6230
sg9
g1
(g97
g3
Ntp6231
Rp6232
(dp6233
g14
g15
(g53
tp6234
Rp6235
(dp6236
g28
g29
sg6083
g23
sbsg108
(lp6237
g6083
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp6238
sg65
g6207
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp6239
sg79
Nsg80
Nsb(dp6240
sg1
(g92
g3
Ntp6241
Rp6242
(dp6243
g7
(dp6244
sg9
g1
(g97
g3
Ntp6245
Rp6246
(dp6247
g14
g15
(g53
tp6248
Rp6249
(dp6250
g28
g29
sg750
g23
sbsg108
(lp6251
g750
asg110
I01
sbsg51
Nsg43
g6099
sg63
(dp6252
sg65
g6207
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6099
sg76
Nsg77
(lp6253
sg79
Nsg80
Nsb(dp6254
ssg157
(dp6255
sg159
(dp6256
g6195
(dp6257
g6211
(dp6258
g163
(lp6259
(g2249
g6061
tp6260
a(g45
g45
tp6261
asssg6211
(dp6262
g6228
(dp6263
g163
(lp6264
(g25
g6083
tp6265
asssg6228
(dp6266
sg6242
(dp6267
g6211
(dp6268
g163
(lp6269
(g750
g6062
tp6270
assssg174
g6256
sg175
(dp6271
g6195
(dp6272
sg6211
(dp6273
g6195
g6258
sg6242
g6268
ssg6228
(dp6274
g6211
g6263
ssg6242
(dp6275
ssg180
g6256
sbsg43
g6207
sg65
g66
sg75
g6207
sg76
g181
((lp6276
(lp6277
g184
ag181
((lp6278
(lp6279
g187
ag184
aa(lp6280
g189
ag190
aa(lp6281
g192
ag193
aa(lp6282
g195
ag196
aa(lp6283
g198
ag199
aa(lp6284
g201
ag106
aa(lp6285
g203
ag204
aa(lp6286
g206
ag207
aatp6287
Rp6288
aa(lp6289
g211
ag181
((lp6290
(lp6291
g187
ag211
aa(lp6292
g215
ag216
aa(lp6293
g218
ag219
aa(lp6294
g221
ag222
aa(lp6295
g224
ag225
aa(lp6296
g227
ag228
aa(lp6297
g230
ag231
aa(lp6298
g233
ag234
aa(lp6299
g236
ag237
aa(lp6300
g239
ag240
aa(lp6301
g242
ag243
aa(lp6302
g245
ag246
aa(lp6303
g248
ag249
aa(lp6304
g251
ag252
aa(lp6305
g254
ag255
aa(lp6306
g257
ag258
aa(lp6307
g260
ag261
aa(lp6308
g263
ag264
aa(lp6309
g266
ag267
aatp6310
Rp6311
aa(lp6312
g271
ag181
((lp6313
(lp6314
g187
ag271
aa(lp6315
g275
ag276
aatp6316
Rp6317
aatp6318
Rp6319
sg80
Nsbtp6320
a(g1
(g92
g3
Ntp6321
Rp6322
(dp6323
g7
(dp6324
sg9
g1
(g5697
g3
Ntp6325
Rp6326
(dp6327
g14
g15
(g5701
tp6328
Rp6329
(dp6330
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp6331
g36
g37
stp6332
Rp6333
(dp6334
g41
S'environ_items'
p6335
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_mask_1'
p6336
sg63
(dp6337
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6336
sg76
Nsg77
(lp6338
sg79
Nsg80
Nsbg1
(g81
g3
Ntp6339
Rp6340
(dp6341
g85
g1
(g86
g3
Ntp6342
Rp6343
(dp6344
g90
(dp6345
g1
(g92
g3
Ntp6346
Rp6347
(dp6348
g7
(dp6349
sg9
g1
(g135
g3
Ntp6350
Rp6351
(dp6352
g139
(lp6353
g6061
ag6062
ag45
asg14
g15
(g142
tp6354
Rp6355
(dp6356
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p6357
sg6062
g23
sg45
g23
sbsg148
(dp6358
g25
Nssg150
(lp6359
g25
asg152
Nsbsg51
Nsg43
g6069
sg63
(dp6360
sg65
S'voxel_timeseries_1'
p6361
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6069
sg76
Nsg77
(lp6362
sg79
Nsg80
Nsb(dp6363
sg1
(g92
g3
Ntp6364
Rp6365
(dp6366
g7
(dp6367
sg9
g1
(g97
g3
Ntp6368
Rp6369
(dp6370
g14
g15
(g53
tp6371
Rp6372
(dp6373
g28
g29
sg6083
g23
sbsg108
(lp6374
g6083
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp6375
sg65
g6361
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp6376
sg79
Nsg80
Nsb(dp6377
sg1
(g92
g3
Ntp6378
Rp6379
(dp6380
g7
(dp6381
sg9
g1
(g97
g3
Ntp6382
Rp6383
(dp6384
g14
g15
(g53
tp6385
Rp6386
(dp6387
g28
g29
sg45
(lp6388
I00
aI00
asg2249
g23
sbsg108
(lp6389
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp6390
sg65
g6361
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp6391
sg79
Nsg80
Nsb(dp6392
sg1
(g92
g3
Ntp6393
Rp6394
(dp6395
g7
(dp6396
sg9
g1
(g97
g3
Ntp6397
Rp6398
(dp6399
g14
g15
(g53
tp6400
Rp6401
(dp6402
g28
g29
sg750
g23
sbsg108
(lp6403
g750
asg110
I01
sbsg51
Nsg43
g6099
sg63
(dp6404
sg65
g6361
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6099
sg76
Nsg77
(lp6405
sg79
Nsg80
Nsb(dp6406
ssg157
(dp6407
sg159
(dp6408
g6347
(dp6409
g6365
(dp6410
g163
(lp6411
(g25
g6083
tp6412
asssg6365
(dp6413
sg6379
(dp6414
g6347
(dp6415
g163
(lp6416
(g2249
g6061
tp6417
a(g45
g45
tp6418
asssg6394
(dp6419
g6347
(dp6420
g163
(lp6421
(g750
g6062
tp6422
assssg174
g6408
sg175
(dp6423
g6347
(dp6424
g6379
g6415
sg6394
g6420
ssg6365
(dp6425
g6347
g6410
ssg6379
(dp6426
sg6394
(dp6427
ssg180
g6408
sbsg43
g6361
sg65
g66
sg75
g6361
sg76
g181
((lp6428
(lp6429
g184
ag181
((lp6430
(lp6431
g187
ag184
aa(lp6432
g189
ag190
aa(lp6433
g192
ag193
aa(lp6434
g195
ag196
aa(lp6435
g198
ag199
aa(lp6436
g201
ag106
aa(lp6437
g203
ag204
aa(lp6438
g206
ag207
aatp6439
Rp6440
aa(lp6441
g211
ag181
((lp6442
(lp6443
g187
ag211
aa(lp6444
g215
ag216
aa(lp6445
g218
ag219
aa(lp6446
g221
ag222
aa(lp6447
g224
ag225
aa(lp6448
g227
ag228
aa(lp6449
g230
ag231
aa(lp6450
g233
ag234
aa(lp6451
g236
ag237
aa(lp6452
g239
ag240
aa(lp6453
g242
ag243
aa(lp6454
g245
ag246
aa(lp6455
g248
ag249
aa(lp6456
g251
ag252
aa(lp6457
g254
ag255
aa(lp6458
g257
ag258
aa(lp6459
g260
ag261
aa(lp6460
g263
ag264
aa(lp6461
g266
ag267
aatp6462
Rp6463
aa(lp6464
g271
ag181
((lp6465
(lp6466
g187
ag271
aa(lp6467
g275
ag276
aatp6468
Rp6469
aatp6470
Rp6471
sg80
Nsbtp6472
a(g1
(g92
g3
Ntp6473
Rp6474
(dp6475
g7
(dp6476
sg9
g1
(g5697
g3
Ntp6477
Rp6478
(dp6479
g14
g15
(g5701
tp6480
Rp6481
(dp6482
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp6483
g36
g37
stp6484
Rp6485
(dp6486
g41
S'environ_items'
p6487
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_mask_for_sca_1'
p6488
sg63
(dp6489
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6488
sg76
Nsg77
(lp6490
sg79
Nsg80
Nsbg1
(g81
g3
Ntp6491
Rp6492
(dp6493
g85
g1
(g86
g3
Ntp6494
Rp6495
(dp6496
g90
(dp6497
g1
(g92
g3
Ntp6498
Rp6499
(dp6500
g7
(dp6501
sg9
g1
(g97
g3
Ntp6502
Rp6503
(dp6504
g14
g15
(g53
tp6505
Rp6506
(dp6507
g28
g29
sg45
(lp6508
I00
aI00
asg2249
g23
sbsg108
(lp6509
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp6510
sg65
S'voxel_timeseries_for_sca_1'
p6511
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp6512
sg79
Nsg80
Nsb(dp6513
sg1
(g92
g3
Ntp6514
Rp6515
(dp6516
g7
(dp6517
sg9
g1
(g97
g3
Ntp6518
Rp6519
(dp6520
g14
g15
(g53
tp6521
Rp6522
(dp6523
g28
g29
sg6083
g23
sbsg108
(lp6524
g6083
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp6525
sg65
g6511
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp6526
sg79
Nsg80
Nsb(dp6527
sg1
(g92
g3
Ntp6528
Rp6529
(dp6530
g7
(dp6531
sg9
g1
(g135
g3
Ntp6532
Rp6533
(dp6534
g139
(lp6535
g6061
ag6062
ag45
asg14
g15
(g142
tp6536
Rp6537
(dp6538
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p6539
sg6062
g23
sg45
g23
sbsg148
(dp6540
g25
Nssg150
(lp6541
g25
asg152
Nsbsg51
Nsg43
g6069
sg63
(dp6542
sg65
g6511
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6069
sg76
Nsg77
(lp6543
sg79
Nsg80
Nsb(dp6544
sg1
(g92
g3
Ntp6545
Rp6546
(dp6547
g7
(dp6548
sg9
g1
(g97
g3
Ntp6549
Rp6550
(dp6551
g14
g15
(g53
tp6552
Rp6553
(dp6554
g28
g29
sg750
g23
sbsg108
(lp6555
g750
asg110
I01
sbsg51
Nsg43
g6099
sg63
(dp6556
sg65
g6511
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6099
sg76
Nsg77
(lp6557
sg79
Nsg80
Nsb(dp6558
ssg157
(dp6559
sg159
(dp6560
g6499
(dp6561
g6529
(dp6562
g163
(lp6563
(g2249
g6061
tp6564
a(g45
g45
tp6565
asssg6515
(dp6566
sg6529
(dp6567
g6515
(dp6568
g163
(lp6569
(g25
g6083
tp6570
asssg6546
(dp6571
g6529
(dp6572
g163
(lp6573
(g750
g6062
tp6574
assssg174
g6560
sg175
(dp6575
g6499
(dp6576
sg6515
(dp6577
g6529
g6568
ssg6529
(dp6578
g6499
g6562
sg6546
g6572
ssg6546
(dp6579
ssg180
g6560
sbsg43
g6511
sg65
g66
sg75
g6511
sg76
g181
((lp6580
(lp6581
g184
ag181
((lp6582
(lp6583
g187
ag184
aa(lp6584
g189
ag190
aa(lp6585
g192
ag193
aa(lp6586
g195
ag196
aa(lp6587
g198
ag199
aa(lp6588
g201
ag106
aa(lp6589
g203
ag204
aa(lp6590
g206
ag207
aatp6591
Rp6592
aa(lp6593
g211
ag181
((lp6594
(lp6595
g187
ag211
aa(lp6596
g215
ag216
aa(lp6597
g218
ag219
aa(lp6598
g221
ag222
aa(lp6599
g224
ag225
aa(lp6600
g227
ag228
aa(lp6601
g230
ag231
aa(lp6602
g233
ag234
aa(lp6603
g236
ag237
aa(lp6604
g239
ag240
aa(lp6605
g242
ag243
aa(lp6606
g245
ag246
aa(lp6607
g248
ag249
aa(lp6608
g251
ag252
aa(lp6609
g254
ag255
aa(lp6610
g257
ag258
aa(lp6611
g260
ag261
aa(lp6612
g263
ag264
aa(lp6613
g266
ag267
aatp6614
Rp6615
aa(lp6616
g271
ag181
((lp6617
(lp6618
g187
ag271
aa(lp6619
g275
ag276
aatp6620
Rp6621
aatp6622
Rp6623
sg80
Nsbtp6624
a(g1
(g92
g3
Ntp6625
Rp6626
(dp6627
g7
(dp6628
sg9
g1
(g5697
g3
Ntp6629
Rp6630
(dp6631
g14
g15
(g5701
tp6632
Rp6633
(dp6634
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp6635
g36
g37
stp6636
Rp6637
(dp6638
g41
S'environ_items'
p6639
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_roi_0'
p6640
sg63
(dp6641
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6640
sg76
Nsg77
(lp6642
sg79
Nsg80
Nsbg1
(g81
g3
Ntp6643
Rp6644
(dp6645
g85
g1
(g86
g3
Ntp6646
Rp6647
(dp6648
g90
(dp6649
g1
(g92
g3
Ntp6650
Rp6651
(dp6652
g7
(dp6653
sg9
g1
(g97
g3
Ntp6654
Rp6655
(dp6656
g14
g15
(g53
tp6657
Rp6658
(dp6659
g28
g29
sg45
(lp6660
I00
aI00
asg2249
g23
sbsg108
(lp6661
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp6662
sg65
S'roi_timeseries_0'
p6663
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp6664
sg79
Nsg80
Nsb(dp6665
sg1
(g92
g3
Ntp6666
Rp6667
(dp6668
g7
(dp6669
sg9
g1
(g97
g3
Ntp6670
Rp6671
(dp6672
g14
g15
(g53
tp6673
Rp6674
(dp6675
g28
g29
sS'roi_outputs'
p6676
g23
sbsg108
(lp6677
g6676
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp6678
sg65
g6663
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp6679
sg79
Nsg80
Nsb(dp6680
sg1
(g92
g3
Ntp6681
Rp6682
(dp6683
g7
(dp6684
sg9
g1
(g135
g3
Ntp6685
Rp6686
(dp6687
g139
(lp6688
g6061
ag6062
ag45
asg14
g15
(g142
tp6689
Rp6690
(dp6691
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p6692
sg6062
g23
sg45
g23
sbsg148
(dp6693
g25
Nssg150
(lp6694
g25
asg152
Nsbsg51
Nsg43
S'timeseries_roi'
p6695
sg63
(dp6696
sg65
g6663
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6695
sg76
Nsg77
(lp6697
sg79
Nsg80
Nsb(dp6698
sg1
(g92
g3
Ntp6699
Rp6700
(dp6701
g7
(dp6702
sg9
g1
(g97
g3
Ntp6703
Rp6704
(dp6705
g14
g15
(g53
tp6706
Rp6707
(dp6708
g28
g29
sS'roi'
p6709
g23
sbsg108
(lp6710
g6709
asg110
I01
sbsg51
Nsg43
S'input_roi'
p6711
sg63
(dp6712
sg65
g6663
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6711
sg76
Nsg77
(lp6713
sg79
Nsg80
Nsb(dp6714
ssg157
(dp6715
sg159
(dp6716
g6651
(dp6717
g6682
(dp6718
g163
(lp6719
(g2249
g6061
tp6720
a(g45
g45
tp6721
asssg6667
(dp6722
sg6682
(dp6723
g6667
(dp6724
g163
(lp6725
(g25
g6676
tp6726
asssg6700
(dp6727
g6682
(dp6728
g163
(lp6729
(g6709
g6062
tp6730
assssg174
g6716
sg175
(dp6731
g6651
(dp6732
sg6667
(dp6733
g6682
g6724
ssg6682
(dp6734
g6651
g6718
sg6700
g6728
ssg6700
(dp6735
ssg180
g6716
sbsg43
g6663
sg65
g66
sg75
g6663
sg76
g181
((lp6736
(lp6737
g184
ag181
((lp6738
(lp6739
g187
ag184
aa(lp6740
g189
ag190
aa(lp6741
g192
ag193
aa(lp6742
g195
ag196
aa(lp6743
g198
ag199
aa(lp6744
g201
ag106
aa(lp6745
g203
ag204
aa(lp6746
g206
ag207
aatp6747
Rp6748
aa(lp6749
g211
ag181
((lp6750
(lp6751
g187
ag211
aa(lp6752
g215
ag216
aa(lp6753
g218
ag219
aa(lp6754
g221
ag222
aa(lp6755
g224
ag225
aa(lp6756
g227
ag228
aa(lp6757
g230
ag231
aa(lp6758
g233
ag234
aa(lp6759
g236
ag237
aa(lp6760
g239
ag240
aa(lp6761
g242
ag243
aa(lp6762
g245
ag246
aa(lp6763
g248
ag249
aa(lp6764
g251
ag252
aa(lp6765
g254
ag255
aa(lp6766
g257
ag258
aa(lp6767
g260
ag261
aa(lp6768
g263
ag264
aa(lp6769
g266
ag267
aatp6770
Rp6771
aa(lp6772
g271
ag181
((lp6773
(lp6774
g187
ag271
aa(lp6775
g275
ag276
aatp6776
Rp6777
aatp6778
Rp6779
sg80
Nsbtp6780
a(g1
(g92
g3
Ntp6781
Rp6782
(dp6783
g7
(dp6784
sg9
g1
(g5697
g3
Ntp6785
Rp6786
(dp6787
g14
g15
(g5701
tp6788
Rp6789
(dp6790
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp6791
g36
g37
stp6792
Rp6793
(dp6794
g41
S'environ_items'
p6795
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_roi_for_sca_0'
p6796
sg63
(dp6797
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6796
sg76
Nsg77
(lp6798
sg79
Nsg80
Nsbg1
(g81
g3
Ntp6799
Rp6800
(dp6801
g85
g1
(g86
g3
Ntp6802
Rp6803
(dp6804
g90
(dp6805
g1
(g92
g3
Ntp6806
Rp6807
(dp6808
g7
(dp6809
sg9
g1
(g97
g3
Ntp6810
Rp6811
(dp6812
g14
g15
(g53
tp6813
Rp6814
(dp6815
g28
g29
sg45
(lp6816
I00
aI00
asg2249
g23
sbsg108
(lp6817
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp6818
sg65
S'roi_timeseries_for_sca_0'
p6819
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp6820
sg79
Nsg80
Nsb(dp6821
sg1
(g92
g3
Ntp6822
Rp6823
(dp6824
g7
(dp6825
sg9
g1
(g97
g3
Ntp6826
Rp6827
(dp6828
g14
g15
(g53
tp6829
Rp6830
(dp6831
g28
g29
sg6676
g23
sbsg108
(lp6832
g6676
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp6833
sg65
g6819
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp6834
sg79
Nsg80
Nsb(dp6835
sg1
(g92
g3
Ntp6836
Rp6837
(dp6838
g7
(dp6839
sg9
g1
(g135
g3
Ntp6840
Rp6841
(dp6842
g139
(lp6843
g6061
ag6062
ag45
asg14
g15
(g142
tp6844
Rp6845
(dp6846
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p6847
sg6062
g23
sg45
g23
sbsg148
(dp6848
g25
Nssg150
(lp6849
g25
asg152
Nsbsg51
Nsg43
g6695
sg63
(dp6850
sg65
g6819
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6695
sg76
Nsg77
(lp6851
sg79
Nsg80
Nsb(dp6852
sg1
(g92
g3
Ntp6853
Rp6854
(dp6855
g7
(dp6856
sg9
g1
(g97
g3
Ntp6857
Rp6858
(dp6859
g14
g15
(g53
tp6860
Rp6861
(dp6862
g28
g29
sg6709
g23
sbsg108
(lp6863
g6709
asg110
I01
sbsg51
Nsg43
g6711
sg63
(dp6864
sg65
g6819
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6711
sg76
Nsg77
(lp6865
sg79
Nsg80
Nsb(dp6866
ssg157
(dp6867
sg159
(dp6868
g6807
(dp6869
g6837
(dp6870
g163
(lp6871
(g2249
g6061
tp6872
a(g45
g45
tp6873
asssg6823
(dp6874
sg6837
(dp6875
g6823
(dp6876
g163
(lp6877
(g25
g6676
tp6878
asssg6854
(dp6879
g6837
(dp6880
g163
(lp6881
(g6709
g6062
tp6882
assssg174
g6868
sg175
(dp6883
g6807
(dp6884
sg6823
(dp6885
g6837
g6876
ssg6837
(dp6886
g6807
g6870
sg6854
g6880
ssg6854
(dp6887
ssg180
g6868
sbsg43
g6819
sg65
g66
sg75
g6819
sg76
g181
((lp6888
(lp6889
g184
ag181
((lp6890
(lp6891
g187
ag184
aa(lp6892
g189
ag190
aa(lp6893
g192
ag193
aa(lp6894
g195
ag196
aa(lp6895
g198
ag199
aa(lp6896
g201
ag106
aa(lp6897
g203
ag204
aa(lp6898
g206
ag207
aatp6899
Rp6900
aa(lp6901
g211
ag181
((lp6902
(lp6903
g187
ag211
aa(lp6904
g215
ag216
aa(lp6905
g218
ag219
aa(lp6906
g221
ag222
aa(lp6907
g224
ag225
aa(lp6908
g227
ag228
aa(lp6909
g230
ag231
aa(lp6910
g233
ag234
aa(lp6911
g236
ag237
aa(lp6912
g239
ag240
aa(lp6913
g242
ag243
aa(lp6914
g245
ag246
aa(lp6915
g248
ag249
aa(lp6916
g251
ag252
aa(lp6917
g254
ag255
aa(lp6918
g257
ag258
aa(lp6919
g260
ag261
aa(lp6920
g263
ag264
aa(lp6921
g266
ag267
aatp6922
Rp6923
aa(lp6924
g271
ag181
((lp6925
(lp6926
g187
ag271
aa(lp6927
g275
ag276
aatp6928
Rp6929
aatp6930
Rp6931
sg80
Nsbtp6932
a(g1
(g92
g3
Ntp6933
Rp6934
(dp6935
g7
(dp6936
sg9
g1
(g5697
g3
Ntp6937
Rp6938
(dp6939
g14
g15
(g5701
tp6940
Rp6941
(dp6942
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp6943
g36
g37
stp6944
Rp6945
(dp6946
g41
S'environ_items'
p6947
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_roi_1'
p6948
sg63
(dp6949
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6948
sg76
Nsg77
(lp6950
sg79
Nsg80
Nsbg1
(g81
g3
Ntp6951
Rp6952
(dp6953
g85
g1
(g86
g3
Ntp6954
Rp6955
(dp6956
g90
(dp6957
g1
(g92
g3
Ntp6958
Rp6959
(dp6960
g7
(dp6961
sg9
g1
(g97
g3
Ntp6962
Rp6963
(dp6964
g14
g15
(g53
tp6965
Rp6966
(dp6967
g28
g29
sg45
(lp6968
I00
aI00
asg2249
g23
sbsg108
(lp6969
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp6970
sg65
S'roi_timeseries_1'
p6971
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp6972
sg79
Nsg80
Nsb(dp6973
sg1
(g92
g3
Ntp6974
Rp6975
(dp6976
g7
(dp6977
sg9
g1
(g97
g3
Ntp6978
Rp6979
(dp6980
g14
g15
(g53
tp6981
Rp6982
(dp6983
g28
g29
sg6676
g23
sbsg108
(lp6984
g6676
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp6985
sg65
g6971
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp6986
sg79
Nsg80
Nsb(dp6987
sg1
(g92
g3
Ntp6988
Rp6989
(dp6990
g7
(dp6991
sg9
g1
(g135
g3
Ntp6992
Rp6993
(dp6994
g139
(lp6995
g6061
ag6062
ag45
asg14
g15
(g142
tp6996
Rp6997
(dp6998
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p6999
sg6062
g23
sg45
g23
sbsg148
(dp7000
g25
Nssg150
(lp7001
g25
asg152
Nsbsg51
Nsg43
g6695
sg63
(dp7002
sg65
g6971
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6695
sg76
Nsg77
(lp7003
sg79
Nsg80
Nsb(dp7004
sg1
(g92
g3
Ntp7005
Rp7006
(dp7007
g7
(dp7008
sg9
g1
(g97
g3
Ntp7009
Rp7010
(dp7011
g14
g15
(g53
tp7012
Rp7013
(dp7014
g28
g29
sg6709
g23
sbsg108
(lp7015
g6709
asg110
I01
sbsg51
Nsg43
g6711
sg63
(dp7016
sg65
g6971
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6711
sg76
Nsg77
(lp7017
sg79
Nsg80
Nsb(dp7018
ssg157
(dp7019
sg159
(dp7020
g6959
(dp7021
g6989
(dp7022
g163
(lp7023
(g2249
g6061
tp7024
a(g45
g45
tp7025
asssg6975
(dp7026
sg6989
(dp7027
g6975
(dp7028
g163
(lp7029
(g25
g6676
tp7030
asssg7006
(dp7031
g6989
(dp7032
g163
(lp7033
(g6709
g6062
tp7034
assssg174
g7020
sg175
(dp7035
g6959
(dp7036
sg6975
(dp7037
g6989
g7028
ssg6989
(dp7038
g6959
g7022
sg7006
g7032
ssg7006
(dp7039
ssg180
g7020
sbsg43
g6971
sg65
g66
sg75
g6971
sg76
g181
((lp7040
(lp7041
g184
ag181
((lp7042
(lp7043
g187
ag184
aa(lp7044
g189
ag190
aa(lp7045
g192
ag193
aa(lp7046
g195
ag196
aa(lp7047
g198
ag199
aa(lp7048
g201
ag106
aa(lp7049
g203
ag204
aa(lp7050
g206
ag207
aatp7051
Rp7052
aa(lp7053
g211
ag181
((lp7054
(lp7055
g187
ag211
aa(lp7056
g215
ag216
aa(lp7057
g218
ag219
aa(lp7058
g221
ag222
aa(lp7059
g224
ag225
aa(lp7060
g227
ag228
aa(lp7061
g230
ag231
aa(lp7062
g233
ag234
aa(lp7063
g236
ag237
aa(lp7064
g239
ag240
aa(lp7065
g242
ag243
aa(lp7066
g245
ag246
aa(lp7067
g248
ag249
aa(lp7068
g251
ag252
aa(lp7069
g254
ag255
aa(lp7070
g257
ag258
aa(lp7071
g260
ag261
aa(lp7072
g263
ag264
aa(lp7073
g266
ag267
aatp7074
Rp7075
aa(lp7076
g271
ag181
((lp7077
(lp7078
g187
ag271
aa(lp7079
g275
ag276
aatp7080
Rp7081
aatp7082
Rp7083
sg80
Nsbtp7084
a(g1
(g92
g3
Ntp7085
Rp7086
(dp7087
g7
(dp7088
sg9
g1
(g5697
g3
Ntp7089
Rp7090
(dp7091
g14
g15
(g5701
tp7092
Rp7093
(dp7094
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp7095
g36
g37
stp7096
Rp7097
(dp7098
g41
S'environ_items'
p7099
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_roi_for_sca_1'
p7100
sg63
(dp7101
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7100
sg76
Nsg77
(lp7102
sg79
Nsg80
Nsbg1
(g81
g3
Ntp7103
Rp7104
(dp7105
g85
g1
(g86
g3
Ntp7106
Rp7107
(dp7108
g90
(dp7109
g1
(g92
g3
Ntp7110
Rp7111
(dp7112
g7
(dp7113
sg9
g1
(g97
g3
Ntp7114
Rp7115
(dp7116
g14
g15
(g53
tp7117
Rp7118
(dp7119
g28
g29
sg6676
g23
sbsg108
(lp7120
g6676
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp7121
sg65
S'roi_timeseries_for_sca_1'
p7122
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp7123
sg79
Nsg80
Nsb(dp7124
sg1
(g92
g3
Ntp7125
Rp7126
(dp7127
g7
(dp7128
sg9
g1
(g97
g3
Ntp7129
Rp7130
(dp7131
g14
g15
(g53
tp7132
Rp7133
(dp7134
g28
g29
sg6709
g23
sbsg108
(lp7135
g6709
asg110
I01
sbsg51
Nsg43
g6711
sg63
(dp7136
sg65
g7122
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6711
sg76
Nsg77
(lp7137
sg79
Nsg80
Nsb(dp7138
sg1
(g92
g3
Ntp7139
Rp7140
(dp7141
g7
(dp7142
sg9
g1
(g97
g3
Ntp7143
Rp7144
(dp7145
g14
g15
(g53
tp7146
Rp7147
(dp7148
g28
g29
sg45
(lp7149
I00
aI00
asg2249
g23
sbsg108
(lp7150
g2249
ag45
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp7151
sg65
g7122
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp7152
sg79
Nsg80
Nsb(dp7153
sg1
(g92
g3
Ntp7154
Rp7155
(dp7156
g7
(dp7157
sg9
g1
(g135
g3
Ntp7158
Rp7159
(dp7160
g139
(lp7161
g6061
ag6062
ag45
asg14
g15
(g142
tp7162
Rp7163
(dp7164
g20
I00
sg28
g29
sg6061
g23
sg146
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p7165
sg6062
g23
sg45
g23
sbsg148
(dp7166
g25
Nssg150
(lp7167
g25
asg152
Nsbsg51
Nsg43
g6695
sg63
(dp7168
sg65
g7122
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g6695
sg76
Nsg77
(lp7169
sg79
Nsg80
Nsb(dp7170
ssg157
(dp7171
sg159
(dp7172
g7111
(dp7173
sg7126
(dp7174
g7155
(dp7175
g163
(lp7176
(g6709
g6062
tp7177
asssg7140
(dp7178
g7155
(dp7179
g163
(lp7180
(g2249
g6061
tp7181
a(g45
g45
tp7182
asssg7155
(dp7183
g7111
(dp7184
g163
(lp7185
(g25
g6676
tp7186
assssg174
g7172
sg175
(dp7187
g7111
(dp7188
g7155
g7184
ssg7126
(dp7189
sg7140
(dp7190
sg7155
(dp7191
g7140
g7179
sg7126
g7175
sssg180
g7172
sbsg43
g7122
sg65
g66
sg75
g7122
sg76
g181
((lp7192
(lp7193
g184
ag181
((lp7194
(lp7195
g187
ag184
aa(lp7196
g189
ag190
aa(lp7197
g192
ag193
aa(lp7198
g195
ag196
aa(lp7199
g198
ag199
aa(lp7200
g201
ag106
aa(lp7201
g203
ag204
aa(lp7202
g206
ag207
aatp7203
Rp7204
aa(lp7205
g211
ag181
((lp7206
(lp7207
g187
ag211
aa(lp7208
g215
ag216
aa(lp7209
g218
ag219
aa(lp7210
g221
ag222
aa(lp7211
g224
ag225
aa(lp7212
g227
ag228
aa(lp7213
g230
ag231
aa(lp7214
g233
ag234
aa(lp7215
g236
ag237
aa(lp7216
g239
ag240
aa(lp7217
g242
ag243
aa(lp7218
g245
ag246
aa(lp7219
g248
ag249
aa(lp7220
g251
ag252
aa(lp7221
g254
ag255
aa(lp7222
g257
ag258
aa(lp7223
g260
ag261
aa(lp7224
g263
ag264
aa(lp7225
g266
ag267
aatp7226
Rp7227
aa(lp7228
g271
ag181
((lp7229
(lp7230
g187
ag271
aa(lp7231
g275
ag276
aatp7232
Rp7233
aatp7234
Rp7235
sg80
Nsbtp7236
a(g1
(g92
g3
Ntp7237
Rp7238
(dp7239
g7
(dp7240
sg9
g1
(g5697
g3
Ntp7241
Rp7242
(dp7243
g14
g15
(g5701
tp7244
Rp7245
(dp7246
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp7247
g36
g37
stp7248
Rp7249
(dp7250
g41
S'environ_items'
p7251
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_template_0'
p7252
sg63
(dp7253
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7252
sg76
Nsg77
(lp7254
sg79
Nsg80
Nsbg1
(g81
g3
Ntp7255
Rp7256
(dp7257
g85
g1
(g86
g3
Ntp7258
Rp7259
(dp7260
g90
(dp7261
g1
(g92
g3
Ntp7262
Rp7263
(dp7264
g7
(dp7265
sg9
g1
(g135
g3
Ntp7266
Rp7267
(dp7268
g139
(lp7269
S'datafile'
p7270
ag6062
aS'method_option'
p7271
aS'threshold_option'
p7272
aS'threshold'
p7273
aS'weight_options'
p7274
aS'allocated_memory'
p7275
asg14
g15
(g142
tp7276
Rp7277
(dp7278
g20
I00
sg7274
g23
sg7270
g23
sg7271
g23
sg146
S'S\'def calc_centrality(datafile,\\n                    template,\\n                    method_option,\\n                    threshold_option,\\n                    threshold,\\n                    weight_options,\\n                    allocated_memory):\\n    \\\'\\\'\\\'\\n    Method to calculate centrality and map them to a nifti file\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to subject data file\\n    template : string (nifti file)\\n        path to mask/parcellation unit\\n    method_option : integer\\n        0 - degree centrality calculation, 1 - eigenvector centrality calculation, 2 - lFCD calculation\\n    threshold_option : an integer\\n        0 for probability p_value, 1 for sparsity threshold, \\n        2 for actual threshold value, and 3 for no threshold and fast approach\\n    threshold : a float\\n        pvalue/sparsity_threshold/threshold value\\n    weight_options : list (boolean)\\n        list of booleans, where, weight_options[0] corresponds to binary counting \\n        and weight_options[1] corresponds to weighted counting (e.g. [True,False]) \\n    allocated_memory : string\\n        amount of memory allocated to degree centrality\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list containing out mapped centrality images\\n    \\\'\\\'\\\'\\n\\n    # Import packages\\n    from CPAC.network_centrality import load,\\\\\\n                                        get_centrality_by_rvalue,\\\\\\n                                        get_centrality_by_sparsity,\\\\\\n                                        get_centrality_fast,\\\\\\n                                        map_centrality_matrix,\\\\\\n                                        calc_blocksize,\\\\\\n                                        convert_pvalue_to_r\\n    from CPAC.cwas.subdist import norm_cols\\n\\n    if weight_options.count(True) == 0:\\n        raise Exception("Invalid values in weight options" \\\\\\n                        "At least one True value is required")\\n\\n    import time\\n    start = time.clock()\\n\\n    # Init variables\\n    out_list = []\\n    ts, aff, mask, t_type, scans = load(datafile, template)\\n\\n    # If we\\\'re doing eigenvectory centrality, need entire correlation matrix\\n    if method_option == 0 and threshold_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    block_sparsity=True)\\n    elif method_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=True)\\n    # Otherwise, compute blocksize with regards to available memory\\n    else:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=False)\\n    # Normalize the timeseries for easy dot-product correlation calc.\\n    ts_normd = norm_cols(ts.T)\\n\\n    # P-value threshold centrality\\n    if threshold_option == 0:\\n        r_value = convert_pvalue_to_r(scans, threshold)\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     r_value, \\n                                                     block_size)\\n    # Sparsity threshold\\n    elif threshold_option == 1:\\n        centrality_matrix = get_centrality_by_sparsity(ts_normd, \\n                                                       method_option, \\n                                                       weight_options, \\n                                                       threshold, \\n                                                       block_size)\\n    # R-value threshold centrality\\n    elif threshold_option == 2:\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     threshold, \\n                                                     block_size)\\n    # For fast approach (no thresholding)\\n    elif threshold_option == 3:\\n        centrality_matrix = get_centrality_fast(ts, method_option)\\n    # Otherwise, incorrect input for threshold_option\\n    else:\\n        raise Exception(\\\'Option must be between 0-3 and not %s, check your \\\'\\\\\\n                        \\\'pipeline config file\\\' % str(threshold_option))\\n\\n    # Print timing info\\n    print \\\'Timing:\\\', time.clock() - start\\n\\n    # Map the arrays back to images\\n    for mat in centrality_matrix:\\n        centrality_image = map_centrality_matrix(mat, aff, mask, t_type)\\n        out_list.append(centrality_image)\\n\\n    # Finally return\\n    return out_list\\n\'\n.'
p7279
sg7272
g23
sg6062
g23
sg7273
g23
sg28
g29
sg7275
F2.0
sbsg148
(dp7280
S'out_list'
p7281
Nssg150
(lp7282
g7281
asg152
Nsbsg51
Nsg43
S'calculate_centrality'
p7283
sg63
(dp7284
sg65
S'network_centrality_0-0'
p7285
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7283
sg76
Nsg77
(lp7286
sg79
Nsg80
Nsb(dp7287
sg1
(g92
g3
Ntp7288
Rp7289
(dp7290
g7
(dp7291
sg9
g1
(g97
g3
Ntp7292
Rp7293
(dp7294
g14
g15
(g53
tp7295
Rp7296
(dp7297
g28
g29
sg7274
(lp7298
I01
aI01
asg7271
I0
sg7272
I2
sg6062
g23
sg7273
F0.001
sg1816
g23
sbsg108
(lp7299
g1816
ag6062
ag7271
ag7272
ag7273
ag7274
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp7300
sg65
g7285
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp7301
sg79
Nsg80
Nsb(dp7302
sg1
(g92
g3
Ntp7303
Rp7304
(dp7305
g7
(dp7306
sg9
g1
(g97
g3
Ntp7307
Rp7308
(dp7309
g14
g15
(g53
tp7310
Rp7311
(dp7312
g28
g29
sS'correlation_matrix'
p7313
g23
sS'centrality_outputs'
p7314
g23
sS'graph_outputs'
p7315
g23
sS'threshold_matrix'
p7316
g23
sbsg108
(lp7317
g7314
ag7316
ag7313
ag7315
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp7318
sg65
g7285
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp7319
sg79
Nsg80
Nsb(dp7320
ssg157
(dp7321
sg159
(dp7322
g7263
(dp7323
g7304
(dp7324
g163
(lp7325
(g7281
g7314
tp7326
asssg7289
(dp7327
g7263
(dp7328
g163
(lp7329
(g1816
g7270
tp7330
a(g6062
g6062
tp7331
a(g7271
g7271
tp7332
a(g7272
g7272
tp7333
a(g7273
g7273
tp7334
a(g7274
g7274
tp7335
asssg7304
(dp7336
ssg174
g7322
sg175
(dp7337
g7263
(dp7338
g7289
g7328
ssg7289
(dp7339
sg7304
(dp7340
g7263
g7324
sssg180
g7322
sbsg43
g7285
sg65
g66
sg75
g7285
sg76
g181
((lp7341
(lp7342
g184
ag181
((lp7343
(lp7344
g187
ag184
aa(lp7345
g189
ag190
aa(lp7346
g192
ag193
aa(lp7347
g195
ag196
aa(lp7348
g198
ag199
aa(lp7349
g201
ag106
aa(lp7350
g203
ag204
aa(lp7351
g206
ag207
aatp7352
Rp7353
aa(lp7354
g211
ag181
((lp7355
(lp7356
g187
ag211
aa(lp7357
g215
ag216
aa(lp7358
g218
ag219
aa(lp7359
g221
ag222
aa(lp7360
g224
ag225
aa(lp7361
g227
ag228
aa(lp7362
g230
ag231
aa(lp7363
g233
ag234
aa(lp7364
g236
ag237
aa(lp7365
g239
ag240
aa(lp7366
g242
ag243
aa(lp7367
g245
ag246
aa(lp7368
g248
ag249
aa(lp7369
g251
ag252
aa(lp7370
g254
ag255
aa(lp7371
g257
ag258
aa(lp7372
g260
ag261
aa(lp7373
g263
ag264
aa(lp7374
g266
ag267
aatp7375
Rp7376
aa(lp7377
g271
ag181
((lp7378
(lp7379
g187
ag271
aa(lp7380
g275
ag276
aatp7381
Rp7382
aatp7383
Rp7384
sg80
Nsbtp7385
a(g7238
g1
(g81
g3
Ntp7386
Rp7387
(dp7388
g85
g1
(g86
g3
Ntp7389
Rp7390
(dp7391
g90
(dp7392
g1
(g92
g3
Ntp7393
Rp7394
(dp7395
g7
(dp7396
sg9
g1
(g97
g3
Ntp7397
Rp7398
(dp7399
g14
g15
(g53
tp7400
Rp7401
(dp7402
g28
g29
sg7274
(lp7403
I01
aI01
asg7271
I2
sg7272
I2
sg6062
g23
sg7273
F0.001
sg1816
g23
sbsg108
(lp7404
g1816
ag6062
ag7271
ag7272
ag7273
ag7274
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp7405
sg65
S'network_centrality_0-2'
p7406
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp7407
sg79
Nsg80
Nsb(dp7408
sg1
(g92
g3
Ntp7409
Rp7410
(dp7411
g7
(dp7412
sg9
g1
(g135
g3
Ntp7413
Rp7414
(dp7415
g139
(lp7416
g7270
ag6062
ag7271
ag7272
ag7273
ag7274
ag7275
asg14
g15
(g142
tp7417
Rp7418
(dp7419
g20
I00
sg7274
g23
sg7270
g23
sg7271
g23
sg146
S'S\'def calc_centrality(datafile,\\n                    template,\\n                    method_option,\\n                    threshold_option,\\n                    threshold,\\n                    weight_options,\\n                    allocated_memory):\\n    \\\'\\\'\\\'\\n    Method to calculate centrality and map them to a nifti file\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to subject data file\\n    template : string (nifti file)\\n        path to mask/parcellation unit\\n    method_option : integer\\n        0 - degree centrality calculation, 1 - eigenvector centrality calculation, 2 - lFCD calculation\\n    threshold_option : an integer\\n        0 for probability p_value, 1 for sparsity threshold, \\n        2 for actual threshold value, and 3 for no threshold and fast approach\\n    threshold : a float\\n        pvalue/sparsity_threshold/threshold value\\n    weight_options : list (boolean)\\n        list of booleans, where, weight_options[0] corresponds to binary counting \\n        and weight_options[1] corresponds to weighted counting (e.g. [True,False]) \\n    allocated_memory : string\\n        amount of memory allocated to degree centrality\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list containing out mapped centrality images\\n    \\\'\\\'\\\'\\n\\n    # Import packages\\n    from CPAC.network_centrality import load,\\\\\\n                                        get_centrality_by_rvalue,\\\\\\n                                        get_centrality_by_sparsity,\\\\\\n                                        get_centrality_fast,\\\\\\n                                        map_centrality_matrix,\\\\\\n                                        calc_blocksize,\\\\\\n                                        convert_pvalue_to_r\\n    from CPAC.cwas.subdist import norm_cols\\n\\n    if weight_options.count(True) == 0:\\n        raise Exception("Invalid values in weight options" \\\\\\n                        "At least one True value is required")\\n\\n    import time\\n    start = time.clock()\\n\\n    # Init variables\\n    out_list = []\\n    ts, aff, mask, t_type, scans = load(datafile, template)\\n\\n    # If we\\\'re doing eigenvectory centrality, need entire correlation matrix\\n    if method_option == 0 and threshold_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    block_sparsity=True)\\n    elif method_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=True)\\n    # Otherwise, compute blocksize with regards to available memory\\n    else:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=False)\\n    # Normalize the timeseries for easy dot-product correlation calc.\\n    ts_normd = norm_cols(ts.T)\\n\\n    # P-value threshold centrality\\n    if threshold_option == 0:\\n        r_value = convert_pvalue_to_r(scans, threshold)\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     r_value, \\n                                                     block_size)\\n    # Sparsity threshold\\n    elif threshold_option == 1:\\n        centrality_matrix = get_centrality_by_sparsity(ts_normd, \\n                                                       method_option, \\n                                                       weight_options, \\n                                                       threshold, \\n                                                       block_size)\\n    # R-value threshold centrality\\n    elif threshold_option == 2:\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     threshold, \\n                                                     block_size)\\n    # For fast approach (no thresholding)\\n    elif threshold_option == 3:\\n        centrality_matrix = get_centrality_fast(ts, method_option)\\n    # Otherwise, incorrect input for threshold_option\\n    else:\\n        raise Exception(\\\'Option must be between 0-3 and not %s, check your \\\'\\\\\\n                        \\\'pipeline config file\\\' % str(threshold_option))\\n\\n    # Print timing info\\n    print \\\'Timing:\\\', time.clock() - start\\n\\n    # Map the arrays back to images\\n    for mat in centrality_matrix:\\n        centrality_image = map_centrality_matrix(mat, aff, mask, t_type)\\n        out_list.append(centrality_image)\\n\\n    # Finally return\\n    return out_list\\n\'\n.'
p7420
sg7272
g23
sg6062
g23
sg7273
g23
sg28
g29
sg7275
F2.0
sbsg148
(dp7421
g7281
Nssg150
(lp7422
g7281
asg152
Nsbsg51
Nsg43
g7283
sg63
(dp7423
sg65
g7406
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7283
sg76
Nsg77
(lp7424
sg79
Nsg80
Nsb(dp7425
sg1
(g92
g3
Ntp7426
Rp7427
(dp7428
g7
(dp7429
sg9
g1
(g97
g3
Ntp7430
Rp7431
(dp7432
g14
g15
(g53
tp7433
Rp7434
(dp7435
g28
g29
sg7313
g23
sg7314
g23
sg7315
g23
sg7316
g23
sbsg108
(lp7436
g7314
ag7316
ag7313
ag7315
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp7437
sg65
g7406
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp7438
sg79
Nsg80
Nsb(dp7439
ssg157
(dp7440
sg159
(dp7441
g7394
(dp7442
g7410
(dp7443
g163
(lp7444
(g1816
g7270
tp7445
a(g6062
g6062
tp7446
a(g7271
g7271
tp7447
a(g7272
g7272
tp7448
a(g7273
g7273
tp7449
a(g7274
g7274
tp7450
asssg7410
(dp7451
g7427
(dp7452
g163
(lp7453
(g7281
g7314
tp7454
asssg7427
(dp7455
ssg174
g7441
sg175
(dp7456
g7394
(dp7457
sg7410
(dp7458
g7394
g7443
ssg7427
(dp7459
g7410
g7452
sssg180
g7441
sbsg43
g7406
sg65
g66
sg75
g7406
sg76
g181
((lp7460
(lp7461
g184
ag181
((lp7462
(lp7463
g187
ag184
aa(lp7464
g189
ag190
aa(lp7465
g192
ag193
aa(lp7466
g195
ag196
aa(lp7467
g198
ag199
aa(lp7468
g201
ag106
aa(lp7469
g203
ag204
aa(lp7470
g206
ag207
aatp7471
Rp7472
aa(lp7473
g211
ag181
((lp7474
(lp7475
g187
ag211
aa(lp7476
g215
ag216
aa(lp7477
g218
ag219
aa(lp7478
g221
ag222
aa(lp7479
g224
ag225
aa(lp7480
g227
ag228
aa(lp7481
g230
ag231
aa(lp7482
g233
ag234
aa(lp7483
g236
ag237
aa(lp7484
g239
ag240
aa(lp7485
g242
ag243
aa(lp7486
g245
ag246
aa(lp7487
g248
ag249
aa(lp7488
g251
ag252
aa(lp7489
g254
ag255
aa(lp7490
g257
ag258
aa(lp7491
g260
ag261
aa(lp7492
g263
ag264
aa(lp7493
g266
ag267
aatp7494
Rp7495
aa(lp7496
g271
ag181
((lp7497
(lp7498
g187
ag271
aa(lp7499
g275
ag276
aatp7500
Rp7501
aatp7502
Rp7503
sg80
Nsbtp7504
a(g1
(g92
g3
Ntp7505
Rp7506
(dp7507
g7
(dp7508
sg9
g1
(g135
g3
Ntp7509
Rp7510
(dp7511
g139
(lp7512
S'deg_list'
p7513
aS'eig_list'
p7514
aS'lfcd_list'
p7515
asg14
g15
(g142
tp7516
Rp7517
(dp7518
g20
I00
sg7514
g23
sg7515
g23
sg146
S"S'def merge_lists(deg_list=[],eig_list=[],lfcd_list=[]):\\n    merged_list = []\\n    merged_list.extend(deg_list)\\n    merged_list.extend(eig_list)\\n    merged_list.extend(lfcd_list)\\n\\n    return merged_list\\n'\n."
p7519
sg7513
g23
sg28
g29
sbsg148
(dp7520
S'merged_list'
p7521
Nssg150
(lp7522
g7521
asg152
Nsbsg51
Nsg43
S'merge_node_0'
p7523
sg63
(dp7524
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7523
sg76
Nsg77
(lp7525
sg79
Nsg80
Nsbg1
(g81
g3
Ntp7526
Rp7527
(dp7528
g85
g1
(g86
g3
Ntp7529
Rp7530
(dp7531
g90
(dp7532
g1
(g92
g3
Ntp7533
Rp7534
(dp7535
g7
(dp7536
sg9
g1
(g97
g3
Ntp7537
Rp7538
(dp7539
g14
g15
(g53
tp7540
Rp7541
(dp7542
g2580
g23
sg28
g29
sS'input_file'
p7543
g23
sbsg108
(lp7544
g7543
ag2580
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp7545
sg65
S'centrality_zscore_0'
p7546
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp7547
sg79
Nsg80
Nsb(dp7548
sg1
(g2
g3
Ntp7549
Rp7550
(dp7551
g7
(dp7552
sg9
g1
(g135
g3
Ntp7553
Rp7554
(dp7555
g139
(lp7556
g2611
ag2642
asg14
g15
(g142
tp7557
Rp7558
(dp7559
g20
I00
sg146
S'S\'def get_operand_string(mean, std_dev):\\n    """\\n    Method to get operand string for Fsl Maths\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    ------\\n    op_string : string\\n        operand string\\n    """\\n\\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\\n    op_string = str1 + " -mas %s"\\n    return op_string\\n\'\n.'
p7560
sg2642
g23
sg28
g29
sg2611
g23
sbsg148
(dp7561
g24
Nssg150
(lp7562
g24
asg152
Nsbsg51
Nsg52
g15
(g53
tp7563
Rp7564
(dp7565
g20
I00
sg146
g7560
sg2642
g23
sg28
g29
sg2611
g23
sbsg43
g24
sg63
(dp7566
sg65
g7546
sg67
(lp7567
g2611
ag2642
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24
sg76
Nsg77
(lp7568
sg79
Nsg80
Nsb(dp7569
sg1
(g2
g3
Ntp7570
Rp7571
(dp7572
g7
(dp7573
sg9
g1
(g10
g3
Ntp7574
Rp7575
(dp7576
g14
g15
(g16
tp7577
Rp7578
(dp7579
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp7580
g36
g37
stp7581
Rp7582
(dp7583
g41
S'environ_items'
p7584
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp7585
Rp7586
(dp7587
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp7588
g36
g37
stp7589
Rp7590
(dp7591
g41
S'environ_items'
p7592
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
g2549
sg63
(dp7593
sg65
g7546
sg67
(lp7594
g44
ag24
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp7595
sg79
Nsg80
Nsb(dp7596
sg1
(g2
g3
Ntp7597
Rp7598
(dp7599
g7
(dp7600
sg9
g1
(g2595
g3
Ntp7601
Rp7602
(dp7603
g14
g15
(g2599
tp7604
Rp7605
(dp7606
g20
I00
sg28
g29
sg24
S'-k %s -s'
p7607
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp7608
g36
g37
stp7609
Rp7610
(dp7611
g41
S'environ_items'
p7612
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp7613
Rp7614
(dp7615
g20
I00
sg28
g29
sg24
g7607
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp7616
g36
g37
stp7617
Rp7618
(dp7619
g41
S'environ_items'
p7620
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg43
g2631
sg63
(dp7621
sg65
g7546
sg67
(lp7622
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2631
sg76
Nsg77
(lp7623
sg79
Nsg80
Nsb(dp7624
sg1
(g92
g3
Ntp7625
Rp7626
(dp7627
g7
(dp7628
sg9
g1
(g97
g3
Ntp7629
Rp7630
(dp7631
g14
g15
(g53
tp7632
Rp7633
(dp7634
g28
g29
sS'z_score_img'
p7635
g23
sbsg108
(lp7636
g7635
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp7637
sg65
g7546
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp7638
sg79
Nsg80
Nsb(dp7639
sg1
(g2
g3
Ntp7640
Rp7641
(dp7642
g7
(dp7643
sg9
g1
(g2595
g3
Ntp7644
Rp7645
(dp7646
g14
g15
(g2599
tp7647
Rp7648
(dp7649
g20
I00
sg28
g29
sg24
S'-k %s -m'
p7650
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp7651
g36
g37
stp7652
Rp7653
(dp7654
g41
S'environ_items'
p7655
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp7656
Rp7657
(dp7658
g20
I00
sg28
g29
sg24
g7650
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp7659
g36
g37
stp7660
Rp7661
(dp7662
g41
S'environ_items'
p7663
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg43
g2611
sg63
(dp7664
sg65
g7546
sg67
(lp7665
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2611
sg76
Nsg77
(lp7666
sg79
Nsg80
Nsb(dp7667
ssg157
(dp7668
sg159
(dp7669
g7534
(dp7670
g7571
(dp7671
g163
(lp7672
(g7543
g44
tp7673
a(g2580
g47
tp7674
assg7641
(dp7675
g163
(lp7676
(g7543
g44
tp7677
a(g2580
g2580
tp7678
assg7598
(dp7679
g163
(lp7680
(g7543
g44
tp7681
a(g2580
g2580
tp7682
asssg7550
(dp7683
g7571
(dp7684
g163
(lp7685
(g24
g24
tp7686
asssg7571
(dp7687
g7626
(dp7688
g163
(lp7689
(g25
g7635
tp7690
asssg7598
(dp7691
g7550
(dp7692
g163
(lp7693
(g2689
g2642
tp7694
asssg7626
(dp7695
sg7641
(dp7696
g7550
(dp7697
g163
(lp7698
(g2689
g2611
tp7699
assssg174
g7669
sg175
(dp7700
g7534
(dp7701
sg7550
(dp7702
g7641
g7697
sg7598
g7692
ssg7571
(dp7703
g7550
g7684
sg7534
g7671
ssg7598
(dp7704
g7534
g7679
ssg7626
(dp7705
g7571
g7688
ssg7641
(dp7706
g7534
g7675
sssg180
g7669
sbsg43
g7546
sg65
g66
sg75
g7546
sg76
g181
((lp7707
(lp7708
g184
ag181
((lp7709
(lp7710
g187
ag184
aa(lp7711
g189
ag190
aa(lp7712
g192
ag193
aa(lp7713
g195
ag196
aa(lp7714
g198
ag199
aa(lp7715
g201
ag106
aa(lp7716
g203
ag204
aa(lp7717
g206
ag207
aatp7718
Rp7719
aa(lp7720
g211
ag181
((lp7721
(lp7722
g187
ag211
aa(lp7723
g215
ag216
aa(lp7724
g218
ag219
aa(lp7725
g221
ag222
aa(lp7726
g224
ag225
aa(lp7727
g227
ag228
aa(lp7728
g230
ag231
aa(lp7729
g233
ag234
aa(lp7730
g236
ag237
aa(lp7731
g239
ag240
aa(lp7732
g242
ag243
aa(lp7733
g245
ag246
aa(lp7734
g248
ag249
aa(lp7735
g251
ag252
aa(lp7736
g254
ag255
aa(lp7737
g257
ag258
aa(lp7738
g260
ag261
aa(lp7739
g263
ag264
aa(lp7740
g266
ag267
aatp7741
Rp7742
aa(lp7743
g271
ag181
((lp7744
(lp7745
g187
ag271
aa(lp7746
g275
ag276
aatp7747
Rp7748
aatp7749
Rp7750
sg80
Nsbtp7751
a(g1
(g92
g3
Ntp7752
Rp7753
(dp7754
g7
(dp7755
sg9
g1
(g5697
g3
Ntp7756
Rp7757
(dp7758
g14
g15
(g5701
tp7759
Rp7760
(dp7761
g5705
g23
sg28
g29
sg5706
g5707
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g6021
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
I01
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp7762
g36
g37
stp7763
Rp7764
(dp7765
g41
S'environ_items'
p7766
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'resample_functional_to_template_1'
p7767
sg63
(dp7768
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7767
sg76
Nsg77
(lp7769
sg79
Nsg80
Nsbg1
(g81
g3
Ntp7770
Rp7771
(dp7772
g85
g1
(g86
g3
Ntp7773
Rp7774
(dp7775
g90
(dp7776
g1
(g92
g3
Ntp7777
Rp7778
(dp7779
g7
(dp7780
sg9
g1
(g135
g3
Ntp7781
Rp7782
(dp7783
g139
(lp7784
g7270
ag6062
ag7271
ag7272
ag7273
ag7274
ag7275
asg14
g15
(g142
tp7785
Rp7786
(dp7787
g20
I00
sg7274
g23
sg7270
g23
sg7271
g23
sg146
S'S\'def calc_centrality(datafile,\\n                    template,\\n                    method_option,\\n                    threshold_option,\\n                    threshold,\\n                    weight_options,\\n                    allocated_memory):\\n    \\\'\\\'\\\'\\n    Method to calculate centrality and map them to a nifti file\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to subject data file\\n    template : string (nifti file)\\n        path to mask/parcellation unit\\n    method_option : integer\\n        0 - degree centrality calculation, 1 - eigenvector centrality calculation, 2 - lFCD calculation\\n    threshold_option : an integer\\n        0 for probability p_value, 1 for sparsity threshold, \\n        2 for actual threshold value, and 3 for no threshold and fast approach\\n    threshold : a float\\n        pvalue/sparsity_threshold/threshold value\\n    weight_options : list (boolean)\\n        list of booleans, where, weight_options[0] corresponds to binary counting \\n        and weight_options[1] corresponds to weighted counting (e.g. [True,False]) \\n    allocated_memory : string\\n        amount of memory allocated to degree centrality\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list containing out mapped centrality images\\n    \\\'\\\'\\\'\\n\\n    # Import packages\\n    from CPAC.network_centrality import load,\\\\\\n                                        get_centrality_by_rvalue,\\\\\\n                                        get_centrality_by_sparsity,\\\\\\n                                        get_centrality_fast,\\\\\\n                                        map_centrality_matrix,\\\\\\n                                        calc_blocksize,\\\\\\n                                        convert_pvalue_to_r\\n    from CPAC.cwas.subdist import norm_cols\\n\\n    if weight_options.count(True) == 0:\\n        raise Exception("Invalid values in weight options" \\\\\\n                        "At least one True value is required")\\n\\n    import time\\n    start = time.clock()\\n\\n    # Init variables\\n    out_list = []\\n    ts, aff, mask, t_type, scans = load(datafile, template)\\n\\n    # If we\\\'re doing eigenvectory centrality, need entire correlation matrix\\n    if method_option == 0 and threshold_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    block_sparsity=True)\\n    elif method_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=True)\\n    # Otherwise, compute blocksize with regards to available memory\\n    else:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=False)\\n    # Normalize the timeseries for easy dot-product correlation calc.\\n    ts_normd = norm_cols(ts.T)\\n\\n    # P-value threshold centrality\\n    if threshold_option == 0:\\n        r_value = convert_pvalue_to_r(scans, threshold)\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     r_value, \\n                                                     block_size)\\n    # Sparsity threshold\\n    elif threshold_option == 1:\\n        centrality_matrix = get_centrality_by_sparsity(ts_normd, \\n                                                       method_option, \\n                                                       weight_options, \\n                                                       threshold, \\n                                                       block_size)\\n    # R-value threshold centrality\\n    elif threshold_option == 2:\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     threshold, \\n                                                     block_size)\\n    # For fast approach (no thresholding)\\n    elif threshold_option == 3:\\n        centrality_matrix = get_centrality_fast(ts, method_option)\\n    # Otherwise, incorrect input for threshold_option\\n    else:\\n        raise Exception(\\\'Option must be between 0-3 and not %s, check your \\\'\\\\\\n                        \\\'pipeline config file\\\' % str(threshold_option))\\n\\n    # Print timing info\\n    print \\\'Timing:\\\', time.clock() - start\\n\\n    # Map the arrays back to images\\n    for mat in centrality_matrix:\\n        centrality_image = map_centrality_matrix(mat, aff, mask, t_type)\\n        out_list.append(centrality_image)\\n\\n    # Finally return\\n    return out_list\\n\'\n.'
p7788
sg7272
g23
sg6062
g23
sg7273
g23
sg28
g29
sg7275
F2.0
sbsg148
(dp7789
g7281
Nssg150
(lp7790
g7281
asg152
Nsbsg51
Nsg43
g7283
sg63
(dp7791
sg65
S'network_centrality_1-0'
p7792
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7283
sg76
Nsg77
(lp7793
sg79
Nsg80
Nsb(dp7794
sg1
(g92
g3
Ntp7795
Rp7796
(dp7797
g7
(dp7798
sg9
g1
(g97
g3
Ntp7799
Rp7800
(dp7801
g14
g15
(g53
tp7802
Rp7803
(dp7804
g28
g29
sg7274
(lp7805
I01
aI01
asg7271
I0
sg7272
I2
sg6062
g23
sg7273
F0.001
sg1816
g23
sbsg108
(lp7806
g1816
ag6062
ag7271
ag7272
ag7273
ag7274
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp7807
sg65
g7792
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp7808
sg79
Nsg80
Nsb(dp7809
sg1
(g92
g3
Ntp7810
Rp7811
(dp7812
g7
(dp7813
sg9
g1
(g97
g3
Ntp7814
Rp7815
(dp7816
g14
g15
(g53
tp7817
Rp7818
(dp7819
g28
g29
sg7313
g23
sg7314
g23
sg7315
g23
sg7316
g23
sbsg108
(lp7820
g7314
ag7316
ag7313
ag7315
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp7821
sg65
g7792
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp7822
sg79
Nsg80
Nsb(dp7823
ssg157
(dp7824
sg159
(dp7825
g7778
(dp7826
g7811
(dp7827
g163
(lp7828
(g7281
g7314
tp7829
asssg7796
(dp7830
g7778
(dp7831
g163
(lp7832
(g1816
g7270
tp7833
a(g6062
g6062
tp7834
a(g7271
g7271
tp7835
a(g7272
g7272
tp7836
a(g7273
g7273
tp7837
a(g7274
g7274
tp7838
asssg7811
(dp7839
ssg174
g7825
sg175
(dp7840
g7778
(dp7841
g7796
g7831
ssg7796
(dp7842
sg7811
(dp7843
g7778
g7827
sssg180
g7825
sbsg43
g7792
sg65
g66
sg75
g7792
sg76
g181
((lp7844
(lp7845
g184
ag181
((lp7846
(lp7847
g187
ag184
aa(lp7848
g189
ag190
aa(lp7849
g192
ag193
aa(lp7850
g195
ag196
aa(lp7851
g198
ag199
aa(lp7852
g201
ag106
aa(lp7853
g203
ag204
aa(lp7854
g206
ag207
aatp7855
Rp7856
aa(lp7857
g211
ag181
((lp7858
(lp7859
g187
ag211
aa(lp7860
g215
ag216
aa(lp7861
g218
ag219
aa(lp7862
g221
ag222
aa(lp7863
g224
ag225
aa(lp7864
g227
ag228
aa(lp7865
g230
ag231
aa(lp7866
g233
ag234
aa(lp7867
g236
ag237
aa(lp7868
g239
ag240
aa(lp7869
g242
ag243
aa(lp7870
g245
ag246
aa(lp7871
g248
ag249
aa(lp7872
g251
ag252
aa(lp7873
g254
ag255
aa(lp7874
g257
ag258
aa(lp7875
g260
ag261
aa(lp7876
g263
ag264
aa(lp7877
g266
ag267
aatp7878
Rp7879
aa(lp7880
g271
ag181
((lp7881
(lp7882
g187
ag271
aa(lp7883
g275
ag276
aatp7884
Rp7885
aatp7886
Rp7887
sg80
Nsbtp7888
a(g7753
g1
(g81
g3
Ntp7889
Rp7890
(dp7891
g85
g1
(g86
g3
Ntp7892
Rp7893
(dp7894
g90
(dp7895
g1
(g92
g3
Ntp7896
Rp7897
(dp7898
g7
(dp7899
sg9
g1
(g97
g3
Ntp7900
Rp7901
(dp7902
g14
g15
(g53
tp7903
Rp7904
(dp7905
g28
g29
sg7274
(lp7906
I01
aI01
asg7271
I2
sg7272
I2
sg6062
g23
sg7273
F0.001
sg1816
g23
sbsg108
(lp7907
g1816
ag6062
ag7271
ag7272
ag7273
ag7274
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp7908
sg65
S'network_centrality_1-2'
p7909
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp7910
sg79
Nsg80
Nsb(dp7911
sg1
(g92
g3
Ntp7912
Rp7913
(dp7914
g7
(dp7915
sg9
g1
(g97
g3
Ntp7916
Rp7917
(dp7918
g14
g15
(g53
tp7919
Rp7920
(dp7921
g28
g29
sg7313
g23
sg7314
g23
sg7315
g23
sg7316
g23
sbsg108
(lp7922
g7314
ag7316
ag7313
ag7315
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp7923
sg65
g7909
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp7924
sg79
Nsg80
Nsb(dp7925
sg1
(g92
g3
Ntp7926
Rp7927
(dp7928
g7
(dp7929
sg9
g1
(g135
g3
Ntp7930
Rp7931
(dp7932
g139
(lp7933
g7270
ag6062
ag7271
ag7272
ag7273
ag7274
ag7275
asg14
g15
(g142
tp7934
Rp7935
(dp7936
g20
I00
sg7274
g23
sg7270
g23
sg7271
g23
sg146
S'S\'def calc_centrality(datafile,\\n                    template,\\n                    method_option,\\n                    threshold_option,\\n                    threshold,\\n                    weight_options,\\n                    allocated_memory):\\n    \\\'\\\'\\\'\\n    Method to calculate centrality and map them to a nifti file\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to subject data file\\n    template : string (nifti file)\\n        path to mask/parcellation unit\\n    method_option : integer\\n        0 - degree centrality calculation, 1 - eigenvector centrality calculation, 2 - lFCD calculation\\n    threshold_option : an integer\\n        0 for probability p_value, 1 for sparsity threshold, \\n        2 for actual threshold value, and 3 for no threshold and fast approach\\n    threshold : a float\\n        pvalue/sparsity_threshold/threshold value\\n    weight_options : list (boolean)\\n        list of booleans, where, weight_options[0] corresponds to binary counting \\n        and weight_options[1] corresponds to weighted counting (e.g. [True,False]) \\n    allocated_memory : string\\n        amount of memory allocated to degree centrality\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list containing out mapped centrality images\\n    \\\'\\\'\\\'\\n\\n    # Import packages\\n    from CPAC.network_centrality import load,\\\\\\n                                        get_centrality_by_rvalue,\\\\\\n                                        get_centrality_by_sparsity,\\\\\\n                                        get_centrality_fast,\\\\\\n                                        map_centrality_matrix,\\\\\\n                                        calc_blocksize,\\\\\\n                                        convert_pvalue_to_r\\n    from CPAC.cwas.subdist import norm_cols\\n\\n    if weight_options.count(True) == 0:\\n        raise Exception("Invalid values in weight options" \\\\\\n                        "At least one True value is required")\\n\\n    import time\\n    start = time.clock()\\n\\n    # Init variables\\n    out_list = []\\n    ts, aff, mask, t_type, scans = load(datafile, template)\\n\\n    # If we\\\'re doing eigenvectory centrality, need entire correlation matrix\\n    if method_option == 0 and threshold_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    block_sparsity=True)\\n    elif method_option == 1:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=True)\\n    # Otherwise, compute blocksize with regards to available memory\\n    else:\\n        block_size = calc_blocksize(ts, memory_allocated=allocated_memory,\\n                                    include_full_matrix=False)\\n    # Normalize the timeseries for easy dot-product correlation calc.\\n    ts_normd = norm_cols(ts.T)\\n\\n    # P-value threshold centrality\\n    if threshold_option == 0:\\n        r_value = convert_pvalue_to_r(scans, threshold)\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     r_value, \\n                                                     block_size)\\n    # Sparsity threshold\\n    elif threshold_option == 1:\\n        centrality_matrix = get_centrality_by_sparsity(ts_normd, \\n                                                       method_option, \\n                                                       weight_options, \\n                                                       threshold, \\n                                                       block_size)\\n    # R-value threshold centrality\\n    elif threshold_option == 2:\\n        centrality_matrix = get_centrality_by_rvalue(ts_normd, \\n                                                     mask, \\n                                                     method_option, \\n                                                     weight_options, \\n                                                     threshold, \\n                                                     block_size)\\n    # For fast approach (no thresholding)\\n    elif threshold_option == 3:\\n        centrality_matrix = get_centrality_fast(ts, method_option)\\n    # Otherwise, incorrect input for threshold_option\\n    else:\\n        raise Exception(\\\'Option must be between 0-3 and not %s, check your \\\'\\\\\\n                        \\\'pipeline config file\\\' % str(threshold_option))\\n\\n    # Print timing info\\n    print \\\'Timing:\\\', time.clock() - start\\n\\n    # Map the arrays back to images\\n    for mat in centrality_matrix:\\n        centrality_image = map_centrality_matrix(mat, aff, mask, t_type)\\n        out_list.append(centrality_image)\\n\\n    # Finally return\\n    return out_list\\n\'\n.'
p7937
sg7272
g23
sg6062
g23
sg7273
g23
sg28
g29
sg7275
F2.0
sbsg148
(dp7938
g7281
Nssg150
(lp7939
g7281
asg152
Nsbsg51
Nsg43
g7283
sg63
(dp7940
sg65
g7909
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g7283
sg76
Nsg77
(lp7941
sg79
Nsg80
Nsb(dp7942
ssg157
(dp7943
sg159
(dp7944
g7897
(dp7945
g7927
(dp7946
g163
(lp7947
(g1816
g7270
tp7948
a(g6062
g6062
tp7949
a(g7271
g7271
tp7950
a(g7272
g7272
tp7951
a(g7273
g7273
tp7952
a(g7274
g7274
tp7953
asssg7913
(dp7954
sg7927
(dp7955
g7913
(dp7956
g163
(lp7957
(g7281
g7314
tp7958
assssg174
g7944
sg175
(dp7959
g7897
(dp7960
sg7913
(dp7961
g7927
g7956
ssg7927
(dp7962
g7897
g7946
sssg180
g7944
sbsg43
g7909
sg65
g66
sg75
g7909
sg76
g181
((lp7963
(lp7964
g184
ag181
((lp7965
(lp7966
g187
ag184
aa(lp7967
g189
ag190
aa(lp7968
g192
ag193
aa(lp7969
g195
ag196
aa(lp7970
g198
ag199
aa(lp7971
g201
ag106
aa(lp7972
g203
ag204
aa(lp7973
g206
ag207
aatp7974
Rp7975
aa(lp7976
g211
ag181
((lp7977
(lp7978
g187
ag211
aa(lp7979
g215
ag216
aa(lp7980
g218
ag219
aa(lp7981
g221
ag222
aa(lp7982
g224
ag225
aa(lp7983
g227
ag228
aa(lp7984
g230
ag231
aa(lp7985
g233
ag234
aa(lp7986
g236
ag237
aa(lp7987
g239
ag240
aa(lp7988
g242
ag243
aa(lp7989
g245
ag246
aa(lp7990
g248
ag249
aa(lp7991
g251
ag252
aa(lp7992
g254
ag255
aa(lp7993
g257
ag258
aa(lp7994
g260
ag261
aa(lp7995
g263
ag264
aa(lp7996
g266
ag267
aatp7997
Rp7998
aa(lp7999
g271
ag181
((lp8000
(lp8001
g187
ag271
aa(lp8002
g275
ag276
aatp8003
Rp8004
aatp8005
Rp8006
sg80
Nsbtp8007
a(g1
(g92
g3
Ntp8008
Rp8009
(dp8010
g7
(dp8011
sg9
g1
(g135
g3
Ntp8012
Rp8013
(dp8014
g139
(lp8015
g7513
ag7514
ag7515
asg14
g15
(g142
tp8016
Rp8017
(dp8018
g20
I00
sg7514
g23
sg7515
g23
sg146
S"S'def merge_lists(deg_list=[],eig_list=[],lfcd_list=[]):\\n    merged_list = []\\n    merged_list.extend(deg_list)\\n    merged_list.extend(eig_list)\\n    merged_list.extend(lfcd_list)\\n\\n    return merged_list\\n'\n."
p8019
sg7513
g23
sg28
g29
sbsg148
(dp8020
g7521
Nssg150
(lp8021
g7521
asg152
Nsbsg51
Nsg43
S'merge_node_1'
p8022
sg63
(dp8023
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8022
sg76
Nsg77
(lp8024
sg79
Nsg80
Nsbg1
(g81
g3
Ntp8025
Rp8026
(dp8027
g85
g1
(g86
g3
Ntp8028
Rp8029
(dp8030
g90
(dp8031
g1
(g2
g3
Ntp8032
Rp8033
(dp8034
g7
(dp8035
sg9
g1
(g2595
g3
Ntp8036
Rp8037
(dp8038
g14
g15
(g2599
tp8039
Rp8040
(dp8041
g20
I00
sg28
g29
sg24
g7650
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp8042
g36
g37
stp8043
Rp8044
(dp8045
g41
S'environ_items'
p8046
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp8047
Rp8048
(dp8049
g20
I00
sg28
g29
sg24
g7650
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp8050
g36
g37
stp8051
Rp8052
(dp8053
g41
S'environ_items'
p8054
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg43
g2611
sg63
(dp8055
sg65
S'centrality_zscore_1'
p8056
sg67
(lp8057
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2611
sg76
Nsg77
(lp8058
sg79
Nsg80
Nsb(dp8059
sg1
(g2
g3
Ntp8060
Rp8061
(dp8062
g7
(dp8063
sg9
g1
(g10
g3
Ntp8064
Rp8065
(dp8066
g14
g15
(g16
tp8067
Rp8068
(dp8069
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp8070
g36
g37
stp8071
Rp8072
(dp8073
g41
S'environ_items'
p8074
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp8075
Rp8076
(dp8077
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp8078
g36
g37
stp8079
Rp8080
(dp8081
g41
S'environ_items'
p8082
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg43
g2549
sg63
(dp8083
sg65
g8056
sg67
(lp8084
g44
ag24
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp8085
sg79
Nsg80
Nsb(dp8086
sg1
(g2
g3
Ntp8087
Rp8088
(dp8089
g7
(dp8090
sg9
g1
(g2595
g3
Ntp8091
Rp8092
(dp8093
g14
g15
(g2599
tp8094
Rp8095
(dp8096
g20
I00
sg28
g29
sg24
g7607
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp8097
g36
g37
stp8098
Rp8099
(dp8100
g41
S'environ_items'
p8101
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp8102
Rp8103
(dp8104
g20
I00
sg28
g29
sg24
g7607
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp8105
g36
g37
stp8106
Rp8107
(dp8108
g41
S'environ_items'
p8109
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg43
g2631
sg63
(dp8110
sg65
g8056
sg67
(lp8111
g44
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2631
sg76
Nsg77
(lp8112
sg79
Nsg80
Nsb(dp8113
sg1
(g92
g3
Ntp8114
Rp8115
(dp8116
g7
(dp8117
sg9
g1
(g97
g3
Ntp8118
Rp8119
(dp8120
g14
g15
(g53
tp8121
Rp8122
(dp8123
g28
g29
sg7635
g23
sbsg108
(lp8124
g7635
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp8125
sg65
g8056
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp8126
sg79
Nsg80
Nsb(dp8127
sg1
(g92
g3
Ntp8128
Rp8129
(dp8130
g7
(dp8131
sg9
g1
(g97
g3
Ntp8132
Rp8133
(dp8134
g14
g15
(g53
tp8135
Rp8136
(dp8137
g2580
g23
sg28
g29
sg7543
g23
sbsg108
(lp8138
g7543
ag2580
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp8139
sg65
g8056
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp8140
sg79
Nsg80
Nsb(dp8141
sg1
(g2
g3
Ntp8142
Rp8143
(dp8144
g7
(dp8145
sg9
g1
(g135
g3
Ntp8146
Rp8147
(dp8148
g139
(lp8149
g2611
ag2642
asg14
g15
(g142
tp8150
Rp8151
(dp8152
g20
I00
sg146
S'S\'def get_operand_string(mean, std_dev):\\n    """\\n    Method to get operand string for Fsl Maths\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    ------\\n    op_string : string\\n        operand string\\n    """\\n\\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\\n    op_string = str1 + " -mas %s"\\n    return op_string\\n\'\n.'
p8153
sg2642
g23
sg28
g29
sg2611
g23
sbsg148
(dp8154
g24
Nssg150
(lp8155
g24
asg152
Nsbsg51
Nsg52
g15
(g53
tp8156
Rp8157
(dp8158
g20
I00
sg146
g8153
sg2642
g23
sg28
g29
sg2611
g23
sbsg43
g24
sg63
(dp8159
sg65
g8056
sg67
(lp8160
g2611
ag2642
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24
sg76
Nsg77
(lp8161
sg79
Nsg80
Nsb(dp8162
ssg157
(dp8163
sg159
(dp8164
g8033
(dp8165
g8143
(dp8166
g163
(lp8167
(g2689
g2611
tp8168
asssg8061
(dp8169
g8115
(dp8170
g163
(lp8171
(g25
g7635
tp8172
asssg8088
(dp8173
g8143
(dp8174
g163
(lp8175
(g2689
g2642
tp8176
asssg8115
(dp8177
sg8129
(dp8178
g8033
(dp8179
g163
(lp8180
(g7543
g44
tp8181
a(g2580
g2580
tp8182
assg8088
(dp8183
g163
(lp8184
(g7543
g44
tp8185
a(g2580
g2580
tp8186
assg8061
(dp8187
g163
(lp8188
(g7543
g44
tp8189
a(g2580
g47
tp8190
asssg8143
(dp8191
g8061
(dp8192
g163
(lp8193
(g24
g24
tp8194
assssg174
g8164
sg175
(dp8195
g8033
(dp8196
g8129
g8179
ssg8061
(dp8197
g8143
g8192
sg8129
g8187
ssg8088
(dp8198
g8129
g8183
ssg8115
(dp8199
g8061
g8170
ssg8129
(dp8200
sg8143
(dp8201
g8033
g8166
sg8088
g8174
sssg180
g8164
sbsg43
g8056
sg65
g66
sg75
g8056
sg76
g181
((lp8202
(lp8203
g184
ag181
((lp8204
(lp8205
g187
ag184
aa(lp8206
g189
ag190
aa(lp8207
g192
ag193
aa(lp8208
g195
ag196
aa(lp8209
g198
ag199
aa(lp8210
g201
ag106
aa(lp8211
g203
ag204
aa(lp8212
g206
ag207
aatp8213
Rp8214
aa(lp8215
g211
ag181
((lp8216
(lp8217
g187
ag211
aa(lp8218
g215
ag216
aa(lp8219
g218
ag219
aa(lp8220
g221
ag222
aa(lp8221
g224
ag225
aa(lp8222
g227
ag228
aa(lp8223
g230
ag231
aa(lp8224
g233
ag234
aa(lp8225
g236
ag237
aa(lp8226
g239
ag240
aa(lp8227
g242
ag243
aa(lp8228
g245
ag246
aa(lp8229
g248
ag249
aa(lp8230
g251
ag252
aa(lp8231
g254
ag255
aa(lp8232
g257
ag258
aa(lp8233
g260
ag261
aa(lp8234
g263
ag264
aa(lp8235
g266
ag267
aatp8236
Rp8237
aa(lp8238
g271
ag181
((lp8239
(lp8240
g187
ag271
aa(lp8241
g275
ag276
aatp8242
Rp8243
aatp8244
Rp8245
sg80
Nsbtp8246
a(g4830
g1
(g92
g3
Ntp8247
Rp8248
(dp8249
g7
(dp8250
sg9
g1
(g742
g3
Ntp8251
Rp8252
(dp8253
g14
g15
(g746
tp8254
Rp8255
(dp8256
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp8257
tp8258
Rp8259
(dp8260
g41
S'environ_items'
p8261
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_to_standard_smooth_mean_0'
p8262
sg63
(dp8263
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8262
sg76
Nsg77
(lp8264
sg79
Nsg80
Nsbtp8265
a(g4830
g1
(g81
g3
Ntp8266
Rp8267
(dp8268
g85
g1
(g86
g3
Ntp8269
Rp8270
(dp8271
g90
(dp8272
g1
(g92
g3
Ntp8273
Rp8274
(dp8275
g7
(dp8276
sg9
g1
(g97
g3
Ntp8277
Rp8278
(dp8279
g14
g15
(g53
tp8280
Rp8281
(dp8282
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g4844
sbsg108
(lp8283
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp8284
sg65
S'log_alff_to_standard_smooth_0'
p8285
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp8286
sg79
Nsg80
Nsb(dp8287
sg1
(g92
g3
Ntp8288
Rp8289
(dp8290
g7
(dp8291
sg9
g1
(g97
g3
Ntp8292
Rp8293
(dp8294
g14
g15
(g53
tp8295
Rp8296
(dp8297
g28
g29
sg25
g23
sbsg108
(lp8298
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp8299
sg65
g8285
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp8300
sg79
Nsg80
Nsb(dp8301
sg1
(g92
g3
Ntp8302
Rp8303
(dp8304
g7
(dp8305
sg9
g1
(g135
g3
Ntp8306
Rp8307
(dp8308
g139
(lp8309
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp8310
Rp8311
(dp8312
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p8313
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp8314
g25
Nssg150
(lp8315
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp8316
sg65
g8285
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp8317
sg79
Nsg80
Nsb(dp8318
ssg157
(dp8319
sg159
(dp8320
g8274
(dp8321
g8303
(dp8322
g163
(lp8323
(g107
g107
tp8324
a(g105
g105
tp8325
a(g104
g104
tp8326
a(g14
g14
tp8327
asssg8289
(dp8328
sg8303
(dp8329
g8289
(dp8330
g163
(lp8331
(g25
g25
tp8332
assssg174
g8320
sg175
(dp8333
g8274
(dp8334
sg8289
(dp8335
g8303
g8330
ssg8303
(dp8336
g8274
g8322
sssg180
g8320
sbsg43
g8285
sg65
g66
sg75
g8285
sg76
g181
((lp8337
(lp8338
g184
ag181
((lp8339
(lp8340
g187
ag184
aa(lp8341
g189
ag190
aa(lp8342
g192
ag193
aa(lp8343
g195
ag196
aa(lp8344
g198
ag199
aa(lp8345
g201
ag106
aa(lp8346
g203
ag204
aa(lp8347
g206
ag207
aatp8348
Rp8349
aa(lp8350
g211
ag181
((lp8351
(lp8352
g187
ag211
aa(lp8353
g215
ag216
aa(lp8354
g218
ag219
aa(lp8355
g221
ag222
aa(lp8356
g224
ag225
aa(lp8357
g227
ag228
aa(lp8358
g230
ag231
aa(lp8359
g233
ag234
aa(lp8360
g236
ag237
aa(lp8361
g239
ag240
aa(lp8362
g242
ag243
aa(lp8363
g245
ag246
aa(lp8364
g248
ag249
aa(lp8365
g251
ag252
aa(lp8366
g254
ag255
aa(lp8367
g257
ag258
aa(lp8368
g260
ag261
aa(lp8369
g263
ag264
aa(lp8370
g266
ag267
aatp8371
Rp8372
aa(lp8373
g271
ag181
((lp8374
(lp8375
g187
ag271
aa(lp8376
g275
ag276
aatp8377
Rp8378
aatp8379
Rp8380
sg80
Nsbtp8381
a(g5437
g1
(g81
g3
Ntp8382
Rp8383
(dp8384
g85
g1
(g86
g3
Ntp8385
Rp8386
(dp8387
g90
(dp8388
g1
(g92
g3
Ntp8389
Rp8390
(dp8391
g7
(dp8392
sg9
g1
(g97
g3
Ntp8393
Rp8394
(dp8395
g14
g15
(g53
tp8396
Rp8397
(dp8398
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g5451
sbsg108
(lp8399
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp8400
sg65
S'log_dr_tempreg_maps_stack_smooth_0'
p8401
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp8402
sg79
Nsg80
Nsb(dp8403
sg1
(g92
g3
Ntp8404
Rp8405
(dp8406
g7
(dp8407
sg9
g1
(g97
g3
Ntp8408
Rp8409
(dp8410
g14
g15
(g53
tp8411
Rp8412
(dp8413
g28
g29
sg25
g23
sbsg108
(lp8414
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp8415
sg65
g8401
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp8416
sg79
Nsg80
Nsb(dp8417
sg1
(g92
g3
Ntp8418
Rp8419
(dp8420
g7
(dp8421
sg9
g1
(g135
g3
Ntp8422
Rp8423
(dp8424
g139
(lp8425
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp8426
Rp8427
(dp8428
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p8429
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp8430
g25
Nssg150
(lp8431
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp8432
sg65
g8401
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp8433
sg79
Nsg80
Nsb(dp8434
ssg157
(dp8435
sg159
(dp8436
g8390
(dp8437
g8419
(dp8438
g163
(lp8439
(g107
g107
tp8440
a(g105
g105
tp8441
a(g104
g104
tp8442
a(g14
g14
tp8443
asssg8405
(dp8444
sg8419
(dp8445
g8405
(dp8446
g163
(lp8447
(g25
g25
tp8448
assssg174
g8436
sg175
(dp8449
g8390
(dp8450
sg8405
(dp8451
g8419
g8446
ssg8419
(dp8452
g8390
g8438
sssg180
g8436
sbsg43
g8401
sg65
g66
sg75
g8401
sg76
g181
((lp8453
(lp8454
g184
ag181
((lp8455
(lp8456
g187
ag184
aa(lp8457
g189
ag190
aa(lp8458
g192
ag193
aa(lp8459
g195
ag196
aa(lp8460
g198
ag199
aa(lp8461
g201
ag106
aa(lp8462
g203
ag204
aa(lp8463
g206
ag207
aatp8464
Rp8465
aa(lp8466
g211
ag181
((lp8467
(lp8468
g187
ag211
aa(lp8469
g215
ag216
aa(lp8470
g218
ag219
aa(lp8471
g221
ag222
aa(lp8472
g224
ag225
aa(lp8473
g227
ag228
aa(lp8474
g230
ag231
aa(lp8475
g233
ag234
aa(lp8476
g236
ag237
aa(lp8477
g239
ag240
aa(lp8478
g242
ag243
aa(lp8479
g245
ag246
aa(lp8480
g248
ag249
aa(lp8481
g251
ag252
aa(lp8482
g254
ag255
aa(lp8483
g257
ag258
aa(lp8484
g260
ag261
aa(lp8485
g263
ag264
aa(lp8486
g266
ag267
aatp8487
Rp8488
aa(lp8489
g271
ag181
((lp8490
(lp8491
g187
ag271
aa(lp8492
g275
ag276
aatp8493
Rp8494
aatp8495
Rp8496
sg80
Nsbtp8497
a(g5358
g1
(g81
g3
Ntp8498
Rp8499
(dp8500
g85
g1
(g86
g3
Ntp8501
Rp8502
(dp8503
g90
(dp8504
g1
(g92
g3
Ntp8505
Rp8506
(dp8507
g7
(dp8508
sg9
g1
(g135
g3
Ntp8509
Rp8510
(dp8511
g139
(lp8512
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp8513
Rp8514
(dp8515
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p8516
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp8517
g25
Nssg150
(lp8518
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp8519
sg65
S'log_dr_tempreg_maps_stack_smooth_1'
p8520
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp8521
sg79
Nsg80
Nsb(dp8522
sg1
(g92
g3
Ntp8523
Rp8524
(dp8525
g7
(dp8526
sg9
g1
(g97
g3
Ntp8527
Rp8528
(dp8529
g14
g15
(g53
tp8530
Rp8531
(dp8532
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5372
sbsg108
(lp8533
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp8534
sg65
g8520
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp8535
sg79
Nsg80
Nsb(dp8536
sg1
(g92
g3
Ntp8537
Rp8538
(dp8539
g7
(dp8540
sg9
g1
(g97
g3
Ntp8541
Rp8542
(dp8543
g14
g15
(g53
tp8544
Rp8545
(dp8546
g28
g29
sg25
g23
sbsg108
(lp8547
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp8548
sg65
g8520
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp8549
sg79
Nsg80
Nsb(dp8550
ssg157
(dp8551
sg159
(dp8552
g8506
(dp8553
g8538
(dp8554
g163
(lp8555
(g25
g25
tp8556
asssg8524
(dp8557
g8506
(dp8558
g163
(lp8559
(g107
g107
tp8560
a(g105
g105
tp8561
a(g104
g104
tp8562
a(g14
g14
tp8563
asssg8538
(dp8564
ssg174
g8552
sg175
(dp8565
g8506
(dp8566
g8524
g8558
ssg8524
(dp8567
sg8538
(dp8568
g8506
g8554
sssg180
g8552
sbsg43
g8520
sg65
g66
sg75
g8520
sg76
g181
((lp8569
(lp8570
g184
ag181
((lp8571
(lp8572
g187
ag184
aa(lp8573
g189
ag190
aa(lp8574
g192
ag193
aa(lp8575
g195
ag196
aa(lp8576
g198
ag199
aa(lp8577
g201
ag106
aa(lp8578
g203
ag204
aa(lp8579
g206
ag207
aatp8580
Rp8581
aa(lp8582
g211
ag181
((lp8583
(lp8584
g187
ag211
aa(lp8585
g215
ag216
aa(lp8586
g218
ag219
aa(lp8587
g221
ag222
aa(lp8588
g224
ag225
aa(lp8589
g227
ag228
aa(lp8590
g230
ag231
aa(lp8591
g233
ag234
aa(lp8592
g236
ag237
aa(lp8593
g239
ag240
aa(lp8594
g242
ag243
aa(lp8595
g245
ag246
aa(lp8596
g248
ag249
aa(lp8597
g251
ag252
aa(lp8598
g254
ag255
aa(lp8599
g257
ag258
aa(lp8600
g260
ag261
aa(lp8601
g263
ag264
aa(lp8602
g266
ag267
aatp8603
Rp8604
aa(lp8605
g271
ag181
((lp8606
(lp8607
g187
ag271
aa(lp8608
g275
ag276
aatp8609
Rp8610
aatp8611
Rp8612
sg80
Nsbtp8613
a(g5051
g2453
tp8614
a(g8248
g1
(g92
g3
Ntp8615
Rp8616
(dp8617
g7
(dp8618
sg9
g1
(g135
g3
Ntp8619
Rp8620
(dp8621
g139
(lp8622
g44
ag952
asg14
g15
(g142
tp8623
Rp8624
(dp8625
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p8626
sg952
S'alff_to_standard_smooth'
p8627
sg44
g23
sg28
g29
sbsg148
(dp8628
g959
Nssg150
(lp8629
g959
asg152
Nsbsg51
Nsg43
S'alff_to_standard_smooth_mean_to_txt_0'
p8630
sg63
(dp8631
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8630
sg76
Nsg77
(lp8632
sg79
Nsg80
Nsbtp8633
a(g5070
g1
(g92
g3
Ntp8634
Rp8635
(dp8636
g7
(dp8637
sg9
g1
(g742
g3
Ntp8638
Rp8639
(dp8640
g14
g15
(g746
tp8641
Rp8642
(dp8643
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp8644
tp8645
Rp8646
(dp8647
g41
S'environ_items'
p8648
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_to_standard_smooth_mean_0'
p8649
sg63
(dp8650
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8649
sg76
Nsg77
(lp8651
sg79
Nsg80
Nsbtp8652
a(g5070
g1
(g81
g3
Ntp8653
Rp8654
(dp8655
g85
g1
(g86
g3
Ntp8656
Rp8657
(dp8658
g90
(dp8659
g1
(g92
g3
Ntp8660
Rp8661
(dp8662
g7
(dp8663
sg9
g1
(g135
g3
Ntp8664
Rp8665
(dp8666
g139
(lp8667
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp8668
Rp8669
(dp8670
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p8671
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp8672
g25
Nssg150
(lp8673
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp8674
sg65
S'log_falff_to_standard_smooth_0'
p8675
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp8676
sg79
Nsg80
Nsb(dp8677
sg1
(g92
g3
Ntp8678
Rp8679
(dp8680
g7
(dp8681
sg9
g1
(g97
g3
Ntp8682
Rp8683
(dp8684
g14
g15
(g53
tp8685
Rp8686
(dp8687
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g5084
sbsg108
(lp8688
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp8689
sg65
g8675
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp8690
sg79
Nsg80
Nsb(dp8691
sg1
(g92
g3
Ntp8692
Rp8693
(dp8694
g7
(dp8695
sg9
g1
(g97
g3
Ntp8696
Rp8697
(dp8698
g14
g15
(g53
tp8699
Rp8700
(dp8701
g28
g29
sg25
g23
sbsg108
(lp8702
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp8703
sg65
g8675
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp8704
sg79
Nsg80
Nsb(dp8705
ssg157
(dp8706
sg159
(dp8707
g8661
(dp8708
g8693
(dp8709
g163
(lp8710
(g25
g25
tp8711
asssg8679
(dp8712
g8661
(dp8713
g163
(lp8714
(g107
g107
tp8715
a(g105
g105
tp8716
a(g104
g104
tp8717
a(g14
g14
tp8718
asssg8693
(dp8719
ssg174
g8707
sg175
(dp8720
g8661
(dp8721
g8679
g8713
ssg8679
(dp8722
sg8693
(dp8723
g8661
g8709
sssg180
g8707
sbsg43
g8675
sg65
g66
sg75
g8675
sg76
g181
((lp8724
(lp8725
g184
ag181
((lp8726
(lp8727
g187
ag184
aa(lp8728
g189
ag190
aa(lp8729
g192
ag193
aa(lp8730
g195
ag196
aa(lp8731
g198
ag199
aa(lp8732
g201
ag106
aa(lp8733
g203
ag204
aa(lp8734
g206
ag207
aatp8735
Rp8736
aa(lp8737
g211
ag181
((lp8738
(lp8739
g187
ag211
aa(lp8740
g215
ag216
aa(lp8741
g218
ag219
aa(lp8742
g221
ag222
aa(lp8743
g224
ag225
aa(lp8744
g227
ag228
aa(lp8745
g230
ag231
aa(lp8746
g233
ag234
aa(lp8747
g236
ag237
aa(lp8748
g239
ag240
aa(lp8749
g242
ag243
aa(lp8750
g245
ag246
aa(lp8751
g248
ag249
aa(lp8752
g251
ag252
aa(lp8753
g254
ag255
aa(lp8754
g257
ag258
aa(lp8755
g260
ag261
aa(lp8756
g263
ag264
aa(lp8757
g266
ag267
aatp8758
Rp8759
aa(lp8760
g271
ag181
((lp8761
(lp8762
g187
ag271
aa(lp8763
g275
ag276
aatp8764
Rp8765
aatp8766
Rp8767
sg80
Nsbtp8768
a(g1
(g92
g3
Ntp8769
Rp8770
(dp8771
g7
(dp8772
sg9
g1
(g742
g3
Ntp8773
Rp8774
(dp8775
g14
g15
(g746
tp8776
Rp8777
(dp8778
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp8779
tp8780
Rp8781
(dp8782
g41
S'environ_items'
p8783
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_smooth_mean_0'
p8784
sg63
(dp8785
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8784
sg76
Nsg77
(lp8786
sg79
Nsg80
Nsbg1
(g92
g3
Ntp8787
Rp8788
(dp8789
g7
(dp8790
sg9
g1
(g135
g3
Ntp8791
Rp8792
(dp8793
g139
(lp8794
g44
ag952
asg14
g15
(g142
tp8795
Rp8796
(dp8797
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p8798
sg952
S'falff_smooth'
p8799
sg44
g23
sg28
g29
sbsg148
(dp8800
g959
Nssg150
(lp8801
g959
asg152
Nsbsg51
Nsg43
S'falff_smooth_mean_to_txt_0'
p8802
sg63
(dp8803
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8802
sg76
Nsg77
(lp8804
sg79
Nsg80
Nsbtp8805
a(g4994
g8770
tp8806
a(g8635
g1
(g92
g3
Ntp8807
Rp8808
(dp8809
g7
(dp8810
sg9
g1
(g135
g3
Ntp8811
Rp8812
(dp8813
g139
(lp8814
g44
ag952
asg14
g15
(g142
tp8815
Rp8816
(dp8817
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p8818
sg952
S'falff_to_standard_smooth'
p8819
sg44
g23
sg28
g29
sbsg148
(dp8820
g959
Nssg150
(lp8821
g959
asg152
Nsbsg51
Nsg43
S'falff_to_standard_smooth_mean_to_txt_0'
p8822
sg63
(dp8823
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8822
sg76
Nsg77
(lp8824
sg79
Nsg80
Nsbtp8825
a(g5137
g1
(g92
g3
Ntp8826
Rp8827
(dp8828
g7
(dp8829
sg9
g1
(g742
g3
Ntp8830
Rp8831
(dp8832
g14
g15
(g746
tp8833
Rp8834
(dp8835
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp8836
tp8837
Rp8838
(dp8839
g41
S'environ_items'
p8840
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_smooth_mean_0'
p8841
sg63
(dp8842
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8841
sg76
Nsg77
(lp8843
sg79
Nsg80
Nsbtp8844
a(g8827
g1
(g92
g3
Ntp8845
Rp8846
(dp8847
g7
(dp8848
sg9
g1
(g135
g3
Ntp8849
Rp8850
(dp8851
g139
(lp8852
g44
ag952
asg14
g15
(g142
tp8853
Rp8854
(dp8855
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p8856
sg952
S'alff_Z_smooth'
p8857
sg44
g23
sg28
g29
sbsg148
(dp8858
g959
Nssg150
(lp8859
g959
asg152
Nsbsg51
Nsg43
S'alff_Z_smooth_mean_to_txt_0'
p8860
sg63
(dp8861
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8860
sg76
Nsg77
(lp8862
sg79
Nsg80
Nsbtp8863
a(g5013
g1
(g92
g3
Ntp8864
Rp8865
(dp8866
g7
(dp8867
sg9
g1
(g742
g3
Ntp8868
Rp8869
(dp8870
g14
g15
(g746
tp8871
Rp8872
(dp8873
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp8874
tp8875
Rp8876
(dp8877
g41
S'environ_items'
p8878
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_smooth_mean_0'
p8879
sg63
(dp8880
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8879
sg76
Nsg77
(lp8881
sg79
Nsg80
Nsbtp8882
a(g5310
g1
(g92
g3
Ntp8883
Rp8884
(dp8885
g7
(dp8886
sg9
g1
(g742
g3
Ntp8887
Rp8888
(dp8889
g14
g15
(g746
tp8890
Rp8891
(dp8892
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp8893
tp8894
Rp8895
(dp8896
g41
S'environ_items'
p8897
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_to_standard_smooth_mean_0'
p8898
sg63
(dp8899
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g8898
sg76
Nsg77
(lp8900
sg79
Nsg80
Nsbtp8901
a(g5310
g1
(g81
g3
Ntp8902
Rp8903
(dp8904
g85
g1
(g86
g3
Ntp8905
Rp8906
(dp8907
g90
(dp8908
g1
(g92
g3
Ntp8909
Rp8910
(dp8911
g7
(dp8912
sg9
g1
(g97
g3
Ntp8913
Rp8914
(dp8915
g14
g15
(g53
tp8916
Rp8917
(dp8918
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g5324
sbsg108
(lp8919
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp8920
sg65
S'log_falff_Z_to_standard_smooth_0'
p8921
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp8922
sg79
Nsg80
Nsb(dp8923
sg1
(g92
g3
Ntp8924
Rp8925
(dp8926
g7
(dp8927
sg9
g1
(g97
g3
Ntp8928
Rp8929
(dp8930
g14
g15
(g53
tp8931
Rp8932
(dp8933
g28
g29
sg25
g23
sbsg108
(lp8934
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp8935
sg65
g8921
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp8936
sg79
Nsg80
Nsb(dp8937
sg1
(g92
g3
Ntp8938
Rp8939
(dp8940
g7
(dp8941
sg9
g1
(g135
g3
Ntp8942
Rp8943
(dp8944
g139
(lp8945
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp8946
Rp8947
(dp8948
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p8949
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp8950
g25
Nssg150
(lp8951
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp8952
sg65
g8921
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp8953
sg79
Nsg80
Nsb(dp8954
ssg157
(dp8955
sg159
(dp8956
g8910
(dp8957
g8939
(dp8958
g163
(lp8959
(g107
g107
tp8960
a(g105
g105
tp8961
a(g104
g104
tp8962
a(g14
g14
tp8963
asssg8925
(dp8964
sg8939
(dp8965
g8925
(dp8966
g163
(lp8967
(g25
g25
tp8968
assssg174
g8956
sg175
(dp8969
g8910
(dp8970
sg8925
(dp8971
g8939
g8966
ssg8939
(dp8972
g8910
g8958
sssg180
g8956
sbsg43
g8921
sg65
g66
sg75
g8921
sg76
g181
((lp8973
(lp8974
g184
ag181
((lp8975
(lp8976
g187
ag184
aa(lp8977
g189
ag190
aa(lp8978
g192
ag193
aa(lp8979
g195
ag196
aa(lp8980
g198
ag199
aa(lp8981
g201
ag106
aa(lp8982
g203
ag204
aa(lp8983
g206
ag207
aatp8984
Rp8985
aa(lp8986
g211
ag181
((lp8987
(lp8988
g187
ag211
aa(lp8989
g215
ag216
aa(lp8990
g218
ag219
aa(lp8991
g221
ag222
aa(lp8992
g224
ag225
aa(lp8993
g227
ag228
aa(lp8994
g230
ag231
aa(lp8995
g233
ag234
aa(lp8996
g236
ag237
aa(lp8997
g239
ag240
aa(lp8998
g242
ag243
aa(lp8999
g245
ag246
aa(lp9000
g248
ag249
aa(lp9001
g251
ag252
aa(lp9002
g254
ag255
aa(lp9003
g257
ag258
aa(lp9004
g260
ag261
aa(lp9005
g263
ag264
aa(lp9006
g266
ag267
aatp9007
Rp9008
aa(lp9009
g271
ag181
((lp9010
(lp9011
g187
ag271
aa(lp9012
g275
ag276
aatp9013
Rp9014
aatp9015
Rp9016
sg80
Nsbtp9017
a(g4852
g1
(g92
g3
Ntp9018
Rp9019
(dp9020
g7
(dp9021
sg9
g1
(g742
g3
Ntp9022
Rp9023
(dp9024
g14
g15
(g746
tp9025
Rp9026
(dp9027
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9028
tp9029
Rp9030
(dp9031
g41
S'environ_items'
p9032
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_to_standard_smooth_mean_0'
p9033
sg63
(dp9034
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9033
sg76
Nsg77
(lp9035
sg79
Nsg80
Nsbtp9036
a(g4852
g1
(g81
g3
Ntp9037
Rp9038
(dp9039
g85
g1
(g86
g3
Ntp9040
Rp9041
(dp9042
g90
(dp9043
g1
(g92
g3
Ntp9044
Rp9045
(dp9046
g7
(dp9047
sg9
g1
(g97
g3
Ntp9048
Rp9049
(dp9050
g14
g15
(g53
tp9051
Rp9052
(dp9053
g28
g29
sg25
g23
sbsg108
(lp9054
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp9055
sg65
S'log_alff_Z_to_standard_smooth_0'
p9056
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp9057
sg79
Nsg80
Nsb(dp9058
sg1
(g92
g3
Ntp9059
Rp9060
(dp9061
g7
(dp9062
sg9
g1
(g97
g3
Ntp9063
Rp9064
(dp9065
g14
g15
(g53
tp9066
Rp9067
(dp9068
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g4866
sbsg108
(lp9069
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp9070
sg65
g9056
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp9071
sg79
Nsg80
Nsb(dp9072
sg1
(g92
g3
Ntp9073
Rp9074
(dp9075
g7
(dp9076
sg9
g1
(g135
g3
Ntp9077
Rp9078
(dp9079
g139
(lp9080
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp9081
Rp9082
(dp9083
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p9084
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp9085
g25
Nssg150
(lp9086
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp9087
sg65
g9056
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp9088
sg79
Nsg80
Nsb(dp9089
ssg157
(dp9090
sg159
(dp9091
g9045
(dp9092
sg9060
(dp9093
g9074
(dp9094
g163
(lp9095
(g107
g107
tp9096
a(g105
g105
tp9097
a(g104
g104
tp9098
a(g14
g14
tp9099
asssg9074
(dp9100
g9045
(dp9101
g163
(lp9102
(g25
g25
tp9103
assssg174
g9091
sg175
(dp9104
g9045
(dp9105
g9074
g9101
ssg9060
(dp9106
sg9074
(dp9107
g9060
g9094
sssg180
g9091
sbsg43
g9056
sg65
g66
sg75
g9056
sg76
g181
((lp9108
(lp9109
g184
ag181
((lp9110
(lp9111
g187
ag184
aa(lp9112
g189
ag190
aa(lp9113
g192
ag193
aa(lp9114
g195
ag196
aa(lp9115
g198
ag199
aa(lp9116
g201
ag106
aa(lp9117
g203
ag204
aa(lp9118
g206
ag207
aatp9119
Rp9120
aa(lp9121
g211
ag181
((lp9122
(lp9123
g187
ag211
aa(lp9124
g215
ag216
aa(lp9125
g218
ag219
aa(lp9126
g221
ag222
aa(lp9127
g224
ag225
aa(lp9128
g227
ag228
aa(lp9129
g230
ag231
aa(lp9130
g233
ag234
aa(lp9131
g236
ag237
aa(lp9132
g239
ag240
aa(lp9133
g242
ag243
aa(lp9134
g245
ag246
aa(lp9135
g248
ag249
aa(lp9136
g251
ag252
aa(lp9137
g254
ag255
aa(lp9138
g257
ag258
aa(lp9139
g260
ag261
aa(lp9140
g263
ag264
aa(lp9141
g266
ag267
aatp9142
Rp9143
aa(lp9144
g271
ag181
((lp9145
(lp9146
g187
ag271
aa(lp9147
g275
ag276
aatp9148
Rp9149
aatp9150
Rp9151
sg80
Nsbtp9152
a(g9019
g1
(g92
g3
Ntp9153
Rp9154
(dp9155
g7
(dp9156
sg9
g1
(g135
g3
Ntp9157
Rp9158
(dp9159
g139
(lp9160
g44
ag952
asg14
g15
(g142
tp9161
Rp9162
(dp9163
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9164
sg952
S'alff_Z_to_standard_smooth'
p9165
sg44
g23
sg28
g29
sbsg148
(dp9166
g959
Nssg150
(lp9167
g959
asg152
Nsbsg51
Nsg43
S'alff_Z_to_standard_smooth_mean_to_txt_0'
p9168
sg63
(dp9169
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9168
sg76
Nsg77
(lp9170
sg79
Nsg80
Nsbtp9171
a(g8865
g1
(g92
g3
Ntp9172
Rp9173
(dp9174
g7
(dp9175
sg9
g1
(g135
g3
Ntp9176
Rp9177
(dp9178
g139
(lp9179
g44
ag952
asg14
g15
(g142
tp9180
Rp9181
(dp9182
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9183
sg952
S'falff_Z_smooth'
p9184
sg44
g23
sg28
g29
sbsg148
(dp9185
g959
Nssg150
(lp9186
g959
asg152
Nsbsg51
Nsg43
S'falff_Z_smooth_mean_to_txt_0'
p9187
sg63
(dp9188
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9187
sg76
Nsg77
(lp9189
sg79
Nsg80
Nsbtp9190
a(g8884
g1
(g92
g3
Ntp9191
Rp9192
(dp9193
g7
(dp9194
sg9
g1
(g135
g3
Ntp9195
Rp9196
(dp9197
g139
(lp9198
g44
ag952
asg14
g15
(g142
tp9199
Rp9200
(dp9201
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9202
sg952
S'falff_Z_to_standard_smooth'
p9203
sg44
g23
sg28
g29
sbsg148
(dp9204
g959
Nssg150
(lp9205
g959
asg152
Nsbsg51
Nsg43
S'falff_Z_to_standard_smooth_mean_to_txt_0'
p9206
sg63
(dp9207
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9206
sg76
Nsg77
(lp9208
sg79
Nsg80
Nsbtp9209
a(g1
(g92
g3
Ntp9210
Rp9211
(dp9212
g7
(dp9213
sg9
g1
(g742
g3
Ntp9214
Rp9215
(dp9216
g14
g15
(g746
tp9217
Rp9218
(dp9219
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9220
tp9221
Rp9222
(dp9223
g41
S'environ_items'
p9224
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_to_standard_smooth_mean_1'
p9225
sg63
(dp9226
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9225
sg76
Nsg77
(lp9227
sg79
Nsg80
Nsbg1
(g92
g3
Ntp9228
Rp9229
(dp9230
g7
(dp9231
sg9
g1
(g135
g3
Ntp9232
Rp9233
(dp9234
g139
(lp9235
g44
ag952
asg14
g15
(g142
tp9236
Rp9237
(dp9238
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9239
sg952
S'alff_to_standard_smooth'
p9240
sg44
g23
sg28
g29
sbsg148
(dp9241
g959
Nssg150
(lp9242
g959
asg152
Nsbsg51
Nsg43
S'alff_to_standard_smooth_mean_to_txt_1'
p9243
sg63
(dp9244
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9243
sg76
Nsg77
(lp9245
sg79
Nsg80
Nsbtp9246
a(g1
(g92
g3
Ntp9247
Rp9248
(dp9249
g7
(dp9250
sg9
g1
(g742
g3
Ntp9251
Rp9252
(dp9253
g14
g15
(g746
tp9254
Rp9255
(dp9256
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9257
tp9258
Rp9259
(dp9260
g41
S'environ_items'
p9261
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_smooth_mean_1'
p9262
sg63
(dp9263
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9262
sg76
Nsg77
(lp9264
sg79
Nsg80
Nsbg1
(g92
g3
Ntp9265
Rp9266
(dp9267
g7
(dp9268
sg9
g1
(g135
g3
Ntp9269
Rp9270
(dp9271
g139
(lp9272
g44
ag952
asg14
g15
(g142
tp9273
Rp9274
(dp9275
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9276
sg952
S'alff_smooth'
p9277
sg44
g23
sg28
g29
sbsg148
(dp9278
g959
Nssg150
(lp9279
g959
asg152
Nsbsg51
Nsg43
S'alff_smooth_mean_to_txt_1'
p9280
sg63
(dp9281
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9280
sg76
Nsg77
(lp9282
sg79
Nsg80
Nsbtp9283
a(g5560
g9248
tp9284
a(g5494
g9211
tp9285
a(g5494
g1
(g81
g3
Ntp9286
Rp9287
(dp9288
g85
g1
(g86
g3
Ntp9289
Rp9290
(dp9291
g90
(dp9292
g1
(g92
g3
Ntp9293
Rp9294
(dp9295
g7
(dp9296
sg9
g1
(g97
g3
Ntp9297
Rp9298
(dp9299
g14
g15
(g53
tp9300
Rp9301
(dp9302
g28
g29
sg25
g23
sbsg108
(lp9303
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp9304
sg65
S'log_alff_to_standard_smooth_1'
p9305
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp9306
sg79
Nsg80
Nsb(dp9307
sg1
(g92
g3
Ntp9308
Rp9309
(dp9310
g7
(dp9311
sg9
g1
(g97
g3
Ntp9312
Rp9313
(dp9314
g14
g15
(g53
tp9315
Rp9316
(dp9317
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5508
sbsg108
(lp9318
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp9319
sg65
g9305
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp9320
sg79
Nsg80
Nsb(dp9321
sg1
(g92
g3
Ntp9322
Rp9323
(dp9324
g7
(dp9325
sg9
g1
(g135
g3
Ntp9326
Rp9327
(dp9328
g139
(lp9329
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp9330
Rp9331
(dp9332
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p9333
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp9334
g25
Nssg150
(lp9335
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp9336
sg65
g9305
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp9337
sg79
Nsg80
Nsb(dp9338
ssg157
(dp9339
sg159
(dp9340
g9294
(dp9341
sg9309
(dp9342
g9323
(dp9343
g163
(lp9344
(g107
g107
tp9345
a(g105
g105
tp9346
a(g104
g104
tp9347
a(g14
g14
tp9348
asssg9323
(dp9349
g9294
(dp9350
g163
(lp9351
(g25
g25
tp9352
assssg174
g9340
sg175
(dp9353
g9294
(dp9354
g9323
g9350
ssg9309
(dp9355
sg9323
(dp9356
g9309
g9343
sssg180
g9340
sbsg43
g9305
sg65
g66
sg75
g9305
sg76
g181
((lp9357
(lp9358
g184
ag181
((lp9359
(lp9360
g187
ag184
aa(lp9361
g189
ag190
aa(lp9362
g192
ag193
aa(lp9363
g195
ag196
aa(lp9364
g198
ag199
aa(lp9365
g201
ag106
aa(lp9366
g203
ag204
aa(lp9367
g206
ag207
aatp9368
Rp9369
aa(lp9370
g211
ag181
((lp9371
(lp9372
g187
ag211
aa(lp9373
g215
ag216
aa(lp9374
g218
ag219
aa(lp9375
g221
ag222
aa(lp9376
g224
ag225
aa(lp9377
g227
ag228
aa(lp9378
g230
ag231
aa(lp9379
g233
ag234
aa(lp9380
g236
ag237
aa(lp9381
g239
ag240
aa(lp9382
g242
ag243
aa(lp9383
g245
ag246
aa(lp9384
g248
ag249
aa(lp9385
g251
ag252
aa(lp9386
g254
ag255
aa(lp9387
g257
ag258
aa(lp9388
g260
ag261
aa(lp9389
g263
ag264
aa(lp9390
g266
ag267
aatp9391
Rp9392
aa(lp9393
g271
ag181
((lp9394
(lp9395
g187
ag271
aa(lp9396
g275
ag276
aatp9397
Rp9398
aatp9399
Rp9400
sg80
Nsbtp9401
a(g5656
g1
(g81
g3
Ntp9402
Rp9403
(dp9404
g85
g1
(g86
g3
Ntp9405
Rp9406
(dp9407
g90
(dp9408
g1
(g92
g3
Ntp9409
Rp9410
(dp9411
g7
(dp9412
sg9
g1
(g97
g3
Ntp9413
Rp9414
(dp9415
g14
g15
(g53
tp9416
Rp9417
(dp9418
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5670
sbsg108
(lp9419
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp9420
sg65
S'log_falff_to_standard_smooth_1'
p9421
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp9422
sg79
Nsg80
Nsb(dp9423
sg1
(g92
g3
Ntp9424
Rp9425
(dp9426
g7
(dp9427
sg9
g1
(g135
g3
Ntp9428
Rp9429
(dp9430
g139
(lp9431
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp9432
Rp9433
(dp9434
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p9435
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp9436
g25
Nssg150
(lp9437
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp9438
sg65
g9421
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp9439
sg79
Nsg80
Nsb(dp9440
sg1
(g92
g3
Ntp9441
Rp9442
(dp9443
g7
(dp9444
sg9
g1
(g97
g3
Ntp9445
Rp9446
(dp9447
g14
g15
(g53
tp9448
Rp9449
(dp9450
g28
g29
sg25
g23
sbsg108
(lp9451
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp9452
sg65
g9421
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp9453
sg79
Nsg80
Nsb(dp9454
ssg157
(dp9455
sg159
(dp9456
g9410
(dp9457
g9425
(dp9458
g163
(lp9459
(g107
g107
tp9460
a(g105
g105
tp9461
a(g104
g104
tp9462
a(g14
g14
tp9463
asssg9425
(dp9464
g9442
(dp9465
g163
(lp9466
(g25
g25
tp9467
asssg9442
(dp9468
ssg174
g9456
sg175
(dp9469
g9410
(dp9470
sg9425
(dp9471
g9410
g9458
ssg9442
(dp9472
g9425
g9465
sssg180
g9456
sbsg43
g9421
sg65
g66
sg75
g9421
sg76
g181
((lp9473
(lp9474
g184
ag181
((lp9475
(lp9476
g187
ag184
aa(lp9477
g189
ag190
aa(lp9478
g192
ag193
aa(lp9479
g195
ag196
aa(lp9480
g198
ag199
aa(lp9481
g201
ag106
aa(lp9482
g203
ag204
aa(lp9483
g206
ag207
aatp9484
Rp9485
aa(lp9486
g211
ag181
((lp9487
(lp9488
g187
ag211
aa(lp9489
g215
ag216
aa(lp9490
g218
ag219
aa(lp9491
g221
ag222
aa(lp9492
g224
ag225
aa(lp9493
g227
ag228
aa(lp9494
g230
ag231
aa(lp9495
g233
ag234
aa(lp9496
g236
ag237
aa(lp9497
g239
ag240
aa(lp9498
g242
ag243
aa(lp9499
g245
ag246
aa(lp9500
g248
ag249
aa(lp9501
g251
ag252
aa(lp9502
g254
ag255
aa(lp9503
g257
ag258
aa(lp9504
g260
ag261
aa(lp9505
g263
ag264
aa(lp9506
g266
ag267
aatp9507
Rp9508
aa(lp9509
g271
ag181
((lp9510
(lp9511
g187
ag271
aa(lp9512
g275
ag276
aatp9513
Rp9514
aatp9515
Rp9516
sg80
Nsbtp9517
a(g5656
g1
(g92
g3
Ntp9518
Rp9519
(dp9520
g7
(dp9521
sg9
g1
(g742
g3
Ntp9522
Rp9523
(dp9524
g14
g15
(g746
tp9525
Rp9526
(dp9527
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9528
tp9529
Rp9530
(dp9531
g41
S'environ_items'
p9532
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_to_standard_smooth_mean_1'
p9533
sg63
(dp9534
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9533
sg76
Nsg77
(lp9535
sg79
Nsg80
Nsbtp9536
a(g1
(g92
g3
Ntp9537
Rp9538
(dp9539
g7
(dp9540
sg9
g1
(g742
g3
Ntp9541
Rp9542
(dp9543
g14
g15
(g746
tp9544
Rp9545
(dp9546
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9547
tp9548
Rp9549
(dp9550
g41
S'environ_items'
p9551
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_smooth_mean_1'
p9552
sg63
(dp9553
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9552
sg76
Nsg77
(lp9554
sg79
Nsg80
Nsbg1
(g92
g3
Ntp9555
Rp9556
(dp9557
g7
(dp9558
sg9
g1
(g135
g3
Ntp9559
Rp9560
(dp9561
g139
(lp9562
g44
ag952
asg14
g15
(g142
tp9563
Rp9564
(dp9565
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9566
sg952
S'falff_smooth'
p9567
sg44
g23
sg28
g29
sbsg148
(dp9568
g959
Nssg150
(lp9569
g959
asg152
Nsbsg51
Nsg43
S'falff_smooth_mean_to_txt_1'
p9570
sg63
(dp9571
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9570
sg76
Nsg77
(lp9572
sg79
Nsg80
Nsbtp9573
a(g5398
g9538
tp9574
a(g5541
g1
(g92
g3
Ntp9575
Rp9576
(dp9577
g7
(dp9578
sg9
g1
(g742
g3
Ntp9579
Rp9580
(dp9581
g14
g15
(g746
tp9582
Rp9583
(dp9584
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9585
tp9586
Rp9587
(dp9588
g41
S'environ_items'
p9589
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_to_standard_smooth_mean_1'
p9590
sg63
(dp9591
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9590
sg76
Nsg77
(lp9592
sg79
Nsg80
Nsbtp9593
a(g5541
g1
(g81
g3
Ntp9594
Rp9595
(dp9596
g85
g1
(g86
g3
Ntp9597
Rp9598
(dp9599
g90
(dp9600
g1
(g92
g3
Ntp9601
Rp9602
(dp9603
g7
(dp9604
sg9
g1
(g97
g3
Ntp9605
Rp9606
(dp9607
g14
g15
(g53
tp9608
Rp9609
(dp9610
g28
g29
sg25
g23
sbsg108
(lp9611
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp9612
sg65
S'log_alff_Z_to_standard_smooth_1'
p9613
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp9614
sg79
Nsg80
Nsb(dp9615
sg1
(g92
g3
Ntp9616
Rp9617
(dp9618
g7
(dp9619
sg9
g1
(g97
g3
Ntp9620
Rp9621
(dp9622
g14
g15
(g53
tp9623
Rp9624
(dp9625
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5555
sbsg108
(lp9626
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp9627
sg65
g9613
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp9628
sg79
Nsg80
Nsb(dp9629
sg1
(g92
g3
Ntp9630
Rp9631
(dp9632
g7
(dp9633
sg9
g1
(g135
g3
Ntp9634
Rp9635
(dp9636
g139
(lp9637
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp9638
Rp9639
(dp9640
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p9641
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp9642
g25
Nssg150
(lp9643
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp9644
sg65
g9613
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp9645
sg79
Nsg80
Nsb(dp9646
ssg157
(dp9647
sg159
(dp9648
g9602
(dp9649
sg9617
(dp9650
g9631
(dp9651
g163
(lp9652
(g107
g107
tp9653
a(g105
g105
tp9654
a(g104
g104
tp9655
a(g14
g14
tp9656
asssg9631
(dp9657
g9602
(dp9658
g163
(lp9659
(g25
g25
tp9660
assssg174
g9648
sg175
(dp9661
g9602
(dp9662
g9631
g9658
ssg9617
(dp9663
sg9631
(dp9664
g9617
g9651
sssg180
g9648
sbsg43
g9613
sg65
g66
sg75
g9613
sg76
g181
((lp9665
(lp9666
g184
ag181
((lp9667
(lp9668
g187
ag184
aa(lp9669
g189
ag190
aa(lp9670
g192
ag193
aa(lp9671
g195
ag196
aa(lp9672
g198
ag199
aa(lp9673
g201
ag106
aa(lp9674
g203
ag204
aa(lp9675
g206
ag207
aatp9676
Rp9677
aa(lp9678
g211
ag181
((lp9679
(lp9680
g187
ag211
aa(lp9681
g215
ag216
aa(lp9682
g218
ag219
aa(lp9683
g221
ag222
aa(lp9684
g224
ag225
aa(lp9685
g227
ag228
aa(lp9686
g230
ag231
aa(lp9687
g233
ag234
aa(lp9688
g236
ag237
aa(lp9689
g239
ag240
aa(lp9690
g242
ag243
aa(lp9691
g245
ag246
aa(lp9692
g248
ag249
aa(lp9693
g251
ag252
aa(lp9694
g254
ag255
aa(lp9695
g257
ag258
aa(lp9696
g260
ag261
aa(lp9697
g263
ag264
aa(lp9698
g266
ag267
aatp9699
Rp9700
aa(lp9701
g271
ag181
((lp9702
(lp9703
g187
ag271
aa(lp9704
g275
ag276
aatp9705
Rp9706
aatp9707
Rp9708
sg80
Nsbtp9709
a(g9576
g1
(g92
g3
Ntp9710
Rp9711
(dp9712
g7
(dp9713
sg9
g1
(g135
g3
Ntp9714
Rp9715
(dp9716
g139
(lp9717
g44
ag952
asg14
g15
(g142
tp9718
Rp9719
(dp9720
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9721
sg952
S'alff_Z_to_standard_smooth'
p9722
sg44
g23
sg28
g29
sbsg148
(dp9723
g959
Nssg150
(lp9724
g959
asg152
Nsbsg51
Nsg43
S'alff_Z_to_standard_smooth_mean_to_txt_1'
p9725
sg63
(dp9726
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9725
sg76
Nsg77
(lp9727
sg79
Nsg80
Nsbtp9728
a(g9519
g1
(g92
g3
Ntp9729
Rp9730
(dp9731
g7
(dp9732
sg9
g1
(g135
g3
Ntp9733
Rp9734
(dp9735
g139
(lp9736
g44
ag952
asg14
g15
(g142
tp9737
Rp9738
(dp9739
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9740
sg952
S'falff_to_standard_smooth'
p9741
sg44
g23
sg28
g29
sbsg148
(dp9742
g959
Nssg150
(lp9743
g959
asg152
Nsbsg51
Nsg43
S'falff_to_standard_smooth_mean_to_txt_1'
p9744
sg63
(dp9745
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9744
sg76
Nsg77
(lp9746
sg79
Nsg80
Nsbtp9747
a(g4890
g1
(g92
g3
Ntp9748
Rp9749
(dp9750
g7
(dp9751
sg9
g1
(g742
g3
Ntp9752
Rp9753
(dp9754
g14
g15
(g746
tp9755
Rp9756
(dp9757
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9758
tp9759
Rp9760
(dp9761
g41
S'environ_items'
p9762
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'alff_Z_smooth_mean_1'
p9763
sg63
(dp9764
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9763
sg76
Nsg77
(lp9765
sg79
Nsg80
Nsbtp9766
a(g9749
g1
(g92
g3
Ntp9767
Rp9768
(dp9769
g7
(dp9770
sg9
g1
(g135
g3
Ntp9771
Rp9772
(dp9773
g139
(lp9774
g44
ag952
asg14
g15
(g142
tp9775
Rp9776
(dp9777
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9778
sg952
S'alff_Z_smooth'
p9779
sg44
g23
sg28
g29
sbsg148
(dp9780
g959
Nssg150
(lp9781
g959
asg152
Nsbsg51
Nsg43
S'alff_Z_smooth_mean_to_txt_1'
p9782
sg63
(dp9783
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9782
sg76
Nsg77
(lp9784
sg79
Nsg80
Nsbtp9785
a(g5417
g1
(g92
g3
Ntp9786
Rp9787
(dp9788
g7
(dp9789
sg9
g1
(g742
g3
Ntp9790
Rp9791
(dp9792
g14
g15
(g746
tp9793
Rp9794
(dp9795
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9796
tp9797
Rp9798
(dp9799
g41
S'environ_items'
p9800
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_smooth_mean_1'
p9801
sg63
(dp9802
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9801
sg76
Nsg77
(lp9803
sg79
Nsg80
Nsbtp9804
a(g9787
g1
(g92
g3
Ntp9805
Rp9806
(dp9807
g7
(dp9808
sg9
g1
(g135
g3
Ntp9809
Rp9810
(dp9811
g139
(lp9812
g44
ag952
asg14
g15
(g142
tp9813
Rp9814
(dp9815
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9816
sg952
S'falff_Z_smooth'
p9817
sg44
g23
sg28
g29
sbsg148
(dp9818
g959
Nssg150
(lp9819
g959
asg152
Nsbsg51
Nsg43
S'falff_Z_smooth_mean_to_txt_1'
p9820
sg63
(dp9821
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9820
sg76
Nsg77
(lp9822
sg79
Nsg80
Nsbtp9823
a(g5184
g1
(g92
g3
Ntp9824
Rp9825
(dp9826
g7
(dp9827
sg9
g1
(g742
g3
Ntp9828
Rp9829
(dp9830
g14
g15
(g746
tp9831
Rp9832
(dp9833
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9834
tp9835
Rp9836
(dp9837
g41
S'environ_items'
p9838
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff_Z_to_standard_smooth_mean_1'
p9839
sg63
(dp9840
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9839
sg76
Nsg77
(lp9841
sg79
Nsg80
Nsbtp9842
a(g5184
g1
(g81
g3
Ntp9843
Rp9844
(dp9845
g85
g1
(g86
g3
Ntp9846
Rp9847
(dp9848
g90
(dp9849
g1
(g92
g3
Ntp9850
Rp9851
(dp9852
g7
(dp9853
sg9
g1
(g97
g3
Ntp9854
Rp9855
(dp9856
g14
g15
(g53
tp9857
Rp9858
(dp9859
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5198
sbsg108
(lp9860
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp9861
sg65
S'log_falff_Z_to_standard_smooth_1'
p9862
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp9863
sg79
Nsg80
Nsb(dp9864
sg1
(g92
g3
Ntp9865
Rp9866
(dp9867
g7
(dp9868
sg9
g1
(g97
g3
Ntp9869
Rp9870
(dp9871
g14
g15
(g53
tp9872
Rp9873
(dp9874
g28
g29
sg25
g23
sbsg108
(lp9875
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp9876
sg65
g9862
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp9877
sg79
Nsg80
Nsb(dp9878
sg1
(g92
g3
Ntp9879
Rp9880
(dp9881
g7
(dp9882
sg9
g1
(g135
g3
Ntp9883
Rp9884
(dp9885
g139
(lp9886
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp9887
Rp9888
(dp9889
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p9890
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp9891
g25
Nssg150
(lp9892
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp9893
sg65
g9862
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp9894
sg79
Nsg80
Nsb(dp9895
ssg157
(dp9896
sg159
(dp9897
g9851
(dp9898
g9880
(dp9899
g163
(lp9900
(g107
g107
tp9901
a(g105
g105
tp9902
a(g104
g104
tp9903
a(g14
g14
tp9904
asssg9866
(dp9905
sg9880
(dp9906
g9866
(dp9907
g163
(lp9908
(g25
g25
tp9909
assssg174
g9897
sg175
(dp9910
g9851
(dp9911
sg9866
(dp9912
g9880
g9907
ssg9880
(dp9913
g9851
g9899
sssg180
g9897
sbsg43
g9862
sg65
g66
sg75
g9862
sg76
g181
((lp9914
(lp9915
g184
ag181
((lp9916
(lp9917
g187
ag184
aa(lp9918
g189
ag190
aa(lp9919
g192
ag193
aa(lp9920
g195
ag196
aa(lp9921
g198
ag199
aa(lp9922
g201
ag106
aa(lp9923
g203
ag204
aa(lp9924
g206
ag207
aatp9925
Rp9926
aa(lp9927
g211
ag181
((lp9928
(lp9929
g187
ag211
aa(lp9930
g215
ag216
aa(lp9931
g218
ag219
aa(lp9932
g221
ag222
aa(lp9933
g224
ag225
aa(lp9934
g227
ag228
aa(lp9935
g230
ag231
aa(lp9936
g233
ag234
aa(lp9937
g236
ag237
aa(lp9938
g239
ag240
aa(lp9939
g242
ag243
aa(lp9940
g245
ag246
aa(lp9941
g248
ag249
aa(lp9942
g251
ag252
aa(lp9943
g254
ag255
aa(lp9944
g257
ag258
aa(lp9945
g260
ag261
aa(lp9946
g263
ag264
aa(lp9947
g266
ag267
aatp9948
Rp9949
aa(lp9950
g271
ag181
((lp9951
(lp9952
g187
ag271
aa(lp9953
g275
ag276
aatp9954
Rp9955
aatp9956
Rp9957
sg80
Nsbtp9958
a(g9825
g1
(g92
g3
Ntp9959
Rp9960
(dp9961
g7
(dp9962
sg9
g1
(g135
g3
Ntp9963
Rp9964
(dp9965
g139
(lp9966
g44
ag952
asg14
g15
(g142
tp9967
Rp9968
(dp9969
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p9970
sg952
S'falff_Z_to_standard_smooth'
p9971
sg44
g23
sg28
g29
sbsg148
(dp9972
g959
Nssg150
(lp9973
g959
asg152
Nsbsg51
Nsg43
S'falff_Z_to_standard_smooth_mean_to_txt_1'
p9974
sg63
(dp9975
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9974
sg76
Nsg77
(lp9976
sg79
Nsg80
Nsbtp9977
a(g5618
g1
(g92
g3
Ntp9978
Rp9979
(dp9980
g7
(dp9981
sg9
g1
(g742
g3
Ntp9982
Rp9983
(dp9984
g14
g15
(g746
tp9985
Rp9986
(dp9987
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp9988
tp9989
Rp9990
(dp9991
g41
S'environ_items'
p9992
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_smooth_mean_0'
p9993
sg63
(dp9994
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g9993
sg76
Nsg77
(lp9995
sg79
Nsg80
Nsbtp9996
a(g1
(g92
g3
Ntp9997
Rp9998
(dp9999
g7
(dp10000
sg9
g1
(g742
g3
Ntp10001
Rp10002
(dp10003
g14
g15
(g746
tp10004
Rp10005
(dp10006
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10007
tp10008
Rp10009
(dp10010
g41
S'environ_items'
p10011
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_to_standard_smooth_mean_0'
p10012
sg63
(dp10013
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10012
sg76
Nsg77
(lp10014
sg79
Nsg80
Nsbg1
(g92
g3
Ntp10015
Rp10016
(dp10017
g7
(dp10018
sg9
g1
(g135
g3
Ntp10019
Rp10020
(dp10021
g139
(lp10022
g44
ag952
asg14
g15
(g142
tp10023
Rp10024
(dp10025
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10026
sg952
S'reho_to_standard_smooth'
p10027
sg44
g23
sg28
g29
sbsg148
(dp10028
g959
Nssg150
(lp10029
g959
asg152
Nsbsg51
Nsg43
S'reho_to_standard_smooth_mean_to_txt_0'
p10030
sg63
(dp10031
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10030
sg76
Nsg77
(lp10032
sg79
Nsg80
Nsbtp10033
a(g5222
g9998
tp10034
a(g5222
g1
(g81
g3
Ntp10035
Rp10036
(dp10037
g85
g1
(g86
g3
Ntp10038
Rp10039
(dp10040
g90
(dp10041
g1
(g92
g3
Ntp10042
Rp10043
(dp10044
g7
(dp10045
sg9
g1
(g97
g3
Ntp10046
Rp10047
(dp10048
g14
g15
(g53
tp10049
Rp10050
(dp10051
g28
g29
sg25
g23
sbsg108
(lp10052
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp10053
sg65
S'log_reho_to_standard_smooth_0'
p10054
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp10055
sg79
Nsg80
Nsb(dp10056
sg1
(g92
g3
Ntp10057
Rp10058
(dp10059
g7
(dp10060
sg9
g1
(g97
g3
Ntp10061
Rp10062
(dp10063
g14
g15
(g53
tp10064
Rp10065
(dp10066
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g5236
sbsg108
(lp10067
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp10068
sg65
g10054
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp10069
sg79
Nsg80
Nsb(dp10070
sg1
(g92
g3
Ntp10071
Rp10072
(dp10073
g7
(dp10074
sg9
g1
(g135
g3
Ntp10075
Rp10076
(dp10077
g139
(lp10078
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp10079
Rp10080
(dp10081
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p10082
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp10083
g25
Nssg150
(lp10084
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp10085
sg65
g10054
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp10086
sg79
Nsg80
Nsb(dp10087
ssg157
(dp10088
sg159
(dp10089
g10043
(dp10090
sg10058
(dp10091
g10072
(dp10092
g163
(lp10093
(g107
g107
tp10094
a(g105
g105
tp10095
a(g104
g104
tp10096
a(g14
g14
tp10097
asssg10072
(dp10098
g10043
(dp10099
g163
(lp10100
(g25
g25
tp10101
assssg174
g10089
sg175
(dp10102
g10043
(dp10103
g10072
g10099
ssg10058
(dp10104
sg10072
(dp10105
g10058
g10092
sssg180
g10089
sbsg43
g10054
sg65
g66
sg75
g10054
sg76
g181
((lp10106
(lp10107
g184
ag181
((lp10108
(lp10109
g187
ag184
aa(lp10110
g189
ag190
aa(lp10111
g192
ag193
aa(lp10112
g195
ag196
aa(lp10113
g198
ag199
aa(lp10114
g201
ag106
aa(lp10115
g203
ag204
aa(lp10116
g206
ag207
aatp10117
Rp10118
aa(lp10119
g211
ag181
((lp10120
(lp10121
g187
ag211
aa(lp10122
g215
ag216
aa(lp10123
g218
ag219
aa(lp10124
g221
ag222
aa(lp10125
g224
ag225
aa(lp10126
g227
ag228
aa(lp10127
g230
ag231
aa(lp10128
g233
ag234
aa(lp10129
g236
ag237
aa(lp10130
g239
ag240
aa(lp10131
g242
ag243
aa(lp10132
g245
ag246
aa(lp10133
g248
ag249
aa(lp10134
g251
ag252
aa(lp10135
g254
ag255
aa(lp10136
g257
ag258
aa(lp10137
g260
ag261
aa(lp10138
g263
ag264
aa(lp10139
g266
ag267
aatp10140
Rp10141
aa(lp10142
g271
ag181
((lp10143
(lp10144
g187
ag271
aa(lp10145
g275
ag276
aatp10146
Rp10147
aatp10148
Rp10149
sg80
Nsbtp10150
a(g9979
g1
(g92
g3
Ntp10151
Rp10152
(dp10153
g7
(dp10154
sg9
g1
(g135
g3
Ntp10155
Rp10156
(dp10157
g139
(lp10158
g44
ag952
asg14
g15
(g142
tp10159
Rp10160
(dp10161
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10162
sg952
S'reho_smooth'
p10163
sg44
g23
sg28
g29
sbsg148
(dp10164
g959
Nssg150
(lp10165
g959
asg152
Nsbsg51
Nsg43
S'reho_smooth_mean_to_txt_0'
p10166
sg63
(dp10167
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10166
sg76
Nsg77
(lp10168
sg79
Nsg80
Nsbtp10169
a(g1
(g92
g3
Ntp10170
Rp10171
(dp10172
g7
(dp10173
sg9
g1
(g742
g3
Ntp10174
Rp10175
(dp10176
g14
g15
(g746
tp10177
Rp10178
(dp10179
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10180
tp10181
Rp10182
(dp10183
g41
S'environ_items'
p10184
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_smooth_mean_0'
p10185
sg63
(dp10186
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10185
sg76
Nsg77
(lp10187
sg79
Nsg80
Nsbg1
(g92
g3
Ntp10188
Rp10189
(dp10190
g7
(dp10191
sg9
g1
(g135
g3
Ntp10192
Rp10193
(dp10194
g139
(lp10195
g44
ag952
asg14
g15
(g142
tp10196
Rp10197
(dp10198
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10199
sg952
S'reho_Z_smooth'
p10200
sg44
g23
sg28
g29
sbsg148
(dp10201
g959
Nssg150
(lp10202
g959
asg152
Nsbsg51
Nsg43
S'reho_Z_smooth_mean_to_txt_0'
p10203
sg63
(dp10204
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10203
sg76
Nsg77
(lp10205
sg79
Nsg80
Nsbtp10206
a(g5203
g10171
tp10207
a(g5377
g1
(g92
g3
Ntp10208
Rp10209
(dp10210
g7
(dp10211
sg9
g1
(g742
g3
Ntp10212
Rp10213
(dp10214
g14
g15
(g746
tp10215
Rp10216
(dp10217
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10218
tp10219
Rp10220
(dp10221
g41
S'environ_items'
p10222
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_to_standard_smooth_mean_0'
p10223
sg63
(dp10224
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10223
sg76
Nsg77
(lp10225
sg79
Nsg80
Nsbtp10226
a(g5377
g1
(g81
g3
Ntp10227
Rp10228
(dp10229
g85
g1
(g86
g3
Ntp10230
Rp10231
(dp10232
g90
(dp10233
g1
(g92
g3
Ntp10234
Rp10235
(dp10236
g7
(dp10237
sg9
g1
(g97
g3
Ntp10238
Rp10239
(dp10240
g14
g15
(g53
tp10241
Rp10242
(dp10243
g28
g29
sg25
g23
sbsg108
(lp10244
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp10245
sg65
S'log_reho_Z_to_standard_smooth_0'
p10246
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp10247
sg79
Nsg80
Nsb(dp10248
sg1
(g92
g3
Ntp10249
Rp10250
(dp10251
g7
(dp10252
sg9
g1
(g97
g3
Ntp10253
Rp10254
(dp10255
g14
g15
(g53
tp10256
Rp10257
(dp10258
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g5391
sbsg108
(lp10259
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp10260
sg65
g10246
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp10261
sg79
Nsg80
Nsb(dp10262
sg1
(g92
g3
Ntp10263
Rp10264
(dp10265
g7
(dp10266
sg9
g1
(g135
g3
Ntp10267
Rp10268
(dp10269
g139
(lp10270
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp10271
Rp10272
(dp10273
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p10274
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp10275
g25
Nssg150
(lp10276
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp10277
sg65
g10246
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp10278
sg79
Nsg80
Nsb(dp10279
ssg157
(dp10280
sg159
(dp10281
g10235
(dp10282
sg10250
(dp10283
g10264
(dp10284
g163
(lp10285
(g107
g107
tp10286
a(g105
g105
tp10287
a(g104
g104
tp10288
a(g14
g14
tp10289
asssg10264
(dp10290
g10235
(dp10291
g163
(lp10292
(g25
g25
tp10293
assssg174
g10281
sg175
(dp10294
g10235
(dp10295
g10264
g10291
ssg10250
(dp10296
sg10264
(dp10297
g10250
g10284
sssg180
g10281
sbsg43
g10246
sg65
g66
sg75
g10246
sg76
g181
((lp10298
(lp10299
g184
ag181
((lp10300
(lp10301
g187
ag184
aa(lp10302
g189
ag190
aa(lp10303
g192
ag193
aa(lp10304
g195
ag196
aa(lp10305
g198
ag199
aa(lp10306
g201
ag106
aa(lp10307
g203
ag204
aa(lp10308
g206
ag207
aatp10309
Rp10310
aa(lp10311
g211
ag181
((lp10312
(lp10313
g187
ag211
aa(lp10314
g215
ag216
aa(lp10315
g218
ag219
aa(lp10316
g221
ag222
aa(lp10317
g224
ag225
aa(lp10318
g227
ag228
aa(lp10319
g230
ag231
aa(lp10320
g233
ag234
aa(lp10321
g236
ag237
aa(lp10322
g239
ag240
aa(lp10323
g242
ag243
aa(lp10324
g245
ag246
aa(lp10325
g248
ag249
aa(lp10326
g251
ag252
aa(lp10327
g254
ag255
aa(lp10328
g257
ag258
aa(lp10329
g260
ag261
aa(lp10330
g263
ag264
aa(lp10331
g266
ag267
aatp10332
Rp10333
aa(lp10334
g271
ag181
((lp10335
(lp10336
g187
ag271
aa(lp10337
g275
ag276
aatp10338
Rp10339
aatp10340
Rp10341
sg80
Nsbtp10342
a(g10209
g1
(g92
g3
Ntp10343
Rp10344
(dp10345
g7
(dp10346
sg9
g1
(g135
g3
Ntp10347
Rp10348
(dp10349
g139
(lp10350
g44
ag952
asg14
g15
(g142
tp10351
Rp10352
(dp10353
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10354
sg952
S'reho_Z_to_standard_smooth'
p10355
sg44
g23
sg28
g29
sbsg148
(dp10356
g959
Nssg150
(lp10357
g959
asg152
Nsbsg51
Nsg43
S'reho_Z_to_standard_smooth_mean_to_txt_0'
p10358
sg63
(dp10359
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10358
sg76
Nsg77
(lp10360
sg79
Nsg80
Nsbtp10361
a(g5637
g1
(g92
g3
Ntp10362
Rp10363
(dp10364
g7
(dp10365
sg9
g1
(g742
g3
Ntp10366
Rp10367
(dp10368
g14
g15
(g746
tp10369
Rp10370
(dp10371
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10372
tp10373
Rp10374
(dp10375
g41
S'environ_items'
p10376
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_to_standard_smooth_mean_1'
p10377
sg63
(dp10378
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10377
sg76
Nsg77
(lp10379
sg79
Nsg80
Nsbtp10380
a(g5637
g1
(g81
g3
Ntp10381
Rp10382
(dp10383
g85
g1
(g86
g3
Ntp10384
Rp10385
(dp10386
g90
(dp10387
g1
(g92
g3
Ntp10388
Rp10389
(dp10390
g7
(dp10391
sg9
g1
(g97
g3
Ntp10392
Rp10393
(dp10394
g14
g15
(g53
tp10395
Rp10396
(dp10397
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5651
sbsg108
(lp10398
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp10399
sg65
S'log_reho_to_standard_smooth_1'
p10400
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp10401
sg79
Nsg80
Nsb(dp10402
sg1
(g92
g3
Ntp10403
Rp10404
(dp10405
g7
(dp10406
sg9
g1
(g135
g3
Ntp10407
Rp10408
(dp10409
g139
(lp10410
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp10411
Rp10412
(dp10413
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p10414
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp10415
g25
Nssg150
(lp10416
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp10417
sg65
g10400
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp10418
sg79
Nsg80
Nsb(dp10419
sg1
(g92
g3
Ntp10420
Rp10421
(dp10422
g7
(dp10423
sg9
g1
(g97
g3
Ntp10424
Rp10425
(dp10426
g14
g15
(g53
tp10427
Rp10428
(dp10429
g28
g29
sg25
g23
sbsg108
(lp10430
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp10431
sg65
g10400
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp10432
sg79
Nsg80
Nsb(dp10433
ssg157
(dp10434
sg159
(dp10435
g10389
(dp10436
g10404
(dp10437
g163
(lp10438
(g107
g107
tp10439
a(g105
g105
tp10440
a(g104
g104
tp10441
a(g14
g14
tp10442
asssg10404
(dp10443
g10421
(dp10444
g163
(lp10445
(g25
g25
tp10446
asssg10421
(dp10447
ssg174
g10435
sg175
(dp10448
g10389
(dp10449
sg10404
(dp10450
g10389
g10437
ssg10421
(dp10451
g10404
g10444
sssg180
g10435
sbsg43
g10400
sg65
g66
sg75
g10400
sg76
g181
((lp10452
(lp10453
g184
ag181
((lp10454
(lp10455
g187
ag184
aa(lp10456
g189
ag190
aa(lp10457
g192
ag193
aa(lp10458
g195
ag196
aa(lp10459
g198
ag199
aa(lp10460
g201
ag106
aa(lp10461
g203
ag204
aa(lp10462
g206
ag207
aatp10463
Rp10464
aa(lp10465
g211
ag181
((lp10466
(lp10467
g187
ag211
aa(lp10468
g215
ag216
aa(lp10469
g218
ag219
aa(lp10470
g221
ag222
aa(lp10471
g224
ag225
aa(lp10472
g227
ag228
aa(lp10473
g230
ag231
aa(lp10474
g233
ag234
aa(lp10475
g236
ag237
aa(lp10476
g239
ag240
aa(lp10477
g242
ag243
aa(lp10478
g245
ag246
aa(lp10479
g248
ag249
aa(lp10480
g251
ag252
aa(lp10481
g254
ag255
aa(lp10482
g257
ag258
aa(lp10483
g260
ag261
aa(lp10484
g263
ag264
aa(lp10485
g266
ag267
aatp10486
Rp10487
aa(lp10488
g271
ag181
((lp10489
(lp10490
g187
ag271
aa(lp10491
g275
ag276
aatp10492
Rp10493
aatp10494
Rp10495
sg80
Nsbtp10496
a(g1
(g92
g3
Ntp10497
Rp10498
(dp10499
g7
(dp10500
sg9
g1
(g742
g3
Ntp10501
Rp10502
(dp10503
g14
g15
(g746
tp10504
Rp10505
(dp10506
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10507
tp10508
Rp10509
(dp10510
g41
S'environ_items'
p10511
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_smooth_mean_1'
p10512
sg63
(dp10513
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10512
sg76
Nsg77
(lp10514
sg79
Nsg80
Nsbg1
(g92
g3
Ntp10515
Rp10516
(dp10517
g7
(dp10518
sg9
g1
(g135
g3
Ntp10519
Rp10520
(dp10521
g139
(lp10522
g44
ag952
asg14
g15
(g142
tp10523
Rp10524
(dp10525
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10526
sg952
S'reho_smooth'
p10527
sg44
g23
sg28
g29
sbsg148
(dp10528
g959
Nssg150
(lp10529
g959
asg152
Nsbsg51
Nsg43
S'reho_smooth_mean_to_txt_1'
p10530
sg63
(dp10531
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10530
sg76
Nsg77
(lp10532
sg79
Nsg80
Nsbtp10533
a(g4909
g10498
tp10534
a(g10363
g1
(g92
g3
Ntp10535
Rp10536
(dp10537
g7
(dp10538
sg9
g1
(g135
g3
Ntp10539
Rp10540
(dp10541
g139
(lp10542
g44
ag952
asg14
g15
(g142
tp10543
Rp10544
(dp10545
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10546
sg952
S'reho_to_standard_smooth'
p10547
sg44
g23
sg28
g29
sbsg148
(dp10548
g959
Nssg150
(lp10549
g959
asg152
Nsbsg51
Nsg43
S'reho_to_standard_smooth_mean_to_txt_1'
p10550
sg63
(dp10551
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10550
sg76
Nsg77
(lp10552
sg79
Nsg80
Nsbtp10553
a(g5117
g1
(g92
g3
Ntp10554
Rp10555
(dp10556
g7
(dp10557
sg9
g1
(g742
g3
Ntp10558
Rp10559
(dp10560
g14
g15
(g746
tp10561
Rp10562
(dp10563
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10564
tp10565
Rp10566
(dp10567
g41
S'environ_items'
p10568
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_to_standard_smooth_mean_1'
p10569
sg63
(dp10570
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10569
sg76
Nsg77
(lp10571
sg79
Nsg80
Nsbtp10572
a(g5117
g1
(g81
g3
Ntp10573
Rp10574
(dp10575
g85
g1
(g86
g3
Ntp10576
Rp10577
(dp10578
g90
(dp10579
g1
(g92
g3
Ntp10580
Rp10581
(dp10582
g7
(dp10583
sg9
g1
(g135
g3
Ntp10584
Rp10585
(dp10586
g139
(lp10587
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp10588
Rp10589
(dp10590
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p10591
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp10592
g25
Nssg150
(lp10593
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp10594
sg65
S'log_reho_Z_to_standard_smooth_1'
p10595
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp10596
sg79
Nsg80
Nsb(dp10597
sg1
(g92
g3
Ntp10598
Rp10599
(dp10600
g7
(dp10601
sg9
g1
(g97
g3
Ntp10602
Rp10603
(dp10604
g14
g15
(g53
tp10605
Rp10606
(dp10607
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5131
sbsg108
(lp10608
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp10609
sg65
g10595
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp10610
sg79
Nsg80
Nsb(dp10611
sg1
(g92
g3
Ntp10612
Rp10613
(dp10614
g7
(dp10615
sg9
g1
(g97
g3
Ntp10616
Rp10617
(dp10618
g14
g15
(g53
tp10619
Rp10620
(dp10621
g28
g29
sg25
g23
sbsg108
(lp10622
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp10623
sg65
g10595
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp10624
sg79
Nsg80
Nsb(dp10625
ssg157
(dp10626
sg159
(dp10627
g10581
(dp10628
g10613
(dp10629
g163
(lp10630
(g25
g25
tp10631
asssg10599
(dp10632
g10581
(dp10633
g163
(lp10634
(g107
g107
tp10635
a(g105
g105
tp10636
a(g104
g104
tp10637
a(g14
g14
tp10638
asssg10613
(dp10639
ssg174
g10627
sg175
(dp10640
g10581
(dp10641
g10599
g10633
ssg10599
(dp10642
sg10613
(dp10643
g10581
g10629
sssg180
g10627
sbsg43
g10595
sg65
g66
sg75
g10595
sg76
g181
((lp10644
(lp10645
g184
ag181
((lp10646
(lp10647
g187
ag184
aa(lp10648
g189
ag190
aa(lp10649
g192
ag193
aa(lp10650
g195
ag196
aa(lp10651
g198
ag199
aa(lp10652
g201
ag106
aa(lp10653
g203
ag204
aa(lp10654
g206
ag207
aatp10655
Rp10656
aa(lp10657
g211
ag181
((lp10658
(lp10659
g187
ag211
aa(lp10660
g215
ag216
aa(lp10661
g218
ag219
aa(lp10662
g221
ag222
aa(lp10663
g224
ag225
aa(lp10664
g227
ag228
aa(lp10665
g230
ag231
aa(lp10666
g233
ag234
aa(lp10667
g236
ag237
aa(lp10668
g239
ag240
aa(lp10669
g242
ag243
aa(lp10670
g245
ag246
aa(lp10671
g248
ag249
aa(lp10672
g251
ag252
aa(lp10673
g254
ag255
aa(lp10674
g257
ag258
aa(lp10675
g260
ag261
aa(lp10676
g263
ag264
aa(lp10677
g266
ag267
aatp10678
Rp10679
aa(lp10680
g271
ag181
((lp10681
(lp10682
g187
ag271
aa(lp10683
g275
ag276
aatp10684
Rp10685
aatp10686
Rp10687
sg80
Nsbtp10688
a(g10555
g1
(g92
g3
Ntp10689
Rp10690
(dp10691
g7
(dp10692
sg9
g1
(g135
g3
Ntp10693
Rp10694
(dp10695
g139
(lp10696
g44
ag952
asg14
g15
(g142
tp10697
Rp10698
(dp10699
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10700
sg952
S'reho_Z_to_standard_smooth'
p10701
sg44
g23
sg28
g29
sbsg148
(dp10702
g959
Nssg150
(lp10703
g959
asg152
Nsbsg51
Nsg43
S'reho_Z_to_standard_smooth_mean_to_txt_1'
p10704
sg63
(dp10705
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10704
sg76
Nsg77
(lp10706
sg79
Nsg80
Nsbtp10707
a(g4871
g1
(g92
g3
Ntp10708
Rp10709
(dp10710
g7
(dp10711
sg9
g1
(g742
g3
Ntp10712
Rp10713
(dp10714
g14
g15
(g746
tp10715
Rp10716
(dp10717
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10718
tp10719
Rp10720
(dp10721
g41
S'environ_items'
p10722
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'reho_Z_smooth_mean_1'
p10723
sg63
(dp10724
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10723
sg76
Nsg77
(lp10725
sg79
Nsg80
Nsbtp10726
a(g10709
g1
(g92
g3
Ntp10727
Rp10728
(dp10729
g7
(dp10730
sg9
g1
(g135
g3
Ntp10731
Rp10732
(dp10733
g139
(lp10734
g44
ag952
asg14
g15
(g142
tp10735
Rp10736
(dp10737
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10738
sg952
S'reho_Z_smooth'
p10739
sg44
g23
sg28
g29
sbsg148
(dp10740
g959
Nssg150
(lp10741
g959
asg152
Nsbsg51
Nsg43
S'reho_Z_smooth_mean_to_txt_1'
p10742
sg63
(dp10743
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10742
sg76
Nsg77
(lp10744
sg79
Nsg80
Nsbtp10745
a(g5475
g1
(g92
g3
Ntp10746
Rp10747
(dp10748
g7
(dp10749
sg9
g1
(g742
g3
Ntp10750
Rp10751
(dp10752
g14
g15
(g746
tp10753
Rp10754
(dp10755
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10756
tp10757
Rp10758
(dp10759
g41
S'environ_items'
p10760
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_to_standard_smooth_mean_2'
p10761
sg63
(dp10762
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10761
sg76
Nsg77
(lp10763
sg79
Nsg80
Nsbtp10764
a(g5475
g1
(g81
g3
Ntp10765
Rp10766
(dp10767
g85
g1
(g86
g3
Ntp10768
Rp10769
(dp10770
g90
(dp10771
g1
(g92
g3
Ntp10772
Rp10773
(dp10774
g7
(dp10775
sg9
g1
(g97
g3
Ntp10776
Rp10777
(dp10778
g14
g15
(g53
tp10779
Rp10780
(dp10781
g28
g29
sg104
I2
sg14
g23
sg105
g106
sg107
g5489
sbsg108
(lp10782
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp10783
sg65
S'log_sca_roi_to_standard_smooth_2'
p10784
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp10785
sg79
Nsg80
Nsb(dp10786
sg1
(g92
g3
Ntp10787
Rp10788
(dp10789
g7
(dp10790
sg9
g1
(g97
g3
Ntp10791
Rp10792
(dp10793
g14
g15
(g53
tp10794
Rp10795
(dp10796
g28
g29
sg25
g23
sbsg108
(lp10797
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp10798
sg65
g10784
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp10799
sg79
Nsg80
Nsb(dp10800
sg1
(g92
g3
Ntp10801
Rp10802
(dp10803
g7
(dp10804
sg9
g1
(g135
g3
Ntp10805
Rp10806
(dp10807
g139
(lp10808
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp10809
Rp10810
(dp10811
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p10812
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp10813
g25
Nssg150
(lp10814
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp10815
sg65
g10784
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp10816
sg79
Nsg80
Nsb(dp10817
ssg157
(dp10818
sg159
(dp10819
g10773
(dp10820
g10802
(dp10821
g163
(lp10822
(g107
g107
tp10823
a(g105
g105
tp10824
a(g104
g104
tp10825
a(g14
g14
tp10826
asssg10788
(dp10827
sg10802
(dp10828
g10788
(dp10829
g163
(lp10830
(g25
g25
tp10831
assssg174
g10819
sg175
(dp10832
g10773
(dp10833
sg10788
(dp10834
g10802
g10829
ssg10802
(dp10835
g10773
g10821
sssg180
g10819
sbsg43
g10784
sg65
g66
sg75
g10784
sg76
g181
((lp10836
(lp10837
g184
ag181
((lp10838
(lp10839
g187
ag184
aa(lp10840
g189
ag190
aa(lp10841
g192
ag193
aa(lp10842
g195
ag196
aa(lp10843
g198
ag199
aa(lp10844
g201
ag106
aa(lp10845
g203
ag204
aa(lp10846
g206
ag207
aatp10847
Rp10848
aa(lp10849
g211
ag181
((lp10850
(lp10851
g187
ag211
aa(lp10852
g215
ag216
aa(lp10853
g218
ag219
aa(lp10854
g221
ag222
aa(lp10855
g224
ag225
aa(lp10856
g227
ag228
aa(lp10857
g230
ag231
aa(lp10858
g233
ag234
aa(lp10859
g236
ag237
aa(lp10860
g239
ag240
aa(lp10861
g242
ag243
aa(lp10862
g245
ag246
aa(lp10863
g248
ag249
aa(lp10864
g251
ag252
aa(lp10865
g254
ag255
aa(lp10866
g257
ag258
aa(lp10867
g260
ag261
aa(lp10868
g263
ag264
aa(lp10869
g266
ag267
aatp10870
Rp10871
aa(lp10872
g271
ag181
((lp10873
(lp10874
g187
ag271
aa(lp10875
g275
ag276
aatp10876
Rp10877
aatp10878
Rp10879
sg80
Nsbtp10880
a(g5241
g1
(g92
g3
Ntp10881
Rp10882
(dp10883
g7
(dp10884
sg9
g1
(g742
g3
Ntp10885
Rp10886
(dp10887
g14
g15
(g746
tp10888
Rp10889
(dp10890
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10891
tp10892
Rp10893
(dp10894
g41
S'environ_items'
p10895
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_smooth_mean_2'
p10896
sg63
(dp10897
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10896
sg76
Nsg77
(lp10898
sg79
Nsg80
Nsbtp10899
a(g10882
g1
(g92
g3
Ntp10900
Rp10901
(dp10902
g7
(dp10903
sg9
g1
(g135
g3
Ntp10904
Rp10905
(dp10906
g139
(lp10907
g44
ag952
asg14
g15
(g142
tp10908
Rp10909
(dp10910
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10911
sg952
S'sca_roi_smooth'
p10912
sg44
g23
sg28
g29
sbsg148
(dp10913
g959
Nssg150
(lp10914
g959
asg152
Nsbsg51
Nsg43
S'sca_roi_smooth_mean_to_txt_2'
p10915
sg63
(dp10916
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10915
sg76
Nsg77
(lp10917
sg79
Nsg80
Nsbtp10918
a(g10747
g1
(g92
g3
Ntp10919
Rp10920
(dp10921
g7
(dp10922
sg9
g1
(g135
g3
Ntp10923
Rp10924
(dp10925
g139
(lp10926
g44
ag952
asg14
g15
(g142
tp10927
Rp10928
(dp10929
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p10930
sg952
S'sca_roi_to_standard_smooth'
p10931
sg44
g23
sg28
g29
sbsg148
(dp10932
g959
Nssg150
(lp10933
g959
asg152
Nsbsg51
Nsg43
S'sca_roi_to_standard_smooth_mean_to_txt_2'
p10934
sg63
(dp10935
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10934
sg76
Nsg77
(lp10936
sg79
Nsg80
Nsbtp10937
a(g5599
g1
(g92
g3
Ntp10938
Rp10939
(dp10940
g7
(dp10941
sg9
g1
(g742
g3
Ntp10942
Rp10943
(dp10944
g14
g15
(g746
tp10945
Rp10946
(dp10947
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10948
tp10949
Rp10950
(dp10951
g41
S'environ_items'
p10952
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_smooth_mean_3'
p10953
sg63
(dp10954
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10953
sg76
Nsg77
(lp10955
sg79
Nsg80
Nsbtp10956
a(g5262
g1
(g92
g3
Ntp10957
Rp10958
(dp10959
g7
(dp10960
sg9
g1
(g742
g3
Ntp10961
Rp10962
(dp10963
g14
g15
(g746
tp10964
Rp10965
(dp10966
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp10967
tp10968
Rp10969
(dp10970
g41
S'environ_items'
p10971
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_roi_to_standard_smooth_mean_3'
p10972
sg63
(dp10973
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g10972
sg76
Nsg77
(lp10974
sg79
Nsg80
Nsbtp10975
a(g5262
g1
(g81
g3
Ntp10976
Rp10977
(dp10978
g85
g1
(g86
g3
Ntp10979
Rp10980
(dp10981
g90
(dp10982
g1
(g92
g3
Ntp10983
Rp10984
(dp10985
g7
(dp10986
sg9
g1
(g135
g3
Ntp10987
Rp10988
(dp10989
g139
(lp10990
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp10991
Rp10992
(dp10993
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p10994
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp10995
g25
Nssg150
(lp10996
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp10997
sg65
S'log_sca_roi_to_standard_smooth_3'
p10998
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp10999
sg79
Nsg80
Nsb(dp11000
sg1
(g92
g3
Ntp11001
Rp11002
(dp11003
g7
(dp11004
sg9
g1
(g97
g3
Ntp11005
Rp11006
(dp11007
g14
g15
(g53
tp11008
Rp11009
(dp11010
g28
g29
sg104
I3
sg14
g23
sg105
g106
sg107
g5276
sbsg108
(lp11011
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp11012
sg65
g10998
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp11013
sg79
Nsg80
Nsb(dp11014
sg1
(g92
g3
Ntp11015
Rp11016
(dp11017
g7
(dp11018
sg9
g1
(g97
g3
Ntp11019
Rp11020
(dp11021
g14
g15
(g53
tp11022
Rp11023
(dp11024
g28
g29
sg25
g23
sbsg108
(lp11025
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp11026
sg65
g10998
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp11027
sg79
Nsg80
Nsb(dp11028
ssg157
(dp11029
sg159
(dp11030
g10984
(dp11031
g11016
(dp11032
g163
(lp11033
(g25
g25
tp11034
asssg11002
(dp11035
g10984
(dp11036
g163
(lp11037
(g107
g107
tp11038
a(g105
g105
tp11039
a(g104
g104
tp11040
a(g14
g14
tp11041
asssg11016
(dp11042
ssg174
g11030
sg175
(dp11043
g10984
(dp11044
g11002
g11036
ssg11002
(dp11045
sg11016
(dp11046
g10984
g11032
sssg180
g11030
sbsg43
g10998
sg65
g66
sg75
g10998
sg76
g181
((lp11047
(lp11048
g184
ag181
((lp11049
(lp11050
g187
ag184
aa(lp11051
g189
ag190
aa(lp11052
g192
ag193
aa(lp11053
g195
ag196
aa(lp11054
g198
ag199
aa(lp11055
g201
ag106
aa(lp11056
g203
ag204
aa(lp11057
g206
ag207
aatp11058
Rp11059
aa(lp11060
g211
ag181
((lp11061
(lp11062
g187
ag211
aa(lp11063
g215
ag216
aa(lp11064
g218
ag219
aa(lp11065
g221
ag222
aa(lp11066
g224
ag225
aa(lp11067
g227
ag228
aa(lp11068
g230
ag231
aa(lp11069
g233
ag234
aa(lp11070
g236
ag237
aa(lp11071
g239
ag240
aa(lp11072
g242
ag243
aa(lp11073
g245
ag246
aa(lp11074
g248
ag249
aa(lp11075
g251
ag252
aa(lp11076
g254
ag255
aa(lp11077
g257
ag258
aa(lp11078
g260
ag261
aa(lp11079
g263
ag264
aa(lp11080
g266
ag267
aatp11081
Rp11082
aa(lp11083
g271
ag181
((lp11084
(lp11085
g187
ag271
aa(lp11086
g275
ag276
aatp11087
Rp11088
aatp11089
Rp11090
sg80
Nsbtp11091
a(g10939
g1
(g92
g3
Ntp11092
Rp11093
(dp11094
g7
(dp11095
sg9
g1
(g135
g3
Ntp11096
Rp11097
(dp11098
g139
(lp11099
g44
ag952
asg14
g15
(g142
tp11100
Rp11101
(dp11102
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p11103
sg952
S'sca_roi_smooth'
p11104
sg44
g23
sg28
g29
sbsg148
(dp11105
g959
Nssg150
(lp11106
g959
asg152
Nsbsg51
Nsg43
S'sca_roi_smooth_mean_to_txt_3'
p11107
sg63
(dp11108
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11107
sg76
Nsg77
(lp11109
sg79
Nsg80
Nsbtp11110
a(g10958
g1
(g92
g3
Ntp11111
Rp11112
(dp11113
g7
(dp11114
sg9
g1
(g135
g3
Ntp11115
Rp11116
(dp11117
g139
(lp11118
g44
ag952
asg14
g15
(g142
tp11119
Rp11120
(dp11121
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p11122
sg952
S'sca_roi_to_standard_smooth'
p11123
sg44
g23
sg28
g29
sbsg148
(dp11124
g959
Nssg150
(lp11125
g959
asg152
Nsbsg51
Nsg43
S'sca_roi_to_standard_smooth_mean_to_txt_3'
p11126
sg63
(dp11127
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11126
sg76
Nsg77
(lp11128
sg79
Nsg80
Nsbtp11129
a(g5675
g1
(g92
g3
Ntp11130
Rp11131
(dp11132
g7
(dp11133
sg9
g1
(g742
g3
Ntp11134
Rp11135
(dp11136
g14
g15
(g746
tp11137
Rp11138
(dp11139
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp11140
tp11141
Rp11142
(dp11143
g41
S'environ_items'
p11144
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_smooth_mean_0'
p11145
sg63
(dp11146
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11145
sg76
Nsg77
(lp11147
sg79
Nsg80
Nsbtp11148
a(g5580
g1
(g92
g3
Ntp11149
Rp11150
(dp11151
g7
(dp11152
sg9
g1
(g742
g3
Ntp11153
Rp11154
(dp11155
g14
g15
(g746
tp11156
Rp11157
(dp11158
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp11159
tp11160
Rp11161
(dp11162
g41
S'environ_items'
p11163
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_to_standard_smooth_mean_0'
p11164
sg63
(dp11165
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11164
sg76
Nsg77
(lp11166
sg79
Nsg80
Nsbtp11167
a(g5580
g1
(g81
g3
Ntp11168
Rp11169
(dp11170
g85
g1
(g86
g3
Ntp11171
Rp11172
(dp11173
g90
(dp11174
g1
(g92
g3
Ntp11175
Rp11176
(dp11177
g7
(dp11178
sg9
g1
(g135
g3
Ntp11179
Rp11180
(dp11181
g139
(lp11182
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp11183
Rp11184
(dp11185
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p11186
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp11187
g25
Nssg150
(lp11188
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp11189
sg65
S'log_sca_seed_to_standard_smooth_0'
p11190
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp11191
sg79
Nsg80
Nsb(dp11192
sg1
(g92
g3
Ntp11193
Rp11194
(dp11195
g7
(dp11196
sg9
g1
(g97
g3
Ntp11197
Rp11198
(dp11199
g14
g15
(g53
tp11200
Rp11201
(dp11202
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g5594
sbsg108
(lp11203
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp11204
sg65
g11190
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp11205
sg79
Nsg80
Nsb(dp11206
sg1
(g92
g3
Ntp11207
Rp11208
(dp11209
g7
(dp11210
sg9
g1
(g97
g3
Ntp11211
Rp11212
(dp11213
g14
g15
(g53
tp11214
Rp11215
(dp11216
g28
g29
sg25
g23
sbsg108
(lp11217
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp11218
sg65
g11190
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp11219
sg79
Nsg80
Nsb(dp11220
ssg157
(dp11221
sg159
(dp11222
g11176
(dp11223
g11208
(dp11224
g163
(lp11225
(g25
g25
tp11226
asssg11194
(dp11227
g11176
(dp11228
g163
(lp11229
(g107
g107
tp11230
a(g105
g105
tp11231
a(g104
g104
tp11232
a(g14
g14
tp11233
asssg11208
(dp11234
ssg174
g11222
sg175
(dp11235
g11176
(dp11236
g11194
g11228
ssg11194
(dp11237
sg11208
(dp11238
g11176
g11224
sssg180
g11222
sbsg43
g11190
sg65
g66
sg75
g11190
sg76
g181
((lp11239
(lp11240
g184
ag181
((lp11241
(lp11242
g187
ag184
aa(lp11243
g189
ag190
aa(lp11244
g192
ag193
aa(lp11245
g195
ag196
aa(lp11246
g198
ag199
aa(lp11247
g201
ag106
aa(lp11248
g203
ag204
aa(lp11249
g206
ag207
aatp11250
Rp11251
aa(lp11252
g211
ag181
((lp11253
(lp11254
g187
ag211
aa(lp11255
g215
ag216
aa(lp11256
g218
ag219
aa(lp11257
g221
ag222
aa(lp11258
g224
ag225
aa(lp11259
g227
ag228
aa(lp11260
g230
ag231
aa(lp11261
g233
ag234
aa(lp11262
g236
ag237
aa(lp11263
g239
ag240
aa(lp11264
g242
ag243
aa(lp11265
g245
ag246
aa(lp11266
g248
ag249
aa(lp11267
g251
ag252
aa(lp11268
g254
ag255
aa(lp11269
g257
ag258
aa(lp11270
g260
ag261
aa(lp11271
g263
ag264
aa(lp11272
g266
ag267
aatp11273
Rp11274
aa(lp11275
g271
ag181
((lp11276
(lp11277
g187
ag271
aa(lp11278
g275
ag276
aatp11279
Rp11280
aatp11281
Rp11282
sg80
Nsbtp11283
a(g11131
g1
(g92
g3
Ntp11284
Rp11285
(dp11286
g7
(dp11287
sg9
g1
(g135
g3
Ntp11288
Rp11289
(dp11290
g139
(lp11291
g44
ag952
asg14
g15
(g142
tp11292
Rp11293
(dp11294
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p11295
sg952
S'sca_seed_smooth'
p11296
sg44
g23
sg28
g29
sbsg148
(dp11297
g959
Nssg150
(lp11298
g959
asg152
Nsbsg51
Nsg43
S'sca_seed_smooth_mean_to_txt_0'
p11299
sg63
(dp11300
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11299
sg76
Nsg77
(lp11301
sg79
Nsg80
Nsbtp11302
a(g11150
g1
(g92
g3
Ntp11303
Rp11304
(dp11305
g7
(dp11306
sg9
g1
(g135
g3
Ntp11307
Rp11308
(dp11309
g139
(lp11310
g44
ag952
asg14
g15
(g142
tp11311
Rp11312
(dp11313
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p11314
sg952
S'sca_seed_to_standard_smooth'
p11315
sg44
g23
sg28
g29
sbsg148
(dp11316
g959
Nssg150
(lp11317
g959
asg152
Nsbsg51
Nsg43
S'sca_seed_to_standard_smooth_mean_to_txt_0'
p11318
sg63
(dp11319
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11318
sg76
Nsg77
(lp11320
sg79
Nsg80
Nsbtp11321
a(g5456
g1
(g92
g3
Ntp11322
Rp11323
(dp11324
g7
(dp11325
sg9
g1
(g742
g3
Ntp11326
Rp11327
(dp11328
g14
g15
(g746
tp11329
Rp11330
(dp11331
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp11332
tp11333
Rp11334
(dp11335
g41
S'environ_items'
p11336
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_smooth_mean_1'
p11337
sg63
(dp11338
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11337
sg76
Nsg77
(lp11339
sg79
Nsg80
Nsbtp11340
a(g4975
g1
(g92
g3
Ntp11341
Rp11342
(dp11343
g7
(dp11344
sg9
g1
(g742
g3
Ntp11345
Rp11346
(dp11347
g14
g15
(g746
tp11348
Rp11349
(dp11350
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg750
g23
sg751
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp11351
tp11352
Rp11353
(dp11354
g41
S'environ_items'
p11355
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg43
S'sca_seed_to_standard_smooth_mean_1'
p11356
sg63
(dp11357
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11356
sg76
Nsg77
(lp11358
sg79
Nsg80
Nsbtp11359
a(g4975
g1
(g81
g3
Ntp11360
Rp11361
(dp11362
g85
g1
(g86
g3
Ntp11363
Rp11364
(dp11365
g90
(dp11366
g1
(g92
g3
Ntp11367
Rp11368
(dp11369
g7
(dp11370
sg9
g1
(g135
g3
Ntp11371
Rp11372
(dp11373
g139
(lp11374
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp11375
Rp11376
(dp11377
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p11378
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp11379
g25
Nssg150
(lp11380
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp11381
sg65
S'log_sca_seed_to_standard_smooth_1'
p11382
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp11383
sg79
Nsg80
Nsb(dp11384
sg1
(g92
g3
Ntp11385
Rp11386
(dp11387
g7
(dp11388
sg9
g1
(g97
g3
Ntp11389
Rp11390
(dp11391
g14
g15
(g53
tp11392
Rp11393
(dp11394
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g4989
sbsg108
(lp11395
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp11396
sg65
g11382
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp11397
sg79
Nsg80
Nsb(dp11398
sg1
(g92
g3
Ntp11399
Rp11400
(dp11401
g7
(dp11402
sg9
g1
(g97
g3
Ntp11403
Rp11404
(dp11405
g14
g15
(g53
tp11406
Rp11407
(dp11408
g28
g29
sg25
g23
sbsg108
(lp11409
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp11410
sg65
g11382
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp11411
sg79
Nsg80
Nsb(dp11412
ssg157
(dp11413
sg159
(dp11414
g11368
(dp11415
g11400
(dp11416
g163
(lp11417
(g25
g25
tp11418
asssg11386
(dp11419
g11368
(dp11420
g163
(lp11421
(g107
g107
tp11422
a(g105
g105
tp11423
a(g104
g104
tp11424
a(g14
g14
tp11425
asssg11400
(dp11426
ssg174
g11414
sg175
(dp11427
g11368
(dp11428
g11386
g11420
ssg11386
(dp11429
sg11400
(dp11430
g11368
g11416
sssg180
g11414
sbsg43
g11382
sg65
g66
sg75
g11382
sg76
g181
((lp11431
(lp11432
g184
ag181
((lp11433
(lp11434
g187
ag184
aa(lp11435
g189
ag190
aa(lp11436
g192
ag193
aa(lp11437
g195
ag196
aa(lp11438
g198
ag199
aa(lp11439
g201
ag106
aa(lp11440
g203
ag204
aa(lp11441
g206
ag207
aatp11442
Rp11443
aa(lp11444
g211
ag181
((lp11445
(lp11446
g187
ag211
aa(lp11447
g215
ag216
aa(lp11448
g218
ag219
aa(lp11449
g221
ag222
aa(lp11450
g224
ag225
aa(lp11451
g227
ag228
aa(lp11452
g230
ag231
aa(lp11453
g233
ag234
aa(lp11454
g236
ag237
aa(lp11455
g239
ag240
aa(lp11456
g242
ag243
aa(lp11457
g245
ag246
aa(lp11458
g248
ag249
aa(lp11459
g251
ag252
aa(lp11460
g254
ag255
aa(lp11461
g257
ag258
aa(lp11462
g260
ag261
aa(lp11463
g263
ag264
aa(lp11464
g266
ag267
aatp11465
Rp11466
aa(lp11467
g271
ag181
((lp11468
(lp11469
g187
ag271
aa(lp11470
g275
ag276
aatp11471
Rp11472
aatp11473
Rp11474
sg80
Nsbtp11475
a(g11323
g1
(g92
g3
Ntp11476
Rp11477
(dp11478
g7
(dp11479
sg9
g1
(g135
g3
Ntp11480
Rp11481
(dp11482
g139
(lp11483
g44
ag952
asg14
g15
(g142
tp11484
Rp11485
(dp11486
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p11487
sg952
S'sca_seed_smooth'
p11488
sg44
g23
sg28
g29
sbsg148
(dp11489
g959
Nssg150
(lp11490
g959
asg152
Nsbsg51
Nsg43
S'sca_seed_smooth_mean_to_txt_1'
p11491
sg63
(dp11492
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11491
sg76
Nsg77
(lp11493
sg79
Nsg80
Nsbtp11494
a(g11342
g1
(g92
g3
Ntp11495
Rp11496
(dp11497
g7
(dp11498
sg9
g1
(g135
g3
Ntp11499
Rp11500
(dp11501
g139
(lp11502
g44
ag952
asg14
g15
(g142
tp11503
Rp11504
(dp11505
g20
I00
sg146
S'S"def extract_output_mean(in_file, output_name):\\n\\n    \'\'\'\\n    function takes \'in_file\', which should be an intermediary 1D file\\n    from individual-level analysis, containing the mean of the output across\\n    all voxels\\n\\n    it then parses this value and writes it to a .csv file named\\n    output_means.csv located in the subject\'s output directory\\n    \'\'\'\\n\\n    import os\\n\\n    if os.path.exists(in_file):\\n\\n        mean_oned_file = open(in_file, \'rU\')\\n        line = mean_oned_file.readline()\\n        mean_oned_file.close()\\n\\n        line = line.split(\'[\')[0].strip(\' \')\\n\\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % output_name)\\n        output_means = open(output_means_file, \'wb\')\\n\\n        print >>output_means, line\\n\\n        output_means.close()\\n\\n\\n    return output_means_file\\n"\n.'
p11506
sg952
S'sca_seed_to_standard_smooth'
p11507
sg44
g23
sg28
g29
sbsg148
(dp11508
g959
Nssg150
(lp11509
g959
asg152
Nsbsg51
Nsg43
S'sca_seed_to_standard_smooth_mean_to_txt_1'
p11510
sg63
(dp11511
sg65
g66
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g11510
sg76
Nsg77
(lp11512
sg79
Nsg80
Nsbtp11513
a(g1
(g81
g3
Ntp11514
Rp11515
(dp11516
g85
g1
(g86
g3
Ntp11517
Rp11518
(dp11519
g90
(dp11520
g1
(g92
g3
Ntp11521
Rp11522
(dp11523
g7
(dp11524
sg9
g1
(g97
g3
Ntp11525
Rp11526
(dp11527
g14
g15
(g53
tp11528
Rp11529
(dp11530
g28
g29
sg3279
g23
sg3280
g23
sg3281
g23
sg3282
g23
sg3283
g23
sg3284
g23
sbsg108
(lp11531
g3280
ag3281
ag3284
ag3282
ag3283
ag3279
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp11532
sg65
S'anat_mni_ants_register_0'
p11533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp11534
sg79
Nsg80
Nsb(dp11535
sg1
(g92
g3
Ntp11536
Rp11537
(dp11538
g7
(dp11539
sg9
g1
(g135
g3
Ntp11540
Rp11541
(dp11542
g139
(lp11543
g3236
ag3237
asg14
g15
(g142
tp11544
Rp11545
(dp11546
g3236
g23
sg20
I00
sg3237
I1
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p11547
sg28
g29
sbsg148
(dp11548
g3243
Nssg150
(lp11549
g3243
asg152
Nsbsg51
Nsg43
g3442
sg63
(dp11550
sg65
g11533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3442
sg76
Nsg77
(lp11551
sg79
Nsg80
Nsb(dp11552
sg1
(g92
g3
Ntp11553
Rp11554
(dp11555
g7
(dp11556
sg9
g1
(g3294
g3
Ntp11557
Rp11558
(dp11559
g14
g15
(g3298
tp11560
Rp11561
(dp11562
g28
g29
sg3302
g1
(g3303
g3304
(lp11563
I10
atp11564
Rp11565
(dp11566
g41
S'convergence_window_size_items'
p11567
sg43
g3302
sbsg3310
g23
sg3311
g23
sg3312
g23
sg3313
g23
sg3314
g23
sg3315
g23
sg3316
g23
sg3317
g23
sg3318
g23
sg3319
g23
sg3320
g23
sg3321
g23
sg3322
g1
(g3303
g3304
(lp11568
F1.0
atp11569
Rp11570
(dp11571
g41
S'metric_weight_items'
p11572
sg43
g3322
sbsg3328
g23
sg3329
g23
sg3330
F0.0
sg3331
g23
sg3332
g1
(g3303
g3304
(lp11573
F1e-06
atp11574
Rp11575
(dp11576
g41
S'convergence_threshold_items'
p11577
sg43
g3332
sbsg3338
g23
sg3339
g23
sg3340
F1.0
sg3341
g23
sg3342
g3343
sg3344
g3345
sg20
I00
sg3346
g23
sg3347
I00
sg26
g23
sg3348
g23
sg30
g31
sg3349
g23
sg3350
I00
sg3351
g23
sg3352
I-1
sg3353
I01
sg3354
g23
sg3355
g23
sg3356
g23
sg3357
g1
(g3303
g3304
(lp11578
I5
atp11579
Rp11580
(dp11581
g41
S'radius_or_number_of_bins_items'
p11582
sg43
g3357
sbsg32
g1
(g33
g34
(dp11583
tp11584
Rp11585
(dp11586
g41
S'environ_items'
p11587
sg43
g32
sbsg3368
g23
sg3369
I01
sg3370
g23
sg3371
I3
sg3372
g23
sg3373
I00
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3376
sg63
(dp11588
sg65
g11533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3376
sg76
Nsg77
(lp11589
sg79
Nsg80
Nsb(dp11590
sg1
(g92
g3
Ntp11591
Rp11592
(dp11593
g7
(dp11594
sg9
g1
(g97
g3
Ntp11595
Rp11596
(dp11597
g14
g15
(g53
tp11598
Rp11599
(dp11600
g28
g29
sg3302
(lp11601
I10
aI10
aI15
asg3330
F0.01
sg3368
(lp11602
(lp11603
I3
aI2
aI1
aI0
aa(lp11604
I3
aI2
aI1
aI0
aa(lp11605
I3
aI2
aI1
aI0
aasg3332
(lp11606
F1e-08
aF1e-08
aF1e-09
asg3355
(lp11607
(lp11608
I1000
aI500
aI250
aI100
aa(lp11609
I1000
aI500
aI250
aI100
aa(lp11610
I100
aI100
aI70
aI20
aasg3371
I3
sg3339
(lp11611
(lp11612
I8
aI4
aI2
aI1
aa(lp11613
I8
aI4
aI2
aI1
aa(lp11614
I6
aI4
aI2
aI1
aasg3369
I01
sg3357
(lp11615
I32
aI32
aI4
asg3405
g23
sg3320
(lp11616
g3407
ag3408
ag3409
asg3338
(lp11617
g3411
ag3411
aNasg3354
(lp11618
F0.25
aF0.25
aNasg3350
g23
sg3322
(lp11619
I1
aI1
aI1
asg3370
(lp11620
(lp11621
F0.1
aa(lp11622
F0.1
aa(lp11623
F0.1
aI3
aI0
aasg3340
F0.99
sg3314
(lp11624
g3419
ag3419
ag3420
asg3421
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_brain.nii.gz'
p11625
sbsg108
(lp11626
g3405
ag3421
ag3371
ag3369
ag3330
ag3340
ag3314
ag3322
ag3357
ag3338
ag3354
ag3355
ag3332
ag3302
ag3320
ag3370
ag3339
ag3368
ag3350
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp11627
sg65
g11533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp11628
sg79
Nsg80
Nsb(dp11629
sg1
(g92
g3
Ntp11630
Rp11631
(dp11632
g7
(dp11633
sg9
g1
(g135
g3
Ntp11634
Rp11635
(dp11636
g139
(lp11637
g3236
ag3237
asg14
g15
(g142
tp11638
Rp11639
(dp11640
g3236
g23
sg20
I00
sg3237
I0
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p11641
sg28
g29
sbsg148
(dp11642
g3243
Nssg150
(lp11643
g3243
asg152
Nsbsg51
Nsg43
g3265
sg63
(dp11644
sg65
g11533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3265
sg76
Nsg77
(lp11645
sg79
Nsg80
Nsb(dp11646
sg1
(g92
g3
Ntp11647
Rp11648
(dp11649
g7
(dp11650
sg9
g1
(g135
g3
Ntp11651
Rp11652
(dp11653
g139
(lp11654
g3236
ag3237
asg14
g15
(g142
tp11655
Rp11656
(dp11657
g3236
g23
sg20
I00
sg3237
I0
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p11658
sg28
g29
sbsg148
(dp11659
g3243
Nssg150
(lp11660
g3243
asg152
Nsbsg51
Nsg43
g3461
sg63
(dp11661
sg65
g11533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3461
sg76
Nsg77
(lp11662
sg79
Nsg80
Nsb(dp11663
sg1
(g92
g3
Ntp11664
Rp11665
(dp11666
g7
(dp11667
sg9
g1
(g135
g3
Ntp11668
Rp11669
(dp11670
g139
(lp11671
g3236
ag3237
asg14
g15
(g142
tp11672
Rp11673
(dp11674
g3236
g23
sg20
I00
sg3237
I2
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p11675
sg28
g29
sbsg148
(dp11676
g3243
Nssg150
(lp11677
g3243
asg152
Nsbsg51
Nsg43
g3246
sg63
(dp11678
sg65
g11533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3246
sg76
Nsg77
(lp11679
sg79
Nsg80
Nsb(dp11680
ssg157
(dp11681
sg159
(dp11682
g11522
(dp11683
sg11537
(dp11684
g11522
(dp11685
g163
(lp11686
(g3243
g3281
tp11687
asssg11554
(dp11688
g11648
(dp11689
g163
(lp11690
(g3478
g3236
tp11691
assg11522
(dp11692
g163
(lp11693
(g3283
g3283
tp11694
a(g3486
g3279
tp11695
assg11631
(dp11696
g163
(lp11697
(g3493
g3236
tp11698
assg11537
(dp11699
g163
(lp11700
(g3478
g3236
tp11701
assg11665
(dp11702
g163
(lp11703
(g3478
g3236
tp11704
asssg11592
(dp11705
g11554
(dp11706
g163
(lp11707
(g3405
g3316
tp11708
a(g3421
g3341
tp11709
a(g3371
g3371
tp11710
a(g3369
g3369
tp11711
a(g3330
g3330
tp11712
a(g3340
g3340
tp11713
a(g3314
g3314
tp11714
a(g3322
g3322
tp11715
a(g3357
g3357
tp11716
a(g3338
g3338
tp11717
a(g3354
g3354
tp11718
a(g3355
g3355
tp11719
a(g3332
g3332
tp11720
a(g3302
g3302
tp11721
a(g3320
g3320
tp11722
a(g3370
g3370
tp11723
a(g3339
g3339
tp11724
a(g3368
g3368
tp11725
a(g3350
g3350
tp11726
asssg11631
(dp11727
g11522
(dp11728
g163
(lp11729
(g3243
g3282
tp11730
asssg11648
(dp11731
g11522
(dp11732
g163
(lp11733
(g3243
g3280
tp11734
asssg11665
(dp11735
g11522
(dp11736
g163
(lp11737
(g3243
g3284
tp11738
assssg174
g11682
sg175
(dp11739
g11522
(dp11740
g11648
g11732
sg11554
g11692
sg11631
g11728
sg11537
g11685
sg11665
g11736
ssg11537
(dp11741
g11554
g11699
ssg11554
(dp11742
g11592
g11706
ssg11592
(dp11743
sg11631
(dp11744
g11554
g11696
ssg11648
(dp11745
g11554
g11689
ssg11665
(dp11746
g11554
g11702
sssg180
g11682
sbsg43
g11533
sg65
g66
sg75
g11533
sg76
g181
((lp11747
(lp11748
g184
ag181
((lp11749
(lp11750
g187
ag184
aa(lp11751
g189
ag190
aa(lp11752
g192
ag193
aa(lp11753
g195
ag196
aa(lp11754
g198
ag199
aa(lp11755
g201
ag106
aa(lp11756
g203
ag204
aa(lp11757
g206
ag207
aatp11758
Rp11759
aa(lp11760
g211
ag181
((lp11761
(lp11762
g187
ag211
aa(lp11763
g215
ag216
aa(lp11764
g218
ag219
aa(lp11765
g221
ag222
aa(lp11766
g224
ag225
aa(lp11767
g227
ag228
aa(lp11768
g230
ag231
aa(lp11769
g233
ag234
aa(lp11770
g236
ag237
aa(lp11771
g239
ag240
aa(lp11772
g242
ag243
aa(lp11773
g245
ag246
aa(lp11774
g248
ag249
aa(lp11775
g251
ag252
aa(lp11776
g254
ag255
aa(lp11777
g257
ag258
aa(lp11778
g260
ag261
aa(lp11779
g263
ag264
aa(lp11780
g266
ag267
aatp11781
Rp11782
aa(lp11783
g271
ag181
((lp11784
(lp11785
g187
ag271
aa(lp11786
g275
ag276
aatp11787
Rp11788
aatp11789
Rp11790
sg80
Nsbg1
(g81
g3
Ntp11791
Rp11792
(dp11793
g85
g1
(g86
g3
Ntp11794
Rp11795
(dp11796
g90
(dp11797
g1
(g92
g3
Ntp11798
Rp11799
(dp11800
g7
(dp11801
sg9
g1
(g97
g3
Ntp11802
Rp11803
(dp11804
g14
g15
(g53
tp11805
Rp11806
(dp11807
g28
g29
sg3084
g23
sbsg108
(lp11808
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp11809
sg65
S'alff_Z_collect_transforms_1'
p11810
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp11811
sg79
Nsg80
Nsb(dp11812
sg1
(g92
g3
Ntp11813
Rp11814
(dp11815
g7
(dp11816
sg9
g1
(g97
g3
Ntp11817
Rp11818
(dp11819
g14
g15
(g53
tp11820
Rp11821
(dp11822
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp11823
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp11824
sg65
g11810
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp11825
sg79
Nsg80
Nsb(dp11826
sg1
(g92
g3
Ntp11827
Rp11828
(dp11829
g7
(dp11830
sg9
g1
(g3034
g3
Ntp11831
Rp11832
(dp11833
g3038
I4
sg14
g15
(g3039
tp11834
Rp11835
(dp11836
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp11837
sg65
g11810
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp11838
sg79
Nsg80
Nsb(dp11839
ssg157
(dp11840
sg159
(dp11841
g11799
(dp11842
sg11814
(dp11843
g11828
(dp11844
g163
(lp11845
(g3067
g3044
tp11846
a(g3066
g3045
tp11847
a(g3068
g3046
tp11848
a(g3065
g3047
tp11849
asssg11828
(dp11850
g11799
(dp11851
g163
(lp11852
(g3094
g3084
tp11853
assssg174
g11841
sg175
(dp11854
g11799
(dp11855
g11828
g11851
ssg11814
(dp11856
sg11828
(dp11857
g11814
g11844
sssg180
g11841
sbsg43
g11810
sg65
g66
sg75
g11810
sg76
g181
((lp11858
(lp11859
g184
ag181
((lp11860
(lp11861
g187
ag184
aa(lp11862
g189
ag190
aa(lp11863
g192
ag193
aa(lp11864
g195
ag196
aa(lp11865
g198
ag199
aa(lp11866
g201
ag106
aa(lp11867
g203
ag204
aa(lp11868
g206
ag207
aatp11869
Rp11870
aa(lp11871
g211
ag181
((lp11872
(lp11873
g187
ag211
aa(lp11874
g215
ag216
aa(lp11875
g218
ag219
aa(lp11876
g221
ag222
aa(lp11877
g224
ag225
aa(lp11878
g227
ag228
aa(lp11879
g230
ag231
aa(lp11880
g233
ag234
aa(lp11881
g236
ag237
aa(lp11882
g239
ag240
aa(lp11883
g242
ag243
aa(lp11884
g245
ag246
aa(lp11885
g248
ag249
aa(lp11886
g251
ag252
aa(lp11887
g254
ag255
aa(lp11888
g257
ag258
aa(lp11889
g260
ag261
aa(lp11890
g263
ag264
aa(lp11891
g266
ag267
aatp11892
Rp11893
aa(lp11894
g271
ag181
((lp11895
(lp11896
g187
ag271
aa(lp11897
g275
ag276
aatp11898
Rp11899
aatp11900
Rp11901
sg80
Nsbtp11902
a(g11515
g1
(g81
g3
Ntp11903
Rp11904
(dp11905
g85
g1
(g86
g3
Ntp11906
Rp11907
(dp11908
g90
(dp11909
g1
(g92
g3
Ntp11910
Rp11911
(dp11912
g7
(dp11913
sg9
g1
(g97
g3
Ntp11914
Rp11915
(dp11916
g14
g15
(g53
tp11917
Rp11918
(dp11919
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp11920
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp11921
sg65
S'alff_collect_transforms_1'
p11922
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp11923
sg79
Nsg80
Nsb(dp11924
sg1
(g92
g3
Ntp11925
Rp11926
(dp11927
g7
(dp11928
sg9
g1
(g3034
g3
Ntp11929
Rp11930
(dp11931
g3038
I4
sg14
g15
(g3039
tp11932
Rp11933
(dp11934
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp11935
sg65
g11922
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp11936
sg79
Nsg80
Nsb(dp11937
sg1
(g92
g3
Ntp11938
Rp11939
(dp11940
g7
(dp11941
sg9
g1
(g97
g3
Ntp11942
Rp11943
(dp11944
g14
g15
(g53
tp11945
Rp11946
(dp11947
g28
g29
sg3084
g23
sbsg108
(lp11948
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp11949
sg65
g11922
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp11950
sg79
Nsg80
Nsb(dp11951
ssg157
(dp11952
sg159
(dp11953
g11911
(dp11954
g11926
(dp11955
g163
(lp11956
(g3067
g3044
tp11957
a(g3066
g3045
tp11958
a(g3068
g3046
tp11959
a(g3065
g3047
tp11960
asssg11926
(dp11961
g11939
(dp11962
g163
(lp11963
(g3094
g3084
tp11964
asssg11939
(dp11965
ssg174
g11953
sg175
(dp11966
g11911
(dp11967
sg11926
(dp11968
g11911
g11955
ssg11939
(dp11969
g11926
g11962
sssg180
g11953
sbsg43
g11922
sg65
g66
sg75
g11922
sg76
g181
((lp11970
(lp11971
g184
ag181
((lp11972
(lp11973
g187
ag184
aa(lp11974
g189
ag190
aa(lp11975
g192
ag193
aa(lp11976
g195
ag196
aa(lp11977
g198
ag199
aa(lp11978
g201
ag106
aa(lp11979
g203
ag204
aa(lp11980
g206
ag207
aatp11981
Rp11982
aa(lp11983
g211
ag181
((lp11984
(lp11985
g187
ag211
aa(lp11986
g215
ag216
aa(lp11987
g218
ag219
aa(lp11988
g221
ag222
aa(lp11989
g224
ag225
aa(lp11990
g227
ag228
aa(lp11991
g230
ag231
aa(lp11992
g233
ag234
aa(lp11993
g236
ag237
aa(lp11994
g239
ag240
aa(lp11995
g242
ag243
aa(lp11996
g245
ag246
aa(lp11997
g248
ag249
aa(lp11998
g251
ag252
aa(lp11999
g254
ag255
aa(lp12000
g257
ag258
aa(lp12001
g260
ag261
aa(lp12002
g263
ag264
aa(lp12003
g266
ag267
aatp12004
Rp12005
aa(lp12006
g271
ag181
((lp12007
(lp12008
g187
ag271
aa(lp12009
g275
ag276
aatp12010
Rp12011
aatp12012
Rp12013
sg80
Nsbtp12014
a(g11515
g1
(g81
g3
Ntp12015
Rp12016
(dp12017
g85
g1
(g86
g3
Ntp12018
Rp12019
(dp12020
g90
(dp12021
g1
(g92
g3
Ntp12022
Rp12023
(dp12024
g7
(dp12025
sg9
g1
(g5697
g3
Ntp12026
Rp12027
(dp12028
g14
g15
(g5701
tp12029
Rp12030
(dp12031
g5705
g23
sg28
g29
sg5706
g23
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g5711
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
S'-applyisoxfm 2'
p12032
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
g23
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp12033
g36
g37
stp12034
Rp12035
(dp12036
g41
S'environ_items'
p12037
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'csf_anat_to_2mm_flirt_applyxfm'
p12038
sg63
(dp12039
sg65
S'nuisance_0'
p12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12038
sg76
Nsg77
(lp12041
sg79
Nsg80
Nsb(dp12042
sg1
(g92
g3
Ntp12043
Rp12044
(dp12045
g7
(dp12046
sg9
g1
(g135
g3
Ntp12047
Rp12048
(dp12049
g139
(lp12050
g1816
aS'selector'
p12051
aS'wm_sig_file'
p12052
aS'csf_sig_file'
p12053
aS'gm_sig_file'
p12054
aS'motion_file'
p12055
aS'compcor_ncomponents'
p12056
asg14
g15
(g142
tp12057
Rp12058
(dp12059
g20
I00
sg28
g29
sg12055
g23
sg12056
g23
sg146
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p12060
sg12053
g23
sg12052
g23
sg12054
g23
sg12051
g23
sg1816
g23
sbsg148
(dp12061
S'regressors_file'
p12062
NsS'residual_file'
p12063
Nssg150
(lp12064
g12063
ag12062
asg152
Nsbsg51
Nsg43
S'residuals'
p12065
sg63
(dp12066
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp12067
(g12051
(lp12068
(dp12069
S'global'
p12070
I0
sS'linear'
p12071
I1
sS'wm'
p12072
I0
sS'pc1'
p12073
I0
sS'motion'
p12074
I1
sS'quadratic'
p12075
I0
sS'gm'
p12076
I0
sS'compcor'
p12077
I1
sS'csf'
p12078
I1
satp12079
a(g12056
(lp12080
I5
atp12081
asg74
I00
sg75
g12065
sg76
Nsg77
(lp12082
sg79
Nsg80
Nsb(dp12083
sg1
(g92
g3
Ntp12084
Rp12085
(dp12086
g7
(dp12087
sg9
g1
(g97
g3
Ntp12088
Rp12089
(dp12090
g14
g15
(g53
tp12091
Rp12092
(dp12093
S'motion_components'
p12094
g23
sg28
g29
sS'lat_ventricles_mask'
p12095
S'/usr/share/fsl/5.0/data/atlases/HarvardOxford/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p12096
sS'gm_mask'
p12097
g23
sS'anat_to_mni_rigid_xfm'
p12098
g23
sg12056
g23
sS'anat_to_mni_affine_xfm'
p12099
g23
sg12051
g23
sS'wm_mask'
p12100
g23
sS'template_brain'
p12101
g23
sS'func_to_anat_linear_xfm'
p12102
g23
sS'mni_to_anat_linear_xfm'
p12103
g23
sS'csf_mask'
p12104
g23
sg1816
g23
sbsg108
(lp12105
g1816
ag12100
ag12104
ag12097
ag12103
ag12098
ag12099
ag12102
ag12095
ag12094
ag12051
ag12056
ag12101
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp12106
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp12107
sg79
Nsg80
Nsb(dp12108
sg1
(g92
g3
Ntp12109
Rp12110
(dp12111
g7
(dp12112
sg9
g1
(g135
g3
Ntp12113
Rp12114
(dp12115
g139
(lp12116
g6061
aS'ventricles_mask_file'
p12117
aS'wm_seg_file'
p12118
aS'csf_seg_file'
p12119
aS'gm_seg_file'
p12120
aS'wm_threshold'
p12121
aS'csf_threshold'
p12122
aS'gm_threshold'
p12123
asg14
g15
(g142
tp12124
Rp12125
(dp12126
g20
I00
sg28
g29
sg12121
g23
sg12122
g23
sg6061
g23
sg146
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p12127
sg12120
g23
sg12117
g23
sg12123
g23
sg12119
g23
sg12118
g23
sbsg148
(dp12128
S'file_gm'
p12129
NsS'file_wm'
p12130
NsS'file_csf'
p12131
Nssg150
(lp12132
g12130
ag12131
ag12129
asg152
Nsbsg51
Nsg43
S'tissue_masks'
p12133
sg63
(dp12134
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12133
sg76
Nsg77
(lp12135
sg79
Nsg80
Nsb(dp12136
sg1
(g92
g3
Ntp12137
Rp12138
(dp12139
g7
(dp12140
sg9
g1
(g5697
g3
Ntp12141
Rp12142
(dp12143
g14
g15
(g5701
tp12144
Rp12145
(dp12146
g5705
g23
sg28
g29
sg5706
g23
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g5711
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g12032
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
g23
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp12147
g36
g37
stp12148
Rp12149
(dp12150
g41
S'environ_items'
p12151
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'wm_anat_to_2mm_flirt_applyxfm'
p12152
sg63
(dp12153
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12152
sg76
Nsg77
(lp12154
sg79
Nsg80
Nsb(dp12155
sg1
(g92
g3
Ntp12156
Rp12157
(dp12158
g7
(dp12159
sg9
g1
(g3632
g3
Ntp12160
Rp12161
(dp12162
g14
g15
(g3636
tp12163
Rp12164
(dp12165
g20
I00
sg3352
I-1
sg3640
g23
sg3641
S'_trans'
p12166
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp12167
tp12168
Rp12169
(dp12170
g41
S'environ_items'
p12171
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
I3
sg3650
g1
(g3303
g3304
(lp12172
I01
aI01
atp12173
Rp12174
(dp12175
g41
S'invert_transform_flags_items'
p12176
sg43
g3650
sbsg3344
S'NearestNeighbor'
p12177
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
S'ho_mni_to_2mm_ants_applyxfm'
p12178
sg63
(dp12179
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12178
sg76
Nsg77
(lp12180
sg79
Nsg80
Nsb(dp12181
sg1
(g92
g3
Ntp12182
Rp12183
(dp12184
g7
(dp12185
sg9
g1
(g3034
g3
Ntp12186
Rp12187
(dp12188
g3038
I2
sg14
g15
(g3039
tp12189
Rp12190
(dp12191
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3048
g3049
sbsbsg51
Nsg43
S'ho_mni_to_2mm_ants_collect_linear_transforms'
p12192
sg63
(dp12193
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12192
sg76
Nsg77
(lp12194
sg79
Nsg80
Nsb(dp12195
sg1
(g92
g3
Ntp12196
Rp12197
(dp12198
g7
(dp12199
sg9
g1
(g97
g3
Ntp12200
Rp12201
(dp12202
g14
g15
(g53
tp12203
Rp12204
(dp12205
g28
g29
sS'regressors'
p12206
g23
sg1816
g23
sbsg108
(lp12207
g1816
ag12206
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp12208
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp12209
sg79
Nsg80
Nsb(dp12210
sg1
(g92
g3
Ntp12211
Rp12212
(dp12213
g7
(dp12214
sg9
g1
(g5697
g3
Ntp12215
Rp12216
(dp12217
g14
g15
(g5701
tp12218
Rp12219
(dp12220
g5705
g23
sg28
g29
sg5706
g23
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g23
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g12032
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
g23
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp12221
g36
g37
stp12222
Rp12223
(dp12224
g41
S'environ_items'
p12225
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'func_to_2mm_flirt_applyxfm'
p12226
sg63
(dp12227
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12226
sg76
Nsg77
(lp12228
sg79
Nsg80
Nsb(dp12229
sg1
(g92
g3
Ntp12230
Rp12231
(dp12232
g7
(dp12233
sg9
g1
(g5697
g3
Ntp12234
Rp12235
(dp12236
g14
g15
(g5701
tp12237
Rp12238
(dp12239
g5705
g23
sg28
g29
sg5706
g23
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g5711
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g12032
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
g23
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
g23
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp12240
g36
g37
stp12241
Rp12242
(dp12243
g41
S'environ_items'
p12244
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'gm_anat_to_2mm_flirt_applyxfm'
p12245
sg63
(dp12246
sg65
g12040
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12245
sg76
Nsg77
(lp12247
sg79
Nsg80
Nsb(dp12248
ssg157
(dp12249
sg159
(dp12250
g12023
(dp12251
g12157
(dp12252
g163
(lp12253
(g25
g3621
tp12254
assg12110
(dp12255
g163
(lp12256
(g25
g12119
tp12257
asssg12044
(dp12258
g12197
(dp12259
g163
(lp12260
(g12063
g1816
tp12261
a(g12062
g12206
tp12262
asssg12085
(dp12263
g12023
(dp12264
g163
(lp12265
(g12104
g44
tp12266
a(g12104
g5708
tp12267
assg12044
(dp12268
g163
(lp12269
(g1816
g1816
tp12270
a(g12094
g12055
tp12271
a(g12051
g12051
tp12272
a(g12056
g12056
tp12273
assg12138
(dp12274
g163
(lp12275
(g12100
g44
tp12276
a(g12100
g5708
tp12277
assg12231
(dp12278
g163
(lp12279
(g12097
g44
tp12280
a(g12097
g5708
tp12281
assg12183
(dp12282
g163
(lp12283
(g12098
g3044
tp12284
a(g12099
g3045
tp12285
assg12212
(dp12286
g163
(lp12287
(g1816
g44
tp12288
a(g12104
g5708
tp12289
a(g12102
g5706
tp12290
assg12157
(dp12291
g163
(lp12292
(g12095
g3622
tp12293
asssg12110
(dp12294
g12044
(dp12295
g163
(lp12296
(g12130
g12052
tp12297
a(g12131
g12053
tp12298
a(g12129
g12054
tp12299
asssg12138
(dp12300
g12110
(dp12301
g163
(lp12302
(g25
g12118
tp12303
asssg12157
(dp12304
g12110
(dp12305
g163
(lp12306
(g3640
g12117
tp12307
asssg12183
(dp12308
g12157
(dp12309
g163
(lp12310
(g3094
g3320
tp12311
asssg12197
(dp12312
sg12212
(dp12313
g12110
(dp12314
g163
(lp12315
(g25
g6061
tp12316
asssg12231
(dp12317
g12110
(dp12318
g163
(lp12319
(g25
g12120
tp12320
assssg174
g12250
sg175
(dp12321
g12023
(dp12322
g12085
g12264
ssg12044
(dp12323
g12085
g12268
sg12110
g12295
ssg12085
(dp12324
sg12110
(dp12325
g12157
g12305
sg12212
g12314
sg12231
g12318
sg12138
g12301
sg12023
g12255
ssg12138
(dp12326
g12085
g12274
ssg12157
(dp12327
g12183
g12309
sg12023
g12252
sg12085
g12291
ssg12183
(dp12328
g12085
g12282
ssg12197
(dp12329
g12044
g12259
ssg12212
(dp12330
g12085
g12286
ssg12231
(dp12331
g12085
g12278
sssg180
g12250
sbsg43
g12040
sg65
g66
sg75
g12040
sg76
g181
((lp12332
(lp12333
g184
ag181
((lp12334
(lp12335
g187
ag184
aa(lp12336
g189
ag190
aa(lp12337
g192
ag193
aa(lp12338
g195
ag196
aa(lp12339
g198
ag199
aa(lp12340
g201
ag106
aa(lp12341
g203
ag204
aa(lp12342
g206
ag207
aatp12343
Rp12344
aa(lp12345
g211
ag181
((lp12346
(lp12347
g187
ag211
aa(lp12348
g215
ag216
aa(lp12349
g218
ag219
aa(lp12350
g221
ag222
aa(lp12351
g224
ag225
aa(lp12352
g227
ag228
aa(lp12353
g230
ag231
aa(lp12354
g233
ag234
aa(lp12355
g236
ag237
aa(lp12356
g239
ag240
aa(lp12357
g242
ag243
aa(lp12358
g245
ag246
aa(lp12359
g248
ag249
aa(lp12360
g251
ag252
aa(lp12361
g254
ag255
aa(lp12362
g257
ag258
aa(lp12363
g260
ag261
aa(lp12364
g263
ag264
aa(lp12365
g266
ag267
aatp12366
Rp12367
aa(lp12368
g271
ag181
((lp12369
(lp12370
g187
ag271
aa(lp12371
g275
ag276
aatp12372
Rp12373
aatp12374
Rp12375
sg80
Nsbtp12376
a(g11515
g1
(g81
g3
Ntp12377
Rp12378
(dp12379
g85
g1
(g86
g3
Ntp12380
Rp12381
(dp12382
g90
(dp12383
g1
(g92
g3
Ntp12384
Rp12385
(dp12386
g7
(dp12387
sg9
g1
(g97
g3
Ntp12388
Rp12389
(dp12390
g14
g15
(g53
tp12391
Rp12392
(dp12393
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp12394
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp12395
sg65
S'dr_tempreg_maps_z_stack_collect_transforms_0'
p12396
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp12397
sg79
Nsg80
Nsb(dp12398
sg1
(g92
g3
Ntp12399
Rp12400
(dp12401
g7
(dp12402
sg9
g1
(g97
g3
Ntp12403
Rp12404
(dp12405
g14
g15
(g53
tp12406
Rp12407
(dp12408
g28
g29
sg3084
g23
sbsg108
(lp12409
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp12410
sg65
g12396
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp12411
sg79
Nsg80
Nsb(dp12412
sg1
(g92
g3
Ntp12413
Rp12414
(dp12415
g7
(dp12416
sg9
g1
(g3034
g3
Ntp12417
Rp12418
(dp12419
g3038
I4
sg14
g15
(g3039
tp12420
Rp12421
(dp12422
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp12423
sg65
g12396
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp12424
sg79
Nsg80
Nsb(dp12425
ssg157
(dp12426
sg159
(dp12427
g12385
(dp12428
g12414
(dp12429
g163
(lp12430
(g3067
g3044
tp12431
a(g3066
g3045
tp12432
a(g3068
g3046
tp12433
a(g3065
g3047
tp12434
asssg12400
(dp12435
sg12414
(dp12436
g12400
(dp12437
g163
(lp12438
(g3094
g3084
tp12439
assssg174
g12427
sg175
(dp12440
g12385
(dp12441
sg12400
(dp12442
g12414
g12437
ssg12414
(dp12443
g12385
g12429
sssg180
g12427
sbsg43
g12396
sg65
g66
sg75
g12396
sg76
g181
((lp12444
(lp12445
g184
ag181
((lp12446
(lp12447
g187
ag184
aa(lp12448
g189
ag190
aa(lp12449
g192
ag193
aa(lp12450
g195
ag196
aa(lp12451
g198
ag199
aa(lp12452
g201
ag106
aa(lp12453
g203
ag204
aa(lp12454
g206
ag207
aatp12455
Rp12456
aa(lp12457
g211
ag181
((lp12458
(lp12459
g187
ag211
aa(lp12460
g215
ag216
aa(lp12461
g218
ag219
aa(lp12462
g221
ag222
aa(lp12463
g224
ag225
aa(lp12464
g227
ag228
aa(lp12465
g230
ag231
aa(lp12466
g233
ag234
aa(lp12467
g236
ag237
aa(lp12468
g239
ag240
aa(lp12469
g242
ag243
aa(lp12470
g245
ag246
aa(lp12471
g248
ag249
aa(lp12472
g251
ag252
aa(lp12473
g254
ag255
aa(lp12474
g257
ag258
aa(lp12475
g260
ag261
aa(lp12476
g263
ag264
aa(lp12477
g266
ag267
aatp12478
Rp12479
aa(lp12480
g271
ag181
((lp12481
(lp12482
g187
ag271
aa(lp12483
g275
ag276
aatp12484
Rp12485
aatp12486
Rp12487
sg80
Nsbtp12488
a(g11515
g1
(g81
g3
Ntp12489
Rp12490
(dp12491
g85
g1
(g86
g3
Ntp12492
Rp12493
(dp12494
g90
(dp12495
g1
(g92
g3
Ntp12496
Rp12497
(dp12498
g7
(dp12499
sg9
g1
(g97
g3
Ntp12500
Rp12501
(dp12502
g14
g15
(g53
tp12503
Rp12504
(dp12505
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp12506
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp12507
sg65
S'dr_tempreg_maps_z_files_collect_transforms_0'
p12508
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp12509
sg79
Nsg80
Nsb(dp12510
sg1
(g92
g3
Ntp12511
Rp12512
(dp12513
g7
(dp12514
sg9
g1
(g97
g3
Ntp12515
Rp12516
(dp12517
g14
g15
(g53
tp12518
Rp12519
(dp12520
g28
g29
sg3084
g23
sbsg108
(lp12521
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp12522
sg65
g12508
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp12523
sg79
Nsg80
Nsb(dp12524
sg1
(g2
g3
Ntp12525
Rp12526
(dp12527
g7
(dp12528
sg9
g1
(g3034
g3
Ntp12529
Rp12530
(dp12531
g3038
I4
sg14
g15
(g3039
tp12532
Rp12533
(dp12534
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg52
g15
(g53
tp12535
Rp12536
(dp12537
g20
I00
sg28
g29
sg3047
g23
sg3044
g23
sg3045
g23
sg3046
g23
sg3043
I00
sg3048
g3049
sbsg43
S'collect_transforms_mapnode'
p12538
sg63
(dp12539
sg65
g12508
sg67
(lp12540
g3047
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12538
sg76
Nsg77
(lp12541
sg79
Nsg80
Nsb(dp12542
ssg157
(dp12543
sg159
(dp12544
g12497
(dp12545
g12526
(dp12546
g163
(lp12547
(g3067
g3044
tp12548
a(g3066
g3045
tp12549
a(g3068
g3046
tp12550
a(g3065
g3047
tp12551
asssg12512
(dp12552
sg12526
(dp12553
g12512
(dp12554
g163
(lp12555
(g3094
g3084
tp12556
assssg174
g12544
sg175
(dp12557
g12497
(dp12558
sg12512
(dp12559
g12526
g12554
ssg12526
(dp12560
g12497
g12546
sssg180
g12544
sbsg43
g12508
sg65
g66
sg75
g12508
sg76
g181
((lp12561
(lp12562
g184
ag181
((lp12563
(lp12564
g187
ag184
aa(lp12565
g189
ag190
aa(lp12566
g192
ag193
aa(lp12567
g195
ag196
aa(lp12568
g198
ag199
aa(lp12569
g201
ag106
aa(lp12570
g203
ag204
aa(lp12571
g206
ag207
aatp12572
Rp12573
aa(lp12574
g211
ag181
((lp12575
(lp12576
g187
ag211
aa(lp12577
g215
ag216
aa(lp12578
g218
ag219
aa(lp12579
g221
ag222
aa(lp12580
g224
ag225
aa(lp12581
g227
ag228
aa(lp12582
g230
ag231
aa(lp12583
g233
ag234
aa(lp12584
g236
ag237
aa(lp12585
g239
ag240
aa(lp12586
g242
ag243
aa(lp12587
g245
ag246
aa(lp12588
g248
ag249
aa(lp12589
g251
ag252
aa(lp12590
g254
ag255
aa(lp12591
g257
ag258
aa(lp12592
g260
ag261
aa(lp12593
g263
ag264
aa(lp12594
g266
ag267
aatp12595
Rp12596
aa(lp12597
g271
ag181
((lp12598
(lp12599
g187
ag271
aa(lp12600
g275
ag276
aatp12601
Rp12602
aatp12603
Rp12604
sg80
Nsbtp12605
a(g11515
g1
(g81
g3
Ntp12606
Rp12607
(dp12608
g85
g1
(g86
g3
Ntp12609
Rp12610
(dp12611
g90
(dp12612
g1
(g92
g3
Ntp12613
Rp12614
(dp12615
g7
(dp12616
sg9
g1
(g97
g3
Ntp12617
Rp12618
(dp12619
g14
g15
(g53
tp12620
Rp12621
(dp12622
g28
g29
sg3084
g23
sbsg108
(lp12623
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp12624
sg65
S'sca_roi_Z_collect_transforms_0'
p12625
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp12626
sg79
Nsg80
Nsb(dp12627
sg1
(g92
g3
Ntp12628
Rp12629
(dp12630
g7
(dp12631
sg9
g1
(g97
g3
Ntp12632
Rp12633
(dp12634
g14
g15
(g53
tp12635
Rp12636
(dp12637
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp12638
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp12639
sg65
g12625
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp12640
sg79
Nsg80
Nsb(dp12641
sg1
(g2
g3
Ntp12642
Rp12643
(dp12644
g7
(dp12645
sg9
g1
(g3034
g3
Ntp12646
Rp12647
(dp12648
g3038
I4
sg14
g15
(g3039
tp12649
Rp12650
(dp12651
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg52
g15
(g53
tp12652
Rp12653
(dp12654
g20
I00
sg28
g29
sg3047
g23
sg3044
g23
sg3045
g23
sg3046
g23
sg3043
I00
sg3048
g3049
sbsg43
g12538
sg63
(dp12655
sg65
g12625
sg67
(lp12656
g3047
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12538
sg76
Nsg77
(lp12657
sg79
Nsg80
Nsb(dp12658
ssg157
(dp12659
sg159
(dp12660
g12614
(dp12661
sg12629
(dp12662
g12643
(dp12663
g163
(lp12664
(g3067
g3044
tp12665
a(g3066
g3045
tp12666
a(g3068
g3046
tp12667
a(g3065
g3047
tp12668
asssg12643
(dp12669
g12614
(dp12670
g163
(lp12671
(g3094
g3084
tp12672
assssg174
g12660
sg175
(dp12673
g12614
(dp12674
g12643
g12670
ssg12629
(dp12675
sg12643
(dp12676
g12629
g12663
sssg180
g12660
sbsg43
g12625
sg65
g66
sg75
g12625
sg76
g181
((lp12677
(lp12678
g184
ag181
((lp12679
(lp12680
g187
ag184
aa(lp12681
g189
ag190
aa(lp12682
g192
ag193
aa(lp12683
g195
ag196
aa(lp12684
g198
ag199
aa(lp12685
g201
ag106
aa(lp12686
g203
ag204
aa(lp12687
g206
ag207
aatp12688
Rp12689
aa(lp12690
g211
ag181
((lp12691
(lp12692
g187
ag211
aa(lp12693
g215
ag216
aa(lp12694
g218
ag219
aa(lp12695
g221
ag222
aa(lp12696
g224
ag225
aa(lp12697
g227
ag228
aa(lp12698
g230
ag231
aa(lp12699
g233
ag234
aa(lp12700
g236
ag237
aa(lp12701
g239
ag240
aa(lp12702
g242
ag243
aa(lp12703
g245
ag246
aa(lp12704
g248
ag249
aa(lp12705
g251
ag252
aa(lp12706
g254
ag255
aa(lp12707
g257
ag258
aa(lp12708
g260
ag261
aa(lp12709
g263
ag264
aa(lp12710
g266
ag267
aatp12711
Rp12712
aa(lp12713
g271
ag181
((lp12714
(lp12715
g187
ag271
aa(lp12716
g275
ag276
aatp12717
Rp12718
aatp12719
Rp12720
sg80
Nsbtp12721
a(g11515
g1
(g81
g3
Ntp12722
Rp12723
(dp12724
g85
g1
(g86
g3
Ntp12725
Rp12726
(dp12727
g90
(dp12728
g1
(g92
g3
Ntp12729
Rp12730
(dp12731
g7
(dp12732
sg9
g1
(g97
g3
Ntp12733
Rp12734
(dp12735
g14
g15
(g53
tp12736
Rp12737
(dp12738
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp12739
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp12740
sg65
S'alff_collect_transforms_0'
p12741
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp12742
sg79
Nsg80
Nsb(dp12743
sg1
(g92
g3
Ntp12744
Rp12745
(dp12746
g7
(dp12747
sg9
g1
(g3034
g3
Ntp12748
Rp12749
(dp12750
g3038
I4
sg14
g15
(g3039
tp12751
Rp12752
(dp12753
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp12754
sg65
g12741
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp12755
sg79
Nsg80
Nsb(dp12756
sg1
(g92
g3
Ntp12757
Rp12758
(dp12759
g7
(dp12760
sg9
g1
(g97
g3
Ntp12761
Rp12762
(dp12763
g14
g15
(g53
tp12764
Rp12765
(dp12766
g28
g29
sg3084
g23
sbsg108
(lp12767
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp12768
sg65
g12741
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp12769
sg79
Nsg80
Nsb(dp12770
ssg157
(dp12771
sg159
(dp12772
g12730
(dp12773
g12745
(dp12774
g163
(lp12775
(g3067
g3044
tp12776
a(g3066
g3045
tp12777
a(g3068
g3046
tp12778
a(g3065
g3047
tp12779
asssg12745
(dp12780
g12758
(dp12781
g163
(lp12782
(g3094
g3084
tp12783
asssg12758
(dp12784
ssg174
g12772
sg175
(dp12785
g12730
(dp12786
sg12745
(dp12787
g12730
g12774
ssg12758
(dp12788
g12745
g12781
sssg180
g12772
sbsg43
g12741
sg65
g66
sg75
g12741
sg76
g181
((lp12789
(lp12790
g184
ag181
((lp12791
(lp12792
g187
ag184
aa(lp12793
g189
ag190
aa(lp12794
g192
ag193
aa(lp12795
g195
ag196
aa(lp12796
g198
ag199
aa(lp12797
g201
ag106
aa(lp12798
g203
ag204
aa(lp12799
g206
ag207
aatp12800
Rp12801
aa(lp12802
g211
ag181
((lp12803
(lp12804
g187
ag211
aa(lp12805
g215
ag216
aa(lp12806
g218
ag219
aa(lp12807
g221
ag222
aa(lp12808
g224
ag225
aa(lp12809
g227
ag228
aa(lp12810
g230
ag231
aa(lp12811
g233
ag234
aa(lp12812
g236
ag237
aa(lp12813
g239
ag240
aa(lp12814
g242
ag243
aa(lp12815
g245
ag246
aa(lp12816
g248
ag249
aa(lp12817
g251
ag252
aa(lp12818
g254
ag255
aa(lp12819
g257
ag258
aa(lp12820
g260
ag261
aa(lp12821
g263
ag264
aa(lp12822
g266
ag267
aatp12823
Rp12824
aa(lp12825
g271
ag181
((lp12826
(lp12827
g187
ag271
aa(lp12828
g275
ag276
aatp12829
Rp12830
aatp12831
Rp12832
sg80
Nsbtp12833
a(g11515
g1
(g81
g3
Ntp12834
Rp12835
(dp12836
g85
g1
(g86
g3
Ntp12837
Rp12838
(dp12839
g90
(dp12840
g1
(g92
g3
Ntp12841
Rp12842
(dp12843
g7
(dp12844
sg9
g1
(g97
g3
Ntp12845
Rp12846
(dp12847
g14
g15
(g53
tp12848
Rp12849
(dp12850
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp12851
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp12852
sg65
S'dr_tempreg_maps_z_stack_collect_transforms_1'
p12853
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp12854
sg79
Nsg80
Nsb(dp12855
sg1
(g92
g3
Ntp12856
Rp12857
(dp12858
g7
(dp12859
sg9
g1
(g3034
g3
Ntp12860
Rp12861
(dp12862
g3038
I4
sg14
g15
(g3039
tp12863
Rp12864
(dp12865
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp12866
sg65
g12853
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp12867
sg79
Nsg80
Nsb(dp12868
sg1
(g92
g3
Ntp12869
Rp12870
(dp12871
g7
(dp12872
sg9
g1
(g97
g3
Ntp12873
Rp12874
(dp12875
g14
g15
(g53
tp12876
Rp12877
(dp12878
g28
g29
sg3084
g23
sbsg108
(lp12879
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp12880
sg65
g12853
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp12881
sg79
Nsg80
Nsb(dp12882
ssg157
(dp12883
sg159
(dp12884
g12842
(dp12885
g12857
(dp12886
g163
(lp12887
(g3067
g3044
tp12888
a(g3066
g3045
tp12889
a(g3068
g3046
tp12890
a(g3065
g3047
tp12891
asssg12857
(dp12892
g12870
(dp12893
g163
(lp12894
(g3094
g3084
tp12895
asssg12870
(dp12896
ssg174
g12884
sg175
(dp12897
g12842
(dp12898
sg12857
(dp12899
g12842
g12886
ssg12870
(dp12900
g12857
g12893
sssg180
g12884
sbsg43
g12853
sg65
g66
sg75
g12853
sg76
g181
((lp12901
(lp12902
g184
ag181
((lp12903
(lp12904
g187
ag184
aa(lp12905
g189
ag190
aa(lp12906
g192
ag193
aa(lp12907
g195
ag196
aa(lp12908
g198
ag199
aa(lp12909
g201
ag106
aa(lp12910
g203
ag204
aa(lp12911
g206
ag207
aatp12912
Rp12913
aa(lp12914
g211
ag181
((lp12915
(lp12916
g187
ag211
aa(lp12917
g215
ag216
aa(lp12918
g218
ag219
aa(lp12919
g221
ag222
aa(lp12920
g224
ag225
aa(lp12921
g227
ag228
aa(lp12922
g230
ag231
aa(lp12923
g233
ag234
aa(lp12924
g236
ag237
aa(lp12925
g239
ag240
aa(lp12926
g242
ag243
aa(lp12927
g245
ag246
aa(lp12928
g248
ag249
aa(lp12929
g251
ag252
aa(lp12930
g254
ag255
aa(lp12931
g257
ag258
aa(lp12932
g260
ag261
aa(lp12933
g263
ag264
aa(lp12934
g266
ag267
aatp12935
Rp12936
aa(lp12937
g271
ag181
((lp12938
(lp12939
g187
ag271
aa(lp12940
g275
ag276
aatp12941
Rp12942
aatp12943
Rp12944
sg80
Nsbtp12945
a(g11515
g1
(g81
g3
Ntp12946
Rp12947
(dp12948
g85
g1
(g86
g3
Ntp12949
Rp12950
(dp12951
g90
(dp12952
g1
(g92
g3
Ntp12953
Rp12954
(dp12955
g7
(dp12956
sg9
g1
(g97
g3
Ntp12957
Rp12958
(dp12959
g14
g15
(g53
tp12960
Rp12961
(dp12962
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp12963
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp12964
sg65
S'reho_collect_transforms_1'
p12965
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp12966
sg79
Nsg80
Nsb(dp12967
sg1
(g92
g3
Ntp12968
Rp12969
(dp12970
g7
(dp12971
sg9
g1
(g3034
g3
Ntp12972
Rp12973
(dp12974
g3038
I4
sg14
g15
(g3039
tp12975
Rp12976
(dp12977
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp12978
sg65
g12965
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp12979
sg79
Nsg80
Nsb(dp12980
sg1
(g92
g3
Ntp12981
Rp12982
(dp12983
g7
(dp12984
sg9
g1
(g97
g3
Ntp12985
Rp12986
(dp12987
g14
g15
(g53
tp12988
Rp12989
(dp12990
g28
g29
sg3084
g23
sbsg108
(lp12991
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp12992
sg65
g12965
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp12993
sg79
Nsg80
Nsb(dp12994
ssg157
(dp12995
sg159
(dp12996
g12954
(dp12997
g12969
(dp12998
g163
(lp12999
(g3067
g3044
tp13000
a(g3066
g3045
tp13001
a(g3068
g3046
tp13002
a(g3065
g3047
tp13003
asssg12969
(dp13004
g12982
(dp13005
g163
(lp13006
(g3094
g3084
tp13007
asssg12982
(dp13008
ssg174
g12996
sg175
(dp13009
g12954
(dp13010
sg12969
(dp13011
g12954
g12998
ssg12982
(dp13012
g12969
g13005
sssg180
g12996
sbsg43
g12965
sg65
g66
sg75
g12965
sg76
g181
((lp13013
(lp13014
g184
ag181
((lp13015
(lp13016
g187
ag184
aa(lp13017
g189
ag190
aa(lp13018
g192
ag193
aa(lp13019
g195
ag196
aa(lp13020
g198
ag199
aa(lp13021
g201
ag106
aa(lp13022
g203
ag204
aa(lp13023
g206
ag207
aatp13024
Rp13025
aa(lp13026
g211
ag181
((lp13027
(lp13028
g187
ag211
aa(lp13029
g215
ag216
aa(lp13030
g218
ag219
aa(lp13031
g221
ag222
aa(lp13032
g224
ag225
aa(lp13033
g227
ag228
aa(lp13034
g230
ag231
aa(lp13035
g233
ag234
aa(lp13036
g236
ag237
aa(lp13037
g239
ag240
aa(lp13038
g242
ag243
aa(lp13039
g245
ag246
aa(lp13040
g248
ag249
aa(lp13041
g251
ag252
aa(lp13042
g254
ag255
aa(lp13043
g257
ag258
aa(lp13044
g260
ag261
aa(lp13045
g263
ag264
aa(lp13046
g266
ag267
aatp13047
Rp13048
aa(lp13049
g271
ag181
((lp13050
(lp13051
g187
ag271
aa(lp13052
g275
ag276
aatp13053
Rp13054
aatp13055
Rp13056
sg80
Nsbtp13057
a(g11515
g1
(g81
g3
Ntp13058
Rp13059
(dp13060
g85
g1
(g86
g3
Ntp13061
Rp13062
(dp13063
g90
(dp13064
g1
(g92
g3
Ntp13065
Rp13066
(dp13067
g7
(dp13068
sg9
g1
(g97
g3
Ntp13069
Rp13070
(dp13071
g14
g15
(g53
tp13072
Rp13073
(dp13074
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp13075
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp13076
sg65
S'sca_roi_Z_collect_transforms_1'
p13077
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp13078
sg79
Nsg80
Nsb(dp13079
sg1
(g92
g3
Ntp13080
Rp13081
(dp13082
g7
(dp13083
sg9
g1
(g97
g3
Ntp13084
Rp13085
(dp13086
g14
g15
(g53
tp13087
Rp13088
(dp13089
g28
g29
sg3084
g23
sbsg108
(lp13090
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13091
sg65
g13077
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13092
sg79
Nsg80
Nsb(dp13093
sg1
(g2
g3
Ntp13094
Rp13095
(dp13096
g7
(dp13097
sg9
g1
(g3034
g3
Ntp13098
Rp13099
(dp13100
g3038
I4
sg14
g15
(g3039
tp13101
Rp13102
(dp13103
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg52
g15
(g53
tp13104
Rp13105
(dp13106
g20
I00
sg28
g29
sg3047
g23
sg3044
g23
sg3045
g23
sg3046
g23
sg3043
I00
sg3048
g3049
sbsg43
g12538
sg63
(dp13107
sg65
g13077
sg67
(lp13108
g3047
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12538
sg76
Nsg77
(lp13109
sg79
Nsg80
Nsb(dp13110
ssg157
(dp13111
sg159
(dp13112
g13066
(dp13113
g13095
(dp13114
g163
(lp13115
(g3067
g3044
tp13116
a(g3066
g3045
tp13117
a(g3068
g3046
tp13118
a(g3065
g3047
tp13119
asssg13081
(dp13120
sg13095
(dp13121
g13081
(dp13122
g163
(lp13123
(g3094
g3084
tp13124
assssg174
g13112
sg175
(dp13125
g13066
(dp13126
sg13081
(dp13127
g13095
g13122
ssg13095
(dp13128
g13066
g13114
sssg180
g13112
sbsg43
g13077
sg65
g66
sg75
g13077
sg76
g181
((lp13129
(lp13130
g184
ag181
((lp13131
(lp13132
g187
ag184
aa(lp13133
g189
ag190
aa(lp13134
g192
ag193
aa(lp13135
g195
ag196
aa(lp13136
g198
ag199
aa(lp13137
g201
ag106
aa(lp13138
g203
ag204
aa(lp13139
g206
ag207
aatp13140
Rp13141
aa(lp13142
g211
ag181
((lp13143
(lp13144
g187
ag211
aa(lp13145
g215
ag216
aa(lp13146
g218
ag219
aa(lp13147
g221
ag222
aa(lp13148
g224
ag225
aa(lp13149
g227
ag228
aa(lp13150
g230
ag231
aa(lp13151
g233
ag234
aa(lp13152
g236
ag237
aa(lp13153
g239
ag240
aa(lp13154
g242
ag243
aa(lp13155
g245
ag246
aa(lp13156
g248
ag249
aa(lp13157
g251
ag252
aa(lp13158
g254
ag255
aa(lp13159
g257
ag258
aa(lp13160
g260
ag261
aa(lp13161
g263
ag264
aa(lp13162
g266
ag267
aatp13163
Rp13164
aa(lp13165
g271
ag181
((lp13166
(lp13167
g187
ag271
aa(lp13168
g275
ag276
aatp13169
Rp13170
aatp13171
Rp13172
sg80
Nsbtp13173
a(g11515
g1
(g81
g3
Ntp13174
Rp13175
(dp13176
g85
g1
(g86
g3
Ntp13177
Rp13178
(dp13179
g90
(dp13180
g1
(g92
g3
Ntp13181
Rp13182
(dp13183
g7
(dp13184
sg9
g1
(g97
g3
Ntp13185
Rp13186
(dp13187
g14
g15
(g53
tp13188
Rp13189
(dp13190
g28
g29
sg3084
g23
sbsg108
(lp13191
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13192
sg65
S'collect_transforms_mean_functional_in_mni_0'
p13193
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13194
sg79
Nsg80
Nsb(dp13195
sg1
(g92
g3
Ntp13196
Rp13197
(dp13198
g7
(dp13199
sg9
g1
(g97
g3
Ntp13200
Rp13201
(dp13202
g14
g15
(g53
tp13203
Rp13204
(dp13205
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp13206
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp13207
sg65
g13193
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp13208
sg79
Nsg80
Nsb(dp13209
sg1
(g92
g3
Ntp13210
Rp13211
(dp13212
g7
(dp13213
sg9
g1
(g3034
g3
Ntp13214
Rp13215
(dp13216
g3038
I4
sg14
g15
(g3039
tp13217
Rp13218
(dp13219
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp13220
sg65
g13193
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp13221
sg79
Nsg80
Nsb(dp13222
ssg157
(dp13223
sg159
(dp13224
g13182
(dp13225
sg13197
(dp13226
g13211
(dp13227
g163
(lp13228
(g3067
g3044
tp13229
a(g3066
g3045
tp13230
a(g3068
g3046
tp13231
a(g3065
g3047
tp13232
asssg13211
(dp13233
g13182
(dp13234
g163
(lp13235
(g3094
g3084
tp13236
assssg174
g13224
sg175
(dp13237
g13182
(dp13238
g13211
g13234
ssg13197
(dp13239
sg13211
(dp13240
g13197
g13227
sssg180
g13224
sbsg43
g13193
sg65
g66
sg75
g13193
sg76
g181
((lp13241
(lp13242
g184
ag181
((lp13243
(lp13244
g187
ag184
aa(lp13245
g189
ag190
aa(lp13246
g192
ag193
aa(lp13247
g195
ag196
aa(lp13248
g198
ag199
aa(lp13249
g201
ag106
aa(lp13250
g203
ag204
aa(lp13251
g206
ag207
aatp13252
Rp13253
aa(lp13254
g211
ag181
((lp13255
(lp13256
g187
ag211
aa(lp13257
g215
ag216
aa(lp13258
g218
ag219
aa(lp13259
g221
ag222
aa(lp13260
g224
ag225
aa(lp13261
g227
ag228
aa(lp13262
g230
ag231
aa(lp13263
g233
ag234
aa(lp13264
g236
ag237
aa(lp13265
g239
ag240
aa(lp13266
g242
ag243
aa(lp13267
g245
ag246
aa(lp13268
g248
ag249
aa(lp13269
g251
ag252
aa(lp13270
g254
ag255
aa(lp13271
g257
ag258
aa(lp13272
g260
ag261
aa(lp13273
g263
ag264
aa(lp13274
g266
ag267
aatp13275
Rp13276
aa(lp13277
g271
ag181
((lp13278
(lp13279
g187
ag271
aa(lp13280
g275
ag276
aatp13281
Rp13282
aatp13283
Rp13284
sg80
Nsbtp13285
a(g11515
g1
(g81
g3
Ntp13286
Rp13287
(dp13288
g85
g1
(g86
g3
Ntp13289
Rp13290
(dp13291
g90
(dp13292
g1
(g92
g3
Ntp13293
Rp13294
(dp13295
g7
(dp13296
sg9
g1
(g97
g3
Ntp13297
Rp13298
(dp13299
g14
g15
(g53
tp13300
Rp13301
(dp13302
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp13303
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp13304
sg65
S'collect_transforms_mean_functional_in_mni_1'
p13305
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp13306
sg79
Nsg80
Nsb(dp13307
sg1
(g92
g3
Ntp13308
Rp13309
(dp13310
g7
(dp13311
sg9
g1
(g97
g3
Ntp13312
Rp13313
(dp13314
g14
g15
(g53
tp13315
Rp13316
(dp13317
g28
g29
sg3084
g23
sbsg108
(lp13318
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13319
sg65
g13305
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13320
sg79
Nsg80
Nsb(dp13321
sg1
(g92
g3
Ntp13322
Rp13323
(dp13324
g7
(dp13325
sg9
g1
(g3034
g3
Ntp13326
Rp13327
(dp13328
g3038
I4
sg14
g15
(g3039
tp13329
Rp13330
(dp13331
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp13332
sg65
g13305
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp13333
sg79
Nsg80
Nsb(dp13334
ssg157
(dp13335
sg159
(dp13336
g13294
(dp13337
g13323
(dp13338
g163
(lp13339
(g3067
g3044
tp13340
a(g3066
g3045
tp13341
a(g3068
g3046
tp13342
a(g3065
g3047
tp13343
asssg13309
(dp13344
sg13323
(dp13345
g13309
(dp13346
g163
(lp13347
(g3094
g3084
tp13348
assssg174
g13336
sg175
(dp13349
g13294
(dp13350
sg13309
(dp13351
g13323
g13346
ssg13323
(dp13352
g13294
g13338
sssg180
g13336
sbsg43
g13305
sg65
g66
sg75
g13305
sg76
g181
((lp13353
(lp13354
g184
ag181
((lp13355
(lp13356
g187
ag184
aa(lp13357
g189
ag190
aa(lp13358
g192
ag193
aa(lp13359
g195
ag196
aa(lp13360
g198
ag199
aa(lp13361
g201
ag106
aa(lp13362
g203
ag204
aa(lp13363
g206
ag207
aatp13364
Rp13365
aa(lp13366
g211
ag181
((lp13367
(lp13368
g187
ag211
aa(lp13369
g215
ag216
aa(lp13370
g218
ag219
aa(lp13371
g221
ag222
aa(lp13372
g224
ag225
aa(lp13373
g227
ag228
aa(lp13374
g230
ag231
aa(lp13375
g233
ag234
aa(lp13376
g236
ag237
aa(lp13377
g239
ag240
aa(lp13378
g242
ag243
aa(lp13379
g245
ag246
aa(lp13380
g248
ag249
aa(lp13381
g251
ag252
aa(lp13382
g254
ag255
aa(lp13383
g257
ag258
aa(lp13384
g260
ag261
aa(lp13385
g263
ag264
aa(lp13386
g266
ag267
aatp13387
Rp13388
aa(lp13389
g271
ag181
((lp13390
(lp13391
g187
ag271
aa(lp13392
g275
ag276
aatp13393
Rp13394
aatp13395
Rp13396
sg80
Nsbtp13397
a(g11515
g1
(g81
g3
Ntp13398
Rp13399
(dp13400
g85
g1
(g86
g3
Ntp13401
Rp13402
(dp13403
g90
(dp13404
g1
(g92
g3
Ntp13405
Rp13406
(dp13407
g7
(dp13408
sg9
g1
(g3034
g3
Ntp13409
Rp13410
(dp13411
g3038
I4
sg14
g15
(g3039
tp13412
Rp13413
(dp13414
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp13415
sg65
S'falff_collect_transforms_1'
p13416
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp13417
sg79
Nsg80
Nsb(dp13418
sg1
(g92
g3
Ntp13419
Rp13420
(dp13421
g7
(dp13422
sg9
g1
(g97
g3
Ntp13423
Rp13424
(dp13425
g14
g15
(g53
tp13426
Rp13427
(dp13428
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp13429
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp13430
sg65
g13416
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp13431
sg79
Nsg80
Nsb(dp13432
sg1
(g92
g3
Ntp13433
Rp13434
(dp13435
g7
(dp13436
sg9
g1
(g97
g3
Ntp13437
Rp13438
(dp13439
g14
g15
(g53
tp13440
Rp13441
(dp13442
g28
g29
sg3084
g23
sbsg108
(lp13443
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13444
sg65
g13416
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13445
sg79
Nsg80
Nsb(dp13446
ssg157
(dp13447
sg159
(dp13448
g13406
(dp13449
g13434
(dp13450
g163
(lp13451
(g3094
g3084
tp13452
asssg13420
(dp13453
g13406
(dp13454
g163
(lp13455
(g3067
g3044
tp13456
a(g3066
g3045
tp13457
a(g3068
g3046
tp13458
a(g3065
g3047
tp13459
asssg13434
(dp13460
ssg174
g13448
sg175
(dp13461
g13406
(dp13462
g13420
g13454
ssg13420
(dp13463
sg13434
(dp13464
g13406
g13450
sssg180
g13448
sbsg43
g13416
sg65
g66
sg75
g13416
sg76
g181
((lp13465
(lp13466
g184
ag181
((lp13467
(lp13468
g187
ag184
aa(lp13469
g189
ag190
aa(lp13470
g192
ag193
aa(lp13471
g195
ag196
aa(lp13472
g198
ag199
aa(lp13473
g201
ag106
aa(lp13474
g203
ag204
aa(lp13475
g206
ag207
aatp13476
Rp13477
aa(lp13478
g211
ag181
((lp13479
(lp13480
g187
ag211
aa(lp13481
g215
ag216
aa(lp13482
g218
ag219
aa(lp13483
g221
ag222
aa(lp13484
g224
ag225
aa(lp13485
g227
ag228
aa(lp13486
g230
ag231
aa(lp13487
g233
ag234
aa(lp13488
g236
ag237
aa(lp13489
g239
ag240
aa(lp13490
g242
ag243
aa(lp13491
g245
ag246
aa(lp13492
g248
ag249
aa(lp13493
g251
ag252
aa(lp13494
g254
ag255
aa(lp13495
g257
ag258
aa(lp13496
g260
ag261
aa(lp13497
g263
ag264
aa(lp13498
g266
ag267
aatp13499
Rp13500
aa(lp13501
g271
ag181
((lp13502
(lp13503
g187
ag271
aa(lp13504
g275
ag276
aatp13505
Rp13506
aatp13507
Rp13508
sg80
Nsbtp13509
a(g11515
g1
(g81
g3
Ntp13510
Rp13511
(dp13512
g85
g1
(g86
g3
Ntp13513
Rp13514
(dp13515
g90
(dp13516
g1
(g92
g3
Ntp13517
Rp13518
(dp13519
g7
(dp13520
sg9
g1
(g97
g3
Ntp13521
Rp13522
(dp13523
g14
g15
(g53
tp13524
Rp13525
(dp13526
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp13527
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp13528
sg65
S'sca_roi_collect_transforms_0'
p13529
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp13530
sg79
Nsg80
Nsb(dp13531
sg1
(g92
g3
Ntp13532
Rp13533
(dp13534
g7
(dp13535
sg9
g1
(g3034
g3
Ntp13536
Rp13537
(dp13538
g3038
I4
sg14
g15
(g3039
tp13539
Rp13540
(dp13541
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp13542
sg65
g13529
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp13543
sg79
Nsg80
Nsb(dp13544
sg1
(g92
g3
Ntp13545
Rp13546
(dp13547
g7
(dp13548
sg9
g1
(g97
g3
Ntp13549
Rp13550
(dp13551
g14
g15
(g53
tp13552
Rp13553
(dp13554
g28
g29
sg3084
g23
sbsg108
(lp13555
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13556
sg65
g13529
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13557
sg79
Nsg80
Nsb(dp13558
ssg157
(dp13559
sg159
(dp13560
g13518
(dp13561
g13533
(dp13562
g163
(lp13563
(g3067
g3044
tp13564
a(g3066
g3045
tp13565
a(g3068
g3046
tp13566
a(g3065
g3047
tp13567
asssg13533
(dp13568
g13546
(dp13569
g163
(lp13570
(g3094
g3084
tp13571
asssg13546
(dp13572
ssg174
g13560
sg175
(dp13573
g13518
(dp13574
sg13533
(dp13575
g13518
g13562
ssg13546
(dp13576
g13533
g13569
sssg180
g13560
sbsg43
g13529
sg65
g66
sg75
g13529
sg76
g181
((lp13577
(lp13578
g184
ag181
((lp13579
(lp13580
g187
ag184
aa(lp13581
g189
ag190
aa(lp13582
g192
ag193
aa(lp13583
g195
ag196
aa(lp13584
g198
ag199
aa(lp13585
g201
ag106
aa(lp13586
g203
ag204
aa(lp13587
g206
ag207
aatp13588
Rp13589
aa(lp13590
g211
ag181
((lp13591
(lp13592
g187
ag211
aa(lp13593
g215
ag216
aa(lp13594
g218
ag219
aa(lp13595
g221
ag222
aa(lp13596
g224
ag225
aa(lp13597
g227
ag228
aa(lp13598
g230
ag231
aa(lp13599
g233
ag234
aa(lp13600
g236
ag237
aa(lp13601
g239
ag240
aa(lp13602
g242
ag243
aa(lp13603
g245
ag246
aa(lp13604
g248
ag249
aa(lp13605
g251
ag252
aa(lp13606
g254
ag255
aa(lp13607
g257
ag258
aa(lp13608
g260
ag261
aa(lp13609
g263
ag264
aa(lp13610
g266
ag267
aatp13611
Rp13612
aa(lp13613
g271
ag181
((lp13614
(lp13615
g187
ag271
aa(lp13616
g275
ag276
aatp13617
Rp13618
aatp13619
Rp13620
sg80
Nsbtp13621
a(g11515
g1
(g81
g3
Ntp13622
Rp13623
(dp13624
g85
g1
(g86
g3
Ntp13625
Rp13626
(dp13627
g90
(dp13628
g1
(g92
g3
Ntp13629
Rp13630
(dp13631
g7
(dp13632
sg9
g1
(g97
g3
Ntp13633
Rp13634
(dp13635
g14
g15
(g53
tp13636
Rp13637
(dp13638
g28
g29
sg3084
g23
sbsg108
(lp13639
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13640
sg65
S'dr_tempreg_maps_stack_collect_transforms_0'
p13641
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13642
sg79
Nsg80
Nsb(dp13643
sg1
(g92
g3
Ntp13644
Rp13645
(dp13646
g7
(dp13647
sg9
g1
(g97
g3
Ntp13648
Rp13649
(dp13650
g14
g15
(g53
tp13651
Rp13652
(dp13653
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp13654
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp13655
sg65
g13641
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp13656
sg79
Nsg80
Nsb(dp13657
sg1
(g92
g3
Ntp13658
Rp13659
(dp13660
g7
(dp13661
sg9
g1
(g3034
g3
Ntp13662
Rp13663
(dp13664
g3038
I4
sg14
g15
(g3039
tp13665
Rp13666
(dp13667
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp13668
sg65
g13641
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp13669
sg79
Nsg80
Nsb(dp13670
ssg157
(dp13671
sg159
(dp13672
g13630
(dp13673
sg13645
(dp13674
g13659
(dp13675
g163
(lp13676
(g3067
g3044
tp13677
a(g3066
g3045
tp13678
a(g3068
g3046
tp13679
a(g3065
g3047
tp13680
asssg13659
(dp13681
g13630
(dp13682
g163
(lp13683
(g3094
g3084
tp13684
assssg174
g13672
sg175
(dp13685
g13630
(dp13686
g13659
g13682
ssg13645
(dp13687
sg13659
(dp13688
g13645
g13675
sssg180
g13672
sbsg43
g13641
sg65
g66
sg75
g13641
sg76
g181
((lp13689
(lp13690
g184
ag181
((lp13691
(lp13692
g187
ag184
aa(lp13693
g189
ag190
aa(lp13694
g192
ag193
aa(lp13695
g195
ag196
aa(lp13696
g198
ag199
aa(lp13697
g201
ag106
aa(lp13698
g203
ag204
aa(lp13699
g206
ag207
aatp13700
Rp13701
aa(lp13702
g211
ag181
((lp13703
(lp13704
g187
ag211
aa(lp13705
g215
ag216
aa(lp13706
g218
ag219
aa(lp13707
g221
ag222
aa(lp13708
g224
ag225
aa(lp13709
g227
ag228
aa(lp13710
g230
ag231
aa(lp13711
g233
ag234
aa(lp13712
g236
ag237
aa(lp13713
g239
ag240
aa(lp13714
g242
ag243
aa(lp13715
g245
ag246
aa(lp13716
g248
ag249
aa(lp13717
g251
ag252
aa(lp13718
g254
ag255
aa(lp13719
g257
ag258
aa(lp13720
g260
ag261
aa(lp13721
g263
ag264
aa(lp13722
g266
ag267
aatp13723
Rp13724
aa(lp13725
g271
ag181
((lp13726
(lp13727
g187
ag271
aa(lp13728
g275
ag276
aatp13729
Rp13730
aatp13731
Rp13732
sg80
Nsbtp13733
a(g11515
g1
(g81
g3
Ntp13734
Rp13735
(dp13736
g85
g1
(g86
g3
Ntp13737
Rp13738
(dp13739
g90
(dp13740
g1
(g92
g3
Ntp13741
Rp13742
(dp13743
g7
(dp13744
sg9
g1
(g97
g3
Ntp13745
Rp13746
(dp13747
g14
g15
(g53
tp13748
Rp13749
(dp13750
g28
g29
sg3084
g23
sbsg108
(lp13751
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13752
sg65
S'alff_Z_collect_transforms_0'
p13753
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13754
sg79
Nsg80
Nsb(dp13755
sg1
(g92
g3
Ntp13756
Rp13757
(dp13758
g7
(dp13759
sg9
g1
(g97
g3
Ntp13760
Rp13761
(dp13762
g14
g15
(g53
tp13763
Rp13764
(dp13765
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp13766
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp13767
sg65
g13753
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp13768
sg79
Nsg80
Nsb(dp13769
sg1
(g92
g3
Ntp13770
Rp13771
(dp13772
g7
(dp13773
sg9
g1
(g3034
g3
Ntp13774
Rp13775
(dp13776
g3038
I4
sg14
g15
(g3039
tp13777
Rp13778
(dp13779
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp13780
sg65
g13753
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp13781
sg79
Nsg80
Nsb(dp13782
ssg157
(dp13783
sg159
(dp13784
g13742
(dp13785
sg13757
(dp13786
g13771
(dp13787
g163
(lp13788
(g3067
g3044
tp13789
a(g3066
g3045
tp13790
a(g3068
g3046
tp13791
a(g3065
g3047
tp13792
asssg13771
(dp13793
g13742
(dp13794
g163
(lp13795
(g3094
g3084
tp13796
assssg174
g13784
sg175
(dp13797
g13742
(dp13798
g13771
g13794
ssg13757
(dp13799
sg13771
(dp13800
g13757
g13787
sssg180
g13784
sbsg43
g13753
sg65
g66
sg75
g13753
sg76
g181
((lp13801
(lp13802
g184
ag181
((lp13803
(lp13804
g187
ag184
aa(lp13805
g189
ag190
aa(lp13806
g192
ag193
aa(lp13807
g195
ag196
aa(lp13808
g198
ag199
aa(lp13809
g201
ag106
aa(lp13810
g203
ag204
aa(lp13811
g206
ag207
aatp13812
Rp13813
aa(lp13814
g211
ag181
((lp13815
(lp13816
g187
ag211
aa(lp13817
g215
ag216
aa(lp13818
g218
ag219
aa(lp13819
g221
ag222
aa(lp13820
g224
ag225
aa(lp13821
g227
ag228
aa(lp13822
g230
ag231
aa(lp13823
g233
ag234
aa(lp13824
g236
ag237
aa(lp13825
g239
ag240
aa(lp13826
g242
ag243
aa(lp13827
g245
ag246
aa(lp13828
g248
ag249
aa(lp13829
g251
ag252
aa(lp13830
g254
ag255
aa(lp13831
g257
ag258
aa(lp13832
g260
ag261
aa(lp13833
g263
ag264
aa(lp13834
g266
ag267
aatp13835
Rp13836
aa(lp13837
g271
ag181
((lp13838
(lp13839
g187
ag271
aa(lp13840
g275
ag276
aatp13841
Rp13842
aatp13843
Rp13844
sg80
Nsbtp13845
a(g11515
g1
(g81
g3
Ntp13846
Rp13847
(dp13848
g85
g1
(g86
g3
Ntp13849
Rp13850
(dp13851
g90
(dp13852
g1
(g92
g3
Ntp13853
Rp13854
(dp13855
g7
(dp13856
sg9
g1
(cnipype.interfaces.fsl.preprocess
FAST
p13857
g3
Ntp13858
Rp13859
(dp13860
g14
g15
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p13861
tp13862
Rp13863
(dp13864
S'number_classes'
p13865
g23
sS'out_basename'
p13866
S'segment'
p13867
sS'hyper'
p13868
g23
sg1904
g23
sS'init_seg_smooth'
p13869
g23
sS'init_transform'
p13870
g23
sS'no_pve'
p13871
g23
sS'output_biascorrected'
p13872
g23
sS'mixel_smooth'
p13873
g23
sS'segments'
p13874
I01
sS'iters_afterbias'
p13875
g23
sS'bias_lowpass'
p13876
g23
sS'other_priors'
p13877
g23
sg28
g29
sg20
I00
sS'img_type'
p13878
I1
sg26
g23
sS'probability_maps'
p13879
I01
sS'manual_seg'
p13880
g23
sg30
g31
sS'output_biasfield'
p13881
g23
sS'no_bias'
p13882
g23
sS'use_priors'
p13883
g23
sg2036
g23
sS'segment_iters'
p13884
g23
sg32
g1
(g33
g34
(dp13885
g36
g37
stp13886
Rp13887
(dp13888
g41
S'environ_items'
p13889
sg43
g32
sbsg45
g37
sS'bias_iters'
p13890
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g13867
sg63
(dp13891
sg65
S'seg_preproc_0'
p13892
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g13867
sg76
Nsg77
(lp13893
sg79
Nsg80
Nsb(dp13894
sg1
(g92
g3
Ntp13895
Rp13896
(dp13897
g7
(dp13898
sg9
g1
(g97
g3
Ntp13899
Rp13900
(dp13901
g14
g15
(g53
tp13902
Rp13903
(dp13904
g28
g29
sg12122
(lp13905
F0.98
asbsg108
(lp13906
g12122
asg110
I01
sbsg51
Nsg43
g12122
sg63
(dp13907
sg65
g13892
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g12122
(lp13908
F0.98
atp13909
sg74
I00
sg75
g12122
sg76
Nsg77
(lp13910
sg79
Nsg80
Nsb(dp13911
sg1
(g81
g3
Ntp13912
Rp13913
(dp13914
g85
g1
(g86
g3
Ntp13915
Rp13916
(dp13917
g90
(dp13918
g1
(g92
g3
Ntp13919
Rp13920
(dp13921
g7
(dp13922
sg9
g1
(g3034
g3
Ntp13923
Rp13924
(dp13925
g3038
I2
sg14
g15
(g3039
tp13926
Rp13927
(dp13928
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3048
g3049
sbsbsg51
Nsg43
S'GM_collect_linear_transforms'
p13929
sg63
(dp13930
sg65
S'GM'
p13931
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g13929
sg76
Nsg77
(lp13932
sg79
Nsg80
Nsb(dp13933
sg1
(g92
g3
Ntp13934
Rp13935
(dp13936
g7
(dp13937
sg9
g1
(g10
g3
Ntp13938
Rp13939
(dp13940
g14
g15
(g16
tp13941
Rp13942
(dp13943
g20
I00
sg21
g23
sg24
S'-mas %s '
p13944
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp13945
g36
g37
stp13946
Rp13947
(dp13948
g41
S'environ_items'
p13949
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'GM_mask'
p13950
sg63
(dp13951
sg65
g13931
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g13950
sg76
Nsg77
(lp13952
sg79
Nsg80
Nsb(dp13953
sg1
(g92
g3
Ntp13954
Rp13955
(dp13956
g7
(dp13957
sg9
g1
(g97
g3
Ntp13958
Rp13959
(dp13960
g14
g15
(g53
tp13961
Rp13962
(dp13963
g28
g29
sS'segment_combo'
p13964
g23
sS'segment_mask'
p13965
g23
sS'tissueprior_mni2t1'
p13966
g23
sS'segment_bin'
p13967
g23
sbsg108
(lp13968
g13966
ag13964
ag13967
ag13965
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp13969
sg65
g13931
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp13970
sg79
Nsg80
Nsb(dp13971
sg1
(g92
g3
Ntp13972
Rp13973
(dp13974
g7
(dp13975
sg9
g1
(g10
g3
Ntp13976
Rp13977
(dp13978
g14
g15
(g16
tp13979
Rp13980
(dp13981
g20
I00
sg21
g23
sg24
g13944
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp13982
g36
g37
stp13983
Rp13984
(dp13985
g41
S'environ_items'
p13986
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'overlap_GM_map_with_prior'
p13987
sg63
(dp13988
sg65
g13931
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g13987
sg76
Nsg77
(lp13989
sg79
Nsg80
Nsb(dp13990
sg1
(g92
g3
Ntp13991
Rp13992
(dp13993
g7
(dp13994
sg9
g1
(g1980
g3
Ntp13995
Rp13996
(dp13997
g14
g15
(g1984
tp13998
Rp13999
(dp14000
g20
I00
sg28
g29
sg24
g23
sg1989
g23
sg25
g23
sg26
g23
sg1991
g23
sg30
g31
sg32
g1
(g33
g34
(dp14001
g36
g37
stp14002
Rp14003
(dp14004
g41
S'environ_items'
p14005
sg43
g32
sbsg44
g23
sg45
g37
sg1997
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'binarize_threshold_GM'
p14006
sg63
(dp14007
sg65
g13931
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14006
sg76
Nsg77
(lp14008
sg79
Nsg80
Nsb(dp14009
sg1
(g92
g3
Ntp14010
Rp14011
(dp14012
g7
(dp14013
sg9
g1
(g3632
g3
Ntp14014
Rp14015
(dp14016
g14
g15
(g3636
tp14017
Rp14018
(dp14019
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g12166
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp14020
tp14021
Rp14022
(dp14023
g41
S'environ_items'
p14024
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g1
(g3303
g3304
(lp14025
I01
aI01
atp14026
Rp14027
(dp14028
g41
S'invert_transform_flags_items'
p14029
sg43
g3650
sbsg3344
g12177
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
S'GM_prior_mni_to_t1'
p14030
sg63
(dp14031
sg65
g13931
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14030
sg76
Nsg77
(lp14032
sg79
Nsg80
Nsb(dp14033
sg1
(g92
g3
Ntp14034
Rp14035
(dp14036
g7
(dp14037
sg9
g1
(g97
g3
Ntp14038
Rp14039
(dp14040
g14
g15
(g53
tp14041
Rp14042
(dp14043
S'standard2highres_rig'
p14044
g23
sg28
g29
sS'tissue_prior'
p14045
g23
sS'standard2highres_mat'
p14046
g23
sg3192
g23
sS'probability_map'
p14047
g23
sg7273
g23
sbsg108
(lp14048
g14045
ag7273
ag3192
ag14047
ag14046
ag14044
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp14049
sg65
g13931
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp14050
sg79
Nsg80
Nsb(dp14051
ssg157
(dp14052
sg159
(dp14053
g13920
(dp14054
g14011
(dp14055
g163
(lp14056
(g3094
g3320
tp14057
asssg13935
(dp14058
g13955
(dp14059
g163
(lp14060
(g25
g13965
tp14061
asssg13955
(dp14062
sg13973
(dp14063
g13992
(dp14064
g163
(lp14065
(g25
g44
tp14066
assg13955
(dp14067
g163
(lp14068
(g25
g13964
tp14069
asssg13992
(dp14070
g13955
(dp14071
g163
(lp14072
(g25
g13967
tp14073
assg13935
(dp14074
g163
(lp14075
(g25
g44
tp14076
asssg14011
(dp14077
g13955
(dp14078
g163
(lp14079
(g3640
g13966
tp14080
assg13973
(dp14081
g163
(lp14082
(g3640
g47
tp14083
assg13935
(dp14084
g163
(lp14085
(g3640
g47
tp14086
asssg14035
(dp14087
g13920
(dp14088
g163
(lp14089
(g14044
g3044
tp14090
a(g14046
g3045
tp14091
assg14011
(dp14092
g163
(lp14093
(g14045
g3622
tp14094
a(g3192
g3621
tp14095
assg13992
(dp14096
g163
(lp14097
((g7273
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p14098
(ttp14099
g24
tp14100
assg13973
(dp14101
g163
(lp14102
(g14047
g44
tp14103
assssg174
g14053
sg175
(dp14104
g13920
(dp14105
g14035
g14088
ssg13935
(dp14106
g13992
g14074
sg14011
g14084
ssg13955
(dp14107
g13992
g14071
sg13935
g14059
sg14011
g14078
sg13973
g14067
ssg13973
(dp14108
g14035
g14101
sg14011
g14081
ssg13992
(dp14109
g13973
g14064
sg14035
g14096
ssg14011
(dp14110
g13920
g14055
sg14035
g14092
ssg14035
(dp14111
ssg180
g14053
sbsg43
g13931
sg65
g13892
sg75
g13931
sg76
g181
((lp14112
(lp14113
g184
ag181
((lp14114
(lp14115
g187
ag184
aa(lp14116
g189
ag190
aa(lp14117
g192
ag193
aa(lp14118
g195
ag196
aa(lp14119
g198
ag199
aa(lp14120
g201
ag106
aa(lp14121
g203
ag204
aa(lp14122
g206
ag207
aatp14123
Rp14124
aa(lp14125
g211
ag181
((lp14126
(lp14127
g187
ag211
aa(lp14128
g215
ag216
aa(lp14129
g218
ag219
aa(lp14130
g221
ag222
aa(lp14131
g224
ag225
aa(lp14132
g227
ag228
aa(lp14133
g230
ag231
aa(lp14134
g233
ag234
aa(lp14135
g236
ag237
aa(lp14136
g239
ag240
aa(lp14137
g242
ag243
aa(lp14138
g245
ag246
aa(lp14139
g248
ag249
aa(lp14140
g251
ag252
aa(lp14141
g254
ag255
aa(lp14142
g257
ag258
aa(lp14143
g260
ag261
aa(lp14144
g263
ag264
aa(lp14145
g266
ag267
aatp14146
Rp14147
aa(lp14148
g271
ag181
((lp14149
(lp14150
g187
ag271
aa(lp14151
g275
ag276
aatp14152
Rp14153
aatp14154
Rp14155
sg80
Nsb(dp14156
sg1
(g81
g3
Ntp14157
Rp14158
(dp14159
g85
g1
(g86
g3
Ntp14160
Rp14161
(dp14162
g90
(dp14163
g1
(g92
g3
Ntp14164
Rp14165
(dp14166
g7
(dp14167
sg9
g1
(g1980
g3
Ntp14168
Rp14169
(dp14170
g14
g15
(g1984
tp14171
Rp14172
(dp14173
g20
I00
sg28
g29
sg24
g23
sg1989
g23
sg25
g23
sg26
g23
sg1991
g23
sg30
g31
sg32
g1
(g33
g34
(dp14174
g36
g37
stp14175
Rp14176
(dp14177
g41
S'environ_items'
p14178
sg43
g32
sbsg44
g23
sg45
g37
sg1997
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'binarize_threshold_WM'
p14179
sg63
(dp14180
sg65
S'WM'
p14181
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14179
sg76
Nsg77
(lp14182
sg79
Nsg80
Nsb(dp14183
sg1
(g92
g3
Ntp14184
Rp14185
(dp14186
g7
(dp14187
sg9
g1
(g3632
g3
Ntp14188
Rp14189
(dp14190
g14
g15
(g3636
tp14191
Rp14192
(dp14193
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g12166
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp14194
tp14195
Rp14196
(dp14197
g41
S'environ_items'
p14198
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g1
(g3303
g3304
(lp14199
I01
aI01
atp14200
Rp14201
(dp14202
g41
S'invert_transform_flags_items'
p14203
sg43
g3650
sbsg3344
g12177
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
S'WM_prior_mni_to_t1'
p14204
sg63
(dp14205
sg65
g14181
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14204
sg76
Nsg77
(lp14206
sg79
Nsg80
Nsb(dp14207
sg1
(g92
g3
Ntp14208
Rp14209
(dp14210
g7
(dp14211
sg9
g1
(g10
g3
Ntp14212
Rp14213
(dp14214
g14
g15
(g16
tp14215
Rp14216
(dp14217
g20
I00
sg21
g23
sg24
g13944
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp14218
g36
g37
stp14219
Rp14220
(dp14221
g41
S'environ_items'
p14222
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'WM_mask'
p14223
sg63
(dp14224
sg65
g14181
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14223
sg76
Nsg77
(lp14225
sg79
Nsg80
Nsb(dp14226
sg1
(g92
g3
Ntp14227
Rp14228
(dp14229
g7
(dp14230
sg9
g1
(g97
g3
Ntp14231
Rp14232
(dp14233
g14
g15
(g53
tp14234
Rp14235
(dp14236
g28
g29
sg13964
g23
sg13965
g23
sg13966
g23
sg13967
g23
sbsg108
(lp14237
g13966
ag13964
ag13967
ag13965
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp14238
sg65
g14181
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp14239
sg79
Nsg80
Nsb(dp14240
sg1
(g92
g3
Ntp14241
Rp14242
(dp14243
g7
(dp14244
sg9
g1
(g10
g3
Ntp14245
Rp14246
(dp14247
g14
g15
(g16
tp14248
Rp14249
(dp14250
g20
I00
sg21
g23
sg24
g13944
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp14251
g36
g37
stp14252
Rp14253
(dp14254
g41
S'environ_items'
p14255
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'overlap_WM_map_with_prior'
p14256
sg63
(dp14257
sg65
g14181
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14256
sg76
Nsg77
(lp14258
sg79
Nsg80
Nsb(dp14259
sg1
(g92
g3
Ntp14260
Rp14261
(dp14262
g7
(dp14263
sg9
g1
(g97
g3
Ntp14264
Rp14265
(dp14266
g14
g15
(g53
tp14267
Rp14268
(dp14269
g14044
g23
sg28
g29
sg14045
g23
sg14046
g23
sg3192
g23
sg14047
g23
sg7273
g23
sbsg108
(lp14270
g14045
ag7273
ag3192
ag14047
ag14046
ag14044
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp14271
sg65
g14181
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp14272
sg79
Nsg80
Nsb(dp14273
sg1
(g92
g3
Ntp14274
Rp14275
(dp14276
g7
(dp14277
sg9
g1
(g3034
g3
Ntp14278
Rp14279
(dp14280
g3038
I2
sg14
g15
(g3039
tp14281
Rp14282
(dp14283
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3048
g3049
sbsbsg51
Nsg43
S'WM_collect_linear_transforms'
p14284
sg63
(dp14285
sg65
g14181
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14284
sg76
Nsg77
(lp14286
sg79
Nsg80
Nsb(dp14287
ssg157
(dp14288
sg159
(dp14289
g14165
(dp14290
g14209
(dp14291
g163
(lp14292
(g25
g44
tp14293
assg14228
(dp14294
g163
(lp14295
(g25
g13967
tp14296
asssg14185
(dp14297
g14228
(dp14298
g163
(lp14299
(g3640
g13966
tp14300
assg14242
(dp14301
g163
(lp14302
(g3640
g47
tp14303
assg14209
(dp14304
g163
(lp14305
(g3640
g47
tp14306
asssg14209
(dp14307
g14228
(dp14308
g163
(lp14309
(g25
g13965
tp14310
asssg14228
(dp14311
sg14242
(dp14312
g14165
(dp14313
g163
(lp14314
(g25
g44
tp14315
assg14228
(dp14316
g163
(lp14317
(g25
g13964
tp14318
asssg14261
(dp14319
g14165
(dp14320
g163
(lp14321
((g7273
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p14322
(ttp14323
g24
tp14324
assg14242
(dp14325
g163
(lp14326
(g14047
g44
tp14327
assg14185
(dp14328
g163
(lp14329
(g14045
g3622
tp14330
a(g3192
g3621
tp14331
assg14275
(dp14332
g163
(lp14333
(g14044
g3044
tp14334
a(g14046
g3045
tp14335
asssg14275
(dp14336
g14185
(dp14337
g163
(lp14338
(g3094
g3320
tp14339
assssg174
g14289
sg175
(dp14340
g14165
(dp14341
g14261
g14320
sg14242
g14313
ssg14185
(dp14342
g14261
g14328
sg14275
g14337
ssg14209
(dp14343
g14165
g14291
sg14185
g14304
ssg14228
(dp14344
g14165
g14294
sg14185
g14298
sg14209
g14308
sg14242
g14316
ssg14242
(dp14345
g14261
g14325
sg14185
g14301
ssg14261
(dp14346
sg14275
(dp14347
g14261
g14332
sssg180
g14289
sbsg43
g14181
sg65
g13892
sg75
g14181
sg76
g181
((lp14348
(lp14349
g184
ag181
((lp14350
(lp14351
g187
ag184
aa(lp14352
g189
ag190
aa(lp14353
g192
ag193
aa(lp14354
g195
ag196
aa(lp14355
g198
ag199
aa(lp14356
g201
ag106
aa(lp14357
g203
ag204
aa(lp14358
g206
ag207
aatp14359
Rp14360
aa(lp14361
g211
ag181
((lp14362
(lp14363
g187
ag211
aa(lp14364
g215
ag216
aa(lp14365
g218
ag219
aa(lp14366
g221
ag222
aa(lp14367
g224
ag225
aa(lp14368
g227
ag228
aa(lp14369
g230
ag231
aa(lp14370
g233
ag234
aa(lp14371
g236
ag237
aa(lp14372
g239
ag240
aa(lp14373
g242
ag243
aa(lp14374
g245
ag246
aa(lp14375
g248
ag249
aa(lp14376
g251
ag252
aa(lp14377
g254
ag255
aa(lp14378
g257
ag258
aa(lp14379
g260
ag261
aa(lp14380
g263
ag264
aa(lp14381
g266
ag267
aatp14382
Rp14383
aa(lp14384
g271
ag181
((lp14385
(lp14386
g187
ag271
aa(lp14387
g275
ag276
aatp14388
Rp14389
aatp14390
Rp14391
sg80
Nsb(dp14392
sg1
(g92
g3
Ntp14393
Rp14394
(dp14395
g7
(dp14396
sg9
g1
(g97
g3
Ntp14397
Rp14398
(dp14399
g14
g15
(g53
tp14400
Rp14401
(dp14402
S'partial_volume_files'
p14403
g23
sg28
g29
sS'gm_combo'
p14404
g23
sS'mixeltype'
p14405
g23
sS'csf_mni2t1'
p14406
g23
sS'wm_bin'
p14407
g23
sS'csf_bin'
p14408
g23
sg13879
g23
sS'wm_mni2t1'
p14409
g23
sS'csf_combo'
p14410
g23
sS'wm_combo'
p14411
g23
sg12100
g23
sg12097
g23
sg12104
g23
sS'gm_bin'
p14412
g23
sS'partial_volume_map'
p14413
g23
sS'gm_mni2t1'
p14414
g23
sbsg108
(lp14415
g14406
ag14410
ag14408
ag12104
ag14414
ag14404
ag14412
ag12097
ag14409
ag14411
ag14407
ag13879
ag14405
ag14413
ag14403
ag12100
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp14416
sg65
g13892
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp14417
sg79
Nsg80
Nsb(dp14418
sg1
(g92
g3
Ntp14419
Rp14420
(dp14421
g7
(dp14422
sg9
g1
(g97
g3
Ntp14423
Rp14424
(dp14425
g14
g15
(g53
tp14426
Rp14427
(dp14428
g28
g29
sg12121
(lp14429
F0.98
asbsg108
(lp14430
g12121
asg110
I01
sbsg51
Nsg43
g12121
sg63
(dp14431
sg65
g13892
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g12121
(lp14432
F0.98
atp14433
sg74
I00
sg75
g12121
sg76
Nsg77
(lp14434
sg79
Nsg80
Nsb(dp14435
sg1
(g92
g3
Ntp14436
Rp14437
(dp14438
g7
(dp14439
sg9
g1
(g97
g3
Ntp14440
Rp14441
(dp14442
g14
g15
(g53
tp14443
Rp14444
(dp14445
g14044
g23
sg28
g29
sg3192
g23
sS'PRIOR_GRAY'
p14446
S'/usr/share/fsl/5.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p14447
sg14046
g23
sS'PRIOR_CSF'
p14448
S'/usr/share/fsl/5.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p14449
sS'PRIOR_WHITE'
p14450
S'/usr/share/fsl/5.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p14451
sbsg108
(lp14452
g3192
ag14046
ag14044
ag14448
ag14446
ag14450
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp14453
sg65
g13892
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp14454
sg79
Nsg80
Nsb(dp14455
sg1
(g92
g3
Ntp14456
Rp14457
(dp14458
g7
(dp14459
sg9
g1
(g97
g3
Ntp14460
Rp14461
(dp14462
g14
g15
(g53
tp14463
Rp14464
(dp14465
g28
g29
sg12123
(lp14466
F0.7
asbsg108
(lp14467
g12123
asg110
I01
sbsg51
Nsg43
g12123
sg63
(dp14468
sg65
g13892
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g12123
(lp14469
F0.7
atp14470
sg74
I00
sg75
g12123
sg76
Nsg77
(lp14471
sg79
Nsg80
Nsb(dp14472
sg1
(g81
g3
Ntp14473
Rp14474
(dp14475
g85
g1
(g86
g3
Ntp14476
Rp14477
(dp14478
g90
(dp14479
g1
(g92
g3
Ntp14480
Rp14481
(dp14482
g7
(dp14483
sg9
g1
(g97
g3
Ntp14484
Rp14485
(dp14486
g14
g15
(g53
tp14487
Rp14488
(dp14489
g14044
g23
sg28
g29
sg14045
g23
sg14046
g23
sg3192
g23
sg14047
g23
sg7273
g23
sbsg108
(lp14490
g14045
ag7273
ag3192
ag14047
ag14046
ag14044
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp14491
sg65
S'CSF'
p14492
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp14493
sg79
Nsg80
Nsb(dp14494
sg1
(g92
g3
Ntp14495
Rp14496
(dp14497
g7
(dp14498
sg9
g1
(g3034
g3
Ntp14499
Rp14500
(dp14501
g3038
I2
sg14
g15
(g3039
tp14502
Rp14503
(dp14504
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3048
g3049
sbsbsg51
Nsg43
S'CSF_collect_linear_transforms'
p14505
sg63
(dp14506
sg65
g14492
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14505
sg76
Nsg77
(lp14507
sg79
Nsg80
Nsb(dp14508
sg1
(g92
g3
Ntp14509
Rp14510
(dp14511
g7
(dp14512
sg9
g1
(g3632
g3
Ntp14513
Rp14514
(dp14515
g14
g15
(g3636
tp14516
Rp14517
(dp14518
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g12166
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp14519
tp14520
Rp14521
(dp14522
g41
S'environ_items'
p14523
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g1
(g3303
g3304
(lp14524
I01
aI01
atp14525
Rp14526
(dp14527
g41
S'invert_transform_flags_items'
p14528
sg43
g3650
sbsg3344
g12177
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
S'CSF_prior_mni_to_t1'
p14529
sg63
(dp14530
sg65
g14492
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14529
sg76
Nsg77
(lp14531
sg79
Nsg80
Nsb(dp14532
sg1
(g92
g3
Ntp14533
Rp14534
(dp14535
g7
(dp14536
sg9
g1
(g97
g3
Ntp14537
Rp14538
(dp14539
g14
g15
(g53
tp14540
Rp14541
(dp14542
g28
g29
sg13964
g23
sg13965
g23
sg13966
g23
sg13967
g23
sbsg108
(lp14543
g13966
ag13964
ag13967
ag13965
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp14544
sg65
g14492
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp14545
sg79
Nsg80
Nsb(dp14546
sg1
(g92
g3
Ntp14547
Rp14548
(dp14549
g7
(dp14550
sg9
g1
(g10
g3
Ntp14551
Rp14552
(dp14553
g14
g15
(g16
tp14554
Rp14555
(dp14556
g20
I00
sg21
g23
sg24
g13944
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp14557
g36
g37
stp14558
Rp14559
(dp14560
g41
S'environ_items'
p14561
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'CSF_mask'
p14562
sg63
(dp14563
sg65
g14492
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14562
sg76
Nsg77
(lp14564
sg79
Nsg80
Nsb(dp14565
sg1
(g92
g3
Ntp14566
Rp14567
(dp14568
g7
(dp14569
sg9
g1
(g1980
g3
Ntp14570
Rp14571
(dp14572
g14
g15
(g1984
tp14573
Rp14574
(dp14575
g20
I00
sg28
g29
sg24
g23
sg1989
g23
sg25
g23
sg26
g23
sg1991
g23
sg30
g31
sg32
g1
(g33
g34
(dp14576
g36
g37
stp14577
Rp14578
(dp14579
g41
S'environ_items'
p14580
sg43
g32
sbsg44
g23
sg45
g37
sg1997
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'binarize_threshold_CSF'
p14581
sg63
(dp14582
sg65
g14492
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14581
sg76
Nsg77
(lp14583
sg79
Nsg80
Nsb(dp14584
sg1
(g92
g3
Ntp14585
Rp14586
(dp14587
g7
(dp14588
sg9
g1
(g10
g3
Ntp14589
Rp14590
(dp14591
g14
g15
(g16
tp14592
Rp14593
(dp14594
g20
I00
sg21
g23
sg24
g13944
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp14595
g36
g37
stp14596
Rp14597
(dp14598
g41
S'environ_items'
p14599
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'overlap_CSF_map_with_prior'
p14600
sg63
(dp14601
sg65
g14492
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g14600
sg76
Nsg77
(lp14602
sg79
Nsg80
Nsb(dp14603
ssg157
(dp14604
sg159
(dp14605
g14481
(dp14606
g14510
(dp14607
g163
(lp14608
(g14045
g3622
tp14609
a(g3192
g3621
tp14610
assg14586
(dp14611
g163
(lp14612
(g14047
g44
tp14613
assg14567
(dp14614
g163
(lp14615
((g7273
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p14616
(ttp14617
g24
tp14618
assg14496
(dp14619
g163
(lp14620
(g14044
g3044
tp14621
a(g14046
g3045
tp14622
asssg14496
(dp14623
g14510
(dp14624
g163
(lp14625
(g3094
g3320
tp14626
asssg14510
(dp14627
g14534
(dp14628
g163
(lp14629
(g3640
g13966
tp14630
assg14586
(dp14631
g163
(lp14632
(g3640
g47
tp14633
assg14548
(dp14634
g163
(lp14635
(g3640
g47
tp14636
asssg14534
(dp14637
sg14548
(dp14638
g14534
(dp14639
g163
(lp14640
(g25
g13965
tp14641
asssg14567
(dp14642
g14534
(dp14643
g163
(lp14644
(g25
g13967
tp14645
assg14548
(dp14646
g163
(lp14647
(g25
g44
tp14648
asssg14586
(dp14649
g14567
(dp14650
g163
(lp14651
(g25
g44
tp14652
assg14534
(dp14653
g163
(lp14654
(g25
g13964
tp14655
assssg174
g14605
sg175
(dp14656
g14481
(dp14657
sg14496
(dp14658
g14481
g14619
ssg14510
(dp14659
g14481
g14607
sg14496
g14624
ssg14534
(dp14660
g14510
g14628
sg14586
g14653
sg14548
g14639
sg14567
g14643
ssg14548
(dp14661
g14567
g14646
sg14510
g14634
ssg14567
(dp14662
g14481
g14614
sg14586
g14650
ssg14586
(dp14663
g14481
g14611
sg14510
g14631
sssg180
g14605
sbsg43
g14492
sg65
g13892
sg75
g14492
sg76
g181
((lp14664
(lp14665
g184
ag181
((lp14666
(lp14667
g187
ag184
aa(lp14668
g189
ag190
aa(lp14669
g192
ag193
aa(lp14670
g195
ag196
aa(lp14671
g198
ag199
aa(lp14672
g201
ag106
aa(lp14673
g203
ag204
aa(lp14674
g206
ag207
aatp14675
Rp14676
aa(lp14677
g211
ag181
((lp14678
(lp14679
g187
ag211
aa(lp14680
g215
ag216
aa(lp14681
g218
ag219
aa(lp14682
g221
ag222
aa(lp14683
g224
ag225
aa(lp14684
g227
ag228
aa(lp14685
g230
ag231
aa(lp14686
g233
ag234
aa(lp14687
g236
ag237
aa(lp14688
g239
ag240
aa(lp14689
g242
ag243
aa(lp14690
g245
ag246
aa(lp14691
g248
ag249
aa(lp14692
g251
ag252
aa(lp14693
g254
ag255
aa(lp14694
g257
ag258
aa(lp14695
g260
ag261
aa(lp14696
g263
ag264
aa(lp14697
g266
ag267
aatp14698
Rp14699
aa(lp14700
g271
ag181
((lp14701
(lp14702
g187
ag271
aa(lp14703
g275
ag276
aatp14704
Rp14705
aatp14706
Rp14707
sg80
Nsb(dp14708
ssg157
(dp14709
sg159
(dp14710
g13854
(dp14711
g14394
(dp14712
g163
(lp14713
(g13879
g13879
tp14714
a(g14405
g14405
tp14715
a(g14403
g14403
tp14716
a(g14413
g14413
tp14717
assg13913
(dp14718
g163
(lp14719
((g13879
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p14720
(ttp14721
S'inputspec.probability_map'
p14722
tp14723
assg14474
(dp14724
g163
(lp14725
((g13879
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p14726
(ttp14727
g14722
tp14728
assg14158
(dp14729
g163
(lp14730
((g13879
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p14731
(ttp14732
g14722
tp14733
asssg13896
(dp14734
g14474
(dp14735
g163
(lp14736
(g12122
S'inputspec.threshold'
p14737
tp14738
asssg13913
(dp14739
g14394
(dp14740
g163
(lp14741
(S'outputspec.tissueprior_mni2t1'
p14742
g14414
tp14743
a(S'outputspec.segment_combo'
p14744
g14404
tp14745
a(S'outputspec.segment_bin'
p14746
g14412
tp14747
a(S'outputspec.segment_mask'
p14748
g12097
tp14749
asssg14158
(dp14750
g14394
(dp14751
g163
(lp14752
(g14742
g14409
tp14753
a(g14744
g14411
tp14754
a(g14746
g14407
tp14755
a(g14748
g12100
tp14756
asssg14394
(dp14757
sg14420
(dp14758
g14158
(dp14759
g163
(lp14760
(g12121
g14737
tp14761
asssg14437
(dp14762
g13854
(dp14763
g163
(lp14764
(g3192
g2036
tp14765
assg13913
(dp14766
g163
(lp14767
(g14044
S'inputspec.standard2highres_rig'
p14768
tp14769
a(g3192
S'inputspec.brain'
p14770
tp14771
a(g14446
S'inputspec.tissue_prior'
p14772
tp14773
a(g14046
S'inputspec.standard2highres_mat'
p14774
tp14775
assg14474
(dp14776
g163
(lp14777
(g14044
g14768
tp14778
a(g3192
g14770
tp14779
a(g14448
g14772
tp14780
a(g14046
g14774
tp14781
assg14158
(dp14782
g163
(lp14783
(g14044
g14768
tp14784
a(g3192
g14770
tp14785
a(g14450
g14772
tp14786
a(g14046
g14774
tp14787
asssg14457
(dp14788
g13913
(dp14789
g163
(lp14790
(g12123
g14737
tp14791
asssg14474
(dp14792
g14394
(dp14793
g163
(lp14794
(g14742
g14406
tp14795
a(g14744
g14410
tp14796
a(g14746
g14408
tp14797
a(g14748
g12104
tp14798
assssg174
g14710
sg175
(dp14799
g13854
(dp14800
g14437
g14763
ssg13896
(dp14801
sg13913
(dp14802
g14437
g14766
sg14457
g14789
sg13854
g14718
ssg14158
(dp14803
g14437
g14782
sg14420
g14759
sg13854
g14729
ssg14394
(dp14804
g13854
g14712
sg13913
g14740
sg14474
g14793
sg14158
g14751
ssg14420
(dp14805
sg14437
(dp14806
sg14457
(dp14807
sg14474
(dp14808
g14437
g14776
sg13896
g14735
sg13854
g14724
sssg180
g14710
sbsg43
g13892
sg65
g66
sg75
g13892
sg76
g181
((lp14809
(lp14810
g184
ag181
((lp14811
(lp14812
g187
ag184
aa(lp14813
g189
ag190
aa(lp14814
g192
ag193
aa(lp14815
g195
ag196
aa(lp14816
g198
ag199
aa(lp14817
g201
ag106
aa(lp14818
g203
ag204
aa(lp14819
g206
ag207
aatp14820
Rp14821
aa(lp14822
g211
ag181
((lp14823
(lp14824
g187
ag211
aa(lp14825
g215
ag216
aa(lp14826
g218
ag219
aa(lp14827
g221
ag222
aa(lp14828
g224
ag225
aa(lp14829
g227
ag228
aa(lp14830
g230
ag231
aa(lp14831
g233
ag234
aa(lp14832
g236
ag237
aa(lp14833
g239
ag240
aa(lp14834
g242
ag243
aa(lp14835
g245
ag246
aa(lp14836
g248
ag249
aa(lp14837
g251
ag252
aa(lp14838
g254
ag255
aa(lp14839
g257
ag258
aa(lp14840
g260
ag261
aa(lp14841
g263
ag264
aa(lp14842
g266
ag267
aatp14843
Rp14844
aa(lp14845
g271
ag181
((lp14846
(lp14847
g187
ag271
aa(lp14848
g275
ag276
aatp14849
Rp14850
aatp14851
Rp14852
sg80
Nsbtp14853
a(g11515
g1
(g81
g3
Ntp14854
Rp14855
(dp14856
g85
g1
(g86
g3
Ntp14857
Rp14858
(dp14859
g90
(dp14860
g1
(g92
g3
Ntp14861
Rp14862
(dp14863
g7
(dp14864
sg9
g1
(g97
g3
Ntp14865
Rp14866
(dp14867
g14
g15
(g53
tp14868
Rp14869
(dp14870
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp14871
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp14872
sg65
S'sca_seed_Z_collect_transforms_1'
p14873
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp14874
sg79
Nsg80
Nsb(dp14875
sg1
(g2
g3
Ntp14876
Rp14877
(dp14878
g7
(dp14879
sg9
g1
(g3034
g3
Ntp14880
Rp14881
(dp14882
g3038
I4
sg14
g15
(g3039
tp14883
Rp14884
(dp14885
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg52
g15
(g53
tp14886
Rp14887
(dp14888
g20
I00
sg28
g29
sg3047
g23
sg3044
g23
sg3045
g23
sg3046
g23
sg3043
I00
sg3048
g3049
sbsg43
g12538
sg63
(dp14889
sg65
g14873
sg67
(lp14890
g3047
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12538
sg76
Nsg77
(lp14891
sg79
Nsg80
Nsb(dp14892
sg1
(g92
g3
Ntp14893
Rp14894
(dp14895
g7
(dp14896
sg9
g1
(g97
g3
Ntp14897
Rp14898
(dp14899
g14
g15
(g53
tp14900
Rp14901
(dp14902
g28
g29
sg3084
g23
sbsg108
(lp14903
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp14904
sg65
g14873
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp14905
sg79
Nsg80
Nsb(dp14906
ssg157
(dp14907
sg159
(dp14908
g14862
(dp14909
g14877
(dp14910
g163
(lp14911
(g3067
g3044
tp14912
a(g3066
g3045
tp14913
a(g3068
g3046
tp14914
a(g3065
g3047
tp14915
asssg14877
(dp14916
g14894
(dp14917
g163
(lp14918
(g3094
g3084
tp14919
asssg14894
(dp14920
ssg174
g14908
sg175
(dp14921
g14862
(dp14922
sg14877
(dp14923
g14862
g14910
ssg14894
(dp14924
g14877
g14917
sssg180
g14908
sbsg43
g14873
sg65
g66
sg75
g14873
sg76
g181
((lp14925
(lp14926
g184
ag181
((lp14927
(lp14928
g187
ag184
aa(lp14929
g189
ag190
aa(lp14930
g192
ag193
aa(lp14931
g195
ag196
aa(lp14932
g198
ag199
aa(lp14933
g201
ag106
aa(lp14934
g203
ag204
aa(lp14935
g206
ag207
aatp14936
Rp14937
aa(lp14938
g211
ag181
((lp14939
(lp14940
g187
ag211
aa(lp14941
g215
ag216
aa(lp14942
g218
ag219
aa(lp14943
g221
ag222
aa(lp14944
g224
ag225
aa(lp14945
g227
ag228
aa(lp14946
g230
ag231
aa(lp14947
g233
ag234
aa(lp14948
g236
ag237
aa(lp14949
g239
ag240
aa(lp14950
g242
ag243
aa(lp14951
g245
ag246
aa(lp14952
g248
ag249
aa(lp14953
g251
ag252
aa(lp14954
g254
ag255
aa(lp14955
g257
ag258
aa(lp14956
g260
ag261
aa(lp14957
g263
ag264
aa(lp14958
g266
ag267
aatp14959
Rp14960
aa(lp14961
g271
ag181
((lp14962
(lp14963
g187
ag271
aa(lp14964
g275
ag276
aatp14965
Rp14966
aatp14967
Rp14968
sg80
Nsbtp14969
a(g11515
g1
(g81
g3
Ntp14970
Rp14971
(dp14972
g85
g1
(g86
g3
Ntp14973
Rp14974
(dp14975
g90
(dp14976
g1
(g92
g3
Ntp14977
Rp14978
(dp14979
g7
(dp14980
sg9
g1
(g97
g3
Ntp14981
Rp14982
(dp14983
g14
g15
(g53
tp14984
Rp14985
(dp14986
g28
g29
sg3084
g23
sbsg108
(lp14987
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp14988
sg65
S'falff_Z_collect_transforms_0'
p14989
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp14990
sg79
Nsg80
Nsb(dp14991
sg1
(g92
g3
Ntp14992
Rp14993
(dp14994
g7
(dp14995
sg9
g1
(g97
g3
Ntp14996
Rp14997
(dp14998
g14
g15
(g53
tp14999
Rp15000
(dp15001
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15002
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15003
sg65
g14989
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15004
sg79
Nsg80
Nsb(dp15005
sg1
(g92
g3
Ntp15006
Rp15007
(dp15008
g7
(dp15009
sg9
g1
(g3034
g3
Ntp15010
Rp15011
(dp15012
g3038
I4
sg14
g15
(g3039
tp15013
Rp15014
(dp15015
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15016
sg65
g14989
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15017
sg79
Nsg80
Nsb(dp15018
ssg157
(dp15019
sg159
(dp15020
g14978
(dp15021
sg14993
(dp15022
g15007
(dp15023
g163
(lp15024
(g3067
g3044
tp15025
a(g3066
g3045
tp15026
a(g3068
g3046
tp15027
a(g3065
g3047
tp15028
asssg15007
(dp15029
g14978
(dp15030
g163
(lp15031
(g3094
g3084
tp15032
assssg174
g15020
sg175
(dp15033
g14978
(dp15034
g15007
g15030
ssg14993
(dp15035
sg15007
(dp15036
g14993
g15023
sssg180
g15020
sbsg43
g14989
sg65
g66
sg75
g14989
sg76
g181
((lp15037
(lp15038
g184
ag181
((lp15039
(lp15040
g187
ag184
aa(lp15041
g189
ag190
aa(lp15042
g192
ag193
aa(lp15043
g195
ag196
aa(lp15044
g198
ag199
aa(lp15045
g201
ag106
aa(lp15046
g203
ag204
aa(lp15047
g206
ag207
aatp15048
Rp15049
aa(lp15050
g211
ag181
((lp15051
(lp15052
g187
ag211
aa(lp15053
g215
ag216
aa(lp15054
g218
ag219
aa(lp15055
g221
ag222
aa(lp15056
g224
ag225
aa(lp15057
g227
ag228
aa(lp15058
g230
ag231
aa(lp15059
g233
ag234
aa(lp15060
g236
ag237
aa(lp15061
g239
ag240
aa(lp15062
g242
ag243
aa(lp15063
g245
ag246
aa(lp15064
g248
ag249
aa(lp15065
g251
ag252
aa(lp15066
g254
ag255
aa(lp15067
g257
ag258
aa(lp15068
g260
ag261
aa(lp15069
g263
ag264
aa(lp15070
g266
ag267
aatp15071
Rp15072
aa(lp15073
g271
ag181
((lp15074
(lp15075
g187
ag271
aa(lp15076
g275
ag276
aatp15077
Rp15078
aatp15079
Rp15080
sg80
Nsbtp15081
a(g11515
g1
(g81
g3
Ntp15082
Rp15083
(dp15084
g85
g1
(g86
g3
Ntp15085
Rp15086
(dp15087
g90
(dp15088
g1
(g92
g3
Ntp15089
Rp15090
(dp15091
g7
(dp15092
sg9
g1
(g3034
g3
Ntp15093
Rp15094
(dp15095
g3038
I4
sg14
g15
(g3039
tp15096
Rp15097
(dp15098
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15099
sg65
S'reho_Z_collect_transforms_1'
p15100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15101
sg79
Nsg80
Nsb(dp15102
sg1
(g92
g3
Ntp15103
Rp15104
(dp15105
g7
(dp15106
sg9
g1
(g97
g3
Ntp15107
Rp15108
(dp15109
g14
g15
(g53
tp15110
Rp15111
(dp15112
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15113
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15114
sg65
g15100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15115
sg79
Nsg80
Nsb(dp15116
sg1
(g92
g3
Ntp15117
Rp15118
(dp15119
g7
(dp15120
sg9
g1
(g97
g3
Ntp15121
Rp15122
(dp15123
g14
g15
(g53
tp15124
Rp15125
(dp15126
g28
g29
sg3084
g23
sbsg108
(lp15127
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15128
sg65
g15100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15129
sg79
Nsg80
Nsb(dp15130
ssg157
(dp15131
sg159
(dp15132
g15090
(dp15133
g15118
(dp15134
g163
(lp15135
(g3094
g3084
tp15136
asssg15104
(dp15137
g15090
(dp15138
g163
(lp15139
(g3067
g3044
tp15140
a(g3066
g3045
tp15141
a(g3068
g3046
tp15142
a(g3065
g3047
tp15143
asssg15118
(dp15144
ssg174
g15132
sg175
(dp15145
g15090
(dp15146
g15104
g15138
ssg15104
(dp15147
sg15118
(dp15148
g15090
g15134
sssg180
g15132
sbsg43
g15100
sg65
g66
sg75
g15100
sg76
g181
((lp15149
(lp15150
g184
ag181
((lp15151
(lp15152
g187
ag184
aa(lp15153
g189
ag190
aa(lp15154
g192
ag193
aa(lp15155
g195
ag196
aa(lp15156
g198
ag199
aa(lp15157
g201
ag106
aa(lp15158
g203
ag204
aa(lp15159
g206
ag207
aatp15160
Rp15161
aa(lp15162
g211
ag181
((lp15163
(lp15164
g187
ag211
aa(lp15165
g215
ag216
aa(lp15166
g218
ag219
aa(lp15167
g221
ag222
aa(lp15168
g224
ag225
aa(lp15169
g227
ag228
aa(lp15170
g230
ag231
aa(lp15171
g233
ag234
aa(lp15172
g236
ag237
aa(lp15173
g239
ag240
aa(lp15174
g242
ag243
aa(lp15175
g245
ag246
aa(lp15176
g248
ag249
aa(lp15177
g251
ag252
aa(lp15178
g254
ag255
aa(lp15179
g257
ag258
aa(lp15180
g260
ag261
aa(lp15181
g263
ag264
aa(lp15182
g266
ag267
aatp15183
Rp15184
aa(lp15185
g271
ag181
((lp15186
(lp15187
g187
ag271
aa(lp15188
g275
ag276
aatp15189
Rp15190
aatp15191
Rp15192
sg80
Nsbtp15193
a(g11515
g1
(g81
g3
Ntp15194
Rp15195
(dp15196
g85
g1
(g86
g3
Ntp15197
Rp15198
(dp15199
g90
(dp15200
g1
(g92
g3
Ntp15201
Rp15202
(dp15203
g7
(dp15204
sg9
g1
(g3034
g3
Ntp15205
Rp15206
(dp15207
g3038
I4
sg14
g15
(g3039
tp15208
Rp15209
(dp15210
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15211
sg65
S'sca_seed_collect_transforms_0'
p15212
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15213
sg79
Nsg80
Nsb(dp15214
sg1
(g92
g3
Ntp15215
Rp15216
(dp15217
g7
(dp15218
sg9
g1
(g97
g3
Ntp15219
Rp15220
(dp15221
g14
g15
(g53
tp15222
Rp15223
(dp15224
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15225
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15226
sg65
g15212
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15227
sg79
Nsg80
Nsb(dp15228
sg1
(g92
g3
Ntp15229
Rp15230
(dp15231
g7
(dp15232
sg9
g1
(g97
g3
Ntp15233
Rp15234
(dp15235
g14
g15
(g53
tp15236
Rp15237
(dp15238
g28
g29
sg3084
g23
sbsg108
(lp15239
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15240
sg65
g15212
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15241
sg79
Nsg80
Nsb(dp15242
ssg157
(dp15243
sg159
(dp15244
g15202
(dp15245
g15230
(dp15246
g163
(lp15247
(g3094
g3084
tp15248
asssg15216
(dp15249
g15202
(dp15250
g163
(lp15251
(g3067
g3044
tp15252
a(g3066
g3045
tp15253
a(g3068
g3046
tp15254
a(g3065
g3047
tp15255
asssg15230
(dp15256
ssg174
g15244
sg175
(dp15257
g15202
(dp15258
g15216
g15250
ssg15216
(dp15259
sg15230
(dp15260
g15202
g15246
sssg180
g15244
sbsg43
g15212
sg65
g66
sg75
g15212
sg76
g181
((lp15261
(lp15262
g184
ag181
((lp15263
(lp15264
g187
ag184
aa(lp15265
g189
ag190
aa(lp15266
g192
ag193
aa(lp15267
g195
ag196
aa(lp15268
g198
ag199
aa(lp15269
g201
ag106
aa(lp15270
g203
ag204
aa(lp15271
g206
ag207
aatp15272
Rp15273
aa(lp15274
g211
ag181
((lp15275
(lp15276
g187
ag211
aa(lp15277
g215
ag216
aa(lp15278
g218
ag219
aa(lp15279
g221
ag222
aa(lp15280
g224
ag225
aa(lp15281
g227
ag228
aa(lp15282
g230
ag231
aa(lp15283
g233
ag234
aa(lp15284
g236
ag237
aa(lp15285
g239
ag240
aa(lp15286
g242
ag243
aa(lp15287
g245
ag246
aa(lp15288
g248
ag249
aa(lp15289
g251
ag252
aa(lp15290
g254
ag255
aa(lp15291
g257
ag258
aa(lp15292
g260
ag261
aa(lp15293
g263
ag264
aa(lp15294
g266
ag267
aatp15295
Rp15296
aa(lp15297
g271
ag181
((lp15298
(lp15299
g187
ag271
aa(lp15300
g275
ag276
aatp15301
Rp15302
aatp15303
Rp15304
sg80
Nsbtp15305
a(g11515
g1
(g81
g3
Ntp15306
Rp15307
(dp15308
g85
g1
(g86
g3
Ntp15309
Rp15310
(dp15311
g90
(dp15312
g1
(g92
g3
Ntp15313
Rp15314
(dp15315
g7
(dp15316
sg9
g1
(g97
g3
Ntp15317
Rp15318
(dp15319
g14
g15
(g53
tp15320
Rp15321
(dp15322
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15323
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15324
sg65
S'falff_collect_transforms_0'
p15325
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15326
sg79
Nsg80
Nsb(dp15327
sg1
(g92
g3
Ntp15328
Rp15329
(dp15330
g7
(dp15331
sg9
g1
(g97
g3
Ntp15332
Rp15333
(dp15334
g14
g15
(g53
tp15335
Rp15336
(dp15337
g28
g29
sg3084
g23
sbsg108
(lp15338
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15339
sg65
g15325
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15340
sg79
Nsg80
Nsb(dp15341
sg1
(g92
g3
Ntp15342
Rp15343
(dp15344
g7
(dp15345
sg9
g1
(g3034
g3
Ntp15346
Rp15347
(dp15348
g3038
I4
sg14
g15
(g3039
tp15349
Rp15350
(dp15351
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15352
sg65
g15325
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15353
sg79
Nsg80
Nsb(dp15354
ssg157
(dp15355
sg159
(dp15356
g15314
(dp15357
g15343
(dp15358
g163
(lp15359
(g3067
g3044
tp15360
a(g3066
g3045
tp15361
a(g3068
g3046
tp15362
a(g3065
g3047
tp15363
asssg15329
(dp15364
sg15343
(dp15365
g15329
(dp15366
g163
(lp15367
(g3094
g3084
tp15368
assssg174
g15356
sg175
(dp15369
g15314
(dp15370
sg15329
(dp15371
g15343
g15366
ssg15343
(dp15372
g15314
g15358
sssg180
g15356
sbsg43
g15325
sg65
g66
sg75
g15325
sg76
g181
((lp15373
(lp15374
g184
ag181
((lp15375
(lp15376
g187
ag184
aa(lp15377
g189
ag190
aa(lp15378
g192
ag193
aa(lp15379
g195
ag196
aa(lp15380
g198
ag199
aa(lp15381
g201
ag106
aa(lp15382
g203
ag204
aa(lp15383
g206
ag207
aatp15384
Rp15385
aa(lp15386
g211
ag181
((lp15387
(lp15388
g187
ag211
aa(lp15389
g215
ag216
aa(lp15390
g218
ag219
aa(lp15391
g221
ag222
aa(lp15392
g224
ag225
aa(lp15393
g227
ag228
aa(lp15394
g230
ag231
aa(lp15395
g233
ag234
aa(lp15396
g236
ag237
aa(lp15397
g239
ag240
aa(lp15398
g242
ag243
aa(lp15399
g245
ag246
aa(lp15400
g248
ag249
aa(lp15401
g251
ag252
aa(lp15402
g254
ag255
aa(lp15403
g257
ag258
aa(lp15404
g260
ag261
aa(lp15405
g263
ag264
aa(lp15406
g266
ag267
aatp15407
Rp15408
aa(lp15409
g271
ag181
((lp15410
(lp15411
g187
ag271
aa(lp15412
g275
ag276
aatp15413
Rp15414
aatp15415
Rp15416
sg80
Nsbtp15417
a(g11515
g1
(g81
g3
Ntp15418
Rp15419
(dp15420
g85
g1
(g86
g3
Ntp15421
Rp15422
(dp15423
g90
(dp15424
g1
(g92
g3
Ntp15425
Rp15426
(dp15427
g7
(dp15428
sg9
g1
(g97
g3
Ntp15429
Rp15430
(dp15431
g14
g15
(g53
tp15432
Rp15433
(dp15434
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15435
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15436
sg65
S'sca_roi_collect_transforms_1'
p15437
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15438
sg79
Nsg80
Nsb(dp15439
sg1
(g92
g3
Ntp15440
Rp15441
(dp15442
g7
(dp15443
sg9
g1
(g3034
g3
Ntp15444
Rp15445
(dp15446
g3038
I4
sg14
g15
(g3039
tp15447
Rp15448
(dp15449
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15450
sg65
g15437
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15451
sg79
Nsg80
Nsb(dp15452
sg1
(g92
g3
Ntp15453
Rp15454
(dp15455
g7
(dp15456
sg9
g1
(g97
g3
Ntp15457
Rp15458
(dp15459
g14
g15
(g53
tp15460
Rp15461
(dp15462
g28
g29
sg3084
g23
sbsg108
(lp15463
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15464
sg65
g15437
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15465
sg79
Nsg80
Nsb(dp15466
ssg157
(dp15467
sg159
(dp15468
g15426
(dp15469
g15441
(dp15470
g163
(lp15471
(g3067
g3044
tp15472
a(g3066
g3045
tp15473
a(g3068
g3046
tp15474
a(g3065
g3047
tp15475
asssg15441
(dp15476
g15454
(dp15477
g163
(lp15478
(g3094
g3084
tp15479
asssg15454
(dp15480
ssg174
g15468
sg175
(dp15481
g15426
(dp15482
sg15441
(dp15483
g15426
g15470
ssg15454
(dp15484
g15441
g15477
sssg180
g15468
sbsg43
g15437
sg65
g66
sg75
g15437
sg76
g181
((lp15485
(lp15486
g184
ag181
((lp15487
(lp15488
g187
ag184
aa(lp15489
g189
ag190
aa(lp15490
g192
ag193
aa(lp15491
g195
ag196
aa(lp15492
g198
ag199
aa(lp15493
g201
ag106
aa(lp15494
g203
ag204
aa(lp15495
g206
ag207
aatp15496
Rp15497
aa(lp15498
g211
ag181
((lp15499
(lp15500
g187
ag211
aa(lp15501
g215
ag216
aa(lp15502
g218
ag219
aa(lp15503
g221
ag222
aa(lp15504
g224
ag225
aa(lp15505
g227
ag228
aa(lp15506
g230
ag231
aa(lp15507
g233
ag234
aa(lp15508
g236
ag237
aa(lp15509
g239
ag240
aa(lp15510
g242
ag243
aa(lp15511
g245
ag246
aa(lp15512
g248
ag249
aa(lp15513
g251
ag252
aa(lp15514
g254
ag255
aa(lp15515
g257
ag258
aa(lp15516
g260
ag261
aa(lp15517
g263
ag264
aa(lp15518
g266
ag267
aatp15519
Rp15520
aa(lp15521
g271
ag181
((lp15522
(lp15523
g187
ag271
aa(lp15524
g275
ag276
aatp15525
Rp15526
aatp15527
Rp15528
sg80
Nsbtp15529
a(g11515
g1
(g81
g3
Ntp15530
Rp15531
(dp15532
g85
g1
(g86
g3
Ntp15533
Rp15534
(dp15535
g90
(dp15536
g1
(g92
g3
Ntp15537
Rp15538
(dp15539
g7
(dp15540
sg9
g1
(g97
g3
Ntp15541
Rp15542
(dp15543
g14
g15
(g53
tp15544
Rp15545
(dp15546
g28
g29
sg3084
g23
sbsg108
(lp15547
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15548
sg65
S'dr_tempreg_maps_z_files_collect_transforms_1'
p15549
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15550
sg79
Nsg80
Nsb(dp15551
sg1
(g92
g3
Ntp15552
Rp15553
(dp15554
g7
(dp15555
sg9
g1
(g97
g3
Ntp15556
Rp15557
(dp15558
g14
g15
(g53
tp15559
Rp15560
(dp15561
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15562
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15563
sg65
g15549
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15564
sg79
Nsg80
Nsb(dp15565
sg1
(g2
g3
Ntp15566
Rp15567
(dp15568
g7
(dp15569
sg9
g1
(g3034
g3
Ntp15570
Rp15571
(dp15572
g3038
I4
sg14
g15
(g3039
tp15573
Rp15574
(dp15575
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg52
g15
(g53
tp15576
Rp15577
(dp15578
g20
I00
sg28
g29
sg3047
g23
sg3044
g23
sg3045
g23
sg3046
g23
sg3043
I00
sg3048
g3049
sbsg43
g12538
sg63
(dp15579
sg65
g15549
sg67
(lp15580
g3047
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12538
sg76
Nsg77
(lp15581
sg79
Nsg80
Nsb(dp15582
ssg157
(dp15583
sg159
(dp15584
g15538
(dp15585
sg15553
(dp15586
g15567
(dp15587
g163
(lp15588
(g3067
g3044
tp15589
a(g3066
g3045
tp15590
a(g3068
g3046
tp15591
a(g3065
g3047
tp15592
asssg15567
(dp15593
g15538
(dp15594
g163
(lp15595
(g3094
g3084
tp15596
assssg174
g15584
sg175
(dp15597
g15538
(dp15598
g15567
g15594
ssg15553
(dp15599
sg15567
(dp15600
g15553
g15587
sssg180
g15584
sbsg43
g15549
sg65
g66
sg75
g15549
sg76
g181
((lp15601
(lp15602
g184
ag181
((lp15603
(lp15604
g187
ag184
aa(lp15605
g189
ag190
aa(lp15606
g192
ag193
aa(lp15607
g195
ag196
aa(lp15608
g198
ag199
aa(lp15609
g201
ag106
aa(lp15610
g203
ag204
aa(lp15611
g206
ag207
aatp15612
Rp15613
aa(lp15614
g211
ag181
((lp15615
(lp15616
g187
ag211
aa(lp15617
g215
ag216
aa(lp15618
g218
ag219
aa(lp15619
g221
ag222
aa(lp15620
g224
ag225
aa(lp15621
g227
ag228
aa(lp15622
g230
ag231
aa(lp15623
g233
ag234
aa(lp15624
g236
ag237
aa(lp15625
g239
ag240
aa(lp15626
g242
ag243
aa(lp15627
g245
ag246
aa(lp15628
g248
ag249
aa(lp15629
g251
ag252
aa(lp15630
g254
ag255
aa(lp15631
g257
ag258
aa(lp15632
g260
ag261
aa(lp15633
g263
ag264
aa(lp15634
g266
ag267
aatp15635
Rp15636
aa(lp15637
g271
ag181
((lp15638
(lp15639
g187
ag271
aa(lp15640
g275
ag276
aatp15641
Rp15642
aatp15643
Rp15644
sg80
Nsbtp15645
a(g11515
g1
(g81
g3
Ntp15646
Rp15647
(dp15648
g85
g1
(g86
g3
Ntp15649
Rp15650
(dp15651
g90
(dp15652
g1
(g92
g3
Ntp15653
Rp15654
(dp15655
g7
(dp15656
sg9
g1
(g3034
g3
Ntp15657
Rp15658
(dp15659
g3038
I4
sg14
g15
(g3039
tp15660
Rp15661
(dp15662
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15663
sg65
S'reho_Z_collect_transforms_0'
p15664
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15665
sg79
Nsg80
Nsb(dp15666
sg1
(g92
g3
Ntp15667
Rp15668
(dp15669
g7
(dp15670
sg9
g1
(g97
g3
Ntp15671
Rp15672
(dp15673
g14
g15
(g53
tp15674
Rp15675
(dp15676
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15677
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15678
sg65
g15664
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15679
sg79
Nsg80
Nsb(dp15680
sg1
(g92
g3
Ntp15681
Rp15682
(dp15683
g7
(dp15684
sg9
g1
(g97
g3
Ntp15685
Rp15686
(dp15687
g14
g15
(g53
tp15688
Rp15689
(dp15690
g28
g29
sg3084
g23
sbsg108
(lp15691
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15692
sg65
g15664
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15693
sg79
Nsg80
Nsb(dp15694
ssg157
(dp15695
sg159
(dp15696
g15654
(dp15697
g15682
(dp15698
g163
(lp15699
(g3094
g3084
tp15700
asssg15668
(dp15701
g15654
(dp15702
g163
(lp15703
(g3067
g3044
tp15704
a(g3066
g3045
tp15705
a(g3068
g3046
tp15706
a(g3065
g3047
tp15707
asssg15682
(dp15708
ssg174
g15696
sg175
(dp15709
g15654
(dp15710
g15668
g15702
ssg15668
(dp15711
sg15682
(dp15712
g15654
g15698
sssg180
g15696
sbsg43
g15664
sg65
g66
sg75
g15664
sg76
g181
((lp15713
(lp15714
g184
ag181
((lp15715
(lp15716
g187
ag184
aa(lp15717
g189
ag190
aa(lp15718
g192
ag193
aa(lp15719
g195
ag196
aa(lp15720
g198
ag199
aa(lp15721
g201
ag106
aa(lp15722
g203
ag204
aa(lp15723
g206
ag207
aatp15724
Rp15725
aa(lp15726
g211
ag181
((lp15727
(lp15728
g187
ag211
aa(lp15729
g215
ag216
aa(lp15730
g218
ag219
aa(lp15731
g221
ag222
aa(lp15732
g224
ag225
aa(lp15733
g227
ag228
aa(lp15734
g230
ag231
aa(lp15735
g233
ag234
aa(lp15736
g236
ag237
aa(lp15737
g239
ag240
aa(lp15738
g242
ag243
aa(lp15739
g245
ag246
aa(lp15740
g248
ag249
aa(lp15741
g251
ag252
aa(lp15742
g254
ag255
aa(lp15743
g257
ag258
aa(lp15744
g260
ag261
aa(lp15745
g263
ag264
aa(lp15746
g266
ag267
aatp15747
Rp15748
aa(lp15749
g271
ag181
((lp15750
(lp15751
g187
ag271
aa(lp15752
g275
ag276
aatp15753
Rp15754
aatp15755
Rp15756
sg80
Nsbtp15757
a(g11515
g1
(g81
g3
Ntp15758
Rp15759
(dp15760
g85
g1
(g86
g3
Ntp15761
Rp15762
(dp15763
g90
(dp15764
g1
(g92
g3
Ntp15765
Rp15766
(dp15767
g7
(dp15768
sg9
g1
(g97
g3
Ntp15769
Rp15770
(dp15771
g14
g15
(g53
tp15772
Rp15773
(dp15774
g28
g29
sg3084
g23
sbsg108
(lp15775
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15776
sg65
S'collect_transforms_functional_mni_1'
p15777
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15778
sg79
Nsg80
Nsb(dp15779
sg1
(g92
g3
Ntp15780
Rp15781
(dp15782
g7
(dp15783
sg9
g1
(g97
g3
Ntp15784
Rp15785
(dp15786
g14
g15
(g53
tp15787
Rp15788
(dp15789
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15790
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15791
sg65
g15777
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15792
sg79
Nsg80
Nsb(dp15793
sg1
(g92
g3
Ntp15794
Rp15795
(dp15796
g7
(dp15797
sg9
g1
(g3034
g3
Ntp15798
Rp15799
(dp15800
g3038
I4
sg14
g15
(g3039
tp15801
Rp15802
(dp15803
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15804
sg65
g15777
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15805
sg79
Nsg80
Nsb(dp15806
ssg157
(dp15807
sg159
(dp15808
g15766
(dp15809
sg15781
(dp15810
g15795
(dp15811
g163
(lp15812
(g3067
g3044
tp15813
a(g3066
g3045
tp15814
a(g3068
g3046
tp15815
a(g3065
g3047
tp15816
asssg15795
(dp15817
g15766
(dp15818
g163
(lp15819
(g3094
g3084
tp15820
assssg174
g15808
sg175
(dp15821
g15766
(dp15822
g15795
g15818
ssg15781
(dp15823
sg15795
(dp15824
g15781
g15811
sssg180
g15808
sbsg43
g15777
sg65
g66
sg75
g15777
sg76
g181
((lp15825
(lp15826
g184
ag181
((lp15827
(lp15828
g187
ag184
aa(lp15829
g189
ag190
aa(lp15830
g192
ag193
aa(lp15831
g195
ag196
aa(lp15832
g198
ag199
aa(lp15833
g201
ag106
aa(lp15834
g203
ag204
aa(lp15835
g206
ag207
aatp15836
Rp15837
aa(lp15838
g211
ag181
((lp15839
(lp15840
g187
ag211
aa(lp15841
g215
ag216
aa(lp15842
g218
ag219
aa(lp15843
g221
ag222
aa(lp15844
g224
ag225
aa(lp15845
g227
ag228
aa(lp15846
g230
ag231
aa(lp15847
g233
ag234
aa(lp15848
g236
ag237
aa(lp15849
g239
ag240
aa(lp15850
g242
ag243
aa(lp15851
g245
ag246
aa(lp15852
g248
ag249
aa(lp15853
g251
ag252
aa(lp15854
g254
ag255
aa(lp15855
g257
ag258
aa(lp15856
g260
ag261
aa(lp15857
g263
ag264
aa(lp15858
g266
ag267
aatp15859
Rp15860
aa(lp15861
g271
ag181
((lp15862
(lp15863
g187
ag271
aa(lp15864
g275
ag276
aatp15865
Rp15866
aatp15867
Rp15868
sg80
Nsbtp15869
a(g11515
g1
(g81
g3
Ntp15870
Rp15871
(dp15872
g85
g1
(g86
g3
Ntp15873
Rp15874
(dp15875
g90
(dp15876
g1
(g92
g3
Ntp15877
Rp15878
(dp15879
g7
(dp15880
sg9
g1
(g97
g3
Ntp15881
Rp15882
(dp15883
g14
g15
(g53
tp15884
Rp15885
(dp15886
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp15887
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp15888
sg65
S'falff_Z_collect_transforms_1'
p15889
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp15890
sg79
Nsg80
Nsb(dp15891
sg1
(g92
g3
Ntp15892
Rp15893
(dp15894
g7
(dp15895
sg9
g1
(g97
g3
Ntp15896
Rp15897
(dp15898
g14
g15
(g53
tp15899
Rp15900
(dp15901
g28
g29
sg3084
g23
sbsg108
(lp15902
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp15903
sg65
g15889
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp15904
sg79
Nsg80
Nsb(dp15905
sg1
(g92
g3
Ntp15906
Rp15907
(dp15908
g7
(dp15909
sg9
g1
(g3034
g3
Ntp15910
Rp15911
(dp15912
g3038
I4
sg14
g15
(g3039
tp15913
Rp15914
(dp15915
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15916
sg65
g15889
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp15917
sg79
Nsg80
Nsb(dp15918
ssg157
(dp15919
sg159
(dp15920
g15878
(dp15921
g15907
(dp15922
g163
(lp15923
(g3067
g3044
tp15924
a(g3066
g3045
tp15925
a(g3068
g3046
tp15926
a(g3065
g3047
tp15927
asssg15893
(dp15928
sg15907
(dp15929
g15893
(dp15930
g163
(lp15931
(g3094
g3084
tp15932
assssg174
g15920
sg175
(dp15933
g15878
(dp15934
sg15893
(dp15935
g15907
g15930
ssg15907
(dp15936
g15878
g15922
sssg180
g15920
sbsg43
g15889
sg65
g66
sg75
g15889
sg76
g181
((lp15937
(lp15938
g184
ag181
((lp15939
(lp15940
g187
ag184
aa(lp15941
g189
ag190
aa(lp15942
g192
ag193
aa(lp15943
g195
ag196
aa(lp15944
g198
ag199
aa(lp15945
g201
ag106
aa(lp15946
g203
ag204
aa(lp15947
g206
ag207
aatp15948
Rp15949
aa(lp15950
g211
ag181
((lp15951
(lp15952
g187
ag211
aa(lp15953
g215
ag216
aa(lp15954
g218
ag219
aa(lp15955
g221
ag222
aa(lp15956
g224
ag225
aa(lp15957
g227
ag228
aa(lp15958
g230
ag231
aa(lp15959
g233
ag234
aa(lp15960
g236
ag237
aa(lp15961
g239
ag240
aa(lp15962
g242
ag243
aa(lp15963
g245
ag246
aa(lp15964
g248
ag249
aa(lp15965
g251
ag252
aa(lp15966
g254
ag255
aa(lp15967
g257
ag258
aa(lp15968
g260
ag261
aa(lp15969
g263
ag264
aa(lp15970
g266
ag267
aatp15971
Rp15972
aa(lp15973
g271
ag181
((lp15974
(lp15975
g187
ag271
aa(lp15976
g275
ag276
aatp15977
Rp15978
aatp15979
Rp15980
sg80
Nsbtp15981
a(g11515
g1
(g81
g3
Ntp15982
Rp15983
(dp15984
g85
g1
(g86
g3
Ntp15985
Rp15986
(dp15987
g90
(dp15988
g1
(g92
g3
Ntp15989
Rp15990
(dp15991
g7
(dp15992
sg9
g1
(g3034
g3
Ntp15993
Rp15994
(dp15995
g3038
I4
sg14
g15
(g3039
tp15996
Rp15997
(dp15998
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp15999
sg65
S'reho_collect_transforms_0'
p16000
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp16001
sg79
Nsg80
Nsb(dp16002
sg1
(g92
g3
Ntp16003
Rp16004
(dp16005
g7
(dp16006
sg9
g1
(g97
g3
Ntp16007
Rp16008
(dp16009
g14
g15
(g53
tp16010
Rp16011
(dp16012
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp16013
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16014
sg65
g16000
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16015
sg79
Nsg80
Nsb(dp16016
sg1
(g92
g3
Ntp16017
Rp16018
(dp16019
g7
(dp16020
sg9
g1
(g97
g3
Ntp16021
Rp16022
(dp16023
g14
g15
(g53
tp16024
Rp16025
(dp16026
g28
g29
sg3084
g23
sbsg108
(lp16027
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16028
sg65
g16000
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16029
sg79
Nsg80
Nsb(dp16030
ssg157
(dp16031
sg159
(dp16032
g15990
(dp16033
g16018
(dp16034
g163
(lp16035
(g3094
g3084
tp16036
asssg16004
(dp16037
g15990
(dp16038
g163
(lp16039
(g3067
g3044
tp16040
a(g3066
g3045
tp16041
a(g3068
g3046
tp16042
a(g3065
g3047
tp16043
asssg16018
(dp16044
ssg174
g16032
sg175
(dp16045
g15990
(dp16046
g16004
g16038
ssg16004
(dp16047
sg16018
(dp16048
g15990
g16034
sssg180
g16032
sbsg43
g16000
sg65
g66
sg75
g16000
sg76
g181
((lp16049
(lp16050
g184
ag181
((lp16051
(lp16052
g187
ag184
aa(lp16053
g189
ag190
aa(lp16054
g192
ag193
aa(lp16055
g195
ag196
aa(lp16056
g198
ag199
aa(lp16057
g201
ag106
aa(lp16058
g203
ag204
aa(lp16059
g206
ag207
aatp16060
Rp16061
aa(lp16062
g211
ag181
((lp16063
(lp16064
g187
ag211
aa(lp16065
g215
ag216
aa(lp16066
g218
ag219
aa(lp16067
g221
ag222
aa(lp16068
g224
ag225
aa(lp16069
g227
ag228
aa(lp16070
g230
ag231
aa(lp16071
g233
ag234
aa(lp16072
g236
ag237
aa(lp16073
g239
ag240
aa(lp16074
g242
ag243
aa(lp16075
g245
ag246
aa(lp16076
g248
ag249
aa(lp16077
g251
ag252
aa(lp16078
g254
ag255
aa(lp16079
g257
ag258
aa(lp16080
g260
ag261
aa(lp16081
g263
ag264
aa(lp16082
g266
ag267
aatp16083
Rp16084
aa(lp16085
g271
ag181
((lp16086
(lp16087
g187
ag271
aa(lp16088
g275
ag276
aatp16089
Rp16090
aatp16091
Rp16092
sg80
Nsbtp16093
a(g11515
g1
(g81
g3
Ntp16094
Rp16095
(dp16096
g85
g1
(g86
g3
Ntp16097
Rp16098
(dp16099
g90
(dp16100
g1
(g92
g3
Ntp16101
Rp16102
(dp16103
g7
(dp16104
sg9
g1
(g97
g3
Ntp16105
Rp16106
(dp16107
g14
g15
(g53
tp16108
Rp16109
(dp16110
g28
g29
sg25
g23
sbsg108
(lp16111
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16112
sg65
S'log_anat_mni_ants_register_0'
p16113
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16114
sg79
Nsg80
Nsb(dp16115
sg1
(g92
g3
Ntp16116
Rp16117
(dp16118
g7
(dp16119
sg9
g1
(g97
g3
Ntp16120
Rp16121
(dp16122
g14
g15
(g53
tp16123
Rp16124
(dp16125
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g11533
sbsg108
(lp16126
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16127
sg65
g16113
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16128
sg79
Nsg80
Nsb(dp16129
sg1
(g92
g3
Ntp16130
Rp16131
(dp16132
g7
(dp16133
sg9
g1
(g135
g3
Ntp16134
Rp16135
(dp16136
g139
(lp16137
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp16138
Rp16139
(dp16140
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p16141
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp16142
g25
Nssg150
(lp16143
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp16144
sg65
g16113
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp16145
sg79
Nsg80
Nsb(dp16146
ssg157
(dp16147
sg159
(dp16148
g16102
(dp16149
sg16117
(dp16150
g16131
(dp16151
g163
(lp16152
(g107
g107
tp16153
a(g105
g105
tp16154
a(g104
g104
tp16155
a(g14
g14
tp16156
asssg16131
(dp16157
g16102
(dp16158
g163
(lp16159
(g25
g25
tp16160
assssg174
g16148
sg175
(dp16161
g16102
(dp16162
g16131
g16158
ssg16117
(dp16163
sg16131
(dp16164
g16117
g16151
sssg180
g16148
sbsg43
g16113
sg65
g66
sg75
g16113
sg76
g181
((lp16165
(lp16166
g184
ag181
((lp16167
(lp16168
g187
ag184
aa(lp16169
g189
ag190
aa(lp16170
g192
ag193
aa(lp16171
g195
ag196
aa(lp16172
g198
ag199
aa(lp16173
g201
ag106
aa(lp16174
g203
ag204
aa(lp16175
g206
ag207
aatp16176
Rp16177
aa(lp16178
g211
ag181
((lp16179
(lp16180
g187
ag211
aa(lp16181
g215
ag216
aa(lp16182
g218
ag219
aa(lp16183
g221
ag222
aa(lp16184
g224
ag225
aa(lp16185
g227
ag228
aa(lp16186
g230
ag231
aa(lp16187
g233
ag234
aa(lp16188
g236
ag237
aa(lp16189
g239
ag240
aa(lp16190
g242
ag243
aa(lp16191
g245
ag246
aa(lp16192
g248
ag249
aa(lp16193
g251
ag252
aa(lp16194
g254
ag255
aa(lp16195
g257
ag258
aa(lp16196
g260
ag261
aa(lp16197
g263
ag264
aa(lp16198
g266
ag267
aatp16199
Rp16200
aa(lp16201
g271
ag181
((lp16202
(lp16203
g187
ag271
aa(lp16204
g275
ag276
aatp16205
Rp16206
aatp16207
Rp16208
sg80
Nsbtp16209
a(g11515
g1
(g81
g3
Ntp16210
Rp16211
(dp16212
g85
g1
(g86
g3
Ntp16213
Rp16214
(dp16215
g90
(dp16216
g1
(g92
g3
Ntp16217
Rp16218
(dp16219
g7
(dp16220
sg9
g1
(g97
g3
Ntp16221
Rp16222
(dp16223
g14
g15
(g53
tp16224
Rp16225
(dp16226
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp16227
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16228
sg65
S'dr_tempreg_maps_stack_collect_transforms_1'
p16229
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16230
sg79
Nsg80
Nsb(dp16231
sg1
(g92
g3
Ntp16232
Rp16233
(dp16234
g7
(dp16235
sg9
g1
(g97
g3
Ntp16236
Rp16237
(dp16238
g14
g15
(g53
tp16239
Rp16240
(dp16241
g28
g29
sg3084
g23
sbsg108
(lp16242
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16243
sg65
g16229
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16244
sg79
Nsg80
Nsb(dp16245
sg1
(g92
g3
Ntp16246
Rp16247
(dp16248
g7
(dp16249
sg9
g1
(g3034
g3
Ntp16250
Rp16251
(dp16252
g3038
I4
sg14
g15
(g3039
tp16253
Rp16254
(dp16255
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp16256
sg65
g16229
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp16257
sg79
Nsg80
Nsb(dp16258
ssg157
(dp16259
sg159
(dp16260
g16218
(dp16261
g16247
(dp16262
g163
(lp16263
(g3067
g3044
tp16264
a(g3066
g3045
tp16265
a(g3068
g3046
tp16266
a(g3065
g3047
tp16267
asssg16233
(dp16268
sg16247
(dp16269
g16233
(dp16270
g163
(lp16271
(g3094
g3084
tp16272
assssg174
g16260
sg175
(dp16273
g16218
(dp16274
sg16233
(dp16275
g16247
g16270
ssg16247
(dp16276
g16218
g16262
sssg180
g16260
sbsg43
g16229
sg65
g66
sg75
g16229
sg76
g181
((lp16277
(lp16278
g184
ag181
((lp16279
(lp16280
g187
ag184
aa(lp16281
g189
ag190
aa(lp16282
g192
ag193
aa(lp16283
g195
ag196
aa(lp16284
g198
ag199
aa(lp16285
g201
ag106
aa(lp16286
g203
ag204
aa(lp16287
g206
ag207
aatp16288
Rp16289
aa(lp16290
g211
ag181
((lp16291
(lp16292
g187
ag211
aa(lp16293
g215
ag216
aa(lp16294
g218
ag219
aa(lp16295
g221
ag222
aa(lp16296
g224
ag225
aa(lp16297
g227
ag228
aa(lp16298
g230
ag231
aa(lp16299
g233
ag234
aa(lp16300
g236
ag237
aa(lp16301
g239
ag240
aa(lp16302
g242
ag243
aa(lp16303
g245
ag246
aa(lp16304
g248
ag249
aa(lp16305
g251
ag252
aa(lp16306
g254
ag255
aa(lp16307
g257
ag258
aa(lp16308
g260
ag261
aa(lp16309
g263
ag264
aa(lp16310
g266
ag267
aatp16311
Rp16312
aa(lp16313
g271
ag181
((lp16314
(lp16315
g187
ag271
aa(lp16316
g275
ag276
aatp16317
Rp16318
aatp16319
Rp16320
sg80
Nsbtp16321
a(g11515
g1
(g81
g3
Ntp16322
Rp16323
(dp16324
g85
g1
(g86
g3
Ntp16325
Rp16326
(dp16327
g90
(dp16328
g1
(g92
g3
Ntp16329
Rp16330
(dp16331
g7
(dp16332
sg9
g1
(g97
g3
Ntp16333
Rp16334
(dp16335
g14
g15
(g53
tp16336
Rp16337
(dp16338
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp16339
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16340
sg65
S'collect_transforms_functional_brain_mask_to_standard_1'
p16341
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16342
sg79
Nsg80
Nsb(dp16343
sg1
(g92
g3
Ntp16344
Rp16345
(dp16346
g7
(dp16347
sg9
g1
(g97
g3
Ntp16348
Rp16349
(dp16350
g14
g15
(g53
tp16351
Rp16352
(dp16353
g28
g29
sg3084
g23
sbsg108
(lp16354
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16355
sg65
g16341
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16356
sg79
Nsg80
Nsb(dp16357
sg1
(g92
g3
Ntp16358
Rp16359
(dp16360
g7
(dp16361
sg9
g1
(g3034
g3
Ntp16362
Rp16363
(dp16364
g3038
I4
sg14
g15
(g3039
tp16365
Rp16366
(dp16367
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp16368
sg65
g16341
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp16369
sg79
Nsg80
Nsb(dp16370
ssg157
(dp16371
sg159
(dp16372
g16330
(dp16373
g16359
(dp16374
g163
(lp16375
(g3067
g3044
tp16376
a(g3066
g3045
tp16377
a(g3068
g3046
tp16378
a(g3065
g3047
tp16379
asssg16345
(dp16380
sg16359
(dp16381
g16345
(dp16382
g163
(lp16383
(g3094
g3084
tp16384
assssg174
g16372
sg175
(dp16385
g16330
(dp16386
sg16345
(dp16387
g16359
g16382
ssg16359
(dp16388
g16330
g16374
sssg180
g16372
sbsg43
g16341
sg65
g66
sg75
g16341
sg76
g181
((lp16389
(lp16390
g184
ag181
((lp16391
(lp16392
g187
ag184
aa(lp16393
g189
ag190
aa(lp16394
g192
ag193
aa(lp16395
g195
ag196
aa(lp16396
g198
ag199
aa(lp16397
g201
ag106
aa(lp16398
g203
ag204
aa(lp16399
g206
ag207
aatp16400
Rp16401
aa(lp16402
g211
ag181
((lp16403
(lp16404
g187
ag211
aa(lp16405
g215
ag216
aa(lp16406
g218
ag219
aa(lp16407
g221
ag222
aa(lp16408
g224
ag225
aa(lp16409
g227
ag228
aa(lp16410
g230
ag231
aa(lp16411
g233
ag234
aa(lp16412
g236
ag237
aa(lp16413
g239
ag240
aa(lp16414
g242
ag243
aa(lp16415
g245
ag246
aa(lp16416
g248
ag249
aa(lp16417
g251
ag252
aa(lp16418
g254
ag255
aa(lp16419
g257
ag258
aa(lp16420
g260
ag261
aa(lp16421
g263
ag264
aa(lp16422
g266
ag267
aatp16423
Rp16424
aa(lp16425
g271
ag181
((lp16426
(lp16427
g187
ag271
aa(lp16428
g275
ag276
aatp16429
Rp16430
aatp16431
Rp16432
sg80
Nsbtp16433
a(g11515
g1
(g81
g3
Ntp16434
Rp16435
(dp16436
g85
g1
(g86
g3
Ntp16437
Rp16438
(dp16439
g90
(dp16440
g1
(g92
g3
Ntp16441
Rp16442
(dp16443
g7
(dp16444
sg9
g1
(g97
g3
Ntp16445
Rp16446
(dp16447
g14
g15
(g53
tp16448
Rp16449
(dp16450
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp16451
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16452
sg65
S'sca_seed_collect_transforms_1'
p16453
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16454
sg79
Nsg80
Nsb(dp16455
sg1
(g92
g3
Ntp16456
Rp16457
(dp16458
g7
(dp16459
sg9
g1
(g3034
g3
Ntp16460
Rp16461
(dp16462
g3038
I4
sg14
g15
(g3039
tp16463
Rp16464
(dp16465
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp16466
sg65
g16453
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp16467
sg79
Nsg80
Nsb(dp16468
sg1
(g92
g3
Ntp16469
Rp16470
(dp16471
g7
(dp16472
sg9
g1
(g97
g3
Ntp16473
Rp16474
(dp16475
g14
g15
(g53
tp16476
Rp16477
(dp16478
g28
g29
sg3084
g23
sbsg108
(lp16479
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16480
sg65
g16453
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16481
sg79
Nsg80
Nsb(dp16482
ssg157
(dp16483
sg159
(dp16484
g16442
(dp16485
g16457
(dp16486
g163
(lp16487
(g3067
g3044
tp16488
a(g3066
g3045
tp16489
a(g3068
g3046
tp16490
a(g3065
g3047
tp16491
asssg16457
(dp16492
g16470
(dp16493
g163
(lp16494
(g3094
g3084
tp16495
asssg16470
(dp16496
ssg174
g16484
sg175
(dp16497
g16442
(dp16498
sg16457
(dp16499
g16442
g16486
ssg16470
(dp16500
g16457
g16493
sssg180
g16484
sbsg43
g16453
sg65
g66
sg75
g16453
sg76
g181
((lp16501
(lp16502
g184
ag181
((lp16503
(lp16504
g187
ag184
aa(lp16505
g189
ag190
aa(lp16506
g192
ag193
aa(lp16507
g195
ag196
aa(lp16508
g198
ag199
aa(lp16509
g201
ag106
aa(lp16510
g203
ag204
aa(lp16511
g206
ag207
aatp16512
Rp16513
aa(lp16514
g211
ag181
((lp16515
(lp16516
g187
ag211
aa(lp16517
g215
ag216
aa(lp16518
g218
ag219
aa(lp16519
g221
ag222
aa(lp16520
g224
ag225
aa(lp16521
g227
ag228
aa(lp16522
g230
ag231
aa(lp16523
g233
ag234
aa(lp16524
g236
ag237
aa(lp16525
g239
ag240
aa(lp16526
g242
ag243
aa(lp16527
g245
ag246
aa(lp16528
g248
ag249
aa(lp16529
g251
ag252
aa(lp16530
g254
ag255
aa(lp16531
g257
ag258
aa(lp16532
g260
ag261
aa(lp16533
g263
ag264
aa(lp16534
g266
ag267
aatp16535
Rp16536
aa(lp16537
g271
ag181
((lp16538
(lp16539
g187
ag271
aa(lp16540
g275
ag276
aatp16541
Rp16542
aatp16543
Rp16544
sg80
Nsbtp16545
a(g11515
g1
(g81
g3
Ntp16546
Rp16547
(dp16548
g85
g1
(g86
g3
Ntp16549
Rp16550
(dp16551
g90
(dp16552
g1
(g2
g3
Ntp16553
Rp16554
(dp16555
g7
(dp16556
sg9
g1
(g3034
g3
Ntp16557
Rp16558
(dp16559
g3038
I4
sg14
g15
(g3039
tp16560
Rp16561
(dp16562
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg52
g15
(g53
tp16563
Rp16564
(dp16565
g20
I00
sg28
g29
sg3047
g23
sg3044
g23
sg3045
g23
sg3046
g23
sg3043
I00
sg3048
g3049
sbsg43
g12538
sg63
(dp16566
sg65
S'sca_seed_Z_collect_transforms_0'
p16567
sg67
(lp16568
g3047
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g12538
sg76
Nsg77
(lp16569
sg79
Nsg80
Nsb(dp16570
sg1
(g92
g3
Ntp16571
Rp16572
(dp16573
g7
(dp16574
sg9
g1
(g97
g3
Ntp16575
Rp16576
(dp16577
g14
g15
(g53
tp16578
Rp16579
(dp16580
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp16581
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16582
sg65
g16567
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16583
sg79
Nsg80
Nsb(dp16584
sg1
(g92
g3
Ntp16585
Rp16586
(dp16587
g7
(dp16588
sg9
g1
(g97
g3
Ntp16589
Rp16590
(dp16591
g14
g15
(g53
tp16592
Rp16593
(dp16594
g28
g29
sg3084
g23
sbsg108
(lp16595
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16596
sg65
g16567
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16597
sg79
Nsg80
Nsb(dp16598
ssg157
(dp16599
sg159
(dp16600
g16554
(dp16601
g16586
(dp16602
g163
(lp16603
(g3094
g3084
tp16604
asssg16572
(dp16605
g16554
(dp16606
g163
(lp16607
(g3067
g3044
tp16608
a(g3066
g3045
tp16609
a(g3068
g3046
tp16610
a(g3065
g3047
tp16611
asssg16586
(dp16612
ssg174
g16600
sg175
(dp16613
g16554
(dp16614
g16572
g16606
ssg16572
(dp16615
sg16586
(dp16616
g16554
g16602
sssg180
g16600
sbsg43
g16567
sg65
g66
sg75
g16567
sg76
g181
((lp16617
(lp16618
g184
ag181
((lp16619
(lp16620
g187
ag184
aa(lp16621
g189
ag190
aa(lp16622
g192
ag193
aa(lp16623
g195
ag196
aa(lp16624
g198
ag199
aa(lp16625
g201
ag106
aa(lp16626
g203
ag204
aa(lp16627
g206
ag207
aatp16628
Rp16629
aa(lp16630
g211
ag181
((lp16631
(lp16632
g187
ag211
aa(lp16633
g215
ag216
aa(lp16634
g218
ag219
aa(lp16635
g221
ag222
aa(lp16636
g224
ag225
aa(lp16637
g227
ag228
aa(lp16638
g230
ag231
aa(lp16639
g233
ag234
aa(lp16640
g236
ag237
aa(lp16641
g239
ag240
aa(lp16642
g242
ag243
aa(lp16643
g245
ag246
aa(lp16644
g248
ag249
aa(lp16645
g251
ag252
aa(lp16646
g254
ag255
aa(lp16647
g257
ag258
aa(lp16648
g260
ag261
aa(lp16649
g263
ag264
aa(lp16650
g266
ag267
aatp16651
Rp16652
aa(lp16653
g271
ag181
((lp16654
(lp16655
g187
ag271
aa(lp16656
g275
ag276
aatp16657
Rp16658
aatp16659
Rp16660
sg80
Nsbtp16661
a(g11515
g1
(g81
g3
Ntp16662
Rp16663
(dp16664
g85
g1
(g86
g3
Ntp16665
Rp16666
(dp16667
g90
(dp16668
g1
(g92
g3
Ntp16669
Rp16670
(dp16671
g7
(dp16672
sg9
g1
(g3034
g3
Ntp16673
Rp16674
(dp16675
g3038
I4
sg14
g15
(g3039
tp16676
Rp16677
(dp16678
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp16679
sg65
S'collect_transforms_functional_mni_0'
p16680
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp16681
sg79
Nsg80
Nsb(dp16682
sg1
(g92
g3
Ntp16683
Rp16684
(dp16685
g7
(dp16686
sg9
g1
(g97
g3
Ntp16687
Rp16688
(dp16689
g14
g15
(g53
tp16690
Rp16691
(dp16692
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp16693
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16694
sg65
g16680
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16695
sg79
Nsg80
Nsb(dp16696
sg1
(g92
g3
Ntp16697
Rp16698
(dp16699
g7
(dp16700
sg9
g1
(g97
g3
Ntp16701
Rp16702
(dp16703
g14
g15
(g53
tp16704
Rp16705
(dp16706
g28
g29
sg3084
g23
sbsg108
(lp16707
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16708
sg65
g16680
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16709
sg79
Nsg80
Nsb(dp16710
ssg157
(dp16711
sg159
(dp16712
g16670
(dp16713
g16698
(dp16714
g163
(lp16715
(g3094
g3084
tp16716
asssg16684
(dp16717
g16670
(dp16718
g163
(lp16719
(g3067
g3044
tp16720
a(g3066
g3045
tp16721
a(g3068
g3046
tp16722
a(g3065
g3047
tp16723
asssg16698
(dp16724
ssg174
g16712
sg175
(dp16725
g16670
(dp16726
g16684
g16718
ssg16684
(dp16727
sg16698
(dp16728
g16670
g16714
sssg180
g16712
sbsg43
g16680
sg65
g66
sg75
g16680
sg76
g181
((lp16729
(lp16730
g184
ag181
((lp16731
(lp16732
g187
ag184
aa(lp16733
g189
ag190
aa(lp16734
g192
ag193
aa(lp16735
g195
ag196
aa(lp16736
g198
ag199
aa(lp16737
g201
ag106
aa(lp16738
g203
ag204
aa(lp16739
g206
ag207
aatp16740
Rp16741
aa(lp16742
g211
ag181
((lp16743
(lp16744
g187
ag211
aa(lp16745
g215
ag216
aa(lp16746
g218
ag219
aa(lp16747
g221
ag222
aa(lp16748
g224
ag225
aa(lp16749
g227
ag228
aa(lp16750
g230
ag231
aa(lp16751
g233
ag234
aa(lp16752
g236
ag237
aa(lp16753
g239
ag240
aa(lp16754
g242
ag243
aa(lp16755
g245
ag246
aa(lp16756
g248
ag249
aa(lp16757
g251
ag252
aa(lp16758
g254
ag255
aa(lp16759
g257
ag258
aa(lp16760
g260
ag261
aa(lp16761
g263
ag264
aa(lp16762
g266
ag267
aatp16763
Rp16764
aa(lp16765
g271
ag181
((lp16766
(lp16767
g187
ag271
aa(lp16768
g275
ag276
aatp16769
Rp16770
aatp16771
Rp16772
sg80
Nsbtp16773
a(g11515
g1
(g81
g3
Ntp16774
Rp16775
(dp16776
g85
g1
(g86
g3
Ntp16777
Rp16778
(dp16779
g90
(dp16780
g1
(g92
g3
Ntp16781
Rp16782
(dp16783
g7
(dp16784
sg9
g1
(g97
g3
Ntp16785
Rp16786
(dp16787
g14
g15
(g53
tp16788
Rp16789
(dp16790
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp16791
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16792
sg65
S'collect_transforms_functional_brain_mask_to_standard_0'
p16793
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16794
sg79
Nsg80
Nsb(dp16795
sg1
(g92
g3
Ntp16796
Rp16797
(dp16798
g7
(dp16799
sg9
g1
(g97
g3
Ntp16800
Rp16801
(dp16802
g14
g15
(g53
tp16803
Rp16804
(dp16805
g28
g29
sg3084
g23
sbsg108
(lp16806
g3084
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16807
sg65
g16793
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16808
sg79
Nsg80
Nsb(dp16809
sg1
(g92
g3
Ntp16810
Rp16811
(dp16812
g7
(dp16813
sg9
g1
(g3034
g3
Ntp16814
Rp16815
(dp16816
g3038
I4
sg14
g15
(g3039
tp16817
Rp16818
(dp16819
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg43
g3051
sg63
(dp16820
sg65
g16793
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp16821
sg79
Nsg80
Nsb(dp16822
ssg157
(dp16823
sg159
(dp16824
g16782
(dp16825
g16811
(dp16826
g163
(lp16827
(g3067
g3044
tp16828
a(g3066
g3045
tp16829
a(g3068
g3046
tp16830
a(g3065
g3047
tp16831
asssg16797
(dp16832
sg16811
(dp16833
g16797
(dp16834
g163
(lp16835
(g3094
g3084
tp16836
assssg174
g16824
sg175
(dp16837
g16782
(dp16838
sg16797
(dp16839
g16811
g16834
ssg16811
(dp16840
g16782
g16826
sssg180
g16824
sbsg43
g16793
sg65
g66
sg75
g16793
sg76
g181
((lp16841
(lp16842
g184
ag181
((lp16843
(lp16844
g187
ag184
aa(lp16845
g189
ag190
aa(lp16846
g192
ag193
aa(lp16847
g195
ag196
aa(lp16848
g198
ag199
aa(lp16849
g201
ag106
aa(lp16850
g203
ag204
aa(lp16851
g206
ag207
aatp16852
Rp16853
aa(lp16854
g211
ag181
((lp16855
(lp16856
g187
ag211
aa(lp16857
g215
ag216
aa(lp16858
g218
ag219
aa(lp16859
g221
ag222
aa(lp16860
g224
ag225
aa(lp16861
g227
ag228
aa(lp16862
g230
ag231
aa(lp16863
g233
ag234
aa(lp16864
g236
ag237
aa(lp16865
g239
ag240
aa(lp16866
g242
ag243
aa(lp16867
g245
ag246
aa(lp16868
g248
ag249
aa(lp16869
g251
ag252
aa(lp16870
g254
ag255
aa(lp16871
g257
ag258
aa(lp16872
g260
ag261
aa(lp16873
g263
ag264
aa(lp16874
g266
ag267
aatp16875
Rp16876
aa(lp16877
g271
ag181
((lp16878
(lp16879
g187
ag271
aa(lp16880
g275
ag276
aatp16881
Rp16882
aatp16883
Rp16884
sg80
Nsbtp16885
a(g13847
g1
(g81
g3
Ntp16886
Rp16887
(dp16888
g85
g1
(g86
g3
Ntp16889
Rp16890
(dp16891
g90
(dp16892
g1
(g92
g3
Ntp16893
Rp16894
(dp16895
g7
(dp16896
sg9
g1
(g97
g3
Ntp16897
Rp16898
(dp16899
g14
g15
(g53
tp16900
Rp16901
(dp16902
g28
g29
sg25
g23
sbsg108
(lp16903
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp16904
sg65
S'log_seg_preproc_0'
p16905
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp16906
sg79
Nsg80
Nsb(dp16907
sg1
(g92
g3
Ntp16908
Rp16909
(dp16910
g7
(dp16911
sg9
g1
(g97
g3
Ntp16912
Rp16913
(dp16914
g14
g15
(g53
tp16915
Rp16916
(dp16917
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g13892
sbsg108
(lp16918
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp16919
sg65
g16905
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp16920
sg79
Nsg80
Nsb(dp16921
sg1
(g92
g3
Ntp16922
Rp16923
(dp16924
g7
(dp16925
sg9
g1
(g135
g3
Ntp16926
Rp16927
(dp16928
g139
(lp16929
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp16930
Rp16931
(dp16932
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p16933
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp16934
g25
Nssg150
(lp16935
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp16936
sg65
g16905
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp16937
sg79
Nsg80
Nsb(dp16938
ssg157
(dp16939
sg159
(dp16940
g16894
(dp16941
sg16909
(dp16942
g16923
(dp16943
g163
(lp16944
(g107
g107
tp16945
a(g105
g105
tp16946
a(g104
g104
tp16947
a(g14
g14
tp16948
asssg16923
(dp16949
g16894
(dp16950
g163
(lp16951
(g25
g25
tp16952
assssg174
g16940
sg175
(dp16953
g16894
(dp16954
g16923
g16950
ssg16909
(dp16955
sg16923
(dp16956
g16909
g16943
sssg180
g16940
sbsg43
g16905
sg65
g66
sg75
g16905
sg76
g181
((lp16957
(lp16958
g184
ag181
((lp16959
(lp16960
g187
ag184
aa(lp16961
g189
ag190
aa(lp16962
g192
ag193
aa(lp16963
g195
ag196
aa(lp16964
g198
ag199
aa(lp16965
g201
ag106
aa(lp16966
g203
ag204
aa(lp16967
g206
ag207
aatp16968
Rp16969
aa(lp16970
g211
ag181
((lp16971
(lp16972
g187
ag211
aa(lp16973
g215
ag216
aa(lp16974
g218
ag219
aa(lp16975
g221
ag222
aa(lp16976
g224
ag225
aa(lp16977
g227
ag228
aa(lp16978
g230
ag231
aa(lp16979
g233
ag234
aa(lp16980
g236
ag237
aa(lp16981
g239
ag240
aa(lp16982
g242
ag243
aa(lp16983
g245
ag246
aa(lp16984
g248
ag249
aa(lp16985
g251
ag252
aa(lp16986
g254
ag255
aa(lp16987
g257
ag258
aa(lp16988
g260
ag261
aa(lp16989
g263
ag264
aa(lp16990
g266
ag267
aatp16991
Rp16992
aa(lp16993
g271
ag181
((lp16994
(lp16995
g187
ag271
aa(lp16996
g275
ag276
aatp16997
Rp16998
aatp16999
Rp17000
sg80
Nsbtp17001
a(g13847
g1
(g81
g3
Ntp17002
Rp17003
(dp17004
g85
g1
(g86
g3
Ntp17005
Rp17006
(dp17007
g90
(dp17008
g1
(g92
g3
Ntp17009
Rp17010
(dp17011
g7
(dp17012
sg9
g1
(g5697
g3
Ntp17013
Rp17014
(dp17015
g14
g15
(g5701
tp17016
Rp17017
(dp17018
g5705
g23
sg28
g29
sg5706
g23
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g23
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
g23
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
I6
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
g23
sg32
g1
(g33
g34
(dp17019
g36
g37
stp17020
Rp17021
(dp17022
g41
S'environ_items'
p17023
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'bbreg_func_to_anat'
p17024
sg63
(dp17025
sg65
S'func_to_anat_bbreg_0'
p17026
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g17024
sg76
Nsg77
(lp17027
sg79
Nsg80
Nsb(dp17028
sg1
(g92
g3
Ntp17029
Rp17030
(dp17031
g7
(dp17032
sg9
g1
(g97
g3
Ntp17033
Rp17034
(dp17035
g14
g15
(g53
tp17036
Rp17037
(dp17038
g28
g29
sS'linear_reg_matrix'
p17039
g23
sS'bbr_schedule'
p17040
S'/usr/share/fsl/5.0/etc/flirtsch/bbr.sch'
p17041
sS'anat_wm_segmentation'
p17042
g23
sS'anat_skull'
p17043
g23
sS'func'
p17044
g23
sbsg108
(lp17045
g17044
ag17043
ag17039
ag17042
ag17040
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp17046
sg65
g17026
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp17047
sg79
Nsg80
Nsb(dp17048
sg1
(g92
g3
Ntp17049
Rp17050
(dp17051
g7
(dp17052
sg9
g1
(g97
g3
Ntp17053
Rp17054
(dp17055
g14
g15
(g53
tp17056
Rp17057
(dp17058
g12102
g23
sg28
g29
sS'anat_func'
p17059
g23
sbsg108
(lp17060
g12102
ag17059
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp17061
sg65
g17026
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp17062
sg79
Nsg80
Nsb(dp17063
sg1
(g92
g3
Ntp17064
Rp17065
(dp17066
g7
(dp17067
sg9
g1
(g1980
g3
Ntp17068
Rp17069
(dp17070
g14
g15
(g1984
tp17071
Rp17072
(dp17073
g20
I00
sg28
g29
sg24
S'-thr 0.5 -bin'
p17074
sg1989
g23
sg25
g23
sg26
g23
sg1991
g23
sg30
g31
sg32
g1
(g33
g34
(dp17075
g36
g37
stp17076
Rp17077
(dp17078
g41
S'environ_items'
p17079
sg43
g32
sbsg44
g23
sg45
g37
sg1997
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'wm_bb_mask'
p17080
sg63
(dp17081
sg65
g17026
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g17080
sg76
Nsg77
(lp17082
sg79
Nsg80
Nsb(dp17083
ssg157
(dp17084
sg159
(dp17085
g17010
(dp17086
g17050
(dp17087
g163
(lp17088
(g5738
g12102
tp17089
a(g25
g17059
tp17090
asssg17030
(dp17091
g17065
(dp17092
g163
(lp17093
(g17042
g44
tp17094
assg17010
(dp17095
g163
(lp17096
(g17040
g5727
tp17097
a(g17044
g44
tp17098
a(g17043
g5708
tp17099
a(g17039
g5706
tp17100
asssg17050
(dp17101
sg17065
(dp17102
g17010
(dp17103
g163
(lp17104
((g25
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p17105
(ttp17106
g26
tp17107
assssg174
g17085
sg175
(dp17108
g17010
(dp17109
g17030
g17095
sg17065
g17103
ssg17030
(dp17110
sg17050
(dp17111
g17010
g17087
ssg17065
(dp17112
g17030
g17092
sssg180
g17085
sbsg43
g17026
sg65
g66
sg75
g17026
sg76
g181
((lp17113
(lp17114
g184
ag181
((lp17115
(lp17116
g187
ag184
aa(lp17117
g189
ag190
aa(lp17118
g192
ag193
aa(lp17119
g195
ag196
aa(lp17120
g198
ag199
aa(lp17121
g201
ag106
aa(lp17122
g203
ag204
aa(lp17123
g206
ag207
aatp17124
Rp17125
aa(lp17126
g211
ag181
((lp17127
(lp17128
g187
ag211
aa(lp17129
g215
ag216
aa(lp17130
g218
ag219
aa(lp17131
g221
ag222
aa(lp17132
g224
ag225
aa(lp17133
g227
ag228
aa(lp17134
g230
ag231
aa(lp17135
g233
ag234
aa(lp17136
g236
ag237
aa(lp17137
g239
ag240
aa(lp17138
g242
ag243
aa(lp17139
g245
ag246
aa(lp17140
g248
ag249
aa(lp17141
g251
ag252
aa(lp17142
g254
ag255
aa(lp17143
g257
ag258
aa(lp17144
g260
ag261
aa(lp17145
g263
ag264
aa(lp17146
g266
ag267
aatp17147
Rp17148
aa(lp17149
g271
ag181
((lp17150
(lp17151
g187
ag271
aa(lp17152
g275
ag276
aatp17153
Rp17154
aatp17155
Rp17156
sg80
Nsbtp17157
a(g13847
g12016
tp17158
a(g12016
g2490
tp17159
a(g12016
g1
(g81
g3
Ntp17160
Rp17161
(dp17162
g85
g1
(g86
g3
Ntp17163
Rp17164
(dp17165
g90
(dp17166
g1
(g92
g3
Ntp17167
Rp17168
(dp17169
g7
(dp17170
sg9
g1
(g97
g3
Ntp17171
Rp17172
(dp17173
g14
g15
(g53
tp17174
Rp17175
(dp17176
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g12040
sbsg108
(lp17177
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp17178
sg65
S'log_nuisance_0'
p17179
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp17180
sg79
Nsg80
Nsb(dp17181
sg1
(g92
g3
Ntp17182
Rp17183
(dp17184
g7
(dp17185
sg9
g1
(g135
g3
Ntp17186
Rp17187
(dp17188
g139
(lp17189
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp17190
Rp17191
(dp17192
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p17193
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp17194
g25
Nssg150
(lp17195
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp17196
sg65
g17179
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp17197
sg79
Nsg80
Nsb(dp17198
sg1
(g92
g3
Ntp17199
Rp17200
(dp17201
g7
(dp17202
sg9
g1
(g97
g3
Ntp17203
Rp17204
(dp17205
g14
g15
(g53
tp17206
Rp17207
(dp17208
g28
g29
sg25
g23
sbsg108
(lp17209
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp17210
sg65
g17179
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp17211
sg79
Nsg80
Nsb(dp17212
ssg157
(dp17213
sg159
(dp17214
g17168
(dp17215
g17183
(dp17216
g163
(lp17217
(g107
g107
tp17218
a(g105
g105
tp17219
a(g104
g104
tp17220
a(g14
g14
tp17221
asssg17183
(dp17222
g17200
(dp17223
g163
(lp17224
(g25
g25
tp17225
asssg17200
(dp17226
ssg174
g17214
sg175
(dp17227
g17168
(dp17228
sg17183
(dp17229
g17168
g17216
ssg17200
(dp17230
g17183
g17223
sssg180
g17214
sbsg43
g17179
sg65
g66
sg75
g17179
sg76
g181
((lp17231
(lp17232
g184
ag181
((lp17233
(lp17234
g187
ag184
aa(lp17235
g189
ag190
aa(lp17236
g192
ag193
aa(lp17237
g195
ag196
aa(lp17238
g198
ag199
aa(lp17239
g201
ag106
aa(lp17240
g203
ag204
aa(lp17241
g206
ag207
aatp17242
Rp17243
aa(lp17244
g211
ag181
((lp17245
(lp17246
g187
ag211
aa(lp17247
g215
ag216
aa(lp17248
g218
ag219
aa(lp17249
g221
ag222
aa(lp17250
g224
ag225
aa(lp17251
g227
ag228
aa(lp17252
g230
ag231
aa(lp17253
g233
ag234
aa(lp17254
g236
ag237
aa(lp17255
g239
ag240
aa(lp17256
g242
ag243
aa(lp17257
g245
ag246
aa(lp17258
g248
ag249
aa(lp17259
g251
ag252
aa(lp17260
g254
ag255
aa(lp17261
g257
ag258
aa(lp17262
g260
ag261
aa(lp17263
g263
ag264
aa(lp17264
g266
ag267
aatp17265
Rp17266
aa(lp17267
g271
ag181
((lp17268
(lp17269
g187
ag271
aa(lp17270
g275
ag276
aatp17271
Rp17272
aatp17273
Rp17274
sg80
Nsbtp17275
a(g12016
g1
(g81
g3
Ntp17276
Rp17277
(dp17278
g85
g1
(g86
g3
Ntp17279
Rp17280
(dp17281
g90
(dp17282
g1
(g92
g3
Ntp17283
Rp17284
(dp17285
g7
(dp17286
sg9
g1
(g2115
g3
Ntp17287
Rp17288
(dp17289
g14
g15
(g2119
tp17290
Rp17291
(dp17292
g20
I00
sg28
g29
sg25
S'./residual_filtered_3dT.nii.gz'
p17293
sg26
g23
sg750
g23
sg752
g1875
sg30
g31
sg32
g1
(g33
g34
(dp17294
tp17295
Rp17296
(dp17297
g41
S'environ_items'
p17298
sg43
g32
sbsg44
g23
sg2128
g23
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'stddev_fltrd'
p17299
sg63
(dp17300
sg65
S'alff_falff_0'
p17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g17299
sg76
Nsg77
(lp17302
sg79
Nsg80
Nsb(dp17303
sg1
(g81
g3
Ntp17304
Rp17305
(dp17306
g85
g1
(g86
g3
Ntp17307
Rp17308
(dp17309
g90
(dp17310
g1
(g92
g3
Ntp17311
Rp17312
(dp17313
g7
(dp17314
sg9
g1
(g97
g3
Ntp17315
Rp17316
(dp17317
g14
g15
(g53
tp17318
Rp17319
(dp17320
g28
g29
sg7635
g23
sbsg108
(lp17321
g7635
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp17322
sg65
S'alff_zscore'
p17323
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp17324
sg79
Nsg80
Nsb(dp17325
sg1
(g92
g3
Ntp17326
Rp17327
(dp17328
g7
(dp17329
sg9
g1
(g10
g3
Ntp17330
Rp17331
(dp17332
g14
g15
(g16
tp17333
Rp17334
(dp17335
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp17336
g36
g37
stp17337
Rp17338
(dp17339
g41
S'environ_items'
p17340
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g2549
sg63
(dp17341
sg65
g17323
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp17342
sg79
Nsg80
Nsb(dp17343
sg1
(g92
g3
Ntp17344
Rp17345
(dp17346
g7
(dp17347
sg9
g1
(g135
g3
Ntp17348
Rp17349
(dp17350
g139
(lp17351
g2611
ag2642
asg14
g15
(g142
tp17352
Rp17353
(dp17354
g20
I00
sg146
S'S\'def get_operand_string(mean, std_dev):\\n\\n    """\\n    Generate the Operand String to be used in workflow nodes to supply \\n    mean and std deviation to alff workflow nodes\\n\\n    Parameters\\n    ----------\\n\\n    mean: string\\n        mean value in string format\\n\\n    std_dev : string\\n        std deviation value in string format\\n\\n\\n    Returns\\n    -------\\n\\n    op_string : string\\n\\n\\n    """\\n\\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\\n\\n    op_string = str1 + " -mas %s"\\n\\n    return op_string\\n\'\n.'
p17355
sg2642
g23
sg28
g29
sg2611
g23
sbsg148
(dp17356
g24
Nssg150
(lp17357
g24
asg152
Nsbsg51
Nsg43
g24
sg63
(dp17358
sg65
g17323
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24
sg76
Nsg77
(lp17359
sg79
Nsg80
Nsb(dp17360
sg1
(g92
g3
Ntp17361
Rp17362
(dp17363
g7
(dp17364
sg9
g1
(g97
g3
Ntp17365
Rp17366
(dp17367
g14
g15
(g53
tp17368
Rp17369
(dp17370
g2580
g23
sg28
g29
sg7543
g23
sbsg108
(lp17371
g7543
ag2580
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp17372
sg65
g17323
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp17373
sg79
Nsg80
Nsb(dp17374
sg1
(g92
g3
Ntp17375
Rp17376
(dp17377
g7
(dp17378
sg9
g1
(g2595
g3
Ntp17379
Rp17380
(dp17381
g14
g15
(g2599
tp17382
Rp17383
(dp17384
g20
I00
sg28
g29
sg24
S'-k %s -s'
p17385
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp17386
g36
g37
stp17387
Rp17388
(dp17389
g41
S'environ_items'
p17390
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g2631
sg63
(dp17391
sg65
g17323
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2631
sg76
Nsg77
(lp17392
sg79
Nsg80
Nsb(dp17393
sg1
(g92
g3
Ntp17394
Rp17395
(dp17396
g7
(dp17397
sg9
g1
(g2595
g3
Ntp17398
Rp17399
(dp17400
g14
g15
(g2599
tp17401
Rp17402
(dp17403
g20
I00
sg28
g29
sg24
S'-k %s -m'
p17404
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp17405
g36
g37
stp17406
Rp17407
(dp17408
g41
S'environ_items'
p17409
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g2611
sg63
(dp17410
sg65
g17323
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2611
sg76
Nsg77
(lp17411
sg79
Nsg80
Nsb(dp17412
ssg157
(dp17413
sg159
(dp17414
g17312
(dp17415
sg17327
(dp17416
g17312
(dp17417
g163
(lp17418
(g25
g7635
tp17419
asssg17345
(dp17420
g17327
(dp17421
g163
(lp17422
(g24
g24
tp17423
asssg17362
(dp17424
g17327
(dp17425
g163
(lp17426
(g7543
g44
tp17427
a(g2580
g47
tp17428
assg17395
(dp17429
g163
(lp17430
(g7543
g44
tp17431
a(g2580
g2580
tp17432
assg17376
(dp17433
g163
(lp17434
(g7543
g44
tp17435
a(g2580
g2580
tp17436
asssg17376
(dp17437
g17345
(dp17438
g163
(lp17439
(g2689
g2642
tp17440
asssg17395
(dp17441
g17345
(dp17442
g163
(lp17443
(g2689
g2611
tp17444
assssg174
g17414
sg175
(dp17445
g17312
(dp17446
g17327
g17417
ssg17327
(dp17447
g17345
g17421
sg17362
g17425
ssg17345
(dp17448
g17395
g17442
sg17376
g17438
ssg17362
(dp17449
sg17376
(dp17450
g17362
g17433
ssg17395
(dp17451
g17362
g17429
sssg180
g17414
sbsg43
g17323
sg65
g17301
sg75
g17323
sg76
g181
((lp17452
(lp17453
g184
ag181
((lp17454
(lp17455
g187
ag184
aa(lp17456
g189
ag190
aa(lp17457
g192
ag193
aa(lp17458
g195
ag196
aa(lp17459
g198
ag199
aa(lp17460
g201
ag106
aa(lp17461
g203
ag204
aa(lp17462
g206
ag207
aatp17463
Rp17464
aa(lp17465
g211
ag181
((lp17466
(lp17467
g187
ag211
aa(lp17468
g215
ag216
aa(lp17469
g218
ag219
aa(lp17470
g221
ag222
aa(lp17471
g224
ag225
aa(lp17472
g227
ag228
aa(lp17473
g230
ag231
aa(lp17474
g233
ag234
aa(lp17475
g236
ag237
aa(lp17476
g239
ag240
aa(lp17477
g242
ag243
aa(lp17478
g245
ag246
aa(lp17479
g248
ag249
aa(lp17480
g251
ag252
aa(lp17481
g254
ag255
aa(lp17482
g257
ag258
aa(lp17483
g260
ag261
aa(lp17484
g263
ag264
aa(lp17485
g266
ag267
aatp17486
Rp17487
aa(lp17488
g271
ag181
((lp17489
(lp17490
g187
ag271
aa(lp17491
g275
ag276
aatp17492
Rp17493
aatp17494
Rp17495
sg80
Nsb(dp17496
sg1
(g92
g3
Ntp17497
Rp17498
(dp17499
g7
(dp17500
sg9
g1
(g97
g3
Ntp17501
Rp17502
(dp17503
g14
g15
(g53
tp17504
Rp17505
(dp17506
g28
g29
sS'lp'
p17507
(lp17508
F0.1
asbsg108
(lp17509
g17507
asg110
I01
sbsg51
Nsg43
S'lp_input'
p17510
sg63
(dp17511
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g17507
(lp17512
F0.1
atp17513
sg74
I00
sg75
g17510
sg76
Nsg77
(lp17514
sg79
Nsg80
Nsb(dp17515
sg1
(g92
g3
Ntp17516
Rp17517
(dp17518
g7
(dp17519
sg9
g1
(g1950
g3
Ntp17520
Rp17521
(dp17522
g14
g15
(g1954
tp17523
Rp17524
(dp17525
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
S'(1.0*bool(a))*((1.0*b)/(1.0*c))'
p17526
sg26
S'-float'
p17527
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp17528
tp17529
Rp17530
(dp17531
g41
S'environ_items'
p17532
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'falff'
p17533
sg63
(dp17534
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g17533
sg76
Nsg77
(lp17535
sg79
Nsg80
Nsb(dp17536
sg1
(g92
g3
Ntp17537
Rp17538
(dp17539
g7
(dp17540
sg9
g1
(g97
g3
Ntp17541
Rp17542
(dp17543
g14
g15
(g53
tp17544
Rp17545
(dp17546
g28
g29
sS'hp'
p17547
(lp17548
F0.01
asbsg108
(lp17549
g17547
asg110
I01
sbsg51
Nsg43
S'hp_input'
p17550
sg63
(dp17551
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g17547
(lp17552
F0.01
atp17553
sg74
I00
sg75
g17550
sg76
Nsg77
(lp17554
sg79
Nsg80
Nsb(dp17555
sg1
(g81
g3
Ntp17556
Rp17557
(dp17558
g85
g1
(g86
g3
Ntp17559
Rp17560
(dp17561
g90
(dp17562
g1
(g92
g3
Ntp17563
Rp17564
(dp17565
g7
(dp17566
sg9
g1
(g135
g3
Ntp17567
Rp17568
(dp17569
g139
(lp17570
g2611
ag2642
asg14
g15
(g142
tp17571
Rp17572
(dp17573
g20
I00
sg146
S'S\'def get_operand_string(mean, std_dev):\\n\\n    """\\n    Generate the Operand String to be used in workflow nodes to supply \\n    mean and std deviation to alff workflow nodes\\n\\n    Parameters\\n    ----------\\n\\n    mean: string\\n        mean value in string format\\n\\n    std_dev : string\\n        std deviation value in string format\\n\\n\\n    Returns\\n    -------\\n\\n    op_string : string\\n\\n\\n    """\\n\\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\\n\\n    op_string = str1 + " -mas %s"\\n\\n    return op_string\\n\'\n.'
p17574
sg2642
g23
sg28
g29
sg2611
g23
sbsg148
(dp17575
g24
Nssg150
(lp17576
g24
asg152
Nsbsg51
Nsg43
g24
sg63
(dp17577
sg65
S'falf_zscore'
p17578
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24
sg76
Nsg77
(lp17579
sg79
Nsg80
Nsb(dp17580
sg1
(g92
g3
Ntp17581
Rp17582
(dp17583
g7
(dp17584
sg9
g1
(g2595
g3
Ntp17585
Rp17586
(dp17587
g14
g15
(g2599
tp17588
Rp17589
(dp17590
g20
I00
sg28
g29
sg24
g17404
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp17591
g36
g37
stp17592
Rp17593
(dp17594
g41
S'environ_items'
p17595
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g2611
sg63
(dp17596
sg65
g17578
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2611
sg76
Nsg77
(lp17597
sg79
Nsg80
Nsb(dp17598
sg1
(g92
g3
Ntp17599
Rp17600
(dp17601
g7
(dp17602
sg9
g1
(g97
g3
Ntp17603
Rp17604
(dp17605
g14
g15
(g53
tp17606
Rp17607
(dp17608
g2580
g23
sg28
g29
sg7543
g23
sbsg108
(lp17609
g7543
ag2580
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp17610
sg65
g17578
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp17611
sg79
Nsg80
Nsb(dp17612
sg1
(g92
g3
Ntp17613
Rp17614
(dp17615
g7
(dp17616
sg9
g1
(g97
g3
Ntp17617
Rp17618
(dp17619
g14
g15
(g53
tp17620
Rp17621
(dp17622
g28
g29
sg7635
g23
sbsg108
(lp17623
g7635
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp17624
sg65
g17578
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp17625
sg79
Nsg80
Nsb(dp17626
sg1
(g92
g3
Ntp17627
Rp17628
(dp17629
g7
(dp17630
sg9
g1
(g10
g3
Ntp17631
Rp17632
(dp17633
g14
g15
(g16
tp17634
Rp17635
(dp17636
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp17637
g36
g37
stp17638
Rp17639
(dp17640
g41
S'environ_items'
p17641
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g2549
sg63
(dp17642
sg65
g17578
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp17643
sg79
Nsg80
Nsb(dp17644
sg1
(g92
g3
Ntp17645
Rp17646
(dp17647
g7
(dp17648
sg9
g1
(g2595
g3
Ntp17649
Rp17650
(dp17651
g14
g15
(g2599
tp17652
Rp17653
(dp17654
g20
I00
sg28
g29
sg24
g17385
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp17655
g36
g37
stp17656
Rp17657
(dp17658
g41
S'environ_items'
p17659
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g2631
sg63
(dp17660
sg65
g17578
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2631
sg76
Nsg77
(lp17661
sg79
Nsg80
Nsb(dp17662
ssg157
(dp17663
sg159
(dp17664
g17564
(dp17665
g17628
(dp17666
g163
(lp17667
(g24
g24
tp17668
asssg17582
(dp17669
g17564
(dp17670
g163
(lp17671
(g2689
g2611
tp17672
asssg17600
(dp17673
g17628
(dp17674
g163
(lp17675
(g7543
g44
tp17676
a(g2580
g47
tp17677
assg17582
(dp17678
g163
(lp17679
(g7543
g44
tp17680
a(g2580
g2580
tp17681
assg17646
(dp17682
g163
(lp17683
(g7543
g44
tp17684
a(g2580
g2580
tp17685
asssg17614
(dp17686
sg17628
(dp17687
g17614
(dp17688
g163
(lp17689
(g25
g7635
tp17690
asssg17646
(dp17691
g17564
(dp17692
g163
(lp17693
(g2689
g2642
tp17694
assssg174
g17664
sg175
(dp17695
g17564
(dp17696
g17582
g17670
sg17646
g17692
ssg17582
(dp17697
g17600
g17678
ssg17600
(dp17698
sg17614
(dp17699
g17628
g17688
ssg17628
(dp17700
g17600
g17674
sg17564
g17666
ssg17646
(dp17701
g17600
g17682
sssg180
g17664
sbsg43
g17578
sg65
g17301
sg75
g17578
sg76
g181
((lp17702
(lp17703
g184
ag181
((lp17704
(lp17705
g187
ag184
aa(lp17706
g189
ag190
aa(lp17707
g192
ag193
aa(lp17708
g195
ag196
aa(lp17709
g198
ag199
aa(lp17710
g201
ag106
aa(lp17711
g203
ag204
aa(lp17712
g206
ag207
aatp17713
Rp17714
aa(lp17715
g211
ag181
((lp17716
(lp17717
g187
ag211
aa(lp17718
g215
ag216
aa(lp17719
g218
ag219
aa(lp17720
g221
ag222
aa(lp17721
g224
ag225
aa(lp17722
g227
ag228
aa(lp17723
g230
ag231
aa(lp17724
g233
ag234
aa(lp17725
g236
ag237
aa(lp17726
g239
ag240
aa(lp17727
g242
ag243
aa(lp17728
g245
ag246
aa(lp17729
g248
ag249
aa(lp17730
g251
ag252
aa(lp17731
g254
ag255
aa(lp17732
g257
ag258
aa(lp17733
g260
ag261
aa(lp17734
g263
ag264
aa(lp17735
g266
ag267
aatp17736
Rp17737
aa(lp17738
g271
ag181
((lp17739
(lp17740
g187
ag271
aa(lp17741
g275
ag276
aatp17742
Rp17743
aatp17744
Rp17745
sg80
Nsb(dp17746
sg1
(g92
g3
Ntp17747
Rp17748
(dp17749
g7
(dp17750
sg9
g1
(g97
g3
Ntp17751
Rp17752
(dp17753
g14
g15
(g53
tp17754
Rp17755
(dp17756
g28
g29
sS'alff_Z_img'
p17757
g23
sS'falff_img'
p17758
g23
sS'falff_Z_img'
p17759
g23
sS'alff_img'
p17760
g23
sbsg108
(lp17761
g17760
ag17758
ag17757
ag17759
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp17762
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp17763
sg79
Nsg80
Nsb(dp17764
sg1
(g92
g3
Ntp17765
Rp17766
(dp17767
g7
(dp17768
sg9
g1
(cnipype.interfaces.afni.preprocess
Bandpass
p17769
g3
Ntp17770
Rp17771
(dp17772
g14
g15
(cnipype.interfaces.afni.preprocess
BandpassInputSpec
p17773
tp17774
Rp17775
(dp17776
g28
g29
sS'nfft'
p17777
g23
sg1849
g23
sS'lowpass'
p17778
g23
sS'localPV'
p17779
g23
sS'no_detrend'
p17780
g23
sS'orthogonalize_dset'
p17781
g23
sg44
g23
sS'blur'
p17782
g23
sg20
I00
sg3945
g23
sS'automask'
p17783
g23
sS'despike'
p17784
g23
sg26
g23
sS'highpass'
p17785
g23
sg30
g31
sS'notrans'
p17786
g23
sS'orthogonalize_file'
p17787
g23
sg25
S'./residual_filtered.nii.gz'
p17788
sg750
g23
sg752
g1875
sg32
g1
(g33
g34
(dp17789
tp17790
Rp17791
(dp17792
g41
S'environ_items'
p17793
sg43
g32
sbsbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'bandpass_filtering'
p17794
sg63
(dp17795
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g17794
sg76
Nsg77
(lp17796
sg79
Nsg80
Nsb(dp17797
sg1
(g92
g3
Ntp17798
Rp17799
(dp17800
g7
(dp17801
sg9
g1
(g135
g3
Ntp17802
Rp17803
(dp17804
g139
(lp17805
g750
asg14
g15
(g142
tp17806
Rp17807
(dp17808
g20
I00
sg146
S'S\'def get_opt_string(mask):\\n    """\\n    Method to return option string for 3dTstat\\n\\n    Parameters\\n    ----------\\n    mask : string (file)\\n\\n    Returns\\n    -------\\n    opt_str : string\\n\\n    """\\n    opt_str = " -stdev -mask %s" %mask\\n    return opt_str\\n\'\n.'
p17809
sg750
g23
sg28
g29
sbsg148
(dp17810
S'option_string'
p17811
Nssg150
(lp17812
g17811
asg152
Nsbsg51
Nsg43
S'get_option_string'
p17813
sg63
(dp17814
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g17813
sg76
Nsg77
(lp17815
sg79
Nsg80
Nsb(dp17816
sg1
(g92
g3
Ntp17817
Rp17818
(dp17819
g7
(dp17820
sg9
g1
(g2115
g3
Ntp17821
Rp17822
(dp17823
g14
g15
(g2119
tp17824
Rp17825
(dp17826
g20
I00
sg28
g29
sg25
S'./residual_3dT.nii.gz'
p17827
sg26
g23
sg750
g23
sg752
g1875
sg30
g31
sg32
g1
(g33
g34
(dp17828
tp17829
Rp17830
(dp17831
g41
S'environ_items'
p17832
sg43
g32
sbsg44
g23
sg2128
g23
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
S'stddev_unfltrd'
p17833
sg63
(dp17834
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g17833
sg76
Nsg77
(lp17835
sg79
Nsg80
Nsb(dp17836
sg1
(g92
g3
Ntp17837
Rp17838
(dp17839
g7
(dp17840
sg9
g1
(g97
g3
Ntp17841
Rp17842
(dp17843
g14
g15
(g53
tp17844
Rp17845
(dp17846
g28
g29
sg3184
g23
sg2531
g23
sbsg108
(lp17847
g3184
ag2531
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp17848
sg65
g17301
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp17849
sg79
Nsg80
Nsb(dp17850
ssg157
(dp17851
sg159
(dp17852
g17284
(dp17853
g17305
(dp17854
g163
(lp17855
(g25
S'inputspec.input_file'
p17856
tp17857
assg17748
(dp17858
g163
(lp17859
(g25
g17760
tp17860
assg17517
(dp17861
g163
(lp17862
(g25
g1961
tp17863
asssg17305
(dp17864
g17748
(dp17865
g163
(lp17866
(S'outputspec.z_score_img'
p17867
g17757
tp17868
asssg17498
(dp17869
g17766
(dp17870
g163
(lp17871
(g17507
g17778
tp17872
asssg17517
(dp17873
g17557
(dp17874
g163
(lp17875
(g25
g17856
tp17876
assg17748
(dp17877
g163
(lp17878
(g25
g17758
tp17879
asssg17538
(dp17880
g17766
(dp17881
g163
(lp17882
(g17547
g17785
tp17883
asssg17557
(dp17884
g17748
(dp17885
g163
(lp17886
(g17867
g17759
tp17887
asssg17748
(dp17888
sg17766
(dp17889
g17284
(dp17890
g163
(lp17891
(g25
g44
tp17892
asssg17799
(dp17893
g17284
(dp17894
g163
(lp17895
(g17811
g2128
tp17896
assg17818
(dp17897
g163
(lp17898
(g17811
g2128
tp17899
asssg17818
(dp17900
g17517
(dp17901
g163
(lp17902
(g25
g1962
tp17903
asssg17838
(dp17904
g17557
(dp17905
g163
(lp17906
(g2531
S'inputspec.mask_file'
p17907
tp17908
assg17305
(dp17909
g163
(lp17910
(g2531
g17907
tp17911
assg17799
(dp17912
g163
(lp17913
(g2531
g750
tp17914
assg17818
(dp17915
g163
(lp17916
(g3184
g44
tp17917
assg17766
(dp17918
g163
(lp17919
(g3184
g44
tp17920
assg17517
(dp17921
g163
(lp17922
(g2531
g1963
tp17923
assssg174
g17852
sg175
(dp17924
g17284
(dp17925
g17766
g17890
sg17799
g17894
ssg17305
(dp17926
g17284
g17854
sg17838
g17909
ssg17498
(dp17927
sg17517
(dp17928
g17284
g17861
sg17838
g17921
sg17818
g17901
ssg17538
(dp17929
sg17557
(dp17930
g17517
g17874
sg17838
g17905
ssg17748
(dp17931
g17284
g17858
sg17557
g17885
sg17517
g17877
sg17305
g17865
ssg17766
(dp17932
g17538
g17881
sg17838
g17918
sg17498
g17870
ssg17799
(dp17933
g17838
g17912
ssg17818
(dp17934
g17799
g17897
sg17838
g17915
ssg17838
(dp17935
ssg180
g17852
sbsg43
g17301
sg65
g66
sg75
g17301
sg76
g181
((lp17936
(lp17937
g184
ag181
((lp17938
(lp17939
g187
ag184
aa(lp17940
g189
ag190
aa(lp17941
g192
ag193
aa(lp17942
g195
ag196
aa(lp17943
g198
ag199
aa(lp17944
g201
ag106
aa(lp17945
g203
ag204
aa(lp17946
g206
ag207
aatp17947
Rp17948
aa(lp17949
g211
ag181
((lp17950
(lp17951
g187
ag211
aa(lp17952
g215
ag216
aa(lp17953
g218
ag219
aa(lp17954
g221
ag222
aa(lp17955
g224
ag225
aa(lp17956
g227
ag228
aa(lp17957
g230
ag231
aa(lp17958
g233
ag234
aa(lp17959
g236
ag237
aa(lp17960
g239
ag240
aa(lp17961
g242
ag243
aa(lp17962
g245
ag246
aa(lp17963
g248
ag249
aa(lp17964
g251
ag252
aa(lp17965
g254
ag255
aa(lp17966
g257
ag258
aa(lp17967
g260
ag261
aa(lp17968
g263
ag264
aa(lp17969
g266
ag267
aatp17970
Rp17971
aa(lp17972
g271
ag181
((lp17973
(lp17974
g187
ag271
aa(lp17975
g275
ag276
aatp17976
Rp17977
aatp17978
Rp17979
sg80
Nsbtp17980
a(g1
(g81
g3
Ntp17981
Rp17982
(dp17983
g85
g1
(g86
g3
Ntp17984
Rp17985
(dp17986
g90
(dp17987
g1
(g92
g3
Ntp17988
Rp17989
(dp17990
g7
(dp17991
sg9
g1
(g97
g3
Ntp17992
Rp17993
(dp17994
g14
g15
(g53
tp17995
Rp17996
(dp17997
g28
g29
sS'anat'
p17998
g23
sg1816
g23
sbsg108
(lp17999
g1816
ag17998
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp18000
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'anat_gather_0'
p18001
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp18002
sg80
Nsb(dp18003
sg1
(g92
g3
Ntp18004
Rp18005
(dp18006
g7
(dp18007
sg9
g1
(g97
g3
Ntp18008
Rp18009
(dp18010
g14
g15
(g53
tp18011
Rp18012
(dp18013
g28
g29
sg17998
g1840
sg1816
S'0010128_session_1'
p18014
sbsg108
(lp18015
g1816
ag17998
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp18016
sg72
Nsg69
Nsg79
Nsg43
S'inputnode'
p18017
sg65
g18001
sg71
I00
sg73
Nsg74
I00
sg75
g18017
sg76
Nsg77
(lp18018
sg80
Nsb(dp18019
ssg159
(dp18020
g17989
(dp18021
sg18005
(dp18022
g17989
(dp18023
g163
(lp18024
(g1816
g1816
tp18025
a(g17998
g17998
tp18026
assssg174
g18020
sg175
(dp18027
g17989
(dp18028
g18005
g18023
ssg18005
(dp18029
ssg157
(dp18030
sg180
g18020
sbsg43
g18001
sg65
g66
sg75
g18001
sg76
g181
((lp18031
(lp18032
g184
ag181
((lp18033
(lp18034
g187
ag184
aa(lp18035
g189
ag190
aa(lp18036
g192
ag193
aa(lp18037
g195
ag196
aa(lp18038
g198
ag199
aa(lp18039
g201
ag106
aa(lp18040
g203
ag204
aa(lp18041
g206
ag207
aatp18042
Rp18043
aa(lp18044
g211
ag181
((lp18045
(lp18046
g187
ag211
aa(lp18047
g215
ag216
aa(lp18048
g218
ag219
aa(lp18049
g221
ag222
aa(lp18050
g224
ag225
aa(lp18051
g227
ag228
aa(lp18052
g230
ag231
aa(lp18053
g233
ag234
aa(lp18054
g236
ag237
aa(lp18055
g239
ag240
aa(lp18056
g242
ag243
aa(lp18057
g245
ag246
aa(lp18058
g248
ag249
aa(lp18059
g251
ag252
aa(lp18060
g254
ag255
aa(lp18061
g257
ag258
aa(lp18062
g260
ag261
aa(lp18063
g263
ag264
aa(lp18064
g266
ag267
aatp18065
Rp18066
aa(lp18067
g271
ag181
((lp18068
(lp18069
g187
ag271
aa(lp18070
g275
ag276
aatp18071
Rp18072
aatp18073
Rp18074
sg80
Nsbg1
(g81
g3
Ntp18075
Rp18076
(dp18077
g85
g1
(g86
g3
Ntp18078
Rp18079
(dp18080
g90
(dp18081
g1
(g92
g3
Ntp18082
Rp18083
(dp18084
g7
(dp18085
sg9
g1
(g97
g3
Ntp18086
Rp18087
(dp18088
g14
g15
(g53
tp18089
Rp18090
(dp18091
g28
g29
sg17998
g23
sbsg108
(lp18092
g17998
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp18093
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'anat_preproc_0'
p18094
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp18095
sg80
Nsb(dp18096
sg1
(g92
g3
Ntp18097
Rp18098
(dp18099
g7
(dp18100
sg9
g1
(g97
g3
Ntp18101
Rp18102
(dp18103
g14
g15
(g53
tp18104
Rp18105
(dp18106
g2187
g23
sg3192
g23
sg2185
g23
sg28
g29
sg2186
g23
sbsg108
(lp18107
g2185
ag2187
ag2186
ag3192
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp18108
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
g18094
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp18109
sg80
Nsb(dp18110
sg1
(g92
g3
Ntp18111
Rp18112
(dp18113
g7
(dp18114
sg9
g1
(g2006
g3
Ntp18115
Rp18116
(dp18117
g14
g15
(g2010
tp18118
Rp18119
(dp18120
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg752
g1875
sg2014
g23
sg2015
g23
sg30
g31
sg2016
g23
sg44
g23
sg32
g1
(g33
g34
(dp18121
tp18122
Rp18123
(dp18124
g41
S'environ_items'
p18125
sg43
g32
sbsg2022
g2023
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp18126
sg72
Nsg69
Nsg79
Nsg43
S'anat_reorient'
p18127
sg65
g18094
sg71
I00
sg73
Nsg74
I00
sg75
g18127
sg76
Nsg77
(lp18128
sg80
Nsb(dp18129
sg1
(g92
g3
Ntp18130
Rp18131
(dp18132
g7
(dp18133
sg9
g1
(g2053
g3
Ntp18134
Rp18135
(dp18136
g14
g15
(g2057
tp18137
Rp18138
(dp18139
g20
I00
sg28
g29
sg2061
I01
sg26
g23
sg2062
g23
sg30
g31
sg32
g1
(g33
g34
(dp18140
tp18141
Rp18142
(dp18143
g41
S'environ_items'
p18144
sg43
g32
sbsg44
g23
sg2068
g23
sg2069
g23
sbsg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp18145
sg72
Nsg69
Nsg79
Nsg43
S'anat_deoblique'
p18146
sg65
g18094
sg71
I00
sg73
Nsg74
I00
sg75
g18146
sg76
Nsg77
(lp18147
sg80
Nsb(dp18148
sg1
(g92
g3
Ntp18149
Rp18150
(dp18151
g7
(dp18152
sg9
g1
(g1950
g3
Ntp18153
Rp18154
(dp18155
g14
g15
(g1954
tp18156
Rp18157
(dp18158
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
S'a*step(b)'
p18159
sg26
g23
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp18160
tp18161
Rp18162
(dp18163
g41
S'environ_items'
p18164
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp18165
sg72
Nsg69
Nsg79
Nsg43
S'anat_brain_only'
p18166
sg65
g18094
sg71
I00
sg73
Nsg74
I00
sg75
g18166
sg76
Nsg77
(lp18167
sg80
Nsb(dp18168
sg1
(g92
g3
Ntp18169
Rp18170
(dp18171
g7
(dp18172
sg9
g1
(cnipype.interfaces.afni.preprocess
SkullStrip
p18173
g3
Ntp18174
Rp18175
(dp18176
g14
g15
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p18177
tp18178
Rp18179
(dp18180
g20
I00
sg28
g29
sg25
g23
sg26
g23
sg752
g753
sg30
g31
sg32
g1
(g33
g34
(dp18181
tp18182
Rp18183
(dp18184
g41
S'environ_items'
p18185
sg43
g32
sbsg44
g23
sbsg759
g753
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp18186
sg72
Nsg69
Nsg79
Nsg43
S'anat_skullstrip'
p18187
sg65
g18094
sg71
I00
sg73
Nsg74
I00
sg75
g18187
sg76
Nsg77
(lp18188
sg80
Nsb(dp18189
ssg159
(dp18190
g18083
(dp18191
g18131
(dp18192
g163
(lp18193
(g17998
g44
tp18194
asssg18098
(dp18195
sg18112
(dp18196
g18098
(dp18197
g163
(lp18198
(g25
g2187
tp18199
assg18150
(dp18200
g163
(lp18201
(g25
g1963
tp18202
assg18170
(dp18203
g163
(lp18204
(g25
g44
tp18205
asssg18131
(dp18206
g18112
(dp18207
g163
(lp18208
(g25
g44
tp18209
assg18098
(dp18210
g163
(lp18211
(g25
g2185
tp18212
asssg18150
(dp18213
g18098
(dp18214
g163
(lp18215
(g25
g3192
tp18216
asssg18170
(dp18217
g18098
(dp18218
g163
(lp18219
(g25
g2186
tp18220
assg18150
(dp18221
g163
(lp18222
(g25
g1961
tp18223
assssg174
g18190
sg175
(dp18224
g18083
(dp18225
sg18098
(dp18226
g18112
g18197
sg18170
g18218
sg18150
g18214
sg18131
g18210
ssg18112
(dp18227
g18131
g18207
ssg18131
(dp18228
g18083
g18192
ssg18150
(dp18229
g18112
g18200
sg18170
g18221
ssg18170
(dp18230
g18112
g18203
sssg157
(dp18231
sg180
g18190
sbsg43
g18094
sg65
g66
sg75
g18094
sg76
g181
((lp18232
(lp18233
g184
ag181
((lp18234
(lp18235
g187
ag184
aa(lp18236
g189
ag190
aa(lp18237
g192
ag193
aa(lp18238
g195
ag196
aa(lp18239
g198
ag199
aa(lp18240
g201
ag106
aa(lp18241
g203
ag204
aa(lp18242
g206
ag207
aatp18243
Rp18244
aa(lp18245
g211
ag181
((lp18246
(lp18247
g187
ag211
aa(lp18248
g215
ag216
aa(lp18249
g218
ag219
aa(lp18250
g221
ag222
aa(lp18251
g224
ag225
aa(lp18252
g227
ag228
aa(lp18253
g230
ag231
aa(lp18254
g233
ag234
aa(lp18255
g236
ag237
aa(lp18256
g239
ag240
aa(lp18257
g242
ag243
aa(lp18258
g245
ag246
aa(lp18259
g248
ag249
aa(lp18260
g251
ag252
aa(lp18261
g254
ag255
aa(lp18262
g257
ag258
aa(lp18263
g260
ag261
aa(lp18264
g263
ag264
aa(lp18265
g266
ag267
aatp18266
Rp18267
aa(lp18268
g271
ag181
((lp18269
(lp18270
g187
ag271
aa(lp18271
g275
ag276
aatp18272
Rp18273
aatp18274
Rp18275
sg80
Nsbtp18276
a(g18076
g1
(g81
g3
Ntp18277
Rp18278
(dp18279
g85
g1
(g86
g3
Ntp18280
Rp18281
(dp18282
g90
(dp18283
g1
(g92
g3
Ntp18284
Rp18285
(dp18286
g7
(dp18287
sg9
g1
(g97
g3
Ntp18288
Rp18289
(dp18290
g14
g15
(g53
tp18291
Rp18292
(dp18293
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp18294
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp18295
sg65
S'sca_roi_fsl_to_itk_1'
p18296
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp18297
sg79
Nsg80
Nsb(dp18298
sg1
(g92
g3
Ntp18299
Rp18300
(dp18301
g7
(dp18302
sg9
g1
(g97
g3
Ntp18303
Rp18304
(dp18305
g14
g15
(g53
tp18306
Rp18307
(dp18308
g28
g29
sg2893
g23
sbsg108
(lp18309
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp18310
sg65
g18296
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp18311
sg79
Nsg80
Nsb(dp18312
sg1
(g92
g3
Ntp18313
Rp18314
(dp18315
g7
(dp18316
sg9
g1
(g135
g3
Ntp18317
Rp18318
(dp18319
g139
(lp18320
g2910
asg14
g15
(g142
tp18321
Rp18322
(dp18323
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p18324
sbsg148
(dp18325
g2916
Nssg150
(lp18326
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp18327
sg65
g18296
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp18328
sg79
Nsg80
Nsb(dp18329
sg1
(g92
g3
Ntp18330
Rp18331
(dp18332
g7
(dp18333
sg9
g1
(g2879
g3
Ntp18334
Rp18335
(dp18336
g14
g15
(g2883
tp18337
Rp18338
(dp18339
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp18340
tp18341
Rp18342
(dp18343
g41
S'environ_items'
p18344
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp18345
sg65
g18296
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp18346
sg79
Nsg80
Nsb(dp18347
ssg157
(dp18348
sg159
(dp18349
g18285
(dp18350
g18331
(dp18351
g163
(lp18352
(g2933
g2895
tp18353
a(g2896
g2896
tp18354
a(g2894
g2894
tp18355
asssg18300
(dp18356
sg18314
(dp18357
g18300
(dp18358
g163
(lp18359
(g2916
g2893
tp18360
asssg18331
(dp18361
g18314
(dp18362
g163
(lp18363
(g2893
g2910
tp18364
assssg174
g18349
sg175
(dp18365
g18285
(dp18366
sg18300
(dp18367
g18314
g18358
ssg18314
(dp18368
g18331
g18362
ssg18331
(dp18369
g18285
g18351
sssg180
g18349
sbsg43
g18296
sg65
g66
sg75
g18296
sg76
g181
((lp18370
(lp18371
g184
ag181
((lp18372
(lp18373
g187
ag184
aa(lp18374
g189
ag190
aa(lp18375
g192
ag193
aa(lp18376
g195
ag196
aa(lp18377
g198
ag199
aa(lp18378
g201
ag106
aa(lp18379
g203
ag204
aa(lp18380
g206
ag207
aatp18381
Rp18382
aa(lp18383
g211
ag181
((lp18384
(lp18385
g187
ag211
aa(lp18386
g215
ag216
aa(lp18387
g218
ag219
aa(lp18388
g221
ag222
aa(lp18389
g224
ag225
aa(lp18390
g227
ag228
aa(lp18391
g230
ag231
aa(lp18392
g233
ag234
aa(lp18393
g236
ag237
aa(lp18394
g239
ag240
aa(lp18395
g242
ag243
aa(lp18396
g245
ag246
aa(lp18397
g248
ag249
aa(lp18398
g251
ag252
aa(lp18399
g254
ag255
aa(lp18400
g257
ag258
aa(lp18401
g260
ag261
aa(lp18402
g263
ag264
aa(lp18403
g266
ag267
aatp18404
Rp18405
aa(lp18406
g271
ag181
((lp18407
(lp18408
g187
ag271
aa(lp18409
g275
ag276
aatp18410
Rp18411
aatp18412
Rp18413
sg80
Nsbtp18414
a(g18076
g1
(g81
g3
Ntp18415
Rp18416
(dp18417
g85
g1
(g86
g3
Ntp18418
Rp18419
(dp18420
g90
(dp18421
g1
(g92
g3
Ntp18422
Rp18423
(dp18424
g7
(dp18425
sg9
g1
(g97
g3
Ntp18426
Rp18427
(dp18428
g14
g15
(g53
tp18429
Rp18430
(dp18431
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp18432
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp18433
sg65
S'dr_tempreg_maps_stack_fsl_to_itk_1'
p18434
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp18435
sg79
Nsg80
Nsb(dp18436
sg1
(g92
g3
Ntp18437
Rp18438
(dp18439
g7
(dp18440
sg9
g1
(g97
g3
Ntp18441
Rp18442
(dp18443
g14
g15
(g53
tp18444
Rp18445
(dp18446
g28
g29
sg2893
g23
sbsg108
(lp18447
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp18448
sg65
g18434
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp18449
sg79
Nsg80
Nsb(dp18450
sg1
(g92
g3
Ntp18451
Rp18452
(dp18453
g7
(dp18454
sg9
g1
(g2879
g3
Ntp18455
Rp18456
(dp18457
g14
g15
(g2883
tp18458
Rp18459
(dp18460
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp18461
tp18462
Rp18463
(dp18464
g41
S'environ_items'
p18465
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp18466
sg65
g18434
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp18467
sg79
Nsg80
Nsb(dp18468
sg1
(g92
g3
Ntp18469
Rp18470
(dp18471
g7
(dp18472
sg9
g1
(g135
g3
Ntp18473
Rp18474
(dp18475
g139
(lp18476
g2910
asg14
g15
(g142
tp18477
Rp18478
(dp18479
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p18480
sbsg148
(dp18481
g2916
Nssg150
(lp18482
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp18483
sg65
g18434
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp18484
sg79
Nsg80
Nsb(dp18485
ssg157
(dp18486
sg159
(dp18487
g18423
(dp18488
g18452
(dp18489
g163
(lp18490
(g2933
g2895
tp18491
a(g2896
g2896
tp18492
a(g2894
g2894
tp18493
asssg18438
(dp18494
sg18452
(dp18495
g18470
(dp18496
g163
(lp18497
(g2893
g2910
tp18498
asssg18470
(dp18499
g18438
(dp18500
g163
(lp18501
(g2916
g2893
tp18502
assssg174
g18487
sg175
(dp18503
g18423
(dp18504
sg18438
(dp18505
g18470
g18500
ssg18452
(dp18506
g18423
g18489
ssg18470
(dp18507
g18452
g18496
sssg180
g18487
sbsg43
g18434
sg65
g66
sg75
g18434
sg76
g181
((lp18508
(lp18509
g184
ag181
((lp18510
(lp18511
g187
ag184
aa(lp18512
g189
ag190
aa(lp18513
g192
ag193
aa(lp18514
g195
ag196
aa(lp18515
g198
ag199
aa(lp18516
g201
ag106
aa(lp18517
g203
ag204
aa(lp18518
g206
ag207
aatp18519
Rp18520
aa(lp18521
g211
ag181
((lp18522
(lp18523
g187
ag211
aa(lp18524
g215
ag216
aa(lp18525
g218
ag219
aa(lp18526
g221
ag222
aa(lp18527
g224
ag225
aa(lp18528
g227
ag228
aa(lp18529
g230
ag231
aa(lp18530
g233
ag234
aa(lp18531
g236
ag237
aa(lp18532
g239
ag240
aa(lp18533
g242
ag243
aa(lp18534
g245
ag246
aa(lp18535
g248
ag249
aa(lp18536
g251
ag252
aa(lp18537
g254
ag255
aa(lp18538
g257
ag258
aa(lp18539
g260
ag261
aa(lp18540
g263
ag264
aa(lp18541
g266
ag267
aatp18542
Rp18543
aa(lp18544
g271
ag181
((lp18545
(lp18546
g187
ag271
aa(lp18547
g275
ag276
aatp18548
Rp18549
aatp18550
Rp18551
sg80
Nsbtp18552
a(g18076
g1
(g81
g3
Ntp18553
Rp18554
(dp18555
g85
g1
(g86
g3
Ntp18556
Rp18557
(dp18558
g90
(dp18559
g1
(g92
g3
Ntp18560
Rp18561
(dp18562
g7
(dp18563
sg9
g1
(g97
g3
Ntp18564
Rp18565
(dp18566
g14
g15
(g53
tp18567
Rp18568
(dp18569
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp18570
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp18571
sg65
S'falff_Z_fsl_to_itk_1'
p18572
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp18573
sg79
Nsg80
Nsb(dp18574
sg1
(g92
g3
Ntp18575
Rp18576
(dp18577
g7
(dp18578
sg9
g1
(g135
g3
Ntp18579
Rp18580
(dp18581
g139
(lp18582
g2910
asg14
g15
(g142
tp18583
Rp18584
(dp18585
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p18586
sbsg148
(dp18587
g2916
Nssg150
(lp18588
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp18589
sg65
g18572
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp18590
sg79
Nsg80
Nsb(dp18591
sg1
(g92
g3
Ntp18592
Rp18593
(dp18594
g7
(dp18595
sg9
g1
(g97
g3
Ntp18596
Rp18597
(dp18598
g14
g15
(g53
tp18599
Rp18600
(dp18601
g28
g29
sg2893
g23
sbsg108
(lp18602
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp18603
sg65
g18572
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp18604
sg79
Nsg80
Nsb(dp18605
sg1
(g92
g3
Ntp18606
Rp18607
(dp18608
g7
(dp18609
sg9
g1
(g2879
g3
Ntp18610
Rp18611
(dp18612
g14
g15
(g2883
tp18613
Rp18614
(dp18615
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp18616
tp18617
Rp18618
(dp18619
g41
S'environ_items'
p18620
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp18621
sg65
g18572
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp18622
sg79
Nsg80
Nsb(dp18623
ssg157
(dp18624
sg159
(dp18625
g18561
(dp18626
g18607
(dp18627
g163
(lp18628
(g2933
g2895
tp18629
a(g2896
g2896
tp18630
a(g2894
g2894
tp18631
asssg18576
(dp18632
g18593
(dp18633
g163
(lp18634
(g2916
g2893
tp18635
asssg18593
(dp18636
sg18607
(dp18637
g18576
(dp18638
g163
(lp18639
(g2893
g2910
tp18640
assssg174
g18625
sg175
(dp18641
g18561
(dp18642
sg18576
(dp18643
g18607
g18638
ssg18593
(dp18644
g18576
g18633
ssg18607
(dp18645
g18561
g18627
sssg180
g18625
sbsg43
g18572
sg65
g66
sg75
g18572
sg76
g181
((lp18646
(lp18647
g184
ag181
((lp18648
(lp18649
g187
ag184
aa(lp18650
g189
ag190
aa(lp18651
g192
ag193
aa(lp18652
g195
ag196
aa(lp18653
g198
ag199
aa(lp18654
g201
ag106
aa(lp18655
g203
ag204
aa(lp18656
g206
ag207
aatp18657
Rp18658
aa(lp18659
g211
ag181
((lp18660
(lp18661
g187
ag211
aa(lp18662
g215
ag216
aa(lp18663
g218
ag219
aa(lp18664
g221
ag222
aa(lp18665
g224
ag225
aa(lp18666
g227
ag228
aa(lp18667
g230
ag231
aa(lp18668
g233
ag234
aa(lp18669
g236
ag237
aa(lp18670
g239
ag240
aa(lp18671
g242
ag243
aa(lp18672
g245
ag246
aa(lp18673
g248
ag249
aa(lp18674
g251
ag252
aa(lp18675
g254
ag255
aa(lp18676
g257
ag258
aa(lp18677
g260
ag261
aa(lp18678
g263
ag264
aa(lp18679
g266
ag267
aatp18680
Rp18681
aa(lp18682
g271
ag181
((lp18683
(lp18684
g187
ag271
aa(lp18685
g275
ag276
aatp18686
Rp18687
aatp18688
Rp18689
sg80
Nsbtp18690
a(g18076
g1
(g81
g3
Ntp18691
Rp18692
(dp18693
g85
g1
(g86
g3
Ntp18694
Rp18695
(dp18696
g90
(dp18697
g1
(g92
g3
Ntp18698
Rp18699
(dp18700
g7
(dp18701
sg9
g1
(g135
g3
Ntp18702
Rp18703
(dp18704
g139
(lp18705
g2910
asg14
g15
(g142
tp18706
Rp18707
(dp18708
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p18709
sbsg148
(dp18710
g2916
Nssg150
(lp18711
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp18712
sg65
S'reho_Z_fsl_to_itk_0'
p18713
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp18714
sg79
Nsg80
Nsb(dp18715
sg1
(g92
g3
Ntp18716
Rp18717
(dp18718
g7
(dp18719
sg9
g1
(g97
g3
Ntp18720
Rp18721
(dp18722
g14
g15
(g53
tp18723
Rp18724
(dp18725
g28
g29
sg2893
g23
sbsg108
(lp18726
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp18727
sg65
g18713
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp18728
sg79
Nsg80
Nsb(dp18729
sg1
(g92
g3
Ntp18730
Rp18731
(dp18732
g7
(dp18733
sg9
g1
(g97
g3
Ntp18734
Rp18735
(dp18736
g14
g15
(g53
tp18737
Rp18738
(dp18739
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp18740
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp18741
sg65
g18713
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp18742
sg79
Nsg80
Nsb(dp18743
sg1
(g92
g3
Ntp18744
Rp18745
(dp18746
g7
(dp18747
sg9
g1
(g2879
g3
Ntp18748
Rp18749
(dp18750
g14
g15
(g2883
tp18751
Rp18752
(dp18753
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp18754
tp18755
Rp18756
(dp18757
g41
S'environ_items'
p18758
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp18759
sg65
g18713
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp18760
sg79
Nsg80
Nsb(dp18761
ssg157
(dp18762
sg159
(dp18763
g18699
(dp18764
g18717
(dp18765
g163
(lp18766
(g2916
g2893
tp18767
asssg18717
(dp18768
sg18731
(dp18769
g18745
(dp18770
g163
(lp18771
(g2933
g2895
tp18772
a(g2896
g2896
tp18773
a(g2894
g2894
tp18774
asssg18745
(dp18775
g18699
(dp18776
g163
(lp18777
(g2893
g2910
tp18778
assssg174
g18763
sg175
(dp18779
g18699
(dp18780
g18745
g18776
ssg18717
(dp18781
g18699
g18765
ssg18731
(dp18782
sg18745
(dp18783
g18731
g18770
sssg180
g18763
sbsg43
g18713
sg65
g66
sg75
g18713
sg76
g181
((lp18784
(lp18785
g184
ag181
((lp18786
(lp18787
g187
ag184
aa(lp18788
g189
ag190
aa(lp18789
g192
ag193
aa(lp18790
g195
ag196
aa(lp18791
g198
ag199
aa(lp18792
g201
ag106
aa(lp18793
g203
ag204
aa(lp18794
g206
ag207
aatp18795
Rp18796
aa(lp18797
g211
ag181
((lp18798
(lp18799
g187
ag211
aa(lp18800
g215
ag216
aa(lp18801
g218
ag219
aa(lp18802
g221
ag222
aa(lp18803
g224
ag225
aa(lp18804
g227
ag228
aa(lp18805
g230
ag231
aa(lp18806
g233
ag234
aa(lp18807
g236
ag237
aa(lp18808
g239
ag240
aa(lp18809
g242
ag243
aa(lp18810
g245
ag246
aa(lp18811
g248
ag249
aa(lp18812
g251
ag252
aa(lp18813
g254
ag255
aa(lp18814
g257
ag258
aa(lp18815
g260
ag261
aa(lp18816
g263
ag264
aa(lp18817
g266
ag267
aatp18818
Rp18819
aa(lp18820
g271
ag181
((lp18821
(lp18822
g187
ag271
aa(lp18823
g275
ag276
aatp18824
Rp18825
aatp18826
Rp18827
sg80
Nsbtp18828
a(g18076
g1
(g81
g3
Ntp18829
Rp18830
(dp18831
g85
g1
(g86
g3
Ntp18832
Rp18833
(dp18834
g90
(dp18835
g1
(g92
g3
Ntp18836
Rp18837
(dp18838
g7
(dp18839
sg9
g1
(g97
g3
Ntp18840
Rp18841
(dp18842
g14
g15
(g53
tp18843
Rp18844
(dp18845
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp18846
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp18847
sg65
S'fsl_to_itk_functional_mni_1'
p18848
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp18849
sg79
Nsg80
Nsb(dp18850
sg1
(g92
g3
Ntp18851
Rp18852
(dp18853
g7
(dp18854
sg9
g1
(g97
g3
Ntp18855
Rp18856
(dp18857
g14
g15
(g53
tp18858
Rp18859
(dp18860
g28
g29
sg2893
g23
sbsg108
(lp18861
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp18862
sg65
g18848
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp18863
sg79
Nsg80
Nsb(dp18864
sg1
(g92
g3
Ntp18865
Rp18866
(dp18867
g7
(dp18868
sg9
g1
(g135
g3
Ntp18869
Rp18870
(dp18871
g139
(lp18872
g2910
asg14
g15
(g142
tp18873
Rp18874
(dp18875
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p18876
sbsg148
(dp18877
g2916
Nssg150
(lp18878
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp18879
sg65
g18848
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp18880
sg79
Nsg80
Nsb(dp18881
sg1
(g92
g3
Ntp18882
Rp18883
(dp18884
g7
(dp18885
sg9
g1
(g2879
g3
Ntp18886
Rp18887
(dp18888
g14
g15
(g2883
tp18889
Rp18890
(dp18891
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp18892
tp18893
Rp18894
(dp18895
g41
S'environ_items'
p18896
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp18897
sg65
g18848
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp18898
sg79
Nsg80
Nsb(dp18899
ssg157
(dp18900
sg159
(dp18901
g18837
(dp18902
g18883
(dp18903
g163
(lp18904
(g2933
g2895
tp18905
a(g2896
g2896
tp18906
a(g2894
g2894
tp18907
asssg18852
(dp18908
sg18866
(dp18909
g18852
(dp18910
g163
(lp18911
(g2916
g2893
tp18912
asssg18883
(dp18913
g18866
(dp18914
g163
(lp18915
(g2893
g2910
tp18916
assssg174
g18901
sg175
(dp18917
g18837
(dp18918
sg18852
(dp18919
g18866
g18910
ssg18866
(dp18920
g18883
g18914
ssg18883
(dp18921
g18837
g18903
sssg180
g18901
sbsg43
g18848
sg65
g66
sg75
g18848
sg76
g181
((lp18922
(lp18923
g184
ag181
((lp18924
(lp18925
g187
ag184
aa(lp18926
g189
ag190
aa(lp18927
g192
ag193
aa(lp18928
g195
ag196
aa(lp18929
g198
ag199
aa(lp18930
g201
ag106
aa(lp18931
g203
ag204
aa(lp18932
g206
ag207
aatp18933
Rp18934
aa(lp18935
g211
ag181
((lp18936
(lp18937
g187
ag211
aa(lp18938
g215
ag216
aa(lp18939
g218
ag219
aa(lp18940
g221
ag222
aa(lp18941
g224
ag225
aa(lp18942
g227
ag228
aa(lp18943
g230
ag231
aa(lp18944
g233
ag234
aa(lp18945
g236
ag237
aa(lp18946
g239
ag240
aa(lp18947
g242
ag243
aa(lp18948
g245
ag246
aa(lp18949
g248
ag249
aa(lp18950
g251
ag252
aa(lp18951
g254
ag255
aa(lp18952
g257
ag258
aa(lp18953
g260
ag261
aa(lp18954
g263
ag264
aa(lp18955
g266
ag267
aatp18956
Rp18957
aa(lp18958
g271
ag181
((lp18959
(lp18960
g187
ag271
aa(lp18961
g275
ag276
aatp18962
Rp18963
aatp18964
Rp18965
sg80
Nsbtp18966
a(g18076
g1
(g81
g3
Ntp18967
Rp18968
(dp18969
g85
g1
(g86
g3
Ntp18970
Rp18971
(dp18972
g90
(dp18973
g1
(g92
g3
Ntp18974
Rp18975
(dp18976
g7
(dp18977
sg9
g1
(g2879
g3
Ntp18978
Rp18979
(dp18980
g14
g15
(g2883
tp18981
Rp18982
(dp18983
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp18984
tp18985
Rp18986
(dp18987
g41
S'environ_items'
p18988
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp18989
sg65
S'dr_tempreg_maps_z_stack_fsl_to_itk_0'
p18990
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp18991
sg79
Nsg80
Nsb(dp18992
sg1
(g92
g3
Ntp18993
Rp18994
(dp18995
g7
(dp18996
sg9
g1
(g97
g3
Ntp18997
Rp18998
(dp18999
g14
g15
(g53
tp19000
Rp19001
(dp19002
g28
g29
sg2893
g23
sbsg108
(lp19003
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19004
sg65
g18990
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19005
sg79
Nsg80
Nsb(dp19006
sg1
(g92
g3
Ntp19007
Rp19008
(dp19009
g7
(dp19010
sg9
g1
(g97
g3
Ntp19011
Rp19012
(dp19013
g14
g15
(g53
tp19014
Rp19015
(dp19016
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp19017
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp19018
sg65
g18990
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp19019
sg79
Nsg80
Nsb(dp19020
sg1
(g92
g3
Ntp19021
Rp19022
(dp19023
g7
(dp19024
sg9
g1
(g135
g3
Ntp19025
Rp19026
(dp19027
g139
(lp19028
g2910
asg14
g15
(g142
tp19029
Rp19030
(dp19031
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p19032
sbsg148
(dp19033
g2916
Nssg150
(lp19034
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp19035
sg65
g18990
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp19036
sg79
Nsg80
Nsb(dp19037
ssg157
(dp19038
sg159
(dp19039
g18975
(dp19040
g19022
(dp19041
g163
(lp19042
(g2893
g2910
tp19043
asssg18994
(dp19044
sg19008
(dp19045
g18975
(dp19046
g163
(lp19047
(g2933
g2895
tp19048
a(g2896
g2896
tp19049
a(g2894
g2894
tp19050
asssg19022
(dp19051
g18994
(dp19052
g163
(lp19053
(g2916
g2893
tp19054
assssg174
g19039
sg175
(dp19055
g18975
(dp19056
g19008
g19046
ssg18994
(dp19057
g19022
g19052
ssg19008
(dp19058
sg19022
(dp19059
g18975
g19041
sssg180
g19039
sbsg43
g18990
sg65
g66
sg75
g18990
sg76
g181
((lp19060
(lp19061
g184
ag181
((lp19062
(lp19063
g187
ag184
aa(lp19064
g189
ag190
aa(lp19065
g192
ag193
aa(lp19066
g195
ag196
aa(lp19067
g198
ag199
aa(lp19068
g201
ag106
aa(lp19069
g203
ag204
aa(lp19070
g206
ag207
aatp19071
Rp19072
aa(lp19073
g211
ag181
((lp19074
(lp19075
g187
ag211
aa(lp19076
g215
ag216
aa(lp19077
g218
ag219
aa(lp19078
g221
ag222
aa(lp19079
g224
ag225
aa(lp19080
g227
ag228
aa(lp19081
g230
ag231
aa(lp19082
g233
ag234
aa(lp19083
g236
ag237
aa(lp19084
g239
ag240
aa(lp19085
g242
ag243
aa(lp19086
g245
ag246
aa(lp19087
g248
ag249
aa(lp19088
g251
ag252
aa(lp19089
g254
ag255
aa(lp19090
g257
ag258
aa(lp19091
g260
ag261
aa(lp19092
g263
ag264
aa(lp19093
g266
ag267
aatp19094
Rp19095
aa(lp19096
g271
ag181
((lp19097
(lp19098
g187
ag271
aa(lp19099
g275
ag276
aatp19100
Rp19101
aatp19102
Rp19103
sg80
Nsbtp19104
a(g18076
g1
(g81
g3
Ntp19105
Rp19106
(dp19107
g85
g1
(g86
g3
Ntp19108
Rp19109
(dp19110
g90
(dp19111
g1
(g92
g3
Ntp19112
Rp19113
(dp19114
g7
(dp19115
sg9
g1
(g97
g3
Ntp19116
Rp19117
(dp19118
g14
g15
(g53
tp19119
Rp19120
(dp19121
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp19122
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp19123
sg65
S'sca_seed_fsl_to_itk_1'
p19124
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp19125
sg79
Nsg80
Nsb(dp19126
sg1
(g92
g3
Ntp19127
Rp19128
(dp19129
g7
(dp19130
sg9
g1
(g97
g3
Ntp19131
Rp19132
(dp19133
g14
g15
(g53
tp19134
Rp19135
(dp19136
g28
g29
sg2893
g23
sbsg108
(lp19137
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19138
sg65
g19124
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19139
sg79
Nsg80
Nsb(dp19140
sg1
(g92
g3
Ntp19141
Rp19142
(dp19143
g7
(dp19144
sg9
g1
(g2879
g3
Ntp19145
Rp19146
(dp19147
g14
g15
(g2883
tp19148
Rp19149
(dp19150
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19151
tp19152
Rp19153
(dp19154
g41
S'environ_items'
p19155
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp19156
sg65
g19124
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp19157
sg79
Nsg80
Nsb(dp19158
sg1
(g92
g3
Ntp19159
Rp19160
(dp19161
g7
(dp19162
sg9
g1
(g135
g3
Ntp19163
Rp19164
(dp19165
g139
(lp19166
g2910
asg14
g15
(g142
tp19167
Rp19168
(dp19169
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p19170
sbsg148
(dp19171
g2916
Nssg150
(lp19172
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp19173
sg65
g19124
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp19174
sg79
Nsg80
Nsb(dp19175
ssg157
(dp19176
sg159
(dp19177
g19113
(dp19178
g19142
(dp19179
g163
(lp19180
(g2933
g2895
tp19181
a(g2896
g2896
tp19182
a(g2894
g2894
tp19183
asssg19128
(dp19184
sg19142
(dp19185
g19160
(dp19186
g163
(lp19187
(g2893
g2910
tp19188
asssg19160
(dp19189
g19128
(dp19190
g163
(lp19191
(g2916
g2893
tp19192
assssg174
g19177
sg175
(dp19193
g19113
(dp19194
sg19128
(dp19195
g19160
g19190
ssg19142
(dp19196
g19113
g19179
ssg19160
(dp19197
g19142
g19186
sssg180
g19177
sbsg43
g19124
sg65
g66
sg75
g19124
sg76
g181
((lp19198
(lp19199
g184
ag181
((lp19200
(lp19201
g187
ag184
aa(lp19202
g189
ag190
aa(lp19203
g192
ag193
aa(lp19204
g195
ag196
aa(lp19205
g198
ag199
aa(lp19206
g201
ag106
aa(lp19207
g203
ag204
aa(lp19208
g206
ag207
aatp19209
Rp19210
aa(lp19211
g211
ag181
((lp19212
(lp19213
g187
ag211
aa(lp19214
g215
ag216
aa(lp19215
g218
ag219
aa(lp19216
g221
ag222
aa(lp19217
g224
ag225
aa(lp19218
g227
ag228
aa(lp19219
g230
ag231
aa(lp19220
g233
ag234
aa(lp19221
g236
ag237
aa(lp19222
g239
ag240
aa(lp19223
g242
ag243
aa(lp19224
g245
ag246
aa(lp19225
g248
ag249
aa(lp19226
g251
ag252
aa(lp19227
g254
ag255
aa(lp19228
g257
ag258
aa(lp19229
g260
ag261
aa(lp19230
g263
ag264
aa(lp19231
g266
ag267
aatp19232
Rp19233
aa(lp19234
g271
ag181
((lp19235
(lp19236
g187
ag271
aa(lp19237
g275
ag276
aatp19238
Rp19239
aatp19240
Rp19241
sg80
Nsbtp19242
a(g18076
g1
(g81
g3
Ntp19243
Rp19244
(dp19245
g85
g1
(g86
g3
Ntp19246
Rp19247
(dp19248
g90
(dp19249
g1
(g92
g3
Ntp19250
Rp19251
(dp19252
g7
(dp19253
sg9
g1
(g97
g3
Ntp19254
Rp19255
(dp19256
g14
g15
(g53
tp19257
Rp19258
(dp19259
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp19260
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp19261
sg65
S'dr_tempreg_maps_stack_fsl_to_itk_0'
p19262
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp19263
sg79
Nsg80
Nsb(dp19264
sg1
(g92
g3
Ntp19265
Rp19266
(dp19267
g7
(dp19268
sg9
g1
(g97
g3
Ntp19269
Rp19270
(dp19271
g14
g15
(g53
tp19272
Rp19273
(dp19274
g28
g29
sg2893
g23
sbsg108
(lp19275
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19276
sg65
g19262
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19277
sg79
Nsg80
Nsb(dp19278
sg1
(g92
g3
Ntp19279
Rp19280
(dp19281
g7
(dp19282
sg9
g1
(g135
g3
Ntp19283
Rp19284
(dp19285
g139
(lp19286
g2910
asg14
g15
(g142
tp19287
Rp19288
(dp19289
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p19290
sbsg148
(dp19291
g2916
Nssg150
(lp19292
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp19293
sg65
g19262
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp19294
sg79
Nsg80
Nsb(dp19295
sg1
(g92
g3
Ntp19296
Rp19297
(dp19298
g7
(dp19299
sg9
g1
(g2879
g3
Ntp19300
Rp19301
(dp19302
g14
g15
(g2883
tp19303
Rp19304
(dp19305
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19306
tp19307
Rp19308
(dp19309
g41
S'environ_items'
p19310
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp19311
sg65
g19262
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp19312
sg79
Nsg80
Nsb(dp19313
ssg157
(dp19314
sg159
(dp19315
g19251
(dp19316
g19297
(dp19317
g163
(lp19318
(g2933
g2895
tp19319
a(g2896
g2896
tp19320
a(g2894
g2894
tp19321
asssg19266
(dp19322
sg19280
(dp19323
g19266
(dp19324
g163
(lp19325
(g2916
g2893
tp19326
asssg19297
(dp19327
g19280
(dp19328
g163
(lp19329
(g2893
g2910
tp19330
assssg174
g19315
sg175
(dp19331
g19251
(dp19332
sg19266
(dp19333
g19280
g19324
ssg19280
(dp19334
g19297
g19328
ssg19297
(dp19335
g19251
g19317
sssg180
g19315
sbsg43
g19262
sg65
g66
sg75
g19262
sg76
g181
((lp19336
(lp19337
g184
ag181
((lp19338
(lp19339
g187
ag184
aa(lp19340
g189
ag190
aa(lp19341
g192
ag193
aa(lp19342
g195
ag196
aa(lp19343
g198
ag199
aa(lp19344
g201
ag106
aa(lp19345
g203
ag204
aa(lp19346
g206
ag207
aatp19347
Rp19348
aa(lp19349
g211
ag181
((lp19350
(lp19351
g187
ag211
aa(lp19352
g215
ag216
aa(lp19353
g218
ag219
aa(lp19354
g221
ag222
aa(lp19355
g224
ag225
aa(lp19356
g227
ag228
aa(lp19357
g230
ag231
aa(lp19358
g233
ag234
aa(lp19359
g236
ag237
aa(lp19360
g239
ag240
aa(lp19361
g242
ag243
aa(lp19362
g245
ag246
aa(lp19363
g248
ag249
aa(lp19364
g251
ag252
aa(lp19365
g254
ag255
aa(lp19366
g257
ag258
aa(lp19367
g260
ag261
aa(lp19368
g263
ag264
aa(lp19369
g266
ag267
aatp19370
Rp19371
aa(lp19372
g271
ag181
((lp19373
(lp19374
g187
ag271
aa(lp19375
g275
ag276
aatp19376
Rp19377
aatp19378
Rp19379
sg80
Nsbtp19380
a(g18076
g1
(g81
g3
Ntp19381
Rp19382
(dp19383
g85
g1
(g86
g3
Ntp19384
Rp19385
(dp19386
g90
(dp19387
g1
(g2
g3
Ntp19388
Rp19389
(dp19390
g7
(dp19391
sg9
g1
(g135
g3
Ntp19392
Rp19393
(dp19394
g139
(lp19395
g2910
asg14
g15
(g142
tp19396
Rp19397
(dp19398
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p19399
sbsg148
(dp19400
g2916
Nssg150
(lp19401
g2916
asg152
Nsbsg51
Nsg52
g15
(g53
tp19402
Rp19403
(dp19404
g20
I00
sg28
g29
sg2910
g23
sg146
g19399
sbsg43
g2919
sg63
(dp19405
sg65
S'sca_seed_Z_fsl_to_itk_0'
p19406
sg67
(lp19407
g2910
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp19408
sg79
Nsg80
Nsb(dp19409
sg1
(g92
g3
Ntp19410
Rp19411
(dp19412
g7
(dp19413
sg9
g1
(g97
g3
Ntp19414
Rp19415
(dp19416
g14
g15
(g53
tp19417
Rp19418
(dp19419
g28
g29
sg2893
g23
sbsg108
(lp19420
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19421
sg65
g19406
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19422
sg79
Nsg80
Nsb(dp19423
sg1
(g92
g3
Ntp19424
Rp19425
(dp19426
g7
(dp19427
sg9
g1
(g97
g3
Ntp19428
Rp19429
(dp19430
g14
g15
(g53
tp19431
Rp19432
(dp19433
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp19434
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp19435
sg65
g19406
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp19436
sg79
Nsg80
Nsb(dp19437
sg1
(g2
g3
Ntp19438
Rp19439
(dp19440
g7
(dp19441
sg9
g1
(g2879
g3
Ntp19442
Rp19443
(dp19444
g14
g15
(g2883
tp19445
Rp19446
(dp19447
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19448
tp19449
Rp19450
(dp19451
g41
S'environ_items'
p19452
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp19453
Rp19454
(dp19455
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19456
tp19457
Rp19458
(dp19459
g41
S'environ_items'
p19460
sg43
g32
sbsg2896
g23
sg2894
g23
sg2895
g23
sg2893
I01
sbsg43
S'fsl_reg_2_itk_mapnode'
p19461
sg63
(dp19462
sg65
g19406
sg67
(lp19463
g2894
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g19461
sg76
Nsg77
(lp19464
sg79
Nsg80
Nsb(dp19465
ssg157
(dp19466
sg159
(dp19467
g19389
(dp19468
g19411
(dp19469
g163
(lp19470
(g2916
g2893
tp19471
asssg19411
(dp19472
sg19425
(dp19473
g19439
(dp19474
g163
(lp19475
(g2933
g2895
tp19476
a(g2896
g2896
tp19477
a(g2894
g2894
tp19478
asssg19439
(dp19479
g19389
(dp19480
g163
(lp19481
(g2893
g2910
tp19482
assssg174
g19467
sg175
(dp19483
g19389
(dp19484
g19439
g19480
ssg19411
(dp19485
g19389
g19469
ssg19425
(dp19486
sg19439
(dp19487
g19425
g19474
sssg180
g19467
sbsg43
g19406
sg65
g66
sg75
g19406
sg76
g181
((lp19488
(lp19489
g184
ag181
((lp19490
(lp19491
g187
ag184
aa(lp19492
g189
ag190
aa(lp19493
g192
ag193
aa(lp19494
g195
ag196
aa(lp19495
g198
ag199
aa(lp19496
g201
ag106
aa(lp19497
g203
ag204
aa(lp19498
g206
ag207
aatp19499
Rp19500
aa(lp19501
g211
ag181
((lp19502
(lp19503
g187
ag211
aa(lp19504
g215
ag216
aa(lp19505
g218
ag219
aa(lp19506
g221
ag222
aa(lp19507
g224
ag225
aa(lp19508
g227
ag228
aa(lp19509
g230
ag231
aa(lp19510
g233
ag234
aa(lp19511
g236
ag237
aa(lp19512
g239
ag240
aa(lp19513
g242
ag243
aa(lp19514
g245
ag246
aa(lp19515
g248
ag249
aa(lp19516
g251
ag252
aa(lp19517
g254
ag255
aa(lp19518
g257
ag258
aa(lp19519
g260
ag261
aa(lp19520
g263
ag264
aa(lp19521
g266
ag267
aatp19522
Rp19523
aa(lp19524
g271
ag181
((lp19525
(lp19526
g187
ag271
aa(lp19527
g275
ag276
aatp19528
Rp19529
aatp19530
Rp19531
sg80
Nsbtp19532
a(g18076
g1
(g81
g3
Ntp19533
Rp19534
(dp19535
g85
g1
(g86
g3
Ntp19536
Rp19537
(dp19538
g90
(dp19539
g1
(g92
g3
Ntp19540
Rp19541
(dp19542
g7
(dp19543
sg9
g1
(g97
g3
Ntp19544
Rp19545
(dp19546
g14
g15
(g53
tp19547
Rp19548
(dp19549
g28
g29
sg2893
g23
sbsg108
(lp19550
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19551
sg65
S'fsl_to_itk_functional_brain_mask_to_standard_0'
p19552
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19553
sg79
Nsg80
Nsb(dp19554
sg1
(g92
g3
Ntp19555
Rp19556
(dp19557
g7
(dp19558
sg9
g1
(g97
g3
Ntp19559
Rp19560
(dp19561
g14
g15
(g53
tp19562
Rp19563
(dp19564
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp19565
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp19566
sg65
g19552
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp19567
sg79
Nsg80
Nsb(dp19568
sg1
(g92
g3
Ntp19569
Rp19570
(dp19571
g7
(dp19572
sg9
g1
(g135
g3
Ntp19573
Rp19574
(dp19575
g139
(lp19576
g2910
asg14
g15
(g142
tp19577
Rp19578
(dp19579
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p19580
sbsg148
(dp19581
g2916
Nssg150
(lp19582
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp19583
sg65
g19552
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp19584
sg79
Nsg80
Nsb(dp19585
sg1
(g92
g3
Ntp19586
Rp19587
(dp19588
g7
(dp19589
sg9
g1
(g2879
g3
Ntp19590
Rp19591
(dp19592
g14
g15
(g2883
tp19593
Rp19594
(dp19595
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19596
tp19597
Rp19598
(dp19599
g41
S'environ_items'
p19600
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp19601
sg65
g19552
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp19602
sg79
Nsg80
Nsb(dp19603
ssg157
(dp19604
sg159
(dp19605
g19541
(dp19606
sg19556
(dp19607
g19587
(dp19608
g163
(lp19609
(g2933
g2895
tp19610
a(g2896
g2896
tp19611
a(g2894
g2894
tp19612
asssg19570
(dp19613
g19541
(dp19614
g163
(lp19615
(g2916
g2893
tp19616
asssg19587
(dp19617
g19570
(dp19618
g163
(lp19619
(g2893
g2910
tp19620
assssg174
g19605
sg175
(dp19621
g19541
(dp19622
g19570
g19614
ssg19556
(dp19623
sg19570
(dp19624
g19587
g19618
ssg19587
(dp19625
g19556
g19608
sssg180
g19605
sbsg43
g19552
sg65
g66
sg75
g19552
sg76
g181
((lp19626
(lp19627
g184
ag181
((lp19628
(lp19629
g187
ag184
aa(lp19630
g189
ag190
aa(lp19631
g192
ag193
aa(lp19632
g195
ag196
aa(lp19633
g198
ag199
aa(lp19634
g201
ag106
aa(lp19635
g203
ag204
aa(lp19636
g206
ag207
aatp19637
Rp19638
aa(lp19639
g211
ag181
((lp19640
(lp19641
g187
ag211
aa(lp19642
g215
ag216
aa(lp19643
g218
ag219
aa(lp19644
g221
ag222
aa(lp19645
g224
ag225
aa(lp19646
g227
ag228
aa(lp19647
g230
ag231
aa(lp19648
g233
ag234
aa(lp19649
g236
ag237
aa(lp19650
g239
ag240
aa(lp19651
g242
ag243
aa(lp19652
g245
ag246
aa(lp19653
g248
ag249
aa(lp19654
g251
ag252
aa(lp19655
g254
ag255
aa(lp19656
g257
ag258
aa(lp19657
g260
ag261
aa(lp19658
g263
ag264
aa(lp19659
g266
ag267
aatp19660
Rp19661
aa(lp19662
g271
ag181
((lp19663
(lp19664
g187
ag271
aa(lp19665
g275
ag276
aatp19666
Rp19667
aatp19668
Rp19669
sg80
Nsbtp19670
a(g18076
g2754
tp19671
a(g18076
g1
(g81
g3
Ntp19672
Rp19673
(dp19674
g85
g1
(g86
g3
Ntp19675
Rp19676
(dp19677
g90
(dp19678
g1
(g92
g3
Ntp19679
Rp19680
(dp19681
g7
(dp19682
sg9
g1
(g135
g3
Ntp19683
Rp19684
(dp19685
g139
(lp19686
g2910
asg14
g15
(g142
tp19687
Rp19688
(dp19689
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p19690
sbsg148
(dp19691
g2916
Nssg150
(lp19692
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp19693
sg65
S'fsl_to_itk_functional_mni_0'
p19694
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp19695
sg79
Nsg80
Nsb(dp19696
sg1
(g92
g3
Ntp19697
Rp19698
(dp19699
g7
(dp19700
sg9
g1
(g97
g3
Ntp19701
Rp19702
(dp19703
g14
g15
(g53
tp19704
Rp19705
(dp19706
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp19707
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp19708
sg65
g19694
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp19709
sg79
Nsg80
Nsb(dp19710
sg1
(g92
g3
Ntp19711
Rp19712
(dp19713
g7
(dp19714
sg9
g1
(g97
g3
Ntp19715
Rp19716
(dp19717
g14
g15
(g53
tp19718
Rp19719
(dp19720
g28
g29
sg2893
g23
sbsg108
(lp19721
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19722
sg65
g19694
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19723
sg79
Nsg80
Nsb(dp19724
sg1
(g92
g3
Ntp19725
Rp19726
(dp19727
g7
(dp19728
sg9
g1
(g2879
g3
Ntp19729
Rp19730
(dp19731
g14
g15
(g2883
tp19732
Rp19733
(dp19734
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19735
tp19736
Rp19737
(dp19738
g41
S'environ_items'
p19739
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp19740
sg65
g19694
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp19741
sg79
Nsg80
Nsb(dp19742
ssg157
(dp19743
sg159
(dp19744
g19680
(dp19745
g19712
(dp19746
g163
(lp19747
(g2916
g2893
tp19748
asssg19698
(dp19749
g19726
(dp19750
g163
(lp19751
(g2933
g2895
tp19752
a(g2896
g2896
tp19753
a(g2894
g2894
tp19754
asssg19712
(dp19755
sg19726
(dp19756
g19680
(dp19757
g163
(lp19758
(g2893
g2910
tp19759
assssg174
g19744
sg175
(dp19760
g19680
(dp19761
g19726
g19757
ssg19698
(dp19762
sg19712
(dp19763
g19680
g19746
ssg19726
(dp19764
g19698
g19750
sssg180
g19744
sbsg43
g19694
sg65
g66
sg75
g19694
sg76
g181
((lp19765
(lp19766
g184
ag181
((lp19767
(lp19768
g187
ag184
aa(lp19769
g189
ag190
aa(lp19770
g192
ag193
aa(lp19771
g195
ag196
aa(lp19772
g198
ag199
aa(lp19773
g201
ag106
aa(lp19774
g203
ag204
aa(lp19775
g206
ag207
aatp19776
Rp19777
aa(lp19778
g211
ag181
((lp19779
(lp19780
g187
ag211
aa(lp19781
g215
ag216
aa(lp19782
g218
ag219
aa(lp19783
g221
ag222
aa(lp19784
g224
ag225
aa(lp19785
g227
ag228
aa(lp19786
g230
ag231
aa(lp19787
g233
ag234
aa(lp19788
g236
ag237
aa(lp19789
g239
ag240
aa(lp19790
g242
ag243
aa(lp19791
g245
ag246
aa(lp19792
g248
ag249
aa(lp19793
g251
ag252
aa(lp19794
g254
ag255
aa(lp19795
g257
ag258
aa(lp19796
g260
ag261
aa(lp19797
g263
ag264
aa(lp19798
g266
ag267
aatp19799
Rp19800
aa(lp19801
g271
ag181
((lp19802
(lp19803
g187
ag271
aa(lp19804
g275
ag276
aatp19805
Rp19806
aatp19807
Rp19808
sg80
Nsbtp19809
a(g18076
g1
(g81
g3
Ntp19810
Rp19811
(dp19812
g85
g1
(g86
g3
Ntp19813
Rp19814
(dp19815
g90
(dp19816
g1
(g92
g3
Ntp19817
Rp19818
(dp19819
g7
(dp19820
sg9
g1
(g97
g3
Ntp19821
Rp19822
(dp19823
g14
g15
(g53
tp19824
Rp19825
(dp19826
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp19827
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp19828
sg65
S'reho_fsl_to_itk_1'
p19829
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp19830
sg79
Nsg80
Nsb(dp19831
sg1
(g92
g3
Ntp19832
Rp19833
(dp19834
g7
(dp19835
sg9
g1
(g97
g3
Ntp19836
Rp19837
(dp19838
g14
g15
(g53
tp19839
Rp19840
(dp19841
g28
g29
sg2893
g23
sbsg108
(lp19842
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19843
sg65
g19829
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19844
sg79
Nsg80
Nsb(dp19845
sg1
(g92
g3
Ntp19846
Rp19847
(dp19848
g7
(dp19849
sg9
g1
(g2879
g3
Ntp19850
Rp19851
(dp19852
g14
g15
(g2883
tp19853
Rp19854
(dp19855
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19856
tp19857
Rp19858
(dp19859
g41
S'environ_items'
p19860
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp19861
sg65
g19829
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp19862
sg79
Nsg80
Nsb(dp19863
sg1
(g92
g3
Ntp19864
Rp19865
(dp19866
g7
(dp19867
sg9
g1
(g135
g3
Ntp19868
Rp19869
(dp19870
g139
(lp19871
g2910
asg14
g15
(g142
tp19872
Rp19873
(dp19874
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p19875
sbsg148
(dp19876
g2916
Nssg150
(lp19877
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp19878
sg65
g19829
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp19879
sg79
Nsg80
Nsb(dp19880
ssg157
(dp19881
sg159
(dp19882
g19818
(dp19883
g19847
(dp19884
g163
(lp19885
(g2933
g2895
tp19886
a(g2896
g2896
tp19887
a(g2894
g2894
tp19888
asssg19833
(dp19889
sg19847
(dp19890
g19865
(dp19891
g163
(lp19892
(g2893
g2910
tp19893
asssg19865
(dp19894
g19833
(dp19895
g163
(lp19896
(g2916
g2893
tp19897
assssg174
g19882
sg175
(dp19898
g19818
(dp19899
sg19833
(dp19900
g19865
g19895
ssg19847
(dp19901
g19818
g19884
ssg19865
(dp19902
g19847
g19891
sssg180
g19882
sbsg43
g19829
sg65
g66
sg75
g19829
sg76
g181
((lp19903
(lp19904
g184
ag181
((lp19905
(lp19906
g187
ag184
aa(lp19907
g189
ag190
aa(lp19908
g192
ag193
aa(lp19909
g195
ag196
aa(lp19910
g198
ag199
aa(lp19911
g201
ag106
aa(lp19912
g203
ag204
aa(lp19913
g206
ag207
aatp19914
Rp19915
aa(lp19916
g211
ag181
((lp19917
(lp19918
g187
ag211
aa(lp19919
g215
ag216
aa(lp19920
g218
ag219
aa(lp19921
g221
ag222
aa(lp19922
g224
ag225
aa(lp19923
g227
ag228
aa(lp19924
g230
ag231
aa(lp19925
g233
ag234
aa(lp19926
g236
ag237
aa(lp19927
g239
ag240
aa(lp19928
g242
ag243
aa(lp19929
g245
ag246
aa(lp19930
g248
ag249
aa(lp19931
g251
ag252
aa(lp19932
g254
ag255
aa(lp19933
g257
ag258
aa(lp19934
g260
ag261
aa(lp19935
g263
ag264
aa(lp19936
g266
ag267
aatp19937
Rp19938
aa(lp19939
g271
ag181
((lp19940
(lp19941
g187
ag271
aa(lp19942
g275
ag276
aatp19943
Rp19944
aatp19945
Rp19946
sg80
Nsbtp19947
a(g18076
g1
(g81
g3
Ntp19948
Rp19949
(dp19950
g85
g1
(g86
g3
Ntp19951
Rp19952
(dp19953
g90
(dp19954
g1
(g2
g3
Ntp19955
Rp19956
(dp19957
g7
(dp19958
sg9
g1
(g2879
g3
Ntp19959
Rp19960
(dp19961
g14
g15
(g2883
tp19962
Rp19963
(dp19964
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19965
tp19966
Rp19967
(dp19968
g41
S'environ_items'
p19969
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp19970
Rp19971
(dp19972
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp19973
tp19974
Rp19975
(dp19976
g41
S'environ_items'
p19977
sg43
g32
sbsg2896
g23
sg2894
g23
sg2895
g23
sg2893
I01
sbsg43
g19461
sg63
(dp19978
sg65
S'sca_seed_Z_fsl_to_itk_1'
p19979
sg67
(lp19980
g2894
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g19461
sg76
Nsg77
(lp19981
sg79
Nsg80
Nsb(dp19982
sg1
(g92
g3
Ntp19983
Rp19984
(dp19985
g7
(dp19986
sg9
g1
(g97
g3
Ntp19987
Rp19988
(dp19989
g14
g15
(g53
tp19990
Rp19991
(dp19992
g28
g29
sg2893
g23
sbsg108
(lp19993
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp19994
sg65
g19979
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp19995
sg79
Nsg80
Nsb(dp19996
sg1
(g92
g3
Ntp19997
Rp19998
(dp19999
g7
(dp20000
sg9
g1
(g97
g3
Ntp20001
Rp20002
(dp20003
g14
g15
(g53
tp20004
Rp20005
(dp20006
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp20007
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp20008
sg65
g19979
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp20009
sg79
Nsg80
Nsb(dp20010
sg1
(g2
g3
Ntp20011
Rp20012
(dp20013
g7
(dp20014
sg9
g1
(g135
g3
Ntp20015
Rp20016
(dp20017
g139
(lp20018
g2910
asg14
g15
(g142
tp20019
Rp20020
(dp20021
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p20022
sbsg148
(dp20023
g2916
Nssg150
(lp20024
g2916
asg152
Nsbsg51
Nsg52
g15
(g53
tp20025
Rp20026
(dp20027
g20
I00
sg28
g29
sg2910
g23
sg146
g20022
sbsg43
g2919
sg63
(dp20028
sg65
g19979
sg67
(lp20029
g2910
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp20030
sg79
Nsg80
Nsb(dp20031
ssg157
(dp20032
sg159
(dp20033
g19956
(dp20034
g20012
(dp20035
g163
(lp20036
(g2893
g2910
tp20037
asssg19984
(dp20038
sg19998
(dp20039
g19956
(dp20040
g163
(lp20041
(g2933
g2895
tp20042
a(g2896
g2896
tp20043
a(g2894
g2894
tp20044
asssg20012
(dp20045
g19984
(dp20046
g163
(lp20047
(g2916
g2893
tp20048
assssg174
g20033
sg175
(dp20049
g19956
(dp20050
g19998
g20040
ssg19984
(dp20051
g20012
g20046
ssg19998
(dp20052
sg20012
(dp20053
g19956
g20035
sssg180
g20033
sbsg43
g19979
sg65
g66
sg75
g19979
sg76
g181
((lp20054
(lp20055
g184
ag181
((lp20056
(lp20057
g187
ag184
aa(lp20058
g189
ag190
aa(lp20059
g192
ag193
aa(lp20060
g195
ag196
aa(lp20061
g198
ag199
aa(lp20062
g201
ag106
aa(lp20063
g203
ag204
aa(lp20064
g206
ag207
aatp20065
Rp20066
aa(lp20067
g211
ag181
((lp20068
(lp20069
g187
ag211
aa(lp20070
g215
ag216
aa(lp20071
g218
ag219
aa(lp20072
g221
ag222
aa(lp20073
g224
ag225
aa(lp20074
g227
ag228
aa(lp20075
g230
ag231
aa(lp20076
g233
ag234
aa(lp20077
g236
ag237
aa(lp20078
g239
ag240
aa(lp20079
g242
ag243
aa(lp20080
g245
ag246
aa(lp20081
g248
ag249
aa(lp20082
g251
ag252
aa(lp20083
g254
ag255
aa(lp20084
g257
ag258
aa(lp20085
g260
ag261
aa(lp20086
g263
ag264
aa(lp20087
g266
ag267
aatp20088
Rp20089
aa(lp20090
g271
ag181
((lp20091
(lp20092
g187
ag271
aa(lp20093
g275
ag276
aatp20094
Rp20095
aatp20096
Rp20097
sg80
Nsbtp20098
a(g18076
g13847
tp20099
a(g18076
g1
(g81
g3
Ntp20100
Rp20101
(dp20102
g85
g1
(g86
g3
Ntp20103
Rp20104
(dp20105
g90
(dp20106
g1
(g92
g3
Ntp20107
Rp20108
(dp20109
g7
(dp20110
sg9
g1
(g2879
g3
Ntp20111
Rp20112
(dp20113
g14
g15
(g2883
tp20114
Rp20115
(dp20116
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20117
tp20118
Rp20119
(dp20120
g41
S'environ_items'
p20121
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp20122
sg65
S'fsl_to_itk_mean_functional_in_mni_0'
p20123
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp20124
sg79
Nsg80
Nsb(dp20125
sg1
(g92
g3
Ntp20126
Rp20127
(dp20128
g7
(dp20129
sg9
g1
(g97
g3
Ntp20130
Rp20131
(dp20132
g14
g15
(g53
tp20133
Rp20134
(dp20135
g28
g29
sg2893
g23
sbsg108
(lp20136
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp20137
sg65
g20123
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp20138
sg79
Nsg80
Nsb(dp20139
sg1
(g92
g3
Ntp20140
Rp20141
(dp20142
g7
(dp20143
sg9
g1
(g97
g3
Ntp20144
Rp20145
(dp20146
g14
g15
(g53
tp20147
Rp20148
(dp20149
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp20150
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp20151
sg65
g20123
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp20152
sg79
Nsg80
Nsb(dp20153
sg1
(g92
g3
Ntp20154
Rp20155
(dp20156
g7
(dp20157
sg9
g1
(g135
g3
Ntp20158
Rp20159
(dp20160
g139
(lp20161
g2910
asg14
g15
(g142
tp20162
Rp20163
(dp20164
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p20165
sbsg148
(dp20166
g2916
Nssg150
(lp20167
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp20168
sg65
g20123
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp20169
sg79
Nsg80
Nsb(dp20170
ssg157
(dp20171
sg159
(dp20172
g20108
(dp20173
g20155
(dp20174
g163
(lp20175
(g2893
g2910
tp20176
asssg20127
(dp20177
sg20141
(dp20178
g20108
(dp20179
g163
(lp20180
(g2933
g2895
tp20181
a(g2896
g2896
tp20182
a(g2894
g2894
tp20183
asssg20155
(dp20184
g20127
(dp20185
g163
(lp20186
(g2916
g2893
tp20187
assssg174
g20172
sg175
(dp20188
g20108
(dp20189
g20141
g20179
ssg20127
(dp20190
g20155
g20185
ssg20141
(dp20191
sg20155
(dp20192
g20108
g20174
sssg180
g20172
sbsg43
g20123
sg65
g66
sg75
g20123
sg76
g181
((lp20193
(lp20194
g184
ag181
((lp20195
(lp20196
g187
ag184
aa(lp20197
g189
ag190
aa(lp20198
g192
ag193
aa(lp20199
g195
ag196
aa(lp20200
g198
ag199
aa(lp20201
g201
ag106
aa(lp20202
g203
ag204
aa(lp20203
g206
ag207
aatp20204
Rp20205
aa(lp20206
g211
ag181
((lp20207
(lp20208
g187
ag211
aa(lp20209
g215
ag216
aa(lp20210
g218
ag219
aa(lp20211
g221
ag222
aa(lp20212
g224
ag225
aa(lp20213
g227
ag228
aa(lp20214
g230
ag231
aa(lp20215
g233
ag234
aa(lp20216
g236
ag237
aa(lp20217
g239
ag240
aa(lp20218
g242
ag243
aa(lp20219
g245
ag246
aa(lp20220
g248
ag249
aa(lp20221
g251
ag252
aa(lp20222
g254
ag255
aa(lp20223
g257
ag258
aa(lp20224
g260
ag261
aa(lp20225
g263
ag264
aa(lp20226
g266
ag267
aatp20227
Rp20228
aa(lp20229
g271
ag181
((lp20230
(lp20231
g187
ag271
aa(lp20232
g275
ag276
aatp20233
Rp20234
aatp20235
Rp20236
sg80
Nsbtp20237
a(g18076
g1
(g81
g3
Ntp20238
Rp20239
(dp20240
g85
g1
(g86
g3
Ntp20241
Rp20242
(dp20243
g90
(dp20244
g1
(g92
g3
Ntp20245
Rp20246
(dp20247
g7
(dp20248
sg9
g1
(g2879
g3
Ntp20249
Rp20250
(dp20251
g14
g15
(g2883
tp20252
Rp20253
(dp20254
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20255
tp20256
Rp20257
(dp20258
g41
S'environ_items'
p20259
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp20260
sg65
S'falff_Z_fsl_to_itk_0'
p20261
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp20262
sg79
Nsg80
Nsb(dp20263
sg1
(g92
g3
Ntp20264
Rp20265
(dp20266
g7
(dp20267
sg9
g1
(g97
g3
Ntp20268
Rp20269
(dp20270
g14
g15
(g53
tp20271
Rp20272
(dp20273
g28
g29
sg2893
g23
sbsg108
(lp20274
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp20275
sg65
g20261
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp20276
sg79
Nsg80
Nsb(dp20277
sg1
(g92
g3
Ntp20278
Rp20279
(dp20280
g7
(dp20281
sg9
g1
(g97
g3
Ntp20282
Rp20283
(dp20284
g14
g15
(g53
tp20285
Rp20286
(dp20287
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp20288
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp20289
sg65
g20261
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp20290
sg79
Nsg80
Nsb(dp20291
sg1
(g92
g3
Ntp20292
Rp20293
(dp20294
g7
(dp20295
sg9
g1
(g135
g3
Ntp20296
Rp20297
(dp20298
g139
(lp20299
g2910
asg14
g15
(g142
tp20300
Rp20301
(dp20302
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p20303
sbsg148
(dp20304
g2916
Nssg150
(lp20305
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp20306
sg65
g20261
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp20307
sg79
Nsg80
Nsb(dp20308
ssg157
(dp20309
sg159
(dp20310
g20246
(dp20311
g20293
(dp20312
g163
(lp20313
(g2893
g2910
tp20314
asssg20265
(dp20315
sg20279
(dp20316
g20246
(dp20317
g163
(lp20318
(g2933
g2895
tp20319
a(g2896
g2896
tp20320
a(g2894
g2894
tp20321
asssg20293
(dp20322
g20265
(dp20323
g163
(lp20324
(g2916
g2893
tp20325
assssg174
g20310
sg175
(dp20326
g20246
(dp20327
g20279
g20317
ssg20265
(dp20328
g20293
g20323
ssg20279
(dp20329
sg20293
(dp20330
g20246
g20312
sssg180
g20310
sbsg43
g20261
sg65
g66
sg75
g20261
sg76
g181
((lp20331
(lp20332
g184
ag181
((lp20333
(lp20334
g187
ag184
aa(lp20335
g189
ag190
aa(lp20336
g192
ag193
aa(lp20337
g195
ag196
aa(lp20338
g198
ag199
aa(lp20339
g201
ag106
aa(lp20340
g203
ag204
aa(lp20341
g206
ag207
aatp20342
Rp20343
aa(lp20344
g211
ag181
((lp20345
(lp20346
g187
ag211
aa(lp20347
g215
ag216
aa(lp20348
g218
ag219
aa(lp20349
g221
ag222
aa(lp20350
g224
ag225
aa(lp20351
g227
ag228
aa(lp20352
g230
ag231
aa(lp20353
g233
ag234
aa(lp20354
g236
ag237
aa(lp20355
g239
ag240
aa(lp20356
g242
ag243
aa(lp20357
g245
ag246
aa(lp20358
g248
ag249
aa(lp20359
g251
ag252
aa(lp20360
g254
ag255
aa(lp20361
g257
ag258
aa(lp20362
g260
ag261
aa(lp20363
g263
ag264
aa(lp20364
g266
ag267
aatp20365
Rp20366
aa(lp20367
g271
ag181
((lp20368
(lp20369
g187
ag271
aa(lp20370
g275
ag276
aatp20371
Rp20372
aatp20373
Rp20374
sg80
Nsbtp20375
a(g18076
g1
(g81
g3
Ntp20376
Rp20377
(dp20378
g85
g1
(g86
g3
Ntp20379
Rp20380
(dp20381
g90
(dp20382
g1
(g92
g3
Ntp20383
Rp20384
(dp20385
g7
(dp20386
sg9
g1
(g97
g3
Ntp20387
Rp20388
(dp20389
g14
g15
(g53
tp20390
Rp20391
(dp20392
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp20393
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp20394
sg65
S'sca_seed_fsl_to_itk_0'
p20395
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp20396
sg79
Nsg80
Nsb(dp20397
sg1
(g92
g3
Ntp20398
Rp20399
(dp20400
g7
(dp20401
sg9
g1
(g2879
g3
Ntp20402
Rp20403
(dp20404
g14
g15
(g2883
tp20405
Rp20406
(dp20407
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20408
tp20409
Rp20410
(dp20411
g41
S'environ_items'
p20412
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp20413
sg65
g20395
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp20414
sg79
Nsg80
Nsb(dp20415
sg1
(g92
g3
Ntp20416
Rp20417
(dp20418
g7
(dp20419
sg9
g1
(g97
g3
Ntp20420
Rp20421
(dp20422
g14
g15
(g53
tp20423
Rp20424
(dp20425
g28
g29
sg2893
g23
sbsg108
(lp20426
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp20427
sg65
g20395
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp20428
sg79
Nsg80
Nsb(dp20429
sg1
(g92
g3
Ntp20430
Rp20431
(dp20432
g7
(dp20433
sg9
g1
(g135
g3
Ntp20434
Rp20435
(dp20436
g139
(lp20437
g2910
asg14
g15
(g142
tp20438
Rp20439
(dp20440
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p20441
sbsg148
(dp20442
g2916
Nssg150
(lp20443
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp20444
sg65
g20395
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp20445
sg79
Nsg80
Nsb(dp20446
ssg157
(dp20447
sg159
(dp20448
g20384
(dp20449
g20399
(dp20450
g163
(lp20451
(g2933
g2895
tp20452
a(g2896
g2896
tp20453
a(g2894
g2894
tp20454
asssg20399
(dp20455
g20431
(dp20456
g163
(lp20457
(g2893
g2910
tp20458
asssg20417
(dp20459
sg20431
(dp20460
g20417
(dp20461
g163
(lp20462
(g2916
g2893
tp20463
assssg174
g20448
sg175
(dp20464
g20384
(dp20465
sg20399
(dp20466
g20384
g20450
ssg20417
(dp20467
g20431
g20461
ssg20431
(dp20468
g20399
g20456
sssg180
g20448
sbsg43
g20395
sg65
g66
sg75
g20395
sg76
g181
((lp20469
(lp20470
g184
ag181
((lp20471
(lp20472
g187
ag184
aa(lp20473
g189
ag190
aa(lp20474
g192
ag193
aa(lp20475
g195
ag196
aa(lp20476
g198
ag199
aa(lp20477
g201
ag106
aa(lp20478
g203
ag204
aa(lp20479
g206
ag207
aatp20480
Rp20481
aa(lp20482
g211
ag181
((lp20483
(lp20484
g187
ag211
aa(lp20485
g215
ag216
aa(lp20486
g218
ag219
aa(lp20487
g221
ag222
aa(lp20488
g224
ag225
aa(lp20489
g227
ag228
aa(lp20490
g230
ag231
aa(lp20491
g233
ag234
aa(lp20492
g236
ag237
aa(lp20493
g239
ag240
aa(lp20494
g242
ag243
aa(lp20495
g245
ag246
aa(lp20496
g248
ag249
aa(lp20497
g251
ag252
aa(lp20498
g254
ag255
aa(lp20499
g257
ag258
aa(lp20500
g260
ag261
aa(lp20501
g263
ag264
aa(lp20502
g266
ag267
aatp20503
Rp20504
aa(lp20505
g271
ag181
((lp20506
(lp20507
g187
ag271
aa(lp20508
g275
ag276
aatp20509
Rp20510
aatp20511
Rp20512
sg80
Nsbtp20513
a(g18076
g1
(g81
g3
Ntp20514
Rp20515
(dp20516
g85
g1
(g86
g3
Ntp20517
Rp20518
(dp20519
g90
(dp20520
g1
(g92
g3
Ntp20521
Rp20522
(dp20523
g7
(dp20524
sg9
g1
(g97
g3
Ntp20525
Rp20526
(dp20527
g14
g15
(g53
tp20528
Rp20529
(dp20530
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp20531
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp20532
sg65
S'dr_tempreg_maps_z_stack_fsl_to_itk_1'
p20533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp20534
sg79
Nsg80
Nsb(dp20535
sg1
(g92
g3
Ntp20536
Rp20537
(dp20538
g7
(dp20539
sg9
g1
(g135
g3
Ntp20540
Rp20541
(dp20542
g139
(lp20543
g2910
asg14
g15
(g142
tp20544
Rp20545
(dp20546
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p20547
sbsg148
(dp20548
g2916
Nssg150
(lp20549
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp20550
sg65
g20533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp20551
sg79
Nsg80
Nsb(dp20552
sg1
(g92
g3
Ntp20553
Rp20554
(dp20555
g7
(dp20556
sg9
g1
(g97
g3
Ntp20557
Rp20558
(dp20559
g14
g15
(g53
tp20560
Rp20561
(dp20562
g28
g29
sg2893
g23
sbsg108
(lp20563
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp20564
sg65
g20533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp20565
sg79
Nsg80
Nsb(dp20566
sg1
(g92
g3
Ntp20567
Rp20568
(dp20569
g7
(dp20570
sg9
g1
(g2879
g3
Ntp20571
Rp20572
(dp20573
g14
g15
(g2883
tp20574
Rp20575
(dp20576
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20577
tp20578
Rp20579
(dp20580
g41
S'environ_items'
p20581
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp20582
sg65
g20533
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp20583
sg79
Nsg80
Nsb(dp20584
ssg157
(dp20585
sg159
(dp20586
g20522
(dp20587
g20568
(dp20588
g163
(lp20589
(g2933
g2895
tp20590
a(g2896
g2896
tp20591
a(g2894
g2894
tp20592
asssg20537
(dp20593
g20554
(dp20594
g163
(lp20595
(g2916
g2893
tp20596
asssg20554
(dp20597
sg20568
(dp20598
g20537
(dp20599
g163
(lp20600
(g2893
g2910
tp20601
assssg174
g20586
sg175
(dp20602
g20522
(dp20603
sg20537
(dp20604
g20568
g20599
ssg20554
(dp20605
g20537
g20594
ssg20568
(dp20606
g20522
g20588
sssg180
g20586
sbsg43
g20533
sg65
g66
sg75
g20533
sg76
g181
((lp20607
(lp20608
g184
ag181
((lp20609
(lp20610
g187
ag184
aa(lp20611
g189
ag190
aa(lp20612
g192
ag193
aa(lp20613
g195
ag196
aa(lp20614
g198
ag199
aa(lp20615
g201
ag106
aa(lp20616
g203
ag204
aa(lp20617
g206
ag207
aatp20618
Rp20619
aa(lp20620
g211
ag181
((lp20621
(lp20622
g187
ag211
aa(lp20623
g215
ag216
aa(lp20624
g218
ag219
aa(lp20625
g221
ag222
aa(lp20626
g224
ag225
aa(lp20627
g227
ag228
aa(lp20628
g230
ag231
aa(lp20629
g233
ag234
aa(lp20630
g236
ag237
aa(lp20631
g239
ag240
aa(lp20632
g242
ag243
aa(lp20633
g245
ag246
aa(lp20634
g248
ag249
aa(lp20635
g251
ag252
aa(lp20636
g254
ag255
aa(lp20637
g257
ag258
aa(lp20638
g260
ag261
aa(lp20639
g263
ag264
aa(lp20640
g266
ag267
aatp20641
Rp20642
aa(lp20643
g271
ag181
((lp20644
(lp20645
g187
ag271
aa(lp20646
g275
ag276
aatp20647
Rp20648
aatp20649
Rp20650
sg80
Nsbtp20651
a(g18076
g1
(g81
g3
Ntp20652
Rp20653
(dp20654
g85
g1
(g86
g3
Ntp20655
Rp20656
(dp20657
g90
(dp20658
g1
(g92
g3
Ntp20659
Rp20660
(dp20661
g7
(dp20662
sg9
g1
(g97
g3
Ntp20663
Rp20664
(dp20665
g14
g15
(g53
tp20666
Rp20667
(dp20668
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp20669
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp20670
sg65
S'alff_Z_fsl_to_itk_1'
p20671
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp20672
sg79
Nsg80
Nsb(dp20673
sg1
(g92
g3
Ntp20674
Rp20675
(dp20676
g7
(dp20677
sg9
g1
(g97
g3
Ntp20678
Rp20679
(dp20680
g14
g15
(g53
tp20681
Rp20682
(dp20683
g28
g29
sg2893
g23
sbsg108
(lp20684
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp20685
sg65
g20671
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp20686
sg79
Nsg80
Nsb(dp20687
sg1
(g92
g3
Ntp20688
Rp20689
(dp20690
g7
(dp20691
sg9
g1
(g135
g3
Ntp20692
Rp20693
(dp20694
g139
(lp20695
g2910
asg14
g15
(g142
tp20696
Rp20697
(dp20698
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p20699
sbsg148
(dp20700
g2916
Nssg150
(lp20701
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp20702
sg65
g20671
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp20703
sg79
Nsg80
Nsb(dp20704
sg1
(g92
g3
Ntp20705
Rp20706
(dp20707
g7
(dp20708
sg9
g1
(g2879
g3
Ntp20709
Rp20710
(dp20711
g14
g15
(g2883
tp20712
Rp20713
(dp20714
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20715
tp20716
Rp20717
(dp20718
g41
S'environ_items'
p20719
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp20720
sg65
g20671
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp20721
sg79
Nsg80
Nsb(dp20722
ssg157
(dp20723
sg159
(dp20724
g20660
(dp20725
g20706
(dp20726
g163
(lp20727
(g2933
g2895
tp20728
a(g2896
g2896
tp20729
a(g2894
g2894
tp20730
asssg20675
(dp20731
sg20689
(dp20732
g20675
(dp20733
g163
(lp20734
(g2916
g2893
tp20735
asssg20706
(dp20736
g20689
(dp20737
g163
(lp20738
(g2893
g2910
tp20739
assssg174
g20724
sg175
(dp20740
g20660
(dp20741
sg20675
(dp20742
g20689
g20733
ssg20689
(dp20743
g20706
g20737
ssg20706
(dp20744
g20660
g20726
sssg180
g20724
sbsg43
g20671
sg65
g66
sg75
g20671
sg76
g181
((lp20745
(lp20746
g184
ag181
((lp20747
(lp20748
g187
ag184
aa(lp20749
g189
ag190
aa(lp20750
g192
ag193
aa(lp20751
g195
ag196
aa(lp20752
g198
ag199
aa(lp20753
g201
ag106
aa(lp20754
g203
ag204
aa(lp20755
g206
ag207
aatp20756
Rp20757
aa(lp20758
g211
ag181
((lp20759
(lp20760
g187
ag211
aa(lp20761
g215
ag216
aa(lp20762
g218
ag219
aa(lp20763
g221
ag222
aa(lp20764
g224
ag225
aa(lp20765
g227
ag228
aa(lp20766
g230
ag231
aa(lp20767
g233
ag234
aa(lp20768
g236
ag237
aa(lp20769
g239
ag240
aa(lp20770
g242
ag243
aa(lp20771
g245
ag246
aa(lp20772
g248
ag249
aa(lp20773
g251
ag252
aa(lp20774
g254
ag255
aa(lp20775
g257
ag258
aa(lp20776
g260
ag261
aa(lp20777
g263
ag264
aa(lp20778
g266
ag267
aatp20779
Rp20780
aa(lp20781
g271
ag181
((lp20782
(lp20783
g187
ag271
aa(lp20784
g275
ag276
aatp20785
Rp20786
aatp20787
Rp20788
sg80
Nsbtp20789
a(g18076
g1
(g81
g3
Ntp20790
Rp20791
(dp20792
g85
g1
(g86
g3
Ntp20793
Rp20794
(dp20795
g90
(dp20796
g1
(g2
g3
Ntp20797
Rp20798
(dp20799
g7
(dp20800
sg9
g1
(g2879
g3
Ntp20801
Rp20802
(dp20803
g14
g15
(g2883
tp20804
Rp20805
(dp20806
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20807
tp20808
Rp20809
(dp20810
g41
S'environ_items'
p20811
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp20812
Rp20813
(dp20814
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20815
tp20816
Rp20817
(dp20818
g41
S'environ_items'
p20819
sg43
g32
sbsg2896
g23
sg2894
g23
sg2895
g23
sg2893
I01
sbsg43
g19461
sg63
(dp20820
sg65
S'sca_roi_Z_fsl_to_itk_1'
p20821
sg67
(lp20822
g2894
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g19461
sg76
Nsg77
(lp20823
sg79
Nsg80
Nsb(dp20824
sg1
(g92
g3
Ntp20825
Rp20826
(dp20827
g7
(dp20828
sg9
g1
(g97
g3
Ntp20829
Rp20830
(dp20831
g14
g15
(g53
tp20832
Rp20833
(dp20834
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp20835
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp20836
sg65
g20821
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp20837
sg79
Nsg80
Nsb(dp20838
sg1
(g92
g3
Ntp20839
Rp20840
(dp20841
g7
(dp20842
sg9
g1
(g97
g3
Ntp20843
Rp20844
(dp20845
g14
g15
(g53
tp20846
Rp20847
(dp20848
g28
g29
sg2893
g23
sbsg108
(lp20849
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp20850
sg65
g20821
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp20851
sg79
Nsg80
Nsb(dp20852
sg1
(g2
g3
Ntp20853
Rp20854
(dp20855
g7
(dp20856
sg9
g1
(g135
g3
Ntp20857
Rp20858
(dp20859
g139
(lp20860
g2910
asg14
g15
(g142
tp20861
Rp20862
(dp20863
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p20864
sbsg148
(dp20865
g2916
Nssg150
(lp20866
g2916
asg152
Nsbsg51
Nsg52
g15
(g53
tp20867
Rp20868
(dp20869
g20
I00
sg28
g29
sg2910
g23
sg146
g20864
sbsg43
g2919
sg63
(dp20870
sg65
g20821
sg67
(lp20871
g2910
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp20872
sg79
Nsg80
Nsb(dp20873
ssg157
(dp20874
sg159
(dp20875
g20798
(dp20876
g20854
(dp20877
g163
(lp20878
(g2893
g2910
tp20879
asssg20826
(dp20880
g20798
(dp20881
g163
(lp20882
(g2933
g2895
tp20883
a(g2896
g2896
tp20884
a(g2894
g2894
tp20885
asssg20840
(dp20886
sg20854
(dp20887
g20840
(dp20888
g163
(lp20889
(g2916
g2893
tp20890
assssg174
g20875
sg175
(dp20891
g20798
(dp20892
g20826
g20881
ssg20826
(dp20893
sg20840
(dp20894
g20854
g20888
ssg20854
(dp20895
g20798
g20877
sssg180
g20875
sbsg43
g20821
sg65
g66
sg75
g20821
sg76
g181
((lp20896
(lp20897
g184
ag181
((lp20898
(lp20899
g187
ag184
aa(lp20900
g189
ag190
aa(lp20901
g192
ag193
aa(lp20902
g195
ag196
aa(lp20903
g198
ag199
aa(lp20904
g201
ag106
aa(lp20905
g203
ag204
aa(lp20906
g206
ag207
aatp20907
Rp20908
aa(lp20909
g211
ag181
((lp20910
(lp20911
g187
ag211
aa(lp20912
g215
ag216
aa(lp20913
g218
ag219
aa(lp20914
g221
ag222
aa(lp20915
g224
ag225
aa(lp20916
g227
ag228
aa(lp20917
g230
ag231
aa(lp20918
g233
ag234
aa(lp20919
g236
ag237
aa(lp20920
g239
ag240
aa(lp20921
g242
ag243
aa(lp20922
g245
ag246
aa(lp20923
g248
ag249
aa(lp20924
g251
ag252
aa(lp20925
g254
ag255
aa(lp20926
g257
ag258
aa(lp20927
g260
ag261
aa(lp20928
g263
ag264
aa(lp20929
g266
ag267
aatp20930
Rp20931
aa(lp20932
g271
ag181
((lp20933
(lp20934
g187
ag271
aa(lp20935
g275
ag276
aatp20936
Rp20937
aatp20938
Rp20939
sg80
Nsbtp20940
a(g18076
g1
(g81
g3
Ntp20941
Rp20942
(dp20943
g85
g1
(g86
g3
Ntp20944
Rp20945
(dp20946
g90
(dp20947
g1
(g2
g3
Ntp20948
Rp20949
(dp20950
g7
(dp20951
sg9
g1
(g2879
g3
Ntp20952
Rp20953
(dp20954
g14
g15
(g2883
tp20955
Rp20956
(dp20957
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20958
tp20959
Rp20960
(dp20961
g41
S'environ_items'
p20962
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp20963
Rp20964
(dp20965
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp20966
tp20967
Rp20968
(dp20969
g41
S'environ_items'
p20970
sg43
g32
sbsg2896
g23
sg2894
g23
sg2895
g23
sg2893
I01
sbsg43
g19461
sg63
(dp20971
sg65
S'dr_tempreg_maps_z_files_fsl_to_itk_1'
p20972
sg67
(lp20973
g2894
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g19461
sg76
Nsg77
(lp20974
sg79
Nsg80
Nsb(dp20975
sg1
(g92
g3
Ntp20976
Rp20977
(dp20978
g7
(dp20979
sg9
g1
(g97
g3
Ntp20980
Rp20981
(dp20982
g14
g15
(g53
tp20983
Rp20984
(dp20985
g28
g29
sg2893
g23
sbsg108
(lp20986
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp20987
sg65
g20972
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp20988
sg79
Nsg80
Nsb(dp20989
sg1
(g92
g3
Ntp20990
Rp20991
(dp20992
g7
(dp20993
sg9
g1
(g97
g3
Ntp20994
Rp20995
(dp20996
g14
g15
(g53
tp20997
Rp20998
(dp20999
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21000
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21001
sg65
g20972
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21002
sg79
Nsg80
Nsb(dp21003
sg1
(g2
g3
Ntp21004
Rp21005
(dp21006
g7
(dp21007
sg9
g1
(g135
g3
Ntp21008
Rp21009
(dp21010
g139
(lp21011
g2910
asg14
g15
(g142
tp21012
Rp21013
(dp21014
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21015
sbsg148
(dp21016
g2916
Nssg150
(lp21017
g2916
asg152
Nsbsg51
Nsg52
g15
(g53
tp21018
Rp21019
(dp21020
g20
I00
sg28
g29
sg2910
g23
sg146
g21015
sbsg43
g2919
sg63
(dp21021
sg65
g20972
sg67
(lp21022
g2910
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp21023
sg79
Nsg80
Nsb(dp21024
ssg157
(dp21025
sg159
(dp21026
g20949
(dp21027
g21005
(dp21028
g163
(lp21029
(g2893
g2910
tp21030
asssg20977
(dp21031
sg20991
(dp21032
g20949
(dp21033
g163
(lp21034
(g2933
g2895
tp21035
a(g2896
g2896
tp21036
a(g2894
g2894
tp21037
asssg21005
(dp21038
g20977
(dp21039
g163
(lp21040
(g2916
g2893
tp21041
assssg174
g21026
sg175
(dp21042
g20949
(dp21043
g20991
g21033
ssg20977
(dp21044
g21005
g21039
ssg20991
(dp21045
sg21005
(dp21046
g20949
g21028
sssg180
g21026
sbsg43
g20972
sg65
g66
sg75
g20972
sg76
g181
((lp21047
(lp21048
g184
ag181
((lp21049
(lp21050
g187
ag184
aa(lp21051
g189
ag190
aa(lp21052
g192
ag193
aa(lp21053
g195
ag196
aa(lp21054
g198
ag199
aa(lp21055
g201
ag106
aa(lp21056
g203
ag204
aa(lp21057
g206
ag207
aatp21058
Rp21059
aa(lp21060
g211
ag181
((lp21061
(lp21062
g187
ag211
aa(lp21063
g215
ag216
aa(lp21064
g218
ag219
aa(lp21065
g221
ag222
aa(lp21066
g224
ag225
aa(lp21067
g227
ag228
aa(lp21068
g230
ag231
aa(lp21069
g233
ag234
aa(lp21070
g236
ag237
aa(lp21071
g239
ag240
aa(lp21072
g242
ag243
aa(lp21073
g245
ag246
aa(lp21074
g248
ag249
aa(lp21075
g251
ag252
aa(lp21076
g254
ag255
aa(lp21077
g257
ag258
aa(lp21078
g260
ag261
aa(lp21079
g263
ag264
aa(lp21080
g266
ag267
aatp21081
Rp21082
aa(lp21083
g271
ag181
((lp21084
(lp21085
g187
ag271
aa(lp21086
g275
ag276
aatp21087
Rp21088
aatp21089
Rp21090
sg80
Nsbtp21091
a(g18076
g1
(g81
g3
Ntp21092
Rp21093
(dp21094
g85
g1
(g86
g3
Ntp21095
Rp21096
(dp21097
g90
(dp21098
g1
(g2
g3
Ntp21099
Rp21100
(dp21101
g7
(dp21102
sg9
g1
(g2879
g3
Ntp21103
Rp21104
(dp21105
g14
g15
(g2883
tp21106
Rp21107
(dp21108
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21109
tp21110
Rp21111
(dp21112
g41
S'environ_items'
p21113
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp21114
Rp21115
(dp21116
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21117
tp21118
Rp21119
(dp21120
g41
S'environ_items'
p21121
sg43
g32
sbsg2896
g23
sg2894
g23
sg2895
g23
sg2893
I01
sbsg43
g19461
sg63
(dp21122
sg65
S'sca_roi_Z_fsl_to_itk_0'
p21123
sg67
(lp21124
g2894
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g19461
sg76
Nsg77
(lp21125
sg79
Nsg80
Nsb(dp21126
sg1
(g92
g3
Ntp21127
Rp21128
(dp21129
g7
(dp21130
sg9
g1
(g97
g3
Ntp21131
Rp21132
(dp21133
g14
g15
(g53
tp21134
Rp21135
(dp21136
g28
g29
sg2893
g23
sbsg108
(lp21137
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp21138
sg65
g21123
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp21139
sg79
Nsg80
Nsb(dp21140
sg1
(g92
g3
Ntp21141
Rp21142
(dp21143
g7
(dp21144
sg9
g1
(g97
g3
Ntp21145
Rp21146
(dp21147
g14
g15
(g53
tp21148
Rp21149
(dp21150
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21151
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21152
sg65
g21123
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21153
sg79
Nsg80
Nsb(dp21154
sg1
(g2
g3
Ntp21155
Rp21156
(dp21157
g7
(dp21158
sg9
g1
(g135
g3
Ntp21159
Rp21160
(dp21161
g139
(lp21162
g2910
asg14
g15
(g142
tp21163
Rp21164
(dp21165
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21166
sbsg148
(dp21167
g2916
Nssg150
(lp21168
g2916
asg152
Nsbsg51
Nsg52
g15
(g53
tp21169
Rp21170
(dp21171
g20
I00
sg28
g29
sg2910
g23
sg146
g21166
sbsg43
g2919
sg63
(dp21172
sg65
g21123
sg67
(lp21173
g2910
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp21174
sg79
Nsg80
Nsb(dp21175
ssg157
(dp21176
sg159
(dp21177
g21100
(dp21178
g21156
(dp21179
g163
(lp21180
(g2893
g2910
tp21181
asssg21128
(dp21182
sg21142
(dp21183
g21100
(dp21184
g163
(lp21185
(g2933
g2895
tp21186
a(g2896
g2896
tp21187
a(g2894
g2894
tp21188
asssg21156
(dp21189
g21128
(dp21190
g163
(lp21191
(g2916
g2893
tp21192
assssg174
g21177
sg175
(dp21193
g21100
(dp21194
g21142
g21184
ssg21128
(dp21195
g21156
g21190
ssg21142
(dp21196
sg21156
(dp21197
g21100
g21179
sssg180
g21177
sbsg43
g21123
sg65
g66
sg75
g21123
sg76
g181
((lp21198
(lp21199
g184
ag181
((lp21200
(lp21201
g187
ag184
aa(lp21202
g189
ag190
aa(lp21203
g192
ag193
aa(lp21204
g195
ag196
aa(lp21205
g198
ag199
aa(lp21206
g201
ag106
aa(lp21207
g203
ag204
aa(lp21208
g206
ag207
aatp21209
Rp21210
aa(lp21211
g211
ag181
((lp21212
(lp21213
g187
ag211
aa(lp21214
g215
ag216
aa(lp21215
g218
ag219
aa(lp21216
g221
ag222
aa(lp21217
g224
ag225
aa(lp21218
g227
ag228
aa(lp21219
g230
ag231
aa(lp21220
g233
ag234
aa(lp21221
g236
ag237
aa(lp21222
g239
ag240
aa(lp21223
g242
ag243
aa(lp21224
g245
ag246
aa(lp21225
g248
ag249
aa(lp21226
g251
ag252
aa(lp21227
g254
ag255
aa(lp21228
g257
ag258
aa(lp21229
g260
ag261
aa(lp21230
g263
ag264
aa(lp21231
g266
ag267
aatp21232
Rp21233
aa(lp21234
g271
ag181
((lp21235
(lp21236
g187
ag271
aa(lp21237
g275
ag276
aatp21238
Rp21239
aatp21240
Rp21241
sg80
Nsbtp21242
a(g18076
g1
(g81
g3
Ntp21243
Rp21244
(dp21245
g85
g1
(g86
g3
Ntp21246
Rp21247
(dp21248
g90
(dp21249
g1
(g92
g3
Ntp21250
Rp21251
(dp21252
g7
(dp21253
sg9
g1
(g2879
g3
Ntp21254
Rp21255
(dp21256
g14
g15
(g2883
tp21257
Rp21258
(dp21259
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21260
tp21261
Rp21262
(dp21263
g41
S'environ_items'
p21264
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp21265
sg65
S'alff_fsl_to_itk_0'
p21266
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp21267
sg79
Nsg80
Nsb(dp21268
sg1
(g92
g3
Ntp21269
Rp21270
(dp21271
g7
(dp21272
sg9
g1
(g97
g3
Ntp21273
Rp21274
(dp21275
g14
g15
(g53
tp21276
Rp21277
(dp21278
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21279
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21280
sg65
g21266
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21281
sg79
Nsg80
Nsb(dp21282
sg1
(g92
g3
Ntp21283
Rp21284
(dp21285
g7
(dp21286
sg9
g1
(g97
g3
Ntp21287
Rp21288
(dp21289
g14
g15
(g53
tp21290
Rp21291
(dp21292
g28
g29
sg2893
g23
sbsg108
(lp21293
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp21294
sg65
g21266
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp21295
sg79
Nsg80
Nsb(dp21296
sg1
(g92
g3
Ntp21297
Rp21298
(dp21299
g7
(dp21300
sg9
g1
(g135
g3
Ntp21301
Rp21302
(dp21303
g139
(lp21304
g2910
asg14
g15
(g142
tp21305
Rp21306
(dp21307
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21308
sbsg148
(dp21309
g2916
Nssg150
(lp21310
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp21311
sg65
g21266
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp21312
sg79
Nsg80
Nsb(dp21313
ssg157
(dp21314
sg159
(dp21315
g21251
(dp21316
g21298
(dp21317
g163
(lp21318
(g2893
g2910
tp21319
asssg21270
(dp21320
g21251
(dp21321
g163
(lp21322
(g2933
g2895
tp21323
a(g2896
g2896
tp21324
a(g2894
g2894
tp21325
asssg21284
(dp21326
sg21298
(dp21327
g21284
(dp21328
g163
(lp21329
(g2916
g2893
tp21330
assssg174
g21315
sg175
(dp21331
g21251
(dp21332
g21270
g21321
ssg21270
(dp21333
sg21284
(dp21334
g21298
g21328
ssg21298
(dp21335
g21251
g21317
sssg180
g21315
sbsg43
g21266
sg65
g66
sg75
g21266
sg76
g181
((lp21336
(lp21337
g184
ag181
((lp21338
(lp21339
g187
ag184
aa(lp21340
g189
ag190
aa(lp21341
g192
ag193
aa(lp21342
g195
ag196
aa(lp21343
g198
ag199
aa(lp21344
g201
ag106
aa(lp21345
g203
ag204
aa(lp21346
g206
ag207
aatp21347
Rp21348
aa(lp21349
g211
ag181
((lp21350
(lp21351
g187
ag211
aa(lp21352
g215
ag216
aa(lp21353
g218
ag219
aa(lp21354
g221
ag222
aa(lp21355
g224
ag225
aa(lp21356
g227
ag228
aa(lp21357
g230
ag231
aa(lp21358
g233
ag234
aa(lp21359
g236
ag237
aa(lp21360
g239
ag240
aa(lp21361
g242
ag243
aa(lp21362
g245
ag246
aa(lp21363
g248
ag249
aa(lp21364
g251
ag252
aa(lp21365
g254
ag255
aa(lp21366
g257
ag258
aa(lp21367
g260
ag261
aa(lp21368
g263
ag264
aa(lp21369
g266
ag267
aatp21370
Rp21371
aa(lp21372
g271
ag181
((lp21373
(lp21374
g187
ag271
aa(lp21375
g275
ag276
aatp21376
Rp21377
aatp21378
Rp21379
sg80
Nsbtp21380
a(g18076
g1
(g81
g3
Ntp21381
Rp21382
(dp21383
g85
g1
(g86
g3
Ntp21384
Rp21385
(dp21386
g90
(dp21387
g1
(g92
g3
Ntp21388
Rp21389
(dp21390
g7
(dp21391
sg9
g1
(g97
g3
Ntp21392
Rp21393
(dp21394
g14
g15
(g53
tp21395
Rp21396
(dp21397
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21398
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21399
sg65
S'fsl_to_itk_functional_brain_mask_to_standard_1'
p21400
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21401
sg79
Nsg80
Nsb(dp21402
sg1
(g92
g3
Ntp21403
Rp21404
(dp21405
g7
(dp21406
sg9
g1
(g135
g3
Ntp21407
Rp21408
(dp21409
g139
(lp21410
g2910
asg14
g15
(g142
tp21411
Rp21412
(dp21413
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21414
sbsg148
(dp21415
g2916
Nssg150
(lp21416
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp21417
sg65
g21400
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp21418
sg79
Nsg80
Nsb(dp21419
sg1
(g92
g3
Ntp21420
Rp21421
(dp21422
g7
(dp21423
sg9
g1
(g97
g3
Ntp21424
Rp21425
(dp21426
g14
g15
(g53
tp21427
Rp21428
(dp21429
g28
g29
sg2893
g23
sbsg108
(lp21430
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp21431
sg65
g21400
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp21432
sg79
Nsg80
Nsb(dp21433
sg1
(g92
g3
Ntp21434
Rp21435
(dp21436
g7
(dp21437
sg9
g1
(g2879
g3
Ntp21438
Rp21439
(dp21440
g14
g15
(g2883
tp21441
Rp21442
(dp21443
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21444
tp21445
Rp21446
(dp21447
g41
S'environ_items'
p21448
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp21449
sg65
g21400
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp21450
sg79
Nsg80
Nsb(dp21451
ssg157
(dp21452
sg159
(dp21453
g21389
(dp21454
g21435
(dp21455
g163
(lp21456
(g2933
g2895
tp21457
a(g2896
g2896
tp21458
a(g2894
g2894
tp21459
asssg21404
(dp21460
g21421
(dp21461
g163
(lp21462
(g2916
g2893
tp21463
asssg21421
(dp21464
sg21435
(dp21465
g21404
(dp21466
g163
(lp21467
(g2893
g2910
tp21468
assssg174
g21453
sg175
(dp21469
g21389
(dp21470
sg21404
(dp21471
g21435
g21466
ssg21421
(dp21472
g21404
g21461
ssg21435
(dp21473
g21389
g21455
sssg180
g21453
sbsg43
g21400
sg65
g66
sg75
g21400
sg76
g181
((lp21474
(lp21475
g184
ag181
((lp21476
(lp21477
g187
ag184
aa(lp21478
g189
ag190
aa(lp21479
g192
ag193
aa(lp21480
g195
ag196
aa(lp21481
g198
ag199
aa(lp21482
g201
ag106
aa(lp21483
g203
ag204
aa(lp21484
g206
ag207
aatp21485
Rp21486
aa(lp21487
g211
ag181
((lp21488
(lp21489
g187
ag211
aa(lp21490
g215
ag216
aa(lp21491
g218
ag219
aa(lp21492
g221
ag222
aa(lp21493
g224
ag225
aa(lp21494
g227
ag228
aa(lp21495
g230
ag231
aa(lp21496
g233
ag234
aa(lp21497
g236
ag237
aa(lp21498
g239
ag240
aa(lp21499
g242
ag243
aa(lp21500
g245
ag246
aa(lp21501
g248
ag249
aa(lp21502
g251
ag252
aa(lp21503
g254
ag255
aa(lp21504
g257
ag258
aa(lp21505
g260
ag261
aa(lp21506
g263
ag264
aa(lp21507
g266
ag267
aatp21508
Rp21509
aa(lp21510
g271
ag181
((lp21511
(lp21512
g187
ag271
aa(lp21513
g275
ag276
aatp21514
Rp21515
aatp21516
Rp21517
sg80
Nsbtp21518
a(g18076
g1
(g81
g3
Ntp21519
Rp21520
(dp21521
g85
g1
(g86
g3
Ntp21522
Rp21523
(dp21524
g90
(dp21525
g1
(g92
g3
Ntp21526
Rp21527
(dp21528
g7
(dp21529
sg9
g1
(g135
g3
Ntp21530
Rp21531
(dp21532
g139
(lp21533
g2910
asg14
g15
(g142
tp21534
Rp21535
(dp21536
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21537
sbsg148
(dp21538
g2916
Nssg150
(lp21539
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp21540
sg65
S'falff_fsl_to_itk_0'
p21541
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp21542
sg79
Nsg80
Nsb(dp21543
sg1
(g92
g3
Ntp21544
Rp21545
(dp21546
g7
(dp21547
sg9
g1
(g97
g3
Ntp21548
Rp21549
(dp21550
g14
g15
(g53
tp21551
Rp21552
(dp21553
g28
g29
sg2893
g23
sbsg108
(lp21554
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp21555
sg65
g21541
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp21556
sg79
Nsg80
Nsb(dp21557
sg1
(g92
g3
Ntp21558
Rp21559
(dp21560
g7
(dp21561
sg9
g1
(g97
g3
Ntp21562
Rp21563
(dp21564
g14
g15
(g53
tp21565
Rp21566
(dp21567
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21568
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21569
sg65
g21541
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21570
sg79
Nsg80
Nsb(dp21571
sg1
(g92
g3
Ntp21572
Rp21573
(dp21574
g7
(dp21575
sg9
g1
(g2879
g3
Ntp21576
Rp21577
(dp21578
g14
g15
(g2883
tp21579
Rp21580
(dp21581
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21582
tp21583
Rp21584
(dp21585
g41
S'environ_items'
p21586
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp21587
sg65
g21541
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp21588
sg79
Nsg80
Nsb(dp21589
ssg157
(dp21590
sg159
(dp21591
g21527
(dp21592
g21545
(dp21593
g163
(lp21594
(g2916
g2893
tp21595
asssg21545
(dp21596
sg21559
(dp21597
g21573
(dp21598
g163
(lp21599
(g2933
g2895
tp21600
a(g2896
g2896
tp21601
a(g2894
g2894
tp21602
asssg21573
(dp21603
g21527
(dp21604
g163
(lp21605
(g2893
g2910
tp21606
assssg174
g21591
sg175
(dp21607
g21527
(dp21608
g21573
g21604
ssg21545
(dp21609
g21527
g21593
ssg21559
(dp21610
sg21573
(dp21611
g21559
g21598
sssg180
g21591
sbsg43
g21541
sg65
g66
sg75
g21541
sg76
g181
((lp21612
(lp21613
g184
ag181
((lp21614
(lp21615
g187
ag184
aa(lp21616
g189
ag190
aa(lp21617
g192
ag193
aa(lp21618
g195
ag196
aa(lp21619
g198
ag199
aa(lp21620
g201
ag106
aa(lp21621
g203
ag204
aa(lp21622
g206
ag207
aatp21623
Rp21624
aa(lp21625
g211
ag181
((lp21626
(lp21627
g187
ag211
aa(lp21628
g215
ag216
aa(lp21629
g218
ag219
aa(lp21630
g221
ag222
aa(lp21631
g224
ag225
aa(lp21632
g227
ag228
aa(lp21633
g230
ag231
aa(lp21634
g233
ag234
aa(lp21635
g236
ag237
aa(lp21636
g239
ag240
aa(lp21637
g242
ag243
aa(lp21638
g245
ag246
aa(lp21639
g248
ag249
aa(lp21640
g251
ag252
aa(lp21641
g254
ag255
aa(lp21642
g257
ag258
aa(lp21643
g260
ag261
aa(lp21644
g263
ag264
aa(lp21645
g266
ag267
aatp21646
Rp21647
aa(lp21648
g271
ag181
((lp21649
(lp21650
g187
ag271
aa(lp21651
g275
ag276
aatp21652
Rp21653
aatp21654
Rp21655
sg80
Nsbtp21656
a(g18076
g1
(g81
g3
Ntp21657
Rp21658
(dp21659
g85
g1
(g86
g3
Ntp21660
Rp21661
(dp21662
g90
(dp21663
g1
(g92
g3
Ntp21664
Rp21665
(dp21666
g7
(dp21667
sg9
g1
(g97
g3
Ntp21668
Rp21669
(dp21670
g14
g15
(g53
tp21671
Rp21672
(dp21673
g28
g29
sg2893
g23
sbsg108
(lp21674
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp21675
sg65
S'alff_Z_fsl_to_itk_0'
p21676
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp21677
sg79
Nsg80
Nsb(dp21678
sg1
(g92
g3
Ntp21679
Rp21680
(dp21681
g7
(dp21682
sg9
g1
(g97
g3
Ntp21683
Rp21684
(dp21685
g14
g15
(g53
tp21686
Rp21687
(dp21688
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21689
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21690
sg65
g21676
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21691
sg79
Nsg80
Nsb(dp21692
sg1
(g92
g3
Ntp21693
Rp21694
(dp21695
g7
(dp21696
sg9
g1
(g135
g3
Ntp21697
Rp21698
(dp21699
g139
(lp21700
g2910
asg14
g15
(g142
tp21701
Rp21702
(dp21703
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21704
sbsg148
(dp21705
g2916
Nssg150
(lp21706
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp21707
sg65
g21676
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp21708
sg79
Nsg80
Nsb(dp21709
sg1
(g92
g3
Ntp21710
Rp21711
(dp21712
g7
(dp21713
sg9
g1
(g2879
g3
Ntp21714
Rp21715
(dp21716
g14
g15
(g2883
tp21717
Rp21718
(dp21719
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21720
tp21721
Rp21722
(dp21723
g41
S'environ_items'
p21724
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp21725
sg65
g21676
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp21726
sg79
Nsg80
Nsb(dp21727
ssg157
(dp21728
sg159
(dp21729
g21665
(dp21730
sg21680
(dp21731
g21711
(dp21732
g163
(lp21733
(g2933
g2895
tp21734
a(g2896
g2896
tp21735
a(g2894
g2894
tp21736
asssg21694
(dp21737
g21665
(dp21738
g163
(lp21739
(g2916
g2893
tp21740
asssg21711
(dp21741
g21694
(dp21742
g163
(lp21743
(g2893
g2910
tp21744
assssg174
g21729
sg175
(dp21745
g21665
(dp21746
g21694
g21738
ssg21680
(dp21747
sg21694
(dp21748
g21711
g21742
ssg21711
(dp21749
g21680
g21732
sssg180
g21729
sbsg43
g21676
sg65
g66
sg75
g21676
sg76
g181
((lp21750
(lp21751
g184
ag181
((lp21752
(lp21753
g187
ag184
aa(lp21754
g189
ag190
aa(lp21755
g192
ag193
aa(lp21756
g195
ag196
aa(lp21757
g198
ag199
aa(lp21758
g201
ag106
aa(lp21759
g203
ag204
aa(lp21760
g206
ag207
aatp21761
Rp21762
aa(lp21763
g211
ag181
((lp21764
(lp21765
g187
ag211
aa(lp21766
g215
ag216
aa(lp21767
g218
ag219
aa(lp21768
g221
ag222
aa(lp21769
g224
ag225
aa(lp21770
g227
ag228
aa(lp21771
g230
ag231
aa(lp21772
g233
ag234
aa(lp21773
g236
ag237
aa(lp21774
g239
ag240
aa(lp21775
g242
ag243
aa(lp21776
g245
ag246
aa(lp21777
g248
ag249
aa(lp21778
g251
ag252
aa(lp21779
g254
ag255
aa(lp21780
g257
ag258
aa(lp21781
g260
ag261
aa(lp21782
g263
ag264
aa(lp21783
g266
ag267
aatp21784
Rp21785
aa(lp21786
g271
ag181
((lp21787
(lp21788
g187
ag271
aa(lp21789
g275
ag276
aatp21790
Rp21791
aatp21792
Rp21793
sg80
Nsbtp21794
a(g18076
g1
(g81
g3
Ntp21795
Rp21796
(dp21797
g85
g1
(g86
g3
Ntp21798
Rp21799
(dp21800
g90
(dp21801
g1
(g92
g3
Ntp21802
Rp21803
(dp21804
g7
(dp21805
sg9
g1
(g97
g3
Ntp21806
Rp21807
(dp21808
g14
g15
(g53
tp21809
Rp21810
(dp21811
g28
g29
sg2893
g23
sbsg108
(lp21812
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp21813
sg65
S'fsl_to_itk_mean_functional_in_mni_1'
p21814
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp21815
sg79
Nsg80
Nsb(dp21816
sg1
(g92
g3
Ntp21817
Rp21818
(dp21819
g7
(dp21820
sg9
g1
(g97
g3
Ntp21821
Rp21822
(dp21823
g14
g15
(g53
tp21824
Rp21825
(dp21826
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21827
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21828
sg65
g21814
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21829
sg79
Nsg80
Nsb(dp21830
sg1
(g92
g3
Ntp21831
Rp21832
(dp21833
g7
(dp21834
sg9
g1
(g135
g3
Ntp21835
Rp21836
(dp21837
g139
(lp21838
g2910
asg14
g15
(g142
tp21839
Rp21840
(dp21841
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21842
sbsg148
(dp21843
g2916
Nssg150
(lp21844
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp21845
sg65
g21814
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp21846
sg79
Nsg80
Nsb(dp21847
sg1
(g92
g3
Ntp21848
Rp21849
(dp21850
g7
(dp21851
sg9
g1
(g2879
g3
Ntp21852
Rp21853
(dp21854
g14
g15
(g2883
tp21855
Rp21856
(dp21857
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21858
tp21859
Rp21860
(dp21861
g41
S'environ_items'
p21862
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp21863
sg65
g21814
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp21864
sg79
Nsg80
Nsb(dp21865
ssg157
(dp21866
sg159
(dp21867
g21803
(dp21868
sg21818
(dp21869
g21849
(dp21870
g163
(lp21871
(g2933
g2895
tp21872
a(g2896
g2896
tp21873
a(g2894
g2894
tp21874
asssg21832
(dp21875
g21803
(dp21876
g163
(lp21877
(g2916
g2893
tp21878
asssg21849
(dp21879
g21832
(dp21880
g163
(lp21881
(g2893
g2910
tp21882
assssg174
g21867
sg175
(dp21883
g21803
(dp21884
g21832
g21876
ssg21818
(dp21885
sg21832
(dp21886
g21849
g21880
ssg21849
(dp21887
g21818
g21870
sssg180
g21867
sbsg43
g21814
sg65
g66
sg75
g21814
sg76
g181
((lp21888
(lp21889
g184
ag181
((lp21890
(lp21891
g187
ag184
aa(lp21892
g189
ag190
aa(lp21893
g192
ag193
aa(lp21894
g195
ag196
aa(lp21895
g198
ag199
aa(lp21896
g201
ag106
aa(lp21897
g203
ag204
aa(lp21898
g206
ag207
aatp21899
Rp21900
aa(lp21901
g211
ag181
((lp21902
(lp21903
g187
ag211
aa(lp21904
g215
ag216
aa(lp21905
g218
ag219
aa(lp21906
g221
ag222
aa(lp21907
g224
ag225
aa(lp21908
g227
ag228
aa(lp21909
g230
ag231
aa(lp21910
g233
ag234
aa(lp21911
g236
ag237
aa(lp21912
g239
ag240
aa(lp21913
g242
ag243
aa(lp21914
g245
ag246
aa(lp21915
g248
ag249
aa(lp21916
g251
ag252
aa(lp21917
g254
ag255
aa(lp21918
g257
ag258
aa(lp21919
g260
ag261
aa(lp21920
g263
ag264
aa(lp21921
g266
ag267
aatp21922
Rp21923
aa(lp21924
g271
ag181
((lp21925
(lp21926
g187
ag271
aa(lp21927
g275
ag276
aatp21928
Rp21929
aatp21930
Rp21931
sg80
Nsbtp21932
a(g18076
g1
(g81
g3
Ntp21933
Rp21934
(dp21935
g85
g1
(g86
g3
Ntp21936
Rp21937
(dp21938
g90
(dp21939
g1
(g92
g3
Ntp21940
Rp21941
(dp21942
g7
(dp21943
sg9
g1
(g2879
g3
Ntp21944
Rp21945
(dp21946
g14
g15
(g2883
tp21947
Rp21948
(dp21949
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp21950
tp21951
Rp21952
(dp21953
g41
S'environ_items'
p21954
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp21955
sg65
S'alff_fsl_to_itk_1'
p21956
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp21957
sg79
Nsg80
Nsb(dp21958
sg1
(g92
g3
Ntp21959
Rp21960
(dp21961
g7
(dp21962
sg9
g1
(g97
g3
Ntp21963
Rp21964
(dp21965
g14
g15
(g53
tp21966
Rp21967
(dp21968
g28
g29
sg2893
g23
sbsg108
(lp21969
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp21970
sg65
g21956
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp21971
sg79
Nsg80
Nsb(dp21972
sg1
(g92
g3
Ntp21973
Rp21974
(dp21975
g7
(dp21976
sg9
g1
(g97
g3
Ntp21977
Rp21978
(dp21979
g14
g15
(g53
tp21980
Rp21981
(dp21982
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp21983
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp21984
sg65
g21956
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp21985
sg79
Nsg80
Nsb(dp21986
sg1
(g92
g3
Ntp21987
Rp21988
(dp21989
g7
(dp21990
sg9
g1
(g135
g3
Ntp21991
Rp21992
(dp21993
g139
(lp21994
g2910
asg14
g15
(g142
tp21995
Rp21996
(dp21997
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p21998
sbsg148
(dp21999
g2916
Nssg150
(lp22000
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp22001
sg65
g21956
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp22002
sg79
Nsg80
Nsb(dp22003
ssg157
(dp22004
sg159
(dp22005
g21941
(dp22006
g21988
(dp22007
g163
(lp22008
(g2893
g2910
tp22009
asssg21960
(dp22010
sg21974
(dp22011
g21941
(dp22012
g163
(lp22013
(g2933
g2895
tp22014
a(g2896
g2896
tp22015
a(g2894
g2894
tp22016
asssg21988
(dp22017
g21960
(dp22018
g163
(lp22019
(g2916
g2893
tp22020
assssg174
g22005
sg175
(dp22021
g21941
(dp22022
g21974
g22012
ssg21960
(dp22023
g21988
g22018
ssg21974
(dp22024
sg21988
(dp22025
g21941
g22007
sssg180
g22005
sbsg43
g21956
sg65
g66
sg75
g21956
sg76
g181
((lp22026
(lp22027
g184
ag181
((lp22028
(lp22029
g187
ag184
aa(lp22030
g189
ag190
aa(lp22031
g192
ag193
aa(lp22032
g195
ag196
aa(lp22033
g198
ag199
aa(lp22034
g201
ag106
aa(lp22035
g203
ag204
aa(lp22036
g206
ag207
aatp22037
Rp22038
aa(lp22039
g211
ag181
((lp22040
(lp22041
g187
ag211
aa(lp22042
g215
ag216
aa(lp22043
g218
ag219
aa(lp22044
g221
ag222
aa(lp22045
g224
ag225
aa(lp22046
g227
ag228
aa(lp22047
g230
ag231
aa(lp22048
g233
ag234
aa(lp22049
g236
ag237
aa(lp22050
g239
ag240
aa(lp22051
g242
ag243
aa(lp22052
g245
ag246
aa(lp22053
g248
ag249
aa(lp22054
g251
ag252
aa(lp22055
g254
ag255
aa(lp22056
g257
ag258
aa(lp22057
g260
ag261
aa(lp22058
g263
ag264
aa(lp22059
g266
ag267
aatp22060
Rp22061
aa(lp22062
g271
ag181
((lp22063
(lp22064
g187
ag271
aa(lp22065
g275
ag276
aatp22066
Rp22067
aatp22068
Rp22069
sg80
Nsbtp22070
a(g18076
g1
(g81
g3
Ntp22071
Rp22072
(dp22073
g85
g1
(g86
g3
Ntp22074
Rp22075
(dp22076
g90
(dp22077
g1
(g92
g3
Ntp22078
Rp22079
(dp22080
g7
(dp22081
sg9
g1
(g97
g3
Ntp22082
Rp22083
(dp22084
g14
g15
(g53
tp22085
Rp22086
(dp22087
S'func_to_anat_linear_xfm_nobbreg'
p22088
g23
sg28
g29
sS'anat_func_nobbreg'
p22089
g23
sbsg108
(lp22090
g22088
ag22089
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp22091
sg65
S'func_to_anat_FLIRT_0'
p22092
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp22093
sg79
Nsg80
Nsb(dp22094
sg1
(g92
g3
Ntp22095
Rp22096
(dp22097
g7
(dp22098
sg9
g1
(g97
g3
Ntp22099
Rp22100
(dp22101
g14
g15
(g53
tp22102
Rp22103
(dp22104
g28
g29
sg17998
g23
sg1874
g6021
sg17044
g23
sbsg108
(lp22105
g17044
ag17998
ag1874
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp22106
sg65
g22092
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22107
sg79
Nsg80
Nsb(dp22108
sg1
(g92
g3
Ntp22109
Rp22110
(dp22111
g7
(dp22112
sg9
g1
(g5697
g3
Ntp22113
Rp22114
(dp22115
g14
g15
(g5701
tp22116
Rp22117
(dp22118
g5705
g23
sg28
g29
sg5706
g23
sg1904
g23
sg5708
g23
sg5709
g23
sg5710
g23
sg1874
g23
sg5712
g23
sg5713
g23
sg5714
g23
sg5715
g23
sg5716
g23
sg5717
g23
sg5718
g23
sg5719
g23
sg5720
g23
sg5721
g23
sg44
g23
sg5722
g23
sg5723
g23
sg5724
g23
sg5725
g23
sg20
I00
sg5726
g23
sg5727
g23
sg26
g23
sg5728
g23
sg5729
g23
sg30
g31
sg5730
g23
sg5731
g23
sg5732
g23
sg5733
g23
sg5734
g23
sg25
g23
sg5735
g23
sg5736
g23
sg5737
g23
sg4024
I6
sg5738
g23
sg5739
g23
sg5740
g23
sg5741
g23
sg5742
S'corratio'
p22119
sg32
g1
(g33
g34
(dp22120
g36
g37
stp22121
Rp22122
(dp22123
g41
S'environ_items'
p22124
sg43
g32
sbsg5748
g23
sg5749
g23
sg45
g37
sg5750
g23
sg5751
g23
sg5752
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
S'linear_func_to_anat'
p22125
sg63
(dp22126
sg65
g22092
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g22125
sg76
Nsg77
(lp22127
sg79
Nsg80
Nsb(dp22128
ssg157
(dp22129
sg159
(dp22130
g22079
(dp22131
sg22096
(dp22132
g22110
(dp22133
g163
(lp22134
(g17044
g44
tp22135
a(g17998
g5708
tp22136
a(g1874
g1874
tp22137
asssg22110
(dp22138
g22079
(dp22139
g163
(lp22140
(g5738
g22088
tp22141
a(g25
g22089
tp22142
assssg174
g22130
sg175
(dp22143
g22079
(dp22144
g22110
g22139
ssg22096
(dp22145
sg22110
(dp22146
g22096
g22133
sssg180
g22130
sbsg43
g22092
sg65
g66
sg75
g22092
sg76
g181
((lp22147
(lp22148
g184
ag181
((lp22149
(lp22150
g187
ag184
aa(lp22151
g189
ag190
aa(lp22152
g192
ag193
aa(lp22153
g195
ag196
aa(lp22154
g198
ag199
aa(lp22155
g201
ag106
aa(lp22156
g203
ag204
aa(lp22157
g206
ag207
aatp22158
Rp22159
aa(lp22160
g211
ag181
((lp22161
(lp22162
g187
ag211
aa(lp22163
g215
ag216
aa(lp22164
g218
ag219
aa(lp22165
g221
ag222
aa(lp22166
g224
ag225
aa(lp22167
g227
ag228
aa(lp22168
g230
ag231
aa(lp22169
g233
ag234
aa(lp22170
g236
ag237
aa(lp22171
g239
ag240
aa(lp22172
g242
ag243
aa(lp22173
g245
ag246
aa(lp22174
g248
ag249
aa(lp22175
g251
ag252
aa(lp22176
g254
ag255
aa(lp22177
g257
ag258
aa(lp22178
g260
ag261
aa(lp22179
g263
ag264
aa(lp22180
g266
ag267
aatp22181
Rp22182
aa(lp22183
g271
ag181
((lp22184
(lp22185
g187
ag271
aa(lp22186
g275
ag276
aatp22187
Rp22188
aatp22189
Rp22190
sg80
Nsbtp22191
a(g18076
g1
(g81
g3
Ntp22192
Rp22193
(dp22194
g85
g1
(g86
g3
Ntp22195
Rp22196
(dp22197
g90
(dp22198
g1
(g92
g3
Ntp22199
Rp22200
(dp22201
g7
(dp22202
sg9
g1
(g97
g3
Ntp22203
Rp22204
(dp22205
g14
g15
(g53
tp22206
Rp22207
(dp22208
g28
g29
sg2893
g23
sbsg108
(lp22209
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp22210
sg65
S'falff_fsl_to_itk_1'
p22211
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp22212
sg79
Nsg80
Nsb(dp22213
sg1
(g92
g3
Ntp22214
Rp22215
(dp22216
g7
(dp22217
sg9
g1
(g135
g3
Ntp22218
Rp22219
(dp22220
g139
(lp22221
g2910
asg14
g15
(g142
tp22222
Rp22223
(dp22224
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p22225
sbsg148
(dp22226
g2916
Nssg150
(lp22227
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp22228
sg65
g22211
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp22229
sg79
Nsg80
Nsb(dp22230
sg1
(g92
g3
Ntp22231
Rp22232
(dp22233
g7
(dp22234
sg9
g1
(g97
g3
Ntp22235
Rp22236
(dp22237
g14
g15
(g53
tp22238
Rp22239
(dp22240
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp22241
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp22242
sg65
g22211
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22243
sg79
Nsg80
Nsb(dp22244
sg1
(g92
g3
Ntp22245
Rp22246
(dp22247
g7
(dp22248
sg9
g1
(g2879
g3
Ntp22249
Rp22250
(dp22251
g14
g15
(g2883
tp22252
Rp22253
(dp22254
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp22255
tp22256
Rp22257
(dp22258
g41
S'environ_items'
p22259
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp22260
sg65
g22211
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp22261
sg79
Nsg80
Nsb(dp22262
ssg157
(dp22263
sg159
(dp22264
g22200
(dp22265
sg22215
(dp22266
g22200
(dp22267
g163
(lp22268
(g2916
g2893
tp22269
asssg22232
(dp22270
g22246
(dp22271
g163
(lp22272
(g2933
g2895
tp22273
a(g2896
g2896
tp22274
a(g2894
g2894
tp22275
asssg22246
(dp22276
g22215
(dp22277
g163
(lp22278
(g2893
g2910
tp22279
assssg174
g22264
sg175
(dp22280
g22200
(dp22281
g22215
g22267
ssg22215
(dp22282
g22246
g22277
ssg22232
(dp22283
sg22246
(dp22284
g22232
g22271
sssg180
g22264
sbsg43
g22211
sg65
g66
sg75
g22211
sg76
g181
((lp22285
(lp22286
g184
ag181
((lp22287
(lp22288
g187
ag184
aa(lp22289
g189
ag190
aa(lp22290
g192
ag193
aa(lp22291
g195
ag196
aa(lp22292
g198
ag199
aa(lp22293
g201
ag106
aa(lp22294
g203
ag204
aa(lp22295
g206
ag207
aatp22296
Rp22297
aa(lp22298
g211
ag181
((lp22299
(lp22300
g187
ag211
aa(lp22301
g215
ag216
aa(lp22302
g218
ag219
aa(lp22303
g221
ag222
aa(lp22304
g224
ag225
aa(lp22305
g227
ag228
aa(lp22306
g230
ag231
aa(lp22307
g233
ag234
aa(lp22308
g236
ag237
aa(lp22309
g239
ag240
aa(lp22310
g242
ag243
aa(lp22311
g245
ag246
aa(lp22312
g248
ag249
aa(lp22313
g251
ag252
aa(lp22314
g254
ag255
aa(lp22315
g257
ag258
aa(lp22316
g260
ag261
aa(lp22317
g263
ag264
aa(lp22318
g266
ag267
aatp22319
Rp22320
aa(lp22321
g271
ag181
((lp22322
(lp22323
g187
ag271
aa(lp22324
g275
ag276
aatp22325
Rp22326
aatp22327
Rp22328
sg80
Nsbtp22329
a(g18076
g1
(g81
g3
Ntp22330
Rp22331
(dp22332
g85
g1
(g86
g3
Ntp22333
Rp22334
(dp22335
g90
(dp22336
g1
(g92
g3
Ntp22337
Rp22338
(dp22339
g7
(dp22340
sg9
g1
(g97
g3
Ntp22341
Rp22342
(dp22343
g14
g15
(g53
tp22344
Rp22345
(dp22346
g28
g29
sg2893
g23
sbsg108
(lp22347
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp22348
sg65
S'reho_Z_fsl_to_itk_1'
p22349
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp22350
sg79
Nsg80
Nsb(dp22351
sg1
(g92
g3
Ntp22352
Rp22353
(dp22354
g7
(dp22355
sg9
g1
(g135
g3
Ntp22356
Rp22357
(dp22358
g139
(lp22359
g2910
asg14
g15
(g142
tp22360
Rp22361
(dp22362
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p22363
sbsg148
(dp22364
g2916
Nssg150
(lp22365
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp22366
sg65
g22349
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp22367
sg79
Nsg80
Nsb(dp22368
sg1
(g92
g3
Ntp22369
Rp22370
(dp22371
g7
(dp22372
sg9
g1
(g97
g3
Ntp22373
Rp22374
(dp22375
g14
g15
(g53
tp22376
Rp22377
(dp22378
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp22379
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp22380
sg65
g22349
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22381
sg79
Nsg80
Nsb(dp22382
sg1
(g92
g3
Ntp22383
Rp22384
(dp22385
g7
(dp22386
sg9
g1
(g2879
g3
Ntp22387
Rp22388
(dp22389
g14
g15
(g2883
tp22390
Rp22391
(dp22392
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp22393
tp22394
Rp22395
(dp22396
g41
S'environ_items'
p22397
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp22398
sg65
g22349
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp22399
sg79
Nsg80
Nsb(dp22400
ssg157
(dp22401
sg159
(dp22402
g22338
(dp22403
sg22353
(dp22404
g22338
(dp22405
g163
(lp22406
(g2916
g2893
tp22407
asssg22370
(dp22408
g22384
(dp22409
g163
(lp22410
(g2933
g2895
tp22411
a(g2896
g2896
tp22412
a(g2894
g2894
tp22413
asssg22384
(dp22414
g22353
(dp22415
g163
(lp22416
(g2893
g2910
tp22417
assssg174
g22402
sg175
(dp22418
g22338
(dp22419
g22353
g22405
ssg22353
(dp22420
g22384
g22415
ssg22370
(dp22421
sg22384
(dp22422
g22370
g22409
sssg180
g22402
sbsg43
g22349
sg65
g66
sg75
g22349
sg76
g181
((lp22423
(lp22424
g184
ag181
((lp22425
(lp22426
g187
ag184
aa(lp22427
g189
ag190
aa(lp22428
g192
ag193
aa(lp22429
g195
ag196
aa(lp22430
g198
ag199
aa(lp22431
g201
ag106
aa(lp22432
g203
ag204
aa(lp22433
g206
ag207
aatp22434
Rp22435
aa(lp22436
g211
ag181
((lp22437
(lp22438
g187
ag211
aa(lp22439
g215
ag216
aa(lp22440
g218
ag219
aa(lp22441
g221
ag222
aa(lp22442
g224
ag225
aa(lp22443
g227
ag228
aa(lp22444
g230
ag231
aa(lp22445
g233
ag234
aa(lp22446
g236
ag237
aa(lp22447
g239
ag240
aa(lp22448
g242
ag243
aa(lp22449
g245
ag246
aa(lp22450
g248
ag249
aa(lp22451
g251
ag252
aa(lp22452
g254
ag255
aa(lp22453
g257
ag258
aa(lp22454
g260
ag261
aa(lp22455
g263
ag264
aa(lp22456
g266
ag267
aatp22457
Rp22458
aa(lp22459
g271
ag181
((lp22460
(lp22461
g187
ag271
aa(lp22462
g275
ag276
aatp22463
Rp22464
aatp22465
Rp22466
sg80
Nsbtp22467
a(g18076
g1
(g81
g3
Ntp22468
Rp22469
(dp22470
g85
g1
(g86
g3
Ntp22471
Rp22472
(dp22473
g90
(dp22474
g1
(g92
g3
Ntp22475
Rp22476
(dp22477
g7
(dp22478
sg9
g1
(g97
g3
Ntp22479
Rp22480
(dp22481
g14
g15
(g53
tp22482
Rp22483
(dp22484
g28
g29
sg25
g23
sbsg108
(lp22485
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp22486
sg65
S'log_anat_preproc_0'
p22487
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp22488
sg79
Nsg80
Nsb(dp22489
sg1
(g92
g3
Ntp22490
Rp22491
(dp22492
g7
(dp22493
sg9
g1
(g97
g3
Ntp22494
Rp22495
(dp22496
g14
g15
(g53
tp22497
Rp22498
(dp22499
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g18094
sbsg108
(lp22500
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp22501
sg65
g22487
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22502
sg79
Nsg80
Nsb(dp22503
sg1
(g92
g3
Ntp22504
Rp22505
(dp22506
g7
(dp22507
sg9
g1
(g135
g3
Ntp22508
Rp22509
(dp22510
g139
(lp22511
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp22512
Rp22513
(dp22514
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p22515
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp22516
g25
Nssg150
(lp22517
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp22518
sg65
g22487
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp22519
sg79
Nsg80
Nsb(dp22520
ssg157
(dp22521
sg159
(dp22522
g22476
(dp22523
sg22491
(dp22524
g22505
(dp22525
g163
(lp22526
(g107
g107
tp22527
a(g105
g105
tp22528
a(g104
g104
tp22529
a(g14
g14
tp22530
asssg22505
(dp22531
g22476
(dp22532
g163
(lp22533
(g25
g25
tp22534
assssg174
g22522
sg175
(dp22535
g22476
(dp22536
g22505
g22532
ssg22491
(dp22537
sg22505
(dp22538
g22491
g22525
sssg180
g22522
sbsg43
g22487
sg65
g66
sg75
g22487
sg76
g181
((lp22539
(lp22540
g184
ag181
((lp22541
(lp22542
g187
ag184
aa(lp22543
g189
ag190
aa(lp22544
g192
ag193
aa(lp22545
g195
ag196
aa(lp22546
g198
ag199
aa(lp22547
g201
ag106
aa(lp22548
g203
ag204
aa(lp22549
g206
ag207
aatp22550
Rp22551
aa(lp22552
g211
ag181
((lp22553
(lp22554
g187
ag211
aa(lp22555
g215
ag216
aa(lp22556
g218
ag219
aa(lp22557
g221
ag222
aa(lp22558
g224
ag225
aa(lp22559
g227
ag228
aa(lp22560
g230
ag231
aa(lp22561
g233
ag234
aa(lp22562
g236
ag237
aa(lp22563
g239
ag240
aa(lp22564
g242
ag243
aa(lp22565
g245
ag246
aa(lp22566
g248
ag249
aa(lp22567
g251
ag252
aa(lp22568
g254
ag255
aa(lp22569
g257
ag258
aa(lp22570
g260
ag261
aa(lp22571
g263
ag264
aa(lp22572
g266
ag267
aatp22573
Rp22574
aa(lp22575
g271
ag181
((lp22576
(lp22577
g187
ag271
aa(lp22578
g275
ag276
aatp22579
Rp22580
aatp22581
Rp22582
sg80
Nsbtp22583
a(g18076
g1
(g81
g3
Ntp22584
Rp22585
(dp22586
g85
g1
(g86
g3
Ntp22587
Rp22588
(dp22589
g90
(dp22590
g1
(g81
g3
Ntp22591
Rp22592
(dp22593
g85
g1
(g86
g3
Ntp22594
Rp22595
(dp22596
g90
(dp22597
g1
(g92
g3
Ntp22598
Rp22599
(dp22600
g7
(dp22601
sg9
g1
(g3034
g3
Ntp22602
Rp22603
(dp22604
g3038
I4
sg14
g15
(g3039
tp22605
Rp22606
(dp22607
g20
I00
sg28
g29
sg3043
I00
sg3044
g23
sg3045
g23
sg3046
g23
sg3047
g23
sg3048
g3049
sbsbsg51
Nsg70
I00
sg63
(dp22608
sg72
Nsg69
Nsg79
Nsg43
g3051
sg65
S'vmhc_1.collect_transforms_vmhc'
p22609
sg71
I00
sg73
Nsg74
I00
sg75
g3051
sg76
Nsg77
(lp22610
sg80
Nsb(dp22611
sg1
(g92
g3
Ntp22612
Rp22613
(dp22614
g7
(dp22615
sg9
g1
(g97
g3
Ntp22616
Rp22617
(dp22618
g14
g15
(g53
tp22619
Rp22620
(dp22621
g28
g29
sg3084
g23
sbsg108
(lp22622
g3084
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp22623
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_1.collect_transforms_vmhc'
p22624
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp22625
sg80
Nsb(dp22626
sg1
(g92
g3
Ntp22627
Rp22628
(dp22629
g7
(dp22630
sg9
g1
(g97
g3
Ntp22631
Rp22632
(dp22633
g14
g15
(g53
tp22634
Rp22635
(dp22636
g28
g29
sg3065
g23
sg3066
g23
sg3067
g23
sg3068
g23
sbsg108
(lp22637
g3067
ag3066
ag3068
ag3065
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp22638
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_1.collect_transforms_vmhc'
p22639
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22640
sg80
Nsb(dp22641
ssg159
(dp22642
g22599
(dp22643
g22613
(dp22644
g163
(lp22645
(g3094
g3084
tp22646
asssg22613
(dp22647
sg22628
(dp22648
g22599
(dp22649
g163
(lp22650
(g3067
g3044
tp22651
a(g3066
g3045
tp22652
a(g3068
g3046
tp22653
a(g3065
g3047
tp22654
assssg174
g22642
sg175
(dp22655
g22599
(dp22656
g22628
g22649
ssg22613
(dp22657
g22599
g22644
ssg22628
(dp22658
ssg157
(dp22659
sg180
g22642
sbsg43
g3109
sg65
g2977
sg75
g3109
sg76
g181
((lp22660
(lp22661
g184
ag181
((lp22662
(lp22663
g187
ag184
aa(lp22664
g189
ag190
aa(lp22665
g192
ag193
aa(lp22666
g195
ag196
aa(lp22667
g198
ag199
aa(lp22668
g201
ag106
aa(lp22669
g203
ag204
aa(lp22670
g206
ag207
aatp22671
Rp22672
aa(lp22673
g211
ag181
((lp22674
(lp22675
g187
ag211
aa(lp22676
g215
ag216
aa(lp22677
g218
ag219
aa(lp22678
g221
ag222
aa(lp22679
g224
ag225
aa(lp22680
g227
ag228
aa(lp22681
g230
ag231
aa(lp22682
g233
ag234
aa(lp22683
g236
ag237
aa(lp22684
g239
ag240
aa(lp22685
g242
ag243
aa(lp22686
g245
ag246
aa(lp22687
g248
ag249
aa(lp22688
g251
ag252
aa(lp22689
g254
ag255
aa(lp22690
g257
ag258
aa(lp22691
g260
ag261
aa(lp22692
g263
ag264
aa(lp22693
g266
ag267
aatp22694
Rp22695
aa(lp22696
g271
ag181
((lp22697
(lp22698
g187
ag271
aa(lp22699
g275
ag276
aatp22700
Rp22701
aatp22702
Rp22703
sg80
Nsb(dp22704
sg1
(g92
g3
Ntp22705
Rp22706
(dp22707
g7
(dp22708
sg9
g1
(g135
g3
Ntp22709
Rp22710
(dp22711
g139
(lp22712
g2036
asg14
g15
(g142
tp22713
Rp22714
(dp22715
g20
I00
sg28
g29
sg146
S'S\'def get_img_nvols(in_files):\\n\\n    """\\n    Calculates the number of volumes in the given nifti image\\n\\n    Parameters\\n    ----------\\n\\n    in_files : string (nifti file)\\n\\n    Returns\\n    -------\\n\\n    out : int\\n        number of volumes of input nifti file\\n\\n    """\\n\\n    out = None\\n    from nibabel import load\\n    img = load(in_files)\\n    hdr = img.get_header()\\n    nvols = None\\n    if len(hdr.get_data_shape()) > 3:\\n        nvols = int(hdr.get_data_shape()[3])\\n    else:\\n        nvols = 1\\n    out = nvols\\n\\n    return out\\n\'\n.'
p22716
sg2036
g23
sbsg148
(dp22717
g2793
Nssg150
(lp22718
g2793
asg152
Nsbsg51
Nsg70
I00
sg63
(dp22719
sg72
Nsg69
Nsg79
Nsg43
g2796
sg65
S'vmhc_1'
p22720
sg71
I00
sg73
Nsg74
I00
sg75
g2796
sg76
Nsg77
(lp22721
sg80
Nsb(dp22722
sg1
(g81
g3
Ntp22723
Rp22724
(dp22725
g85
g1
(g86
g3
Ntp22726
Rp22727
(dp22728
g90
(dp22729
g1
(g92
g3
Ntp22730
Rp22731
(dp22732
g7
(dp22733
sg9
g1
(g3632
g3
Ntp22734
Rp22735
(dp22736
g14
g15
(g3636
tp22737
Rp22738
(dp22739
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp22740
tp22741
Rp22742
(dp22743
g41
S'environ_items'
p22744
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp22745
sg72
Nsg69
Nsg79
Nsg43
g3652
sg65
S'vmhc_1.apply_ants_xfm_vmhc'
p22746
sg71
I00
sg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp22747
sg80
Nsb(dp22748
sg1
(g92
g3
Ntp22749
Rp22750
(dp22751
g7
(dp22752
sg9
g1
(g97
g3
Ntp22753
Rp22754
(dp22755
g14
g15
(g53
tp22756
Rp22757
(dp22758
g28
g29
sg3640
g23
sbsg108
(lp22759
g3640
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp22760
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_1.apply_ants_xfm_vmhc'
p22761
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp22762
sg80
Nsb(dp22763
sg1
(g92
g3
Ntp22764
Rp22765
(dp22766
g7
(dp22767
sg9
g1
(g97
g3
Ntp22768
Rp22769
(dp22770
g14
g15
(g53
tp22771
Rp22772
(dp22773
g28
g29
sg3620
I3
sg3320
g23
sg3621
g23
sg3622
g23
sg3371
g23
sg3344
g3345
sbsg108
(lp22774
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp22775
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_1.apply_ants_xfm_vmhc'
p22776
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22777
sg80
Nsb(dp22778
ssg159
(dp22779
g22731
(dp22780
g22750
(dp22781
g163
(lp22782
(g3640
g3640
tp22783
asssg22750
(dp22784
sg22765
(dp22785
g22731
(dp22786
g163
(lp22787
(g3622
g3622
tp22788
a(g3621
g3621
tp22789
a(g3320
g3320
tp22790
a(g3371
g3371
tp22791
a(g3620
g3620
tp22792
a(g3344
g3344
tp22793
assssg174
g22779
sg175
(dp22794
g22731
(dp22795
g22765
g22786
ssg22750
(dp22796
g22731
g22781
ssg22765
(dp22797
ssg157
(dp22798
sg180
g22779
sbsg43
g3691
sg65
g2977
sg75
g3691
sg76
g181
((lp22799
(lp22800
g184
ag181
((lp22801
(lp22802
g187
ag184
aa(lp22803
g189
ag190
aa(lp22804
g192
ag193
aa(lp22805
g195
ag196
aa(lp22806
g198
ag199
aa(lp22807
g201
ag106
aa(lp22808
g203
ag204
aa(lp22809
g206
ag207
aatp22810
Rp22811
aa(lp22812
g211
ag181
((lp22813
(lp22814
g187
ag211
aa(lp22815
g215
ag216
aa(lp22816
g218
ag219
aa(lp22817
g221
ag222
aa(lp22818
g224
ag225
aa(lp22819
g227
ag228
aa(lp22820
g230
ag231
aa(lp22821
g233
ag234
aa(lp22822
g236
ag237
aa(lp22823
g239
ag240
aa(lp22824
g242
ag243
aa(lp22825
g245
ag246
aa(lp22826
g248
ag249
aa(lp22827
g251
ag252
aa(lp22828
g254
ag255
aa(lp22829
g257
ag258
aa(lp22830
g260
ag261
aa(lp22831
g263
ag264
aa(lp22832
g266
ag267
aatp22833
Rp22834
aa(lp22835
g271
ag181
((lp22836
(lp22837
g187
ag271
aa(lp22838
g275
ag276
aatp22839
Rp22840
aatp22841
Rp22842
sg80
Nsb(dp22843
sg1
(g92
g3
Ntp22844
Rp22845
(dp22846
g7
(dp22847
sg9
g1
(g97
g3
Ntp22848
Rp22849
(dp22850
g14
g15
(g53
tp22851
Rp22852
(dp22853
g3184
g23
sg28
g29
sg3185
g3186
sg3187
g3188
sg3189
g23
sg3190
g3191
sg2187
g23
sg3192
g23
sg2531
g23
sg3193
g3194
sg3195
g23
sg3196
g3197
sbsg108
(lp22854
g3192
ag3185
ag3184
ag2187
ag3195
ag3196
ag3187
ag3193
ag2531
ag3190
ag3189
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp22855
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22856
sg80
Nsb(dp22857
sg1
(g92
g3
Ntp22858
Rp22859
(dp22860
g7
(dp22861
sg9
g1
(g2821
g3
Ntp22862
Rp22863
(dp22864
g14
g15
(g2825
tp22865
Rp22866
(dp22867
g2829
I-1
sg20
I00
sg2830
I01
sg25
g23
sg26
g23
sg2831
g23
sg752
g1875
sg30
g31
sg32
g1
(g33
g34
(dp22868
tp22869
Rp22870
(dp22871
g41
S'environ_items'
p22872
sg43
g32
sbsg2837
g23
sg28
g29
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp22873
sg72
Nsg69
Nsg79
Nsg43
g2839
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g2839
sg76
Nsg77
(lp22874
sg80
Nsb(dp22875
sg1
(g81
g3
Ntp22876
Rp22877
(dp22878
g85
g1
(g86
g3
Ntp22879
Rp22880
(dp22881
g90
(dp22882
g1
(g92
g3
Ntp22883
Rp22884
(dp22885
g7
(dp22886
sg9
g1
(g97
g3
Ntp22887
Rp22888
(dp22889
g14
g15
(g53
tp22890
Rp22891
(dp22892
g28
g29
sg3279
g23
sg3280
g23
sg3281
g23
sg3282
g23
sg3283
g23
sg3284
g23
sbsg108
(lp22893
g3280
ag3281
ag3284
ag3282
ag3283
ag3279
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp22894
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_1.calculate_ants_xfm_vmhc'
p22895
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp22896
sg80
Nsb(dp22897
sg1
(g92
g3
Ntp22898
Rp22899
(dp22900
g7
(dp22901
sg9
g1
(g3294
g3
Ntp22902
Rp22903
(dp22904
g14
g15
(g3298
tp22905
Rp22906
(dp22907
g28
g29
sg3302
g1
(g3303
g3304
(lp22908
I10
atp22909
Rp22910
(dp22911
g41
S'convergence_window_size_items'
p22912
sg43
g3302
sbsg3310
g23
sg3311
g23
sg3312
g23
sg3313
g23
sg3314
g23
sg3315
g23
sg3316
g23
sg3317
g23
sg3318
g23
sg3319
g23
sg3320
g23
sg3321
g23
sg3322
g1
(g3303
g3304
(lp22913
F1.0
atp22914
Rp22915
(dp22916
g41
S'metric_weight_items'
p22917
sg43
g3322
sbsg3328
g23
sg3329
g23
sg3330
F0.0
sg3331
g23
sg3332
g1
(g3303
g3304
(lp22918
F1e-06
atp22919
Rp22920
(dp22921
g41
S'convergence_threshold_items'
p22922
sg43
g3332
sbsg3338
g23
sg3339
g23
sg3340
F1.0
sg3341
g23
sg3342
g3343
sg3344
g3345
sg20
I00
sg3346
g23
sg3347
I00
sg26
g23
sg3348
g23
sg30
g31
sg3349
g23
sg3350
I00
sg3351
g23
sg3352
I-1
sg3353
I01
sg3354
g23
sg3355
g23
sg3356
g23
sg3357
g1
(g3303
g3304
(lp22923
I5
atp22924
Rp22925
(dp22926
g41
S'radius_or_number_of_bins_items'
p22927
sg43
g3357
sbsg32
g1
(g33
g34
(dp22928
tp22929
Rp22930
(dp22931
g41
S'environ_items'
p22932
sg43
g32
sbsg3368
g23
sg3369
I01
sg3370
g23
sg3371
I3
sg3372
g23
sg3373
I00
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp22933
sg72
Nsg69
Nsg79
Nsg43
g3376
sg65
S'vmhc_1.calculate_ants_xfm_vmhc'
p22934
sg71
I00
sg73
Nsg74
I00
sg75
g3376
sg76
Nsg77
(lp22935
sg80
Nsb(dp22936
sg1
(g92
g3
Ntp22937
Rp22938
(dp22939
g7
(dp22940
sg9
g1
(g135
g3
Ntp22941
Rp22942
(dp22943
g139
(lp22944
g3236
ag3237
asg14
g15
(g142
tp22945
Rp22946
(dp22947
g3236
g23
sg20
I00
sg3237
I1
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p22948
sg28
g29
sbsg148
(dp22949
g3243
Nssg150
(lp22950
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp22951
sg72
Nsg69
Nsg79
Nsg43
g3442
sg65
S'vmhc_1.calculate_ants_xfm_vmhc'
p22952
sg71
I00
sg73
Nsg74
I00
sg75
g3442
sg76
Nsg77
(lp22953
sg80
Nsb(dp22954
sg1
(g92
g3
Ntp22955
Rp22956
(dp22957
g7
(dp22958
sg9
g1
(g97
g3
Ntp22959
Rp22960
(dp22961
g14
g15
(g53
tp22962
Rp22963
(dp22964
g28
g29
sg3302
(lp22965
I10
aI10
aI15
asg3330
F0.01
sg3368
(lp22966
(lp22967
I3
aI2
aI1
aI0
aa(lp22968
I3
aI2
aI1
aI0
aa(lp22969
I3
aI2
aI1
aI0
aasg3332
(lp22970
F1e-08
aF1e-08
aF1e-09
asg3355
(lp22971
(lp22972
I1000
aI500
aI250
aI100
aa(lp22973
I1000
aI500
aI250
aI100
aa(lp22974
I100
aI100
aI70
aI20
aasg3340
F0.99
sg3339
(lp22975
(lp22976
I8
aI4
aI2
aI1
aa(lp22977
I8
aI4
aI2
aI1
aa(lp22978
I6
aI4
aI2
aI1
aasg3369
I01
sg3357
(lp22979
I32
aI32
aI4
asg3405
g23
sg3320
(lp22980
g3407
ag3408
ag3409
asg3338
(lp22981
g3411
ag3411
aNasg3354
(lp22982
F0.25
aF0.25
aNasg3350
g23
sg3322
(lp22983
I1
aI1
aI1
asg3370
(lp22984
(lp22985
F0.1
aa(lp22986
F0.1
aa(lp22987
F0.1
aI3
aI0
aasg3371
I3
sg3314
(lp22988
g3419
ag3419
ag3420
asg3421
g23
sbsg108
(lp22989
g3405
ag3421
ag3371
ag3369
ag3330
ag3340
ag3314
ag3322
ag3357
ag3338
ag3354
ag3355
ag3332
ag3302
ag3320
ag3370
ag3339
ag3368
ag3350
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp22990
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_1.calculate_ants_xfm_vmhc'
p22991
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp22992
sg80
Nsb(dp22993
sg1
(g92
g3
Ntp22994
Rp22995
(dp22996
g7
(dp22997
sg9
g1
(g135
g3
Ntp22998
Rp22999
(dp23000
g139
(lp23001
g3236
ag3237
asg14
g15
(g142
tp23002
Rp23003
(dp23004
g3236
g23
sg20
I00
sg3237
I2
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p23005
sg28
g29
sbsg148
(dp23006
g3243
Nssg150
(lp23007
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp23008
sg72
Nsg69
Nsg79
Nsg43
g3246
sg65
S'vmhc_1.calculate_ants_xfm_vmhc'
p23009
sg71
I00
sg73
Nsg74
I00
sg75
g3246
sg76
Nsg77
(lp23010
sg80
Nsb(dp23011
sg1
(g92
g3
Ntp23012
Rp23013
(dp23014
g7
(dp23015
sg9
g1
(g135
g3
Ntp23016
Rp23017
(dp23018
g139
(lp23019
g3236
ag3237
asg14
g15
(g142
tp23020
Rp23021
(dp23022
g3236
g23
sg20
I00
sg3237
I0
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p23023
sg28
g29
sbsg148
(dp23024
g3243
Nssg150
(lp23025
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp23026
sg72
Nsg69
Nsg79
Nsg43
g3461
sg65
S'vmhc_1.calculate_ants_xfm_vmhc'
p23027
sg71
I00
sg73
Nsg74
I00
sg75
g3461
sg76
Nsg77
(lp23028
sg80
Nsb(dp23029
sg1
(g92
g3
Ntp23030
Rp23031
(dp23032
g7
(dp23033
sg9
g1
(g135
g3
Ntp23034
Rp23035
(dp23036
g139
(lp23037
g3236
ag3237
asg14
g15
(g142
tp23038
Rp23039
(dp23040
g3236
g23
sg20
I00
sg3237
I0
sg146
S"S'def seperate_warps_list(warp_list, selection):\\n\\n     return warp_list[selection]\\n'\n."
p23041
sg28
g29
sbsg148
(dp23042
g3243
Nssg150
(lp23043
g3243
asg152
Nsbsg51
Nsg70
I00
sg63
(dp23044
sg72
Nsg69
Nsg79
Nsg43
g3265
sg65
S'vmhc_1.calculate_ants_xfm_vmhc'
p23045
sg71
I00
sg73
Nsg74
I00
sg75
g3265
sg76
Nsg77
(lp23046
sg80
Nsb(dp23047
ssg159
(dp23048
g22884
(dp23049
sg22899
(dp23050
g22995
(dp23051
g163
(lp23052
(g3478
g3236
tp23053
assg22938
(dp23054
g163
(lp23055
(g3478
g3236
tp23056
assg22884
(dp23057
g163
(lp23058
(g3283
g3283
tp23059
a(g3486
g3279
tp23060
assg23031
(dp23061
g163
(lp23062
(g3493
g3236
tp23063
assg23013
(dp23064
g163
(lp23065
(g3478
g3236
tp23066
asssg22938
(dp23067
g22884
(dp23068
g163
(lp23069
(g3243
g3281
tp23070
asssg22956
(dp23071
g22899
(dp23072
g163
(lp23073
(g3405
g3316
tp23074
a(g3421
g3341
tp23075
a(g3371
g3371
tp23076
a(g3369
g3369
tp23077
a(g3330
g3330
tp23078
a(g3340
g3340
tp23079
a(g3314
g3314
tp23080
a(g3322
g3322
tp23081
a(g3357
g3357
tp23082
a(g3338
g3338
tp23083
a(g3354
g3354
tp23084
a(g3355
g3355
tp23085
a(g3332
g3332
tp23086
a(g3302
g3302
tp23087
a(g3320
g3320
tp23088
a(g3370
g3370
tp23089
a(g3339
g3339
tp23090
a(g3368
g3368
tp23091
a(g3350
g3350
tp23092
asssg22995
(dp23093
g22884
(dp23094
g163
(lp23095
(g3243
g3284
tp23096
asssg23013
(dp23097
g22884
(dp23098
g163
(lp23099
(g3243
g3280
tp23100
asssg23031
(dp23101
g22884
(dp23102
g163
(lp23103
(g3243
g3282
tp23104
assssg174
g23048
sg175
(dp23105
g22884
(dp23106
g22995
g23094
sg22938
g23068
sg23013
g23098
sg23031
g23102
sg22899
g23057
ssg22899
(dp23107
g22956
g23072
ssg22938
(dp23108
g22899
g23054
ssg22956
(dp23109
sg22995
(dp23110
g22899
g23051
ssg23013
(dp23111
g22899
g23064
ssg23031
(dp23112
g22899
g23061
sssg157
(dp23113
sg180
g23048
sbsg43
g3534
sg65
g2977
sg75
g3534
sg76
g181
((lp23114
(lp23115
g184
ag181
((lp23116
(lp23117
g187
ag184
aa(lp23118
g189
ag190
aa(lp23119
g192
ag193
aa(lp23120
g195
ag196
aa(lp23121
g198
ag199
aa(lp23122
g201
ag106
aa(lp23123
g203
ag204
aa(lp23124
g206
ag207
aatp23125
Rp23126
aa(lp23127
g211
ag181
((lp23128
(lp23129
g187
ag211
aa(lp23130
g215
ag216
aa(lp23131
g218
ag219
aa(lp23132
g221
ag222
aa(lp23133
g224
ag225
aa(lp23134
g227
ag228
aa(lp23135
g230
ag231
aa(lp23136
g233
ag234
aa(lp23137
g236
ag237
aa(lp23138
g239
ag240
aa(lp23139
g242
ag243
aa(lp23140
g245
ag246
aa(lp23141
g248
ag249
aa(lp23142
g251
ag252
aa(lp23143
g254
ag255
aa(lp23144
g257
ag258
aa(lp23145
g260
ag261
aa(lp23146
g263
ag264
aa(lp23147
g266
ag267
aatp23148
Rp23149
aa(lp23150
g271
ag181
((lp23151
(lp23152
g187
ag271
aa(lp23153
g275
ag276
aatp23154
Rp23155
aatp23156
Rp23157
sg80
Nsb(dp23158
sg1
(g92
g3
Ntp23159
Rp23160
(dp23161
g7
(dp23162
sg9
g1
(g10
g3
Ntp23163
Rp23164
(dp23165
g14
g15
(g16
tp23166
Rp23167
(dp23168
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp23169
g36
g37
stp23170
Rp23171
(dp23172
g41
S'environ_items'
p23173
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp23174
sg72
Nsg69
Nsg79
Nsg43
g3218
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g3218
sg76
Nsg77
(lp23175
sg80
Nsb(dp23176
sg1
(g92
g3
Ntp23177
Rp23178
(dp23179
g7
(dp23180
sg9
g1
(g2846
g3
Ntp23181
Rp23182
(dp23183
g14
g15
(g2850
tp23184
Rp23185
(dp23186
g2854
g2858
sg20
I00
sg25
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp23187
g36
g37
stp23188
Rp23189
(dp23190
g41
S'environ_items'
p23191
sg43
g32
sbsg44
g23
sg45
g37
sg28
g29
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp23192
sg72
Nsg69
Nsg79
Nsg43
g2865
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g2865
sg76
Nsg77
(lp23193
sg80
Nsb(dp23194
sg1
(g92
g3
Ntp23195
Rp23196
(dp23197
g7
(dp23198
sg9
g1
(g97
g3
Ntp23199
Rp23200
(dp23201
g14
g15
(g53
tp23202
Rp23203
(dp23204
g28
g29
sg3590
g23
sg3591
g23
sg3592
g23
sg3593
g23
sg3594
g23
sg3595
g23
sg3596
g23
sg3597
g23
sg3598
g23
sbsg108
(lp23205
g3593
ag3596
ag3594
ag3595
ag3598
ag3597
ag3590
ag3591
ag3592
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp23206
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp23207
sg80
Nsb(dp23208
sg1
(g92
g3
Ntp23209
Rp23210
(dp23211
g7
(dp23212
sg9
g1
(g1950
g3
Ntp23213
Rp23214
(dp23215
g14
g15
(g1954
tp23216
Rp23217
(dp23218
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
g23
sg26
g23
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp23219
tp23220
Rp23221
(dp23222
g41
S'environ_items'
p23223
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp23224
sg72
Nsg69
Nsg79
Nsg43
g3171
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g3171
sg76
Nsg77
(lp23225
sg80
Nsb(dp23226
sg1
(g92
g3
Ntp23227
Rp23228
(dp23229
g7
(dp23230
sg9
g1
(g135
g3
Ntp23231
Rp23232
(dp23233
g139
(lp23234
g2793
asg14
g15
(g142
tp23235
Rp23236
(dp23237
g20
I00
sg2793
g23
sg146
S'S\'def get_operand_expression(nvols):\\n\\n    """\\n    Generates operand string\\n\\n    Parameters\\n    ----------\\n\\n    nvols : int\\n\\n    Returns\\n    -------\\n\\n    expr : string\\n\\n    """\\n\\n    expr = None\\n    vol = int(nvols)\\n    expr = (\\\'a*sqrt(%d-3)\\\' % vol)\\n\\n    return expr\\n\'\n.'
p23238
sg28
g29
sbsg148
(dp23239
g1959
Nssg150
(lp23240
g1959
asg152
Nsbsg51
Nsg70
I00
sg63
(dp23241
sg72
Nsg69
Nsg79
Nsg43
g2814
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g2814
sg76
Nsg77
(lp23242
sg80
Nsb(dp23243
sg1
(g81
g3
Ntp23244
Rp23245
(dp23246
g85
g1
(g86
g3
Ntp23247
Rp23248
(dp23249
g90
(dp23250
g1
(g92
g3
Ntp23251
Rp23252
(dp23253
g7
(dp23254
sg9
g1
(g2879
g3
Ntp23255
Rp23256
(dp23257
g14
g15
(g2883
tp23258
Rp23259
(dp23260
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp23261
tp23262
Rp23263
(dp23264
g41
S'environ_items'
p23265
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp23266
sg72
Nsg69
Nsg79
Nsg43
g2898
sg65
S'vmhc_1.fsl_to_itk_vmhc'
p23267
sg71
I00
sg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp23268
sg80
Nsb(dp23269
sg1
(g92
g3
Ntp23270
Rp23271
(dp23272
g7
(dp23273
sg9
g1
(g97
g3
Ntp23274
Rp23275
(dp23276
g14
g15
(g53
tp23277
Rp23278
(dp23279
g28
g29
sg2893
g23
sbsg108
(lp23280
g2893
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp23281
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
S'vmhc_1.fsl_to_itk_vmhc'
p23282
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp23283
sg80
Nsb(dp23284
sg1
(g92
g3
Ntp23285
Rp23286
(dp23287
g7
(dp23288
sg9
g1
(g97
g3
Ntp23289
Rp23290
(dp23291
g14
g15
(g53
tp23292
Rp23293
(dp23294
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp23295
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp23296
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
S'vmhc_1.fsl_to_itk_vmhc'
p23297
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp23298
sg80
Nsb(dp23299
sg1
(g92
g3
Ntp23300
Rp23301
(dp23302
g7
(dp23303
sg9
g1
(g135
g3
Ntp23304
Rp23305
(dp23306
g139
(lp23307
g2910
asg14
g15
(g142
tp23308
Rp23309
(dp23310
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p23311
sbsg148
(dp23312
g2916
Nssg150
(lp23313
g2916
asg152
Nsbsg51
Nsg70
I00
sg63
(dp23314
sg72
Nsg69
Nsg79
Nsg43
g2919
sg65
S'vmhc_1.fsl_to_itk_vmhc'
p23315
sg71
I00
sg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp23316
sg80
Nsb(dp23317
ssg159
(dp23318
g23252
(dp23319
g23301
(dp23320
g163
(lp23321
(g2893
g2910
tp23322
asssg23271
(dp23323
sg23286
(dp23324
g23252
(dp23325
g163
(lp23326
(g2933
g2895
tp23327
a(g2896
g2896
tp23328
a(g2894
g2894
tp23329
asssg23301
(dp23330
g23271
(dp23331
g163
(lp23332
(g2916
g2893
tp23333
assssg174
g23318
sg175
(dp23334
g23252
(dp23335
g23286
g23325
ssg23271
(dp23336
g23301
g23331
ssg23286
(dp23337
sg23301
(dp23338
g23252
g23320
sssg157
(dp23339
sg180
g23318
sbsg43
g2976
sg65
g2977
sg75
g2976
sg76
g181
((lp23340
(lp23341
g184
ag181
((lp23342
(lp23343
g187
ag184
aa(lp23344
g189
ag190
aa(lp23345
g192
ag193
aa(lp23346
g195
ag196
aa(lp23347
g198
ag199
aa(lp23348
g201
ag106
aa(lp23349
g203
ag204
aa(lp23350
g206
ag207
aatp23351
Rp23352
aa(lp23353
g211
ag181
((lp23354
(lp23355
g187
ag211
aa(lp23356
g215
ag216
aa(lp23357
g218
ag219
aa(lp23358
g221
ag222
aa(lp23359
g224
ag225
aa(lp23360
g227
ag228
aa(lp23361
g230
ag231
aa(lp23362
g233
ag234
aa(lp23363
g236
ag237
aa(lp23364
g239
ag240
aa(lp23365
g242
ag243
aa(lp23366
g245
ag246
aa(lp23367
g248
ag249
aa(lp23368
g251
ag252
aa(lp23369
g254
ag255
aa(lp23370
g257
ag258
aa(lp23371
g260
ag261
aa(lp23372
g263
ag264
aa(lp23373
g266
ag267
aatp23374
Rp23375
aa(lp23376
g271
ag181
((lp23377
(lp23378
g187
ag271
aa(lp23379
g275
ag276
aatp23380
Rp23381
aatp23382
Rp23383
sg80
Nsb(dp23384
sg1
(g92
g3
Ntp23385
Rp23386
(dp23387
g7
(dp23388
sg9
g1
(g1950
g3
Ntp23389
Rp23390
(dp23391
g14
g15
(g1954
tp23392
Rp23393
(dp23394
g1958
g23
sg20
I00
sg28
g29
sg25
g23
sg1959
g3747
sg26
g23
sg752
g1875
sg1961
g23
sg1962
g23
sg1963
g23
sg32
g1
(g33
g34
(dp23395
tp23396
Rp23397
(dp23398
g41
S'environ_items'
p23399
sg43
g32
sbsg1969
g23
sg1970
g23
sg1971
g23
sg30
g31
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp23400
sg72
Nsg69
Nsg79
Nsg43
g3754
sg65
g22720
sg71
I00
sg73
Nsg74
I00
sg75
g3754
sg76
Nsg77
(lp23401
sg80
Nsb(dp23402
sg1
(g92
g3
Ntp23403
Rp23404
(dp23405
g7
(dp23406
sg9
g1
(g97
g3
Ntp23407
Rp23408
(dp23409
g14
g15
(g53
tp23410
Rp23411
(dp23412
g28
g29
sg2770
(lp23413
I4
asbsg108
(lp23414
g2770
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp23415
sg72
Nsg69
Nsg79
Nsg43
g2774
sg65
g22720
sg71
I00
sg73
(g2770
(lp23416
I4
atp23417
sg74
I00
sg75
g2774
sg76
Nsg77
(lp23418
sg80
Nsb(dp23419
ssg159
(dp23420
g22592
(dp23421
g22724
(dp23422
g163
(lp23423
(g3795
g3796
tp23424
asssg22706
(dp23425
g23228
(dp23426
g163
(lp23427
(g2793
g2793
tp23428
asssg22724
(dp23429
g23196
(dp23430
g163
(lp23431
(g3852
g3597
tp23432
assg23178
(dp23433
g163
(lp23434
(g3852
g44
tp23435
assg22859
(dp23436
g163
(lp23437
(g3852
g2831
tp23438
asssg22845
(dp23439
g22724
(dp23440
g163
(lp23441
(g3185
g3815
tp23442
assg23245
(dp23443
g163
(lp23444
(g3195
g3819
tp23445
a(g3192
g3821
tp23446
a(g3189
g3823
tp23447
assg22877
(dp23448
g163
(lp23449
(g3192
g3809
tp23450
a(g3185
g3811
tp23451
assg23160
(dp23452
g163
(lp23453
(g3184
g44
tp23454
a(g2531
g47
tp23455
asssg22859
(dp23456
g23386
(dp23457
g163
(lp23458
(g25
g1963
tp23459
assg23196
(dp23460
g163
(lp23461
(g25
g3590
tp23462
asssg22877
(dp23463
g22592
(dp23464
g163
(lp23465
(g3841
g3842
tp23466
a(g3833
g3844
tp23467
a(g3835
g3846
tp23468
assg23196
(dp23469
g163
(lp23470
(g3833
g3596
tp23471
a(g3835
g3594
tp23472
a(g3837
g3595
tp23473
asssg23160
(dp23474
g22724
(dp23475
g163
(lp23476
(g25
g3828
tp23477
asssg23178
(dp23478
g22706
(dp23479
g163
(lp23480
(g25
g2036
tp23481
assg22859
(dp23482
g163
(lp23483
(g25
g2837
tp23484
asssg23196
(dp23485
sg23210
(dp23486
g23196
(dp23487
g163
(lp23488
(g25
g3592
tp23489
asssg23228
(dp23490
g23210
(dp23491
g163
(lp23492
(g1959
g1959
tp23493
asssg23245
(dp23494
g22592
(dp23495
g163
(lp23496
(g3789
g3790
tp23497
asssg23386
(dp23498
g23210
(dp23499
g163
(lp23500
(g25
g1963
tp23501
assg23196
(dp23502
g163
(lp23503
(g25
g3591
tp23504
asssg23404
(dp23505
g23160
(dp23506
g163
(lp23507
((g2770
S'S\'def set_gauss(fwhm):\\n\\n    """\\n    Compute the sigma value, given Full Width Half Max. \\n    Further it builds an operand string and returns it\\n\\n    Parameters\\n    ----------\\n\\n    fwhm : float\\n\\n    Returns\\n    -------\\n\\n    op_string : string\\n\\n    """\\n\\n    op_string = ""\\n\\n    fwhm = float(fwhm)\\n\\n    sigma = float(fwhm / 2.3548)\\n\\n    op = "-kernel gauss %f -fmean -mas " % (sigma) + "%s"\\n    op_string = op\\n\\n    return op_string\\n\'\n.'
p23508
(ttp23509
g24
tp23510
assssg174
g23420
sg175
(dp23511
g22592
(dp23512
g23245
g23495
sg22877
g23464
ssg22706
(dp23513
g23178
g23479
ssg22724
(dp23514
g22592
g23422
sg23160
g23475
sg22845
g23440
ssg22845
(dp23515
sg22859
(dp23516
g22724
g23436
sg23178
g23482
ssg22877
(dp23517
g22845
g23448
ssg23160
(dp23518
g22845
g23452
sg23404
g23506
ssg23178
(dp23519
g22724
g23433
ssg23196
(dp23520
g23386
g23502
sg23210
g23487
sg22724
g23430
sg22877
g23469
sg22859
g23460
ssg23210
(dp23521
g23386
g23499
sg23228
g23491
ssg23228
(dp23522
g22706
g23426
ssg23245
(dp23523
g22845
g23443
ssg23386
(dp23524
g22859
g23457
ssg23404
(dp23525
ssg157
(dp23526
sg180
g23420
sbsg43
g22720
sg65
g66
sg75
g22720
sg76
g181
((lp23527
(lp23528
g184
ag181
((lp23529
(lp23530
g187
ag184
aa(lp23531
g189
ag190
aa(lp23532
g192
ag193
aa(lp23533
g195
ag196
aa(lp23534
g198
ag199
aa(lp23535
g201
ag106
aa(lp23536
g203
ag204
aa(lp23537
g206
ag207
aatp23538
Rp23539
aa(lp23540
g211
ag181
((lp23541
(lp23542
g187
ag211
aa(lp23543
g215
ag216
aa(lp23544
g218
ag219
aa(lp23545
g221
ag222
aa(lp23546
g224
ag225
aa(lp23547
g227
ag228
aa(lp23548
g230
ag231
aa(lp23549
g233
ag234
aa(lp23550
g236
ag237
aa(lp23551
g239
ag240
aa(lp23552
g242
ag243
aa(lp23553
g245
ag246
aa(lp23554
g248
ag249
aa(lp23555
g251
ag252
aa(lp23556
g254
ag255
aa(lp23557
g257
ag258
aa(lp23558
g260
ag261
aa(lp23559
g263
ag264
aa(lp23560
g266
ag267
aatp23561
Rp23562
aa(lp23563
g271
ag181
((lp23564
(lp23565
g187
ag271
aa(lp23566
g275
ag276
aatp23567
Rp23568
aatp23569
Rp23570
sg80
Nsbtp23571
a(g18076
g1
(g81
g3
Ntp23572
Rp23573
(dp23574
g85
g1
(g86
g3
Ntp23575
Rp23576
(dp23577
g90
(dp23578
g1
(g2
g3
Ntp23579
Rp23580
(dp23581
g7
(dp23582
sg9
g1
(g135
g3
Ntp23583
Rp23584
(dp23585
g139
(lp23586
g2910
asg14
g15
(g142
tp23587
Rp23588
(dp23589
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p23590
sbsg148
(dp23591
g2916
Nssg150
(lp23592
g2916
asg152
Nsbsg51
Nsg52
g15
(g53
tp23593
Rp23594
(dp23595
g20
I00
sg28
g29
sg2910
g23
sg146
g23590
sbsg43
g2919
sg63
(dp23596
sg65
S'dr_tempreg_maps_z_files_fsl_to_itk_0'
p23597
sg67
(lp23598
g2910
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp23599
sg79
Nsg80
Nsb(dp23600
sg1
(g92
g3
Ntp23601
Rp23602
(dp23603
g7
(dp23604
sg9
g1
(g97
g3
Ntp23605
Rp23606
(dp23607
g14
g15
(g53
tp23608
Rp23609
(dp23610
g28
g29
sg2893
g23
sbsg108
(lp23611
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp23612
sg65
g23597
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp23613
sg79
Nsg80
Nsb(dp23614
sg1
(g92
g3
Ntp23615
Rp23616
(dp23617
g7
(dp23618
sg9
g1
(g97
g3
Ntp23619
Rp23620
(dp23621
g14
g15
(g53
tp23622
Rp23623
(dp23624
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp23625
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp23626
sg65
g23597
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp23627
sg79
Nsg80
Nsb(dp23628
sg1
(g2
g3
Ntp23629
Rp23630
(dp23631
g7
(dp23632
sg9
g1
(g2879
g3
Ntp23633
Rp23634
(dp23635
g14
g15
(g2883
tp23636
Rp23637
(dp23638
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp23639
tp23640
Rp23641
(dp23642
g41
S'environ_items'
p23643
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp23644
Rp23645
(dp23646
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp23647
tp23648
Rp23649
(dp23650
g41
S'environ_items'
p23651
sg43
g32
sbsg2896
g23
sg2894
g23
sg2895
g23
sg2893
I01
sbsg43
g19461
sg63
(dp23652
sg65
g23597
sg67
(lp23653
g2894
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g19461
sg76
Nsg77
(lp23654
sg79
Nsg80
Nsb(dp23655
ssg157
(dp23656
sg159
(dp23657
g23580
(dp23658
g23602
(dp23659
g163
(lp23660
(g2916
g2893
tp23661
asssg23602
(dp23662
sg23616
(dp23663
g23630
(dp23664
g163
(lp23665
(g2933
g2895
tp23666
a(g2896
g2896
tp23667
a(g2894
g2894
tp23668
asssg23630
(dp23669
g23580
(dp23670
g163
(lp23671
(g2893
g2910
tp23672
assssg174
g23657
sg175
(dp23673
g23580
(dp23674
g23630
g23670
ssg23602
(dp23675
g23580
g23659
ssg23616
(dp23676
sg23630
(dp23677
g23616
g23664
sssg180
g23657
sbsg43
g23597
sg65
g66
sg75
g23597
sg76
g181
((lp23678
(lp23679
g184
ag181
((lp23680
(lp23681
g187
ag184
aa(lp23682
g189
ag190
aa(lp23683
g192
ag193
aa(lp23684
g195
ag196
aa(lp23685
g198
ag199
aa(lp23686
g201
ag106
aa(lp23687
g203
ag204
aa(lp23688
g206
ag207
aatp23689
Rp23690
aa(lp23691
g211
ag181
((lp23692
(lp23693
g187
ag211
aa(lp23694
g215
ag216
aa(lp23695
g218
ag219
aa(lp23696
g221
ag222
aa(lp23697
g224
ag225
aa(lp23698
g227
ag228
aa(lp23699
g230
ag231
aa(lp23700
g233
ag234
aa(lp23701
g236
ag237
aa(lp23702
g239
ag240
aa(lp23703
g242
ag243
aa(lp23704
g245
ag246
aa(lp23705
g248
ag249
aa(lp23706
g251
ag252
aa(lp23707
g254
ag255
aa(lp23708
g257
ag258
aa(lp23709
g260
ag261
aa(lp23710
g263
ag264
aa(lp23711
g266
ag267
aatp23712
Rp23713
aa(lp23714
g271
ag181
((lp23715
(lp23716
g187
ag271
aa(lp23717
g275
ag276
aatp23718
Rp23719
aatp23720
Rp23721
sg80
Nsbtp23722
a(g18076
g11515
tp23723
a(g18076
g1
(g81
g3
Ntp23724
Rp23725
(dp23726
g85
g1
(g86
g3
Ntp23727
Rp23728
(dp23729
g90
(dp23730
g1
(g92
g3
Ntp23731
Rp23732
(dp23733
g7
(dp23734
sg9
g1
(g135
g3
Ntp23735
Rp23736
(dp23737
g139
(lp23738
g2910
asg14
g15
(g142
tp23739
Rp23740
(dp23741
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p23742
sbsg148
(dp23743
g2916
Nssg150
(lp23744
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp23745
sg65
S'reho_fsl_to_itk_0'
p23746
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp23747
sg79
Nsg80
Nsb(dp23748
sg1
(g92
g3
Ntp23749
Rp23750
(dp23751
g7
(dp23752
sg9
g1
(g97
g3
Ntp23753
Rp23754
(dp23755
g14
g15
(g53
tp23756
Rp23757
(dp23758
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp23759
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp23760
sg65
g23746
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp23761
sg79
Nsg80
Nsb(dp23762
sg1
(g92
g3
Ntp23763
Rp23764
(dp23765
g7
(dp23766
sg9
g1
(g97
g3
Ntp23767
Rp23768
(dp23769
g14
g15
(g53
tp23770
Rp23771
(dp23772
g28
g29
sg2893
g23
sbsg108
(lp23773
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp23774
sg65
g23746
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp23775
sg79
Nsg80
Nsb(dp23776
sg1
(g92
g3
Ntp23777
Rp23778
(dp23779
g7
(dp23780
sg9
g1
(g2879
g3
Ntp23781
Rp23782
(dp23783
g14
g15
(g2883
tp23784
Rp23785
(dp23786
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp23787
tp23788
Rp23789
(dp23790
g41
S'environ_items'
p23791
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp23792
sg65
g23746
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp23793
sg79
Nsg80
Nsb(dp23794
ssg157
(dp23795
sg159
(dp23796
g23732
(dp23797
g23764
(dp23798
g163
(lp23799
(g2916
g2893
tp23800
asssg23750
(dp23801
g23778
(dp23802
g163
(lp23803
(g2933
g2895
tp23804
a(g2896
g2896
tp23805
a(g2894
g2894
tp23806
asssg23764
(dp23807
sg23778
(dp23808
g23732
(dp23809
g163
(lp23810
(g2893
g2910
tp23811
assssg174
g23796
sg175
(dp23812
g23732
(dp23813
g23778
g23809
ssg23750
(dp23814
sg23764
(dp23815
g23732
g23798
ssg23778
(dp23816
g23750
g23802
sssg180
g23796
sbsg43
g23746
sg65
g66
sg75
g23746
sg76
g181
((lp23817
(lp23818
g184
ag181
((lp23819
(lp23820
g187
ag184
aa(lp23821
g189
ag190
aa(lp23822
g192
ag193
aa(lp23823
g195
ag196
aa(lp23824
g198
ag199
aa(lp23825
g201
ag106
aa(lp23826
g203
ag204
aa(lp23827
g206
ag207
aatp23828
Rp23829
aa(lp23830
g211
ag181
((lp23831
(lp23832
g187
ag211
aa(lp23833
g215
ag216
aa(lp23834
g218
ag219
aa(lp23835
g221
ag222
aa(lp23836
g224
ag225
aa(lp23837
g227
ag228
aa(lp23838
g230
ag231
aa(lp23839
g233
ag234
aa(lp23840
g236
ag237
aa(lp23841
g239
ag240
aa(lp23842
g242
ag243
aa(lp23843
g245
ag246
aa(lp23844
g248
ag249
aa(lp23845
g251
ag252
aa(lp23846
g254
ag255
aa(lp23847
g257
ag258
aa(lp23848
g260
ag261
aa(lp23849
g263
ag264
aa(lp23850
g266
ag267
aatp23851
Rp23852
aa(lp23853
g271
ag181
((lp23854
(lp23855
g187
ag271
aa(lp23856
g275
ag276
aatp23857
Rp23858
aatp23859
Rp23860
sg80
Nsbtp23861
a(g18076
g1
(g81
g3
Ntp23862
Rp23863
(dp23864
g85
g1
(g86
g3
Ntp23865
Rp23866
(dp23867
g90
(dp23868
g1
(g92
g3
Ntp23869
Rp23870
(dp23871
g7
(dp23872
sg9
g1
(g135
g3
Ntp23873
Rp23874
(dp23875
g139
(lp23876
g2910
asg14
g15
(g142
tp23877
Rp23878
(dp23879
g20
I00
sg28
g29
sg2910
g23
sg146
S'S"def change_itk_transform_type(input_affine_file):\\n\\n    \'\'\'\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \'Transform Type\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \'updated_affine.txt\'\\n    \'\'\'\\n\\n    import os\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n\\n        for line in f:\\n\\n            if \'Transform:\' in line:\\n\\n                if \'MatrixOffsetTransformBase_double_3_3\' in line:\\n\\n                    transform_line = \'Transform: AffineTransform_double_3_3\'\\n                    new_file_lines.append(transform_line)\\n\\n            else:\\n\\n                new_file_lines.append(line)\\n\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \'updated_affine.txt\')\\n\\n    outfile = open(updated_affine_file, \'wt\')\\n\\n    for line in new_file_lines:\\n\\n        print >>outfile, line.strip(\'\\\\n\')\\n\\n    outfile.close()\\n\\n\\n    return updated_affine_file\\n"\n.'
p23880
sbsg148
(dp23881
g2916
Nssg150
(lp23882
g2916
asg152
Nsbsg51
Nsg43
g2919
sg63
(dp23883
sg65
S'sca_roi_fsl_to_itk_0'
p23884
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2919
sg76
Nsg77
(lp23885
sg79
Nsg80
Nsb(dp23886
sg1
(g92
g3
Ntp23887
Rp23888
(dp23889
g7
(dp23890
sg9
g1
(g97
g3
Ntp23891
Rp23892
(dp23893
g14
g15
(g53
tp23894
Rp23895
(dp23896
g28
g29
sg2933
g23
sg2894
g23
sg2896
g23
sbsg108
(lp23897
g2933
ag2896
ag2894
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp23898
sg65
g23884
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp23899
sg79
Nsg80
Nsb(dp23900
sg1
(g92
g3
Ntp23901
Rp23902
(dp23903
g7
(dp23904
sg9
g1
(g97
g3
Ntp23905
Rp23906
(dp23907
g14
g15
(g53
tp23908
Rp23909
(dp23910
g28
g29
sg2893
g23
sbsg108
(lp23911
g2893
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp23912
sg65
g23884
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp23913
sg79
Nsg80
Nsb(dp23914
sg1
(g92
g3
Ntp23915
Rp23916
(dp23917
g7
(dp23918
sg9
g1
(g2879
g3
Ntp23919
Rp23920
(dp23921
g14
g15
(g2883
tp23922
Rp23923
(dp23924
g20
I00
sg28
g29
sg26
g23
sg2887
I01
sg30
g31
sg32
g1
(g33
g34
(dp23925
tp23926
Rp23927
(dp23928
g41
S'environ_items'
p23929
sg43
g32
sbsg2893
I01
sg2894
g23
sg2895
g23
sg2896
g23
sbsg49
Nsg50
g31
sbsg51
Nsg43
g2898
sg63
(dp23930
sg65
g23884
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2898
sg76
Nsg77
(lp23931
sg79
Nsg80
Nsb(dp23932
ssg157
(dp23933
sg159
(dp23934
g23870
(dp23935
g23902
(dp23936
g163
(lp23937
(g2916
g2893
tp23938
asssg23888
(dp23939
g23916
(dp23940
g163
(lp23941
(g2933
g2895
tp23942
a(g2896
g2896
tp23943
a(g2894
g2894
tp23944
asssg23902
(dp23945
sg23916
(dp23946
g23870
(dp23947
g163
(lp23948
(g2893
g2910
tp23949
assssg174
g23934
sg175
(dp23950
g23870
(dp23951
g23916
g23947
ssg23888
(dp23952
sg23902
(dp23953
g23870
g23936
ssg23916
(dp23954
g23888
g23940
sssg180
g23934
sbsg43
g23884
sg65
g66
sg75
g23884
sg76
g181
((lp23955
(lp23956
g184
ag181
((lp23957
(lp23958
g187
ag184
aa(lp23959
g189
ag190
aa(lp23960
g192
ag193
aa(lp23961
g195
ag196
aa(lp23962
g198
ag199
aa(lp23963
g201
ag106
aa(lp23964
g203
ag204
aa(lp23965
g206
ag207
aatp23966
Rp23967
aa(lp23968
g211
ag181
((lp23969
(lp23970
g187
ag211
aa(lp23971
g215
ag216
aa(lp23972
g218
ag219
aa(lp23973
g221
ag222
aa(lp23974
g224
ag225
aa(lp23975
g227
ag228
aa(lp23976
g230
ag231
aa(lp23977
g233
ag234
aa(lp23978
g236
ag237
aa(lp23979
g239
ag240
aa(lp23980
g242
ag243
aa(lp23981
g245
ag246
aa(lp23982
g248
ag249
aa(lp23983
g251
ag252
aa(lp23984
g254
ag255
aa(lp23985
g257
ag258
aa(lp23986
g260
ag261
aa(lp23987
g263
ag264
aa(lp23988
g266
ag267
aatp23989
Rp23990
aa(lp23991
g271
ag181
((lp23992
(lp23993
g187
ag271
aa(lp23994
g275
ag276
aatp23995
Rp23996
aatp23997
Rp23998
sg80
Nsbtp23999
a(g18076
g17003
tp24000
a(g17003
g18278
tp24001
a(g17003
g18416
tp24002
a(g17003
g2754
tp24003
a(g17003
g18554
tp24004
a(g17003
g18692
tp24005
a(g17003
g18830
tp24006
a(g17003
g18968
tp24007
a(g17003
g19106
tp24008
a(g17003
g19244
tp24009
a(g17003
g19382
tp24010
a(g17003
g19534
tp24011
a(g17003
g12016
tp24012
a(g17003
g19673
tp24013
a(g17003
g19811
tp24014
a(g17003
g19949
tp24015
a(g17003
g23573
tp24016
a(g17003
g21093
tp24017
a(g17003
g20239
tp24018
a(g17003
g20377
tp24019
a(g17003
g20515
tp24020
a(g17003
g22193
tp24021
a(g17003
g20791
tp24022
a(g17003
g20942
tp24023
a(g17003
g21244
tp24024
a(g17003
g21382
tp24025
a(g17003
g21520
tp24026
a(g17003
g21658
tp24027
a(g17003
g21796
tp24028
a(g17003
g21934
tp24029
a(g17003
g20653
tp24030
a(g17003
g22331
tp24031
a(g17003
g22585
tp24032
a(g17003
g20101
tp24033
a(g17003
g23863
tp24034
a(g17003
g23725
tp24035
a(g1
(g81
g3
Ntp24036
Rp24037
(dp24038
g85
g1
(g86
g3
Ntp24039
Rp24040
(dp24041
g90
(dp24042
g1
(g92
g3
Ntp24043
Rp24044
(dp24045
g7
(dp24046
sg9
g1
(g97
g3
Ntp24047
Rp24048
(dp24049
g14
g15
(g53
tp24050
Rp24051
(dp24052
g28
g29
sg1817
g23
sg2249
g23
sg1816
g23
sbsg108
(lp24053
g1816
ag2249
ag1817
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp24054
sg65
S'func_gather_0'
p24055
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp24056
sg79
Nsg80
Nsb(dp24057
sg1
(g92
g3
Ntp24058
Rp24059
(dp24060
g7
(dp24061
sg9
g1
(g97
g3
Ntp24062
Rp24063
(dp24064
g14
g15
(g53
tp24065
Rp24066
(dp24067
g28
g29
sg1817
g23
sg1816
g18014
sbsg108
(lp24068
g1816
ag1817
asg110
I01
sbsg51
Nsg43
g18017
sg63
(dp24069
sg65
g24055
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp24070
(g1817
(lp24071
g1845
atp24072
asg74
I00
sg75
g18017
sg76
Nsg77
(lp24073
sg79
Nsg80
Nsb(dp24074
sg1
(g92
g3
Ntp24075
Rp24076
(dp24077
g7
(dp24078
sg9
g1
(g135
g3
Ntp24079
Rp24080
(dp24081
g139
(lp24082
g1817
aS'rest_dict'
p24083
asg14
g15
(g142
tp24084
Rp24085
(dp24086
g20
I00
sg24083
g1844
sg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p24087
sg28
g29
sg1817
g23
sbsg148
(dp24088
g2249
Nssg150
(lp24089
g2249
asg152
Nsbsg51
Nsg43
S'selectrest'
p24090
sg63
(dp24091
sg65
g24055
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24090
sg76
Nsg77
(lp24092
sg79
Nsg80
Nsb(dp24093
ssg157
(dp24094
sg159
(dp24095
g24044
(dp24096
sg24059
(dp24097
g24076
(dp24098
g163
(lp24099
(g1817
g1817
tp24100
assg24044
(dp24101
g163
(lp24102
(g1816
g1816
tp24103
a(g1817
g1817
tp24104
asssg24076
(dp24105
g24044
(dp24106
g163
(lp24107
(g2249
g2249
tp24108
assssg174
g24095
sg175
(dp24109
g24044
(dp24110
g24059
g24101
sg24076
g24106
ssg24059
(dp24111
sg24076
(dp24112
g24059
g24098
sssg180
g24095
sbsg43
g24055
sg65
g66
sg75
g24055
sg76
g181
((lp24113
(lp24114
g184
ag181
((lp24115
(lp24116
g187
ag184
aa(lp24117
g189
ag190
aa(lp24118
g192
ag193
aa(lp24119
g195
ag196
aa(lp24120
g198
ag199
aa(lp24121
g201
ag106
aa(lp24122
g203
ag204
aa(lp24123
g206
ag207
aatp24124
Rp24125
aa(lp24126
g211
ag181
((lp24127
(lp24128
g187
ag211
aa(lp24129
g215
ag216
aa(lp24130
g218
ag219
aa(lp24131
g221
ag222
aa(lp24132
g224
ag225
aa(lp24133
g227
ag228
aa(lp24134
g230
ag231
aa(lp24135
g233
ag234
aa(lp24136
g236
ag237
aa(lp24137
g239
ag240
aa(lp24138
g242
ag243
aa(lp24139
g245
ag246
aa(lp24140
g248
ag249
aa(lp24141
g251
ag252
aa(lp24142
g254
ag255
aa(lp24143
g257
ag258
aa(lp24144
g260
ag261
aa(lp24145
g263
ag264
aa(lp24146
g266
ag267
aatp24147
Rp24148
aa(lp24149
g271
ag181
((lp24150
(lp24151
g187
ag271
aa(lp24152
g275
ag276
aatp24153
Rp24154
aatp24155
Rp24156
sg80
Nsbg1809
tp24157
a(g24037
g1856
tp24158
a(g24037
g1
(g81
g3
Ntp24159
Rp24160
(dp24161
g85
g1
(g86
g3
Ntp24162
Rp24163
(dp24164
g90
(dp24165
g1
(g92
g3
Ntp24166
Rp24167
(dp24168
g7
(dp24169
sg9
g1
(g97
g3
Ntp24170
Rp24171
(dp24172
g14
g15
(g53
tp24173
Rp24174
(dp24175
g7273
(lp24176
F0.2
asg28
g29
sS'remove_frames_before'
p24177
I1
sS'remove_frames_after'
p24178
I2
sbsg108
(lp24179
g7273
ag24177
ag24178
asg110
I01
sbsg51
Nsg43
S'scrubbing_input'
p24180
sg63
(dp24181
sg65
S'gen_motion_stats_0'
p24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(g7273
(lp24183
F0.2
atp24184
sg74
I00
sg75
g24180
sg76
Nsg77
(lp24185
sg79
Nsg80
Nsb(dp24186
sg1
(g92
g3
Ntp24187
Rp24188
(dp24189
g7
(dp24190
sg9
g1
(g97
g3
Ntp24191
Rp24192
(dp24193
g14
g15
(g53
tp24194
Rp24195
(dp24196
g2182
g23
sg28
g29
sg141
g23
sS'subject_id'
p24197
g23
sg750
g23
sg2191
g23
sg1916
g23
sg2194
g23
sbsg108
(lp24198
g24197
ag141
ag2191
ag2182
ag2194
ag750
ag1916
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp24199
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp24200
sg79
Nsg80
Nsb(dp24201
sg1
(g92
g3
Ntp24202
Rp24203
(dp24204
g7
(dp24205
sg9
g1
(g135
g3
Ntp24206
Rp24207
(dp24208
g139
(lp24209
g44
asg14
g15
(g142
tp24210
Rp24211
(dp24212
g20
I00
sg28
g29
sg146
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p24213
sg44
g23
sbsg148
(dp24214
g25
Nssg150
(lp24215
g25
asg152
Nsbsg51
Nsg43
S'calculate_FDJ'
p24216
sg63
(dp24217
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24216
sg76
Nsg77
(lp24218
sg79
Nsg80
Nsb(dp24219
sg1
(g92
g3
Ntp24220
Rp24221
(dp24222
g7
(dp24223
sg9
g1
(g135
g3
Ntp24224
Rp24225
(dp24226
g139
(lp24227
g2249
ag750
asg14
g15
(g142
tp24228
Rp24229
(dp24230
g20
I00
sg750
g23
sg28
g29
sg146
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p24231
sg2249
g23
sbsg148
(dp24232
g25
Nssg150
(lp24233
g25
asg152
Nsbsg51
Nsg43
S'cal_DVARS'
p24234
sg63
(dp24235
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24234
sg76
Nsg77
(lp24236
sg79
Nsg80
Nsb(dp24237
sg1
(g92
g3
Ntp24238
Rp24239
(dp24240
g7
(dp24241
sg9
g1
(g135
g3
Ntp24242
Rp24243
(dp24244
g139
(lp24245
g44
ag7273
aS'frames_before'
p24246
aS'frames_after'
p24247
asg14
g15
(g142
tp24248
Rp24249
(dp24250
g20
I00
sg24247
g23
sg146
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p24251
sg44
g23
sg7273
g23
sg28
g29
sg24246
g23
sbsg148
(dp24252
g25
Nssg150
(lp24253
g25
asg152
Nsbsg51
Nsg43
S'exclude_frames'
p24254
sg63
(dp24255
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24254
sg76
Nsg77
(lp24256
sg79
Nsg80
Nsb(dp24257
sg1
(g92
g3
Ntp24258
Rp24259
(dp24260
g7
(dp24261
sg9
g1
(g135
g3
Ntp24262
Rp24263
(dp24264
g139
(lp24265
g44
ag7273
aS'exclude_list'
p24266
asg14
g15
(g142
tp24267
Rp24268
(dp24269
g20
I00
sg24266
g23
sg146
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p24270
sg44
g23
sg7273
g23
sg28
g29
sbsg148
(dp24271
g25
Nssg150
(lp24272
g25
asg152
Nsbsg51
Nsg43
S'include_frames'
p24273
sg63
(dp24274
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24273
sg76
Nsg77
(lp24275
sg79
Nsg80
Nsb(dp24276
sg1
(g92
g3
Ntp24277
Rp24278
(dp24279
g7
(dp24280
sg9
g1
(g135
g3
Ntp24281
Rp24282
(dp24283
g139
(lp24284
g24197
ag141
ag2191
ag2182
asg14
g15
(g142
tp24285
Rp24286
(dp24287
g20
I00
sg2182
g23
sg141
g23
sg24197
g23
sg146
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p24288
sg2191
g23
sg28
g29
sbsg148
(dp24289
g25
Nssg150
(lp24290
g25
asg152
Nsbsg51
Nsg43
S'calc_motion_parameters'
p24291
sg63
(dp24292
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24291
sg76
Nsg77
(lp24293
sg79
Nsg80
Nsb(dp24294
sg1
(g92
g3
Ntp24295
Rp24296
(dp24297
g7
(dp24298
sg9
g1
(g135
g3
Ntp24299
Rp24300
(dp24301
g139
(lp24302
g44
asg14
g15
(g142
tp24303
Rp24304
(dp24305
g20
I00
sg28
g29
sg146
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p24306
sg44
g23
sbsg148
(dp24307
g25
Nssg150
(lp24308
g25
asg152
Nsbsg51
Nsg43
S'calculate_FD'
p24309
sg63
(dp24310
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24309
sg76
Nsg77
(lp24311
sg79
Nsg80
Nsb(dp24312
sg1
(g92
g3
Ntp24313
Rp24314
(dp24315
g7
(dp24316
sg9
g1
(g135
g3
Ntp24317
Rp24318
(dp24319
g139
(lp24320
g24197
ag141
aS'FD_1D'
p24321
aS'FDJ_1D'
p24322
ag7273
aS'DVARS'
p24323
asg14
g15
(g142
tp24324
Rp24325
(dp24326
g20
I00
sg28
g29
sg141
g23
sg24197
g23
sg24323
g23
sg146
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p24327
sg24322
g23
sg24321
g23
sg7273
g23
sbsg148
(dp24328
g25
Nssg150
(lp24329
g25
asg152
Nsbsg51
Nsg43
S'calc_power_parameters'
p24330
sg63
(dp24331
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24330
sg76
Nsg77
(lp24332
sg79
Nsg80
Nsb(dp24333
sg1
(g92
g3
Ntp24334
Rp24335
(dp24336
g7
(dp24337
sg9
g1
(g97
g3
Ntp24338
Rp24339
(dp24340
g14
g15
(g53
tp24341
Rp24342
(dp24343
g28
g29
sS'frames_ex_1D'
p24344
g23
sg24322
g23
sg24321
g23
sg4721
g23
sS'motion_params'
p24345
g23
sS'power_params'
p24346
g23
sbsg108
(lp24347
g24321
ag24322
ag24344
ag4721
ag24346
ag24345
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp24348
sg65
g24182
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp24349
sg79
Nsg80
Nsb(dp24350
ssg157
(dp24351
sg159
(dp24352
g24167
(dp24353
g24314
(dp24354
g163
(lp24355
(g7273
g7273
tp24356
assg24239
(dp24357
g163
(lp24358
(g7273
g7273
tp24359
a(g24177
g24246
tp24360
a(g24178
g24247
tp24361
assg24259
(dp24362
g163
(lp24363
(g7273
g7273
tp24364
asssg24188
(dp24365
g24278
(dp24366
g163
(lp24367
(g24197
g24197
tp24368
a(g141
g141
tp24369
a(g2191
g2191
tp24370
a(g2182
g2182
tp24371
assg24296
(dp24372
g163
(lp24373
(g2191
g44
tp24374
assg24314
(dp24375
g163
(lp24376
(g24197
g24197
tp24377
a(g141
g141
tp24378
assg24221
(dp24379
g163
(lp24380
(g2194
g2249
tp24381
a(g750
g750
tp24382
assg24203
(dp24383
g163
(lp24384
(g1916
g44
tp24385
asssg24203
(dp24386
g24335
(dp24387
g163
(lp24388
(g25
g24322
tp24389
assg24314
(dp24390
g163
(lp24391
(g25
g24322
tp24392
asssg24221
(dp24393
g24314
(dp24394
g163
(lp24395
(g25
g24323
tp24396
asssg24239
(dp24397
g24335
(dp24398
g163
(lp24399
(g25
g24344
tp24400
assg24259
(dp24401
g163
(lp24402
(g25
g24266
tp24403
asssg24259
(dp24404
g24335
(dp24405
g163
(lp24406
(g25
g4721
tp24407
asssg24278
(dp24408
g24335
(dp24409
g163
(lp24410
(g25
g24345
tp24411
asssg24296
(dp24412
g24314
(dp24413
g163
(lp24414
(g25
g24321
tp24415
assg24259
(dp24416
g163
(lp24417
(g25
g44
tp24418
assg24335
(dp24419
g163
(lp24420
(g25
g24321
tp24421
assg24239
(dp24422
g163
(lp24423
(g25
g44
tp24424
asssg24314
(dp24425
g24335
(dp24426
g163
(lp24427
(g25
g24346
tp24428
asssg24335
(dp24429
ssg174
g24352
sg175
(dp24430
g24167
(dp24431
sg24188
(dp24432
sg24203
(dp24433
g24188
g24383
ssg24221
(dp24434
g24188
g24379
ssg24239
(dp24435
g24296
g24422
sg24167
g24357
ssg24259
(dp24436
g24296
g24416
sg24167
g24362
sg24239
g24401
ssg24278
(dp24437
g24188
g24366
ssg24296
(dp24438
g24188
g24372
ssg24314
(dp24439
g24188
g24375
sg24167
g24354
sg24203
g24390
sg24221
g24394
sg24296
g24413
ssg24335
(dp24440
g24278
g24409
sg24314
g24426
sg24203
g24387
sg24259
g24405
sg24296
g24419
sg24239
g24398
sssg180
g24352
sbsg43
g24182
sg65
g66
sg75
g24182
sg76
g181
((lp24441
(lp24442
g184
ag181
((lp24443
(lp24444
g187
ag184
aa(lp24445
g189
ag190
aa(lp24446
g192
ag193
aa(lp24447
g195
ag196
aa(lp24448
g198
ag199
aa(lp24449
g201
ag106
aa(lp24450
g203
ag204
aa(lp24451
g206
ag207
aatp24452
Rp24453
aa(lp24454
g211
ag181
((lp24455
(lp24456
g187
ag211
aa(lp24457
g215
ag216
aa(lp24458
g218
ag219
aa(lp24459
g221
ag222
aa(lp24460
g224
ag225
aa(lp24461
g227
ag228
aa(lp24462
g230
ag231
aa(lp24463
g233
ag234
aa(lp24464
g236
ag237
aa(lp24465
g239
ag240
aa(lp24466
g242
ag243
aa(lp24467
g245
ag246
aa(lp24468
g248
ag249
aa(lp24469
g251
ag252
aa(lp24470
g254
ag255
aa(lp24471
g257
ag258
aa(lp24472
g260
ag261
aa(lp24473
g263
ag264
aa(lp24474
g266
ag267
aatp24475
Rp24476
aa(lp24477
g271
ag181
((lp24478
(lp24479
g187
ag271
aa(lp24480
g275
ag276
aatp24481
Rp24482
aatp24483
Rp24484
sg80
Nsbtp24485
a(g1856
g1
(g81
g3
Ntp24486
Rp24487
(dp24488
g85
g1
(g86
g3
Ntp24489
Rp24490
(dp24491
g90
(dp24492
g1
(g92
g3
Ntp24493
Rp24494
(dp24495
g7
(dp24496
sg9
g1
(g97
g3
Ntp24497
Rp24498
(dp24499
g14
g15
(g53
tp24500
Rp24501
(dp24502
g28
g29
sS'movement_file'
p24503
g23
sbsg108
(lp24504
g24503
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp24505
sg65
S'fristons_parameter_model_0'
p24506
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp24507
sg79
Nsg80
Nsb(dp24508
sg1
(g92
g3
Ntp24509
Rp24510
(dp24511
g7
(dp24512
sg9
g1
(g135
g3
Ntp24513
Rp24514
(dp24515
g139
(lp24516
g44
asg14
g15
(g142
tp24517
Rp24518
(dp24519
g20
I00
sg28
g29
sg146
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p24520
sg44
g23
sbsg148
(dp24521
g25
Nssg150
(lp24522
g25
asg152
Nsbsg51
Nsg43
S'calc_friston'
p24523
sg63
(dp24524
sg65
g24506
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g24523
sg76
Nsg77
(lp24525
sg79
Nsg80
Nsb(dp24526
sg1
(g92
g3
Ntp24527
Rp24528
(dp24529
g7
(dp24530
sg9
g1
(g97
g3
Ntp24531
Rp24532
(dp24533
g14
g15
(g53
tp24534
Rp24535
(dp24536
g28
g29
sg24503
g23
sbsg108
(lp24537
g24503
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp24538
sg65
g24506
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp24539
sg79
Nsg80
Nsb(dp24540
ssg157
(dp24541
sg159
(dp24542
g24494
(dp24543
g24510
(dp24544
g163
(lp24545
(g24503
g44
tp24546
asssg24510
(dp24547
g24528
(dp24548
g163
(lp24549
(g25
g24503
tp24550
asssg24528
(dp24551
ssg174
g24542
sg175
(dp24552
g24494
(dp24553
sg24510
(dp24554
g24494
g24544
ssg24528
(dp24555
g24510
g24548
sssg180
g24542
sbsg43
g24506
sg65
g66
sg75
g24506
sg76
g181
((lp24556
(lp24557
g184
ag181
((lp24558
(lp24559
g187
ag184
aa(lp24560
g189
ag190
aa(lp24561
g192
ag193
aa(lp24562
g195
ag196
aa(lp24563
g198
ag199
aa(lp24564
g201
ag106
aa(lp24565
g203
ag204
aa(lp24566
g206
ag207
aatp24567
Rp24568
aa(lp24569
g211
ag181
((lp24570
(lp24571
g187
ag211
aa(lp24572
g215
ag216
aa(lp24573
g218
ag219
aa(lp24574
g221
ag222
aa(lp24575
g224
ag225
aa(lp24576
g227
ag228
aa(lp24577
g230
ag231
aa(lp24578
g233
ag234
aa(lp24579
g236
ag237
aa(lp24580
g239
ag240
aa(lp24581
g242
ag243
aa(lp24582
g245
ag246
aa(lp24583
g248
ag249
aa(lp24584
g251
ag252
aa(lp24585
g254
ag255
aa(lp24586
g257
ag258
aa(lp24587
g260
ag261
aa(lp24588
g263
ag264
aa(lp24589
g266
ag267
aatp24590
Rp24591
aa(lp24592
g271
ag181
((lp24593
(lp24594
g187
ag271
aa(lp24595
g275
ag276
aatp24596
Rp24597
aatp24598
Rp24599
sg80
Nsbtp24600
a(g1856
g4890
tp24601
a(g1856
g21382
tp24602
a(g1856
g2754
tp24603
a(g1856
g4871
tp24604
a(g1856
g1
(g81
g3
Ntp24605
Rp24606
(dp24607
g85
g1
(g86
g3
Ntp24608
Rp24609
(dp24610
g90
(dp24611
g1
(g92
g3
Ntp24612
Rp24613
(dp24614
g7
(dp24615
sg9
g1
(g3632
g3
Ntp24616
Rp24617
(dp24618
g14
g15
(g3636
tp24619
Rp24620
(dp24621
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp24622
tp24623
Rp24624
(dp24625
g41
S'environ_items'
p24626
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp24627
sg65
S'apply_ants_warp_mean_functional_in_mni_0'
p24628
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp24629
sg79
Nsg80
Nsb(dp24630
sg1
(g92
g3
Ntp24631
Rp24632
(dp24633
g7
(dp24634
sg9
g1
(g97
g3
Ntp24635
Rp24636
(dp24637
g14
g15
(g53
tp24638
Rp24639
(dp24640
g28
g29
sg3620
I0
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp24641
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp24642
sg65
g24628
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp24643
sg79
Nsg80
Nsb(dp24644
sg1
(g92
g3
Ntp24645
Rp24646
(dp24647
g7
(dp24648
sg9
g1
(g97
g3
Ntp24649
Rp24650
(dp24651
g14
g15
(g53
tp24652
Rp24653
(dp24654
g28
g29
sg3640
g23
sbsg108
(lp24655
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp24656
sg65
g24628
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp24657
sg79
Nsg80
Nsb(dp24658
ssg157
(dp24659
sg159
(dp24660
g24613
(dp24661
g24646
(dp24662
g163
(lp24663
(g3640
g3640
tp24664
asssg24632
(dp24665
g24613
(dp24666
g163
(lp24667
(g3622
g3622
tp24668
a(g3621
g3621
tp24669
a(g3320
g3320
tp24670
a(g3371
g3371
tp24671
a(g3620
g3620
tp24672
a(g3344
g3344
tp24673
asssg24646
(dp24674
ssg174
g24660
sg175
(dp24675
g24613
(dp24676
g24632
g24666
ssg24632
(dp24677
sg24646
(dp24678
g24613
g24662
sssg180
g24660
sbsg43
g24628
sg65
g66
sg75
g24628
sg76
g181
((lp24679
(lp24680
g184
ag181
((lp24681
(lp24682
g187
ag184
aa(lp24683
g189
ag190
aa(lp24684
g192
ag193
aa(lp24685
g195
ag196
aa(lp24686
g198
ag199
aa(lp24687
g201
ag106
aa(lp24688
g203
ag204
aa(lp24689
g206
ag207
aatp24690
Rp24691
aa(lp24692
g211
ag181
((lp24693
(lp24694
g187
ag211
aa(lp24695
g215
ag216
aa(lp24696
g218
ag219
aa(lp24697
g221
ag222
aa(lp24698
g224
ag225
aa(lp24699
g227
ag228
aa(lp24700
g230
ag231
aa(lp24701
g233
ag234
aa(lp24702
g236
ag237
aa(lp24703
g239
ag240
aa(lp24704
g242
ag243
aa(lp24705
g245
ag246
aa(lp24706
g248
ag249
aa(lp24707
g251
ag252
aa(lp24708
g254
ag255
aa(lp24709
g257
ag258
aa(lp24710
g260
ag261
aa(lp24711
g263
ag264
aa(lp24712
g266
ag267
aatp24713
Rp24714
aa(lp24715
g271
ag181
((lp24716
(lp24717
g187
ag271
aa(lp24718
g275
ag276
aatp24719
Rp24720
aatp24721
Rp24722
sg80
Nsbtp24723
a(g1856
g5398
tp24724
a(g1856
g18830
tp24725
a(g1856
g4994
tp24726
a(g1856
g5013
tp24727
a(g1856
g22072
tp24728
a(g1856
g19673
tp24729
a(g1856
g19534
tp24730
a(g1856
g5137
tp24731
a(g1856
g12016
tp24732
a(g1856
g1
(g81
g3
Ntp24733
Rp24734
(dp24735
g85
g1
(g86
g3
Ntp24736
Rp24737
(dp24738
g90
(dp24739
g1
(g92
g3
Ntp24740
Rp24741
(dp24742
g7
(dp24743
sg9
g1
(g135
g3
Ntp24744
Rp24745
(dp24746
g139
(lp24747
g44
ag2580
ag2532
asg14
g15
(g142
tp24748
Rp24749
(dp24750
g20
I00
sg28
g29
sg146
S'S\'def compute_reho(in_file, mask_file, cluster_size):\\n\\n    """\\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\\n    followed by computing Kendall\\\'s coefficient concordance(KCC) of a timeseries with its neighbours\\n\\n    Parameters\\n    ----------\\n\\n    in_file : nifti file\\n        4D EPI File \\n\\n    mask_file : nifti file\\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\\n\\n    cluster_size : integer\\n        for a brain voxel the number of neighbouring brain voxels to use for KCC.\\n\\n\\n    Returns\\n    -------\\n\\n    out_file : nifti file\\n        ReHo map of the input EPI image\\n\\n    """\\n\\n    import nibabel as nb\\n    import numpy as np\\n    import os\\n    import sys\\n    from CPAC.reho.utils import f_kendall\\n\\n    out_file = None\\n\\n    res_fname = (in_file)\\n    res_mask_fname = (mask_file)\\n    CUTNUMBER = 10\\n\\n#    nvoxel = 27\\n\\n    if not (cluster_size == 27 or cluster_size == 19 or cluster_size == 7):\\n        cluster_size = 27\\n\\n    nvoxel = cluster_size\\n\\n    res_img = nb.load(res_fname)\\n    res_mask_img = nb.load(res_mask_fname)\\n\\n\\n    res_data = res_img.get_data()\\n    res_mask_data = res_mask_img.get_data()\\n\\n    print res_data.shape\\n    (n_x, n_y, n_z, n_t) = res_data.shape\\n\\n    res_data = np.reshape(res_data, (n_x*n_y*n_z, n_t), order=\\\'F\\\').T\\n\\n    Ranks_res_data = np.tile((np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\\n    #Ranks_res_data = np.tile(np.uint16(np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\\n\\n    segment_length = np.ceil(float((res_data.shape)[1])/float(CUTNUMBER))\\n\\n    for icut in range(0, CUTNUMBER):\\n\\n        segment = None\\n\\n        if not (icut == (CUTNUMBER - 1)):\\n\\n            segment = np.array(np.arange(icut * segment_length, (icut+1) * segment_length))\\n\\n        else:\\n\\n            segment = np.array(np.arange(icut * segment_length, ((res_data.shape)[1])))\\n\\n        segment = np.int64(segment[np.newaxis])\\n\\n        res_data_piece = res_data[:, segment[0]]\\n        nvoxels_piece = (res_data_piece.shape)[1]\\n\\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\\\'mergesort\\\')\\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\\\'mergesort\\\')\\n\\n        db = np.diff(res_data_sorted, 1, 0)\\n\\n        db = db == 0\\n\\n        sumdb = np.sum(db, 0)\\n\\n        temp_array = np.array(np.arange(0, n_t))\\n        temp_array = temp_array[:, np.newaxis]\\n\\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\\n\\n        if np.any(sumdb[:]):\\n\\n            tie_adjust_index = np.flatnonzero(sumdb)\\n\\n            for i in range(0, len(tie_adjust_index)):\\n\\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\\n\\n                ties = db[:, tie_adjust_index[i]]\\n\\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\\n                maxties = len(tieloc)\\n                tiecount = 0\\n\\n                while(tiecount < maxties -1):\\n                    tiestart = tieloc[tiecount]\\n                    ntied = 2\\n                    while(tieloc[tiecount + 1] == (tieloc[tiecount] + 1)):\\n                        tiecount += 1\\n                        ntied += 1\\n\\n                    ranks[tiestart:tiestart + ntied ] = np.ceil(np.float32(np.sum(ranks[tiestart:tiestart + ntied ]))/np.float32(ntied))\\n                    tiecount += 1\\n\\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\\n\\n        del db, sumdb\\n        sort_index_base = np.tile(np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1])\\n        sort_index += sort_index_base\\n        del sort_index_base\\n\\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\\n\\n        ranks_piece = ranks_piece.flatten(order=\\\'F\\\')\\n        sort_index = sort_index.flatten(order=\\\'F\\\')\\n        sorted_ranks = sorted_ranks.flatten(order=\\\'F\\\')\\n\\n        ranks_piece[sort_index] = np.array(sorted_ranks)\\n\\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\\\'F\\\')\\n\\n#        ranks_piece = np.uint16(ranks_piece)\\n\\n        del sort_index, sorted_ranks\\n\\n        Ranks_res_data[:, segment[0]] = ranks_piece\\n\\n        sys.stdout.write(\\\'.\\\')\\n\\n\\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\\\'F\\\')\\n\\n\\n    K = np.zeros((n_x, n_y, n_z))\\n\\n    mask_cluster = np.ones((3, 3, 3))\\n\\n    if nvoxel == 19:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    elif nvoxel == 7:\\n\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 1, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[0, 0, 1] = 0\\n        mask_cluster[0, 2, 1] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 1, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[1, 0, 0] = 0\\n        mask_cluster[1, 2, 0] = 0\\n        mask_cluster[1, 0, 2] = 0\\n        mask_cluster[1, 2, 2] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 1, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[2, 0, 1] = 0\\n        mask_cluster[2, 2, 1] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 1, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n\\n    for i in range(1, n_x - 1):\\n\\n        for j in range(1, n_y -1):\\n\\n            for k in range(1, n_z -1):\\n\\n\\n\\n                block = Ranks_res_data[:, i-1:i+2, j-1:j+2, k-1:k+2]\\n                mask_block = res_mask_data[i-1:i+2, j-1:j+2, k-1:k+2]\\n\\n\\n                if not(int(mask_block[1, 1, 1]) == 0):\\n\\n\\n                    if nvoxel == 19 or nvoxel == 7:\\n\\n                        mask_block = np.multiply(mask_block, mask_cluster)\\n\\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\\\'F\\\')\\n                    mask_R_block = R_block[:, np.argwhere(np.reshape(mask_block, (1, 27), order=\\\'F\\\') > 0)[:, 1]]\\n\\n                    K[i, j, k] = f_kendall(mask_R_block)\\n\\n\\n    img = nb.Nifti1Image(K, header=res_img.get_header(), affine=res_img.get_affine())\\n\\n    reho_file = os.path.join(os.getcwd(), \\\'ReHo.nii.gz\\\')\\n\\n    img.to_filename(reho_file)\\n\\n    out_file = reho_file\\n\\n    return out_file\\n\'\n.'
p24751
sg44
g23
sg2532
g23
sg2580
g23
sbsg148
(dp24752
g25
Nssg150
(lp24753
g25
asg152
Nsbsg51
Nsg70
I00
sg63
(dp24754
sg72
Nsg69
Nsg79
Nsg43
g2588
sg65
S'reho_1'
p24755
sg71
I00
sg73
Nsg74
I00
sg75
g2588
sg76
Nsg77
(lp24756
sg80
Nsb(dp24757
sg1
(g92
g3
Ntp24758
Rp24759
(dp24760
g7
(dp24761
sg9
g1
(g2595
g3
Ntp24762
Rp24763
(dp24764
g14
g15
(g2599
tp24765
Rp24766
(dp24767
g20
I00
sg28
g29
sg24
g2603
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp24768
g36
g37
stp24769
Rp24770
(dp24771
g41
S'environ_items'
p24772
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp24773
sg72
Nsg69
Nsg79
Nsg43
g2611
sg65
g24755
sg71
I00
sg73
Nsg74
I00
sg75
g2611
sg76
Nsg77
(lp24774
sg80
Nsb(dp24775
sg1
(g92
g3
Ntp24776
Rp24777
(dp24778
g7
(dp24779
sg9
g1
(g135
g3
Ntp24780
Rp24781
(dp24782
g139
(lp24783
g2611
ag2642
asg14
g15
(g142
tp24784
Rp24785
(dp24786
g20
I00
sg146
S'S\'def getOpString(mean, std_dev):\\n\\n    """\\n    Generate the Operand String to be used in workflow nodes to supply \\n    mean and std deviation to alff workflow nodes\\n\\n    Parameters\\n    ----------\\n\\n    mean: string\\n        mean value in string format\\n\\n    std_dev : string\\n        std deviation value in string format\\n\\n\\n    Returns\\n    -------\\n\\n    op_string : string\\n\\n\\n    """\\n\\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\\n\\n    op_string = str1 + " -mas %s"\\n\\n    return op_string\\n\'\n.'
p24787
sg2642
g23
sg28
g29
sg2611
g23
sbsg148
(dp24788
g24
Nssg150
(lp24789
g24
asg152
Nsbsg51
Nsg70
I00
sg63
(dp24790
sg72
Nsg69
Nsg79
Nsg43
g24
sg65
g24755
sg71
I00
sg73
Nsg74
I00
sg75
g24
sg76
Nsg77
(lp24791
sg80
Nsb(dp24792
sg1
(g92
g3
Ntp24793
Rp24794
(dp24795
g7
(dp24796
sg9
g1
(g10
g3
Ntp24797
Rp24798
(dp24799
g14
g15
(g16
tp24800
Rp24801
(dp24802
g20
I00
sg21
g23
sg24
g23
sg25
g23
sg26
g23
sg27
g23
sg28
g29
sg30
g31
sg32
g1
(g33
g34
(dp24803
g36
g37
stp24804
Rp24805
(dp24806
g41
S'environ_items'
p24807
sg43
g32
sbsg44
g23
sg45
g37
sg46
g23
sg47
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp24808
sg72
Nsg69
Nsg79
Nsg43
g2549
sg65
g24755
sg71
I00
sg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp24809
sg80
Nsb(dp24810
sg1
(g92
g3
Ntp24811
Rp24812
(dp24813
g7
(dp24814
sg9
g1
(g97
g3
Ntp24815
Rp24816
(dp24817
g14
g15
(g53
tp24818
Rp24819
(dp24820
g28
g29
sg2530
g23
sg2531
g23
sg2532
I0
sbsg108
(lp24821
g2532
ag2530
ag2531
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp24822
sg72
Nsg69
Nsg79
Nsg43
g111
sg65
g24755
sg71
I00
sg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp24823
sg80
Nsb(dp24824
sg1
(g92
g3
Ntp24825
Rp24826
(dp24827
g7
(dp24828
sg9
g1
(g2595
g3
Ntp24829
Rp24830
(dp24831
g14
g15
(g2599
tp24832
Rp24833
(dp24834
g20
I00
sg28
g29
sg24
g2624
sg2604
g23
sg26
g23
sg30
g31
sg32
g1
(g33
g34
(dp24835
g36
g37
stp24836
Rp24837
(dp24838
g41
S'environ_items'
p24839
sg43
g32
sbsg44
g23
sg2580
g23
sg45
g37
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg70
I00
sg63
(dp24840
sg72
Nsg69
Nsg79
Nsg43
g2631
sg65
g24755
sg71
I00
sg73
Nsg74
I00
sg75
g2631
sg76
Nsg77
(lp24841
sg80
Nsb(dp24842
sg1
(g92
g3
Ntp24843
Rp24844
(dp24845
g7
(dp24846
sg9
g1
(g97
g3
Ntp24847
Rp24848
(dp24849
g14
g15
(g53
tp24850
Rp24851
(dp24852
g28
g29
sg2548
g23
sg2549
g23
sbsg108
(lp24853
g2548
ag2549
asg110
I01
sbsg51
Nsg70
I00
sg63
(dp24854
sg72
Nsg69
Nsg79
Nsg43
g127
sg65
g24755
sg71
I00
sg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp24855
sg80
Nsb(dp24856
ssg159
(dp24857
g24741
(dp24858
g24794
(dp24859
g163
(lp24860
(g25
g44
tp24861
assg24844
(dp24862
g163
(lp24863
(g25
g2548
tp24864
assg24826
(dp24865
g163
(lp24866
(g25
g44
tp24867
assg24759
(dp24868
g163
(lp24869
(g25
g44
tp24870
asssg24759
(dp24871
g24777
(dp24872
g163
(lp24873
(g2689
g2611
tp24874
asssg24777
(dp24875
g24794
(dp24876
g163
(lp24877
(g24
g24
tp24878
asssg24794
(dp24879
g24844
(dp24880
g163
(lp24881
(g25
g2549
tp24882
asssg24812
(dp24883
g24794
(dp24884
g163
(lp24885
(g2531
g47
tp24886
assg24759
(dp24887
g163
(lp24888
(g2531
g2580
tp24889
assg24741
(dp24890
g163
(lp24891
(g2530
g44
tp24892
a(g2531
g2580
tp24893
a(g2532
g2532
tp24894
assg24826
(dp24895
g163
(lp24896
(g2531
g2580
tp24897
asssg24826
(dp24898
g24777
(dp24899
g163
(lp24900
(g2689
g2642
tp24901
asssg24844
(dp24902
ssg174
g24857
sg175
(dp24903
g24741
(dp24904
g24812
g24890
ssg24759
(dp24905
g24741
g24868
sg24812
g24887
ssg24777
(dp24906
g24759
g24872
sg24826
g24899
ssg24794
(dp24907
g24741
g24859
sg24812
g24884
sg24777
g24876
ssg24812
(dp24908
sg24826
(dp24909
g24741
g24865
sg24812
g24895
ssg24844
(dp24910
g24794
g24880
sg24741
g24862
sssg157
(dp24911
sg180
g24857
sbsg43
g24755
sg65
g66
sg75
g24755
sg76
g181
((lp24912
(lp24913
g184
ag181
((lp24914
(lp24915
g187
ag184
aa(lp24916
g189
ag190
aa(lp24917
g192
ag193
aa(lp24918
g195
ag196
aa(lp24919
g198
ag199
aa(lp24920
g201
ag106
aa(lp24921
g203
ag204
aa(lp24922
g206
ag207
aatp24923
Rp24924
aa(lp24925
g211
ag181
((lp24926
(lp24927
g187
ag211
aa(lp24928
g215
ag216
aa(lp24929
g218
ag219
aa(lp24930
g221
ag222
aa(lp24931
g224
ag225
aa(lp24932
g227
ag228
aa(lp24933
g230
ag231
aa(lp24934
g233
ag234
aa(lp24935
g236
ag237
aa(lp24936
g239
ag240
aa(lp24937
g242
ag243
aa(lp24938
g245
ag246
aa(lp24939
g248
ag249
aa(lp24940
g251
ag252
aa(lp24941
g254
ag255
aa(lp24942
g257
ag258
aa(lp24943
g260
ag261
aa(lp24944
g263
ag264
aa(lp24945
g266
ag267
aatp24946
Rp24947
aa(lp24948
g271
ag181
((lp24949
(lp24950
g187
ag271
aa(lp24951
g275
ag276
aatp24952
Rp24953
aatp24954
Rp24955
sg80
Nsbtp24956
a(g1856
g1
(g81
g3
Ntp24957
Rp24958
(dp24959
g85
g1
(g86
g3
Ntp24960
Rp24961
(dp24962
g90
(dp24963
g1
(g92
g3
Ntp24964
Rp24965
(dp24966
g7
(dp24967
sg9
g1
(g3632
g3
Ntp24968
Rp24969
(dp24970
g14
g15
(g3636
tp24971
Rp24972
(dp24973
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp24974
tp24975
Rp24976
(dp24977
g41
S'environ_items'
p24978
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp24979
sg65
S'apply_ants_warp_functional_brain_mask_to_standard_1'
p24980
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp24981
sg79
Nsg80
Nsb(dp24982
sg1
(g92
g3
Ntp24983
Rp24984
(dp24985
g7
(dp24986
sg9
g1
(g97
g3
Ntp24987
Rp24988
(dp24989
g14
g15
(g53
tp24990
Rp24991
(dp24992
g28
g29
sg3620
I0
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g12177
sbsg108
(lp24993
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp24994
sg65
g24980
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp24995
sg79
Nsg80
Nsb(dp24996
sg1
(g92
g3
Ntp24997
Rp24998
(dp24999
g7
(dp25000
sg9
g1
(g97
g3
Ntp25001
Rp25002
(dp25003
g14
g15
(g53
tp25004
Rp25005
(dp25006
g28
g29
sg3640
g23
sbsg108
(lp25007
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25008
sg65
g24980
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25009
sg79
Nsg80
Nsb(dp25010
ssg157
(dp25011
sg159
(dp25012
g24965
(dp25013
g24998
(dp25014
g163
(lp25015
(g3640
g3640
tp25016
asssg24984
(dp25017
g24965
(dp25018
g163
(lp25019
(g3622
g3622
tp25020
a(g3621
g3621
tp25021
a(g3320
g3320
tp25022
a(g3371
g3371
tp25023
a(g3620
g3620
tp25024
a(g3344
g3344
tp25025
asssg24998
(dp25026
ssg174
g25012
sg175
(dp25027
g24965
(dp25028
g24984
g25018
ssg24984
(dp25029
sg24998
(dp25030
g24965
g25014
sssg180
g25012
sbsg43
g24980
sg65
g66
sg75
g24980
sg76
g181
((lp25031
(lp25032
g184
ag181
((lp25033
(lp25034
g187
ag184
aa(lp25035
g189
ag190
aa(lp25036
g192
ag193
aa(lp25037
g195
ag196
aa(lp25038
g198
ag199
aa(lp25039
g201
ag106
aa(lp25040
g203
ag204
aa(lp25041
g206
ag207
aatp25042
Rp25043
aa(lp25044
g211
ag181
((lp25045
(lp25046
g187
ag211
aa(lp25047
g215
ag216
aa(lp25048
g218
ag219
aa(lp25049
g221
ag222
aa(lp25050
g224
ag225
aa(lp25051
g227
ag228
aa(lp25052
g230
ag231
aa(lp25053
g233
ag234
aa(lp25054
g236
ag237
aa(lp25055
g239
ag240
aa(lp25056
g242
ag243
aa(lp25057
g245
ag246
aa(lp25058
g248
ag249
aa(lp25059
g251
ag252
aa(lp25060
g254
ag255
aa(lp25061
g257
ag258
aa(lp25062
g260
ag261
aa(lp25063
g263
ag264
aa(lp25064
g266
ag267
aatp25065
Rp25066
aa(lp25067
g271
ag181
((lp25068
(lp25069
g187
ag271
aa(lp25070
g275
ag276
aatp25071
Rp25072
aatp25073
Rp25074
sg80
Nsbtp25075
a(g1856
g1265
tp25076
a(g1856
g5203
tp25077
a(g1856
g5241
tp25078
a(g1856
g17277
tp25079
a(g1856
g1164
tp25080
a(g1856
g1
(g81
g3
Ntp25081
Rp25082
(dp25083
g85
g1
(g86
g3
Ntp25084
Rp25085
(dp25086
g90
(dp25087
g1
(g92
g3
Ntp25088
Rp25089
(dp25090
g7
(dp25091
sg9
g1
(g97
g3
Ntp25092
Rp25093
(dp25094
g14
g15
(g53
tp25095
Rp25096
(dp25097
g3945
I01
sg3946
g23
sg3947
g23
sg3948
g23
sg3949
I01
sg28
g29
sbsg108
(lp25098
g3946
ag3947
ag3948
ag3949
ag3945
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp25099
sg65
S'temporal_dual_regression_1'
p25100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp25101
sg79
Nsg80
Nsb(dp25102
sg1
(g92
g3
Ntp25103
Rp25104
(dp25105
g7
(dp25106
sg9
g1
(g3959
g3
Ntp25107
Rp25108
(dp25109
g14
g15
(g3963
tp25110
Rp25111
(dp25112
g20
I00
sg28
g29
sg26
g23
sg3967
g3968
sg30
g31
sg32
g1
(g33
g34
(dp25113
g36
g37
stp25114
Rp25115
(dp25116
g41
S'environ_items'
p25117
sg43
g32
sbsg44
g23
sg45
g37
sg3371
g3974
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g3975
sg63
(dp25118
sg65
g25100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3975
sg76
Nsg77
(lp25119
sg79
Nsg80
Nsb(dp25120
sg1
(g92
g3
Ntp25121
Rp25122
(dp25123
g7
(dp25124
sg9
g1
(g97
g3
Ntp25125
Rp25126
(dp25127
g14
g15
(g53
tp25128
Rp25129
(dp25130
g3989
g23
sg28
g29
sg3990
g23
sg3991
g23
sbsg108
(lp25131
g3990
ag3991
ag3989
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25132
sg65
g25100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25133
sg79
Nsg80
Nsb(dp25134
sg1
(g92
g3
Ntp25135
Rp25136
(dp25137
g7
(dp25138
sg9
g1
(g135
g3
Ntp25139
Rp25140
(dp25141
g139
(lp25142
g44
asg14
g15
(g142
tp25143
Rp25144
(dp25145
g20
I00
sg28
g29
sg146
S'S"def check_ts(in_file):\\n    import numpy as np\\n    timepoints, rois = np.loadtxt(in_file).shape\\n    if rois > timepoints:\\n        message = (\'\\\\n\\\\n\\\\n****The number of timepoints (\' + str(timepoints)\\n                   + \') is smaller than the number of ROIs to run (\'\\n                   + str(rois) + \') - therefore the GLM is\'\\n                   + \' underspecified and can\\\\\'t run.****\\\\n\\\\n\\\\n\')\\n        print(message)\\n        raise Exception(message)\\n    else:\\n        return in_file\\n"\n.'
p25146
sg44
g23
sbsg148
(dp25147
g25
Nssg150
(lp25148
g25
asg152
Nsbsg51
Nsg43
g4050
sg63
(dp25149
sg65
g25100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4050
sg76
Nsg77
(lp25150
sg79
Nsg80
Nsb(dp25151
sg1
(g92
g3
Ntp25152
Rp25153
(dp25154
g7
(dp25155
sg9
g1
(g4000
g3
Ntp25156
Rp25157
(dp25158
g14
g15
(g4004
tp25159
Rp25160
(dp25161
g28
g29
sg4008
g23
sg4009
g23
sg750
g23
sg4010
g23
sg4011
g23
sg4012
g23
sg4013
g23
sg4014
g23
sg44
g23
sg3949
g23
sg4015
g23
sg20
I00
sg4016
g23
sg26
g23
sg4017
g4018
sg30
g31
sg4019
g23
sg4020
g23
sg4021
g23
sg4022
g23
sg25
g4023
sg4024
g23
sg32
g1
(g33
g34
(dp25162
g36
g37
stp25163
Rp25164
(dp25165
g41
S'environ_items'
p25166
sg43
g32
sbsg45
g37
sg4030
g23
sg4031
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g4032
sg63
(dp25167
sg65
g25100
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4032
sg76
Nsg77
(lp25168
sg79
Nsg80
Nsb(dp25169
ssg157
(dp25170
sg159
(dp25171
g25089
(dp25172
g25136
(dp25173
g163
(lp25174
(g3947
g44
tp25175
assg25153
(dp25176
g163
(lp25177
(g3946
g44
tp25178
a(g3949
g3949
tp25179
a(g3945
g4030
tp25180
a(g3948
g750
tp25181
asssg25104
(dp25182
g25122
(dp25183
g163
(lp25184
(g4069
g3989
tp25185
asssg25122
(dp25186
sg25136
(dp25187
g25153
(dp25188
g163
(lp25189
(g25
g4013
tp25190
asssg25153
(dp25191
g25122
(dp25192
g163
(lp25193
(g25
g3990
tp25194
a(g4076
g3991
tp25195
assg25104
(dp25196
g163
(lp25197
(g4076
g44
tp25198
assssg174
g25171
sg175
(dp25199
g25089
(dp25200
sg25104
(dp25201
g25153
g25196
ssg25122
(dp25202
g25153
g25192
sg25104
g25183
ssg25136
(dp25203
g25089
g25173
ssg25153
(dp25204
g25089
g25176
sg25136
g25188
sssg180
g25171
sbsg43
g25100
sg65
g66
sg75
g25100
sg76
g181
((lp25205
(lp25206
g184
ag181
((lp25207
(lp25208
g187
ag184
aa(lp25209
g189
ag190
aa(lp25210
g192
ag193
aa(lp25211
g195
ag196
aa(lp25212
g198
ag199
aa(lp25213
g201
ag106
aa(lp25214
g203
ag204
aa(lp25215
g206
ag207
aatp25216
Rp25217
aa(lp25218
g211
ag181
((lp25219
(lp25220
g187
ag211
aa(lp25221
g215
ag216
aa(lp25222
g218
ag219
aa(lp25223
g221
ag222
aa(lp25224
g224
ag225
aa(lp25225
g227
ag228
aa(lp25226
g230
ag231
aa(lp25227
g233
ag234
aa(lp25228
g236
ag237
aa(lp25229
g239
ag240
aa(lp25230
g242
ag243
aa(lp25231
g245
ag246
aa(lp25232
g248
ag249
aa(lp25233
g251
ag252
aa(lp25234
g254
ag255
aa(lp25235
g257
ag258
aa(lp25236
g260
ag261
aa(lp25237
g263
ag264
aa(lp25238
g266
ag267
aatp25239
Rp25240
aa(lp25241
g271
ag181
((lp25242
(lp25243
g187
ag271
aa(lp25244
g275
ag276
aatp25245
Rp25246
aatp25247
Rp25248
sg80
Nsbtp25249
a(g1856
g1
(g81
g3
Ntp25250
Rp25251
(dp25252
g85
g1
(g86
g3
Ntp25253
Rp25254
(dp25255
g90
(dp25256
g1
(g92
g3
Ntp25257
Rp25258
(dp25259
g7
(dp25260
sg9
g1
(g97
g3
Ntp25261
Rp25262
(dp25263
g14
g15
(g53
tp25264
Rp25265
(dp25266
g28
g29
sg3640
g23
sbsg108
(lp25267
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25268
sg65
S'apply_ants_warp_mean_functional_in_mni_1'
p25269
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25270
sg79
Nsg80
Nsb(dp25271
sg1
(g92
g3
Ntp25272
Rp25273
(dp25274
g7
(dp25275
sg9
g1
(g97
g3
Ntp25276
Rp25277
(dp25278
g14
g15
(g53
tp25279
Rp25280
(dp25281
g28
g29
sg3620
I0
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp25282
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp25283
sg65
g25269
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp25284
sg79
Nsg80
Nsb(dp25285
sg1
(g92
g3
Ntp25286
Rp25287
(dp25288
g7
(dp25289
sg9
g1
(g3632
g3
Ntp25290
Rp25291
(dp25292
g14
g15
(g3636
tp25293
Rp25294
(dp25295
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp25296
tp25297
Rp25298
(dp25299
g41
S'environ_items'
p25300
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp25301
sg65
g25269
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp25302
sg79
Nsg80
Nsb(dp25303
ssg157
(dp25304
sg159
(dp25305
g25258
(dp25306
sg25273
(dp25307
g25287
(dp25308
g163
(lp25309
(g3622
g3622
tp25310
a(g3621
g3621
tp25311
a(g3320
g3320
tp25312
a(g3371
g3371
tp25313
a(g3620
g3620
tp25314
a(g3344
g3344
tp25315
asssg25287
(dp25316
g25258
(dp25317
g163
(lp25318
(g3640
g3640
tp25319
assssg174
g25305
sg175
(dp25320
g25258
(dp25321
g25287
g25317
ssg25273
(dp25322
sg25287
(dp25323
g25273
g25308
sssg180
g25305
sbsg43
g25269
sg65
g66
sg75
g25269
sg76
g181
((lp25324
(lp25325
g184
ag181
((lp25326
(lp25327
g187
ag184
aa(lp25328
g189
ag190
aa(lp25329
g192
ag193
aa(lp25330
g195
ag196
aa(lp25331
g198
ag199
aa(lp25332
g201
ag106
aa(lp25333
g203
ag204
aa(lp25334
g206
ag207
aatp25335
Rp25336
aa(lp25337
g211
ag181
((lp25338
(lp25339
g187
ag211
aa(lp25340
g215
ag216
aa(lp25341
g218
ag219
aa(lp25342
g221
ag222
aa(lp25343
g224
ag225
aa(lp25344
g227
ag228
aa(lp25345
g230
ag231
aa(lp25346
g233
ag234
aa(lp25347
g236
ag237
aa(lp25348
g239
ag240
aa(lp25349
g242
ag243
aa(lp25350
g245
ag246
aa(lp25351
g248
ag249
aa(lp25352
g251
ag252
aa(lp25353
g254
ag255
aa(lp25354
g257
ag258
aa(lp25355
g260
ag261
aa(lp25356
g263
ag264
aa(lp25357
g266
ag267
aatp25358
Rp25359
aa(lp25360
g271
ag181
((lp25361
(lp25362
g187
ag271
aa(lp25363
g275
ag276
aatp25364
Rp25365
aatp25366
Rp25367
sg80
Nsbtp25368
a(g1856
g3929
tp25369
a(g1856
g1
(g81
g3
Ntp25370
Rp25371
(dp25372
g85
g1
(g86
g3
Ntp25373
Rp25374
(dp25375
g90
(dp25376
g1
(g92
g3
Ntp25377
Rp25378
(dp25379
g7
(dp25380
sg9
g1
(g97
g3
Ntp25381
Rp25382
(dp25383
g14
g15
(g53
tp25384
Rp25385
(dp25386
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g1888
sbsg108
(lp25387
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp25388
sg65
S'log_func_preproc_automask_0'
p25389
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp25390
sg79
Nsg80
Nsb(dp25391
sg1
(g92
g3
Ntp25392
Rp25393
(dp25394
g7
(dp25395
sg9
g1
(g97
g3
Ntp25396
Rp25397
(dp25398
g14
g15
(g53
tp25399
Rp25400
(dp25401
g28
g29
sg25
g23
sbsg108
(lp25402
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25403
sg65
g25389
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25404
sg79
Nsg80
Nsb(dp25405
sg1
(g92
g3
Ntp25406
Rp25407
(dp25408
g7
(dp25409
sg9
g1
(g135
g3
Ntp25410
Rp25411
(dp25412
g139
(lp25413
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp25414
Rp25415
(dp25416
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p25417
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp25418
g25
Nssg150
(lp25419
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp25420
sg65
g25389
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp25421
sg79
Nsg80
Nsb(dp25422
ssg157
(dp25423
sg159
(dp25424
g25378
(dp25425
g25407
(dp25426
g163
(lp25427
(g107
g107
tp25428
a(g105
g105
tp25429
a(g104
g104
tp25430
a(g14
g14
tp25431
asssg25393
(dp25432
sg25407
(dp25433
g25393
(dp25434
g163
(lp25435
(g25
g25
tp25436
assssg174
g25424
sg175
(dp25437
g25378
(dp25438
sg25393
(dp25439
g25407
g25434
ssg25407
(dp25440
g25378
g25426
sssg180
g25424
sbsg43
g25389
sg65
g66
sg75
g25389
sg76
g181
((lp25441
(lp25442
g184
ag181
((lp25443
(lp25444
g187
ag184
aa(lp25445
g189
ag190
aa(lp25446
g192
ag193
aa(lp25447
g195
ag196
aa(lp25448
g198
ag199
aa(lp25449
g201
ag106
aa(lp25450
g203
ag204
aa(lp25451
g206
ag207
aatp25452
Rp25453
aa(lp25454
g211
ag181
((lp25455
(lp25456
g187
ag211
aa(lp25457
g215
ag216
aa(lp25458
g218
ag219
aa(lp25459
g221
ag222
aa(lp25460
g224
ag225
aa(lp25461
g227
ag228
aa(lp25462
g230
ag231
aa(lp25463
g233
ag234
aa(lp25464
g236
ag237
aa(lp25465
g239
ag240
aa(lp25466
g242
ag243
aa(lp25467
g245
ag246
aa(lp25468
g248
ag249
aa(lp25469
g251
ag252
aa(lp25470
g254
ag255
aa(lp25471
g257
ag258
aa(lp25472
g260
ag261
aa(lp25473
g263
ag264
aa(lp25474
g266
ag267
aatp25475
Rp25476
aa(lp25477
g271
ag181
((lp25478
(lp25479
g187
ag271
aa(lp25480
g275
ag276
aatp25481
Rp25482
aatp25483
Rp25484
sg80
Nsbtp25485
a(g1856
g890
tp25486
a(g1856
g4909
tp25487
a(g1856
g1
(g81
g3
Ntp25488
Rp25489
(dp25490
g85
g1
(g86
g3
Ntp25491
Rp25492
(dp25493
g90
(dp25494
g1
(g92
g3
Ntp25495
Rp25496
(dp25497
g7
(dp25498
sg9
g1
(g97
g3
Ntp25499
Rp25500
(dp25501
g14
g15
(g53
tp25502
Rp25503
(dp25504
g28
g29
sg3620
I0
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g12177
sbsg108
(lp25505
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp25506
sg65
S'apply_ants_warp_functional_brain_mask_to_standard_0'
p25507
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp25508
sg79
Nsg80
Nsb(dp25509
sg1
(g92
g3
Ntp25510
Rp25511
(dp25512
g7
(dp25513
sg9
g1
(g3632
g3
Ntp25514
Rp25515
(dp25516
g14
g15
(g3636
tp25517
Rp25518
(dp25519
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp25520
tp25521
Rp25522
(dp25523
g41
S'environ_items'
p25524
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp25525
sg65
g25507
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp25526
sg79
Nsg80
Nsb(dp25527
sg1
(g92
g3
Ntp25528
Rp25529
(dp25530
g7
(dp25531
sg9
g1
(g97
g3
Ntp25532
Rp25533
(dp25534
g14
g15
(g53
tp25535
Rp25536
(dp25537
g28
g29
sg3640
g23
sbsg108
(lp25538
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25539
sg65
g25507
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25540
sg79
Nsg80
Nsb(dp25541
ssg157
(dp25542
sg159
(dp25543
g25496
(dp25544
g25511
(dp25545
g163
(lp25546
(g3622
g3622
tp25547
a(g3621
g3621
tp25548
a(g3320
g3320
tp25549
a(g3371
g3371
tp25550
a(g3620
g3620
tp25551
a(g3344
g3344
tp25552
asssg25511
(dp25553
g25529
(dp25554
g163
(lp25555
(g3640
g3640
tp25556
asssg25529
(dp25557
ssg174
g25543
sg175
(dp25558
g25496
(dp25559
sg25511
(dp25560
g25496
g25545
ssg25529
(dp25561
g25511
g25554
sssg180
g25543
sbsg43
g25507
sg65
g66
sg75
g25507
sg76
g181
((lp25562
(lp25563
g184
ag181
((lp25564
(lp25565
g187
ag184
aa(lp25566
g189
ag190
aa(lp25567
g192
ag193
aa(lp25568
g195
ag196
aa(lp25569
g198
ag199
aa(lp25570
g201
ag106
aa(lp25571
g203
ag204
aa(lp25572
g206
ag207
aatp25573
Rp25574
aa(lp25575
g211
ag181
((lp25576
(lp25577
g187
ag211
aa(lp25578
g215
ag216
aa(lp25579
g218
ag219
aa(lp25580
g221
ag222
aa(lp25581
g224
ag225
aa(lp25582
g227
ag228
aa(lp25583
g230
ag231
aa(lp25584
g233
ag234
aa(lp25585
g236
ag237
aa(lp25586
g239
ag240
aa(lp25587
g242
ag243
aa(lp25588
g245
ag246
aa(lp25589
g248
ag249
aa(lp25590
g251
ag252
aa(lp25591
g254
ag255
aa(lp25592
g257
ag258
aa(lp25593
g260
ag261
aa(lp25594
g263
ag264
aa(lp25595
g266
ag267
aatp25596
Rp25597
aa(lp25598
g271
ag181
((lp25599
(lp25600
g187
ag271
aa(lp25601
g275
ag276
aatp25602
Rp25603
aatp25604
Rp25605
sg80
Nsbtp25606
a(g1856
g5560
tp25607
a(g1856
g21796
tp25608
a(g1856
g5051
tp25609
a(g1856
g5417
tp25610
a(g1856
g1708
tp25611
a(g1856
g5456
tp25612
a(g1856
g22585
tp25613
a(g1856
g2514
tp25614
a(g1856
g20101
tp25615
a(g1856
g5599
tp25616
a(g1856
g5618
tp25617
a(g1856
g24160
tp25618
a(g1856
g17003
tp25619
a(g1856
g5675
tp25620
a(g24487
g1
(g81
g3
Ntp25621
Rp25622
(dp25623
g85
g1
(g86
g3
Ntp25624
Rp25625
(dp25626
g90
(dp25627
g1
(g92
g3
Ntp25628
Rp25629
(dp25630
g7
(dp25631
sg9
g1
(g97
g3
Ntp25632
Rp25633
(dp25634
g14
g15
(g53
tp25635
Rp25636
(dp25637
g28
g29
sg25
g23
sbsg108
(lp25638
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25639
sg65
S'log_fristons_parameter_model_0'
p25640
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25641
sg79
Nsg80
Nsb(dp25642
sg1
(g92
g3
Ntp25643
Rp25644
(dp25645
g7
(dp25646
sg9
g1
(g97
g3
Ntp25647
Rp25648
(dp25649
g14
g15
(g53
tp25650
Rp25651
(dp25652
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g24506
sbsg108
(lp25653
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp25654
sg65
g25640
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp25655
sg79
Nsg80
Nsb(dp25656
sg1
(g92
g3
Ntp25657
Rp25658
(dp25659
g7
(dp25660
sg9
g1
(g135
g3
Ntp25661
Rp25662
(dp25663
g139
(lp25664
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp25665
Rp25666
(dp25667
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p25668
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp25669
g25
Nssg150
(lp25670
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp25671
sg65
g25640
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp25672
sg79
Nsg80
Nsb(dp25673
ssg157
(dp25674
sg159
(dp25675
g25629
(dp25676
sg25644
(dp25677
g25658
(dp25678
g163
(lp25679
(g107
g107
tp25680
a(g105
g105
tp25681
a(g104
g104
tp25682
a(g14
g14
tp25683
asssg25658
(dp25684
g25629
(dp25685
g163
(lp25686
(g25
g25
tp25687
assssg174
g25675
sg175
(dp25688
g25629
(dp25689
g25658
g25685
ssg25644
(dp25690
sg25658
(dp25691
g25644
g25678
sssg180
g25675
sbsg43
g25640
sg65
g66
sg75
g25640
sg76
g181
((lp25692
(lp25693
g184
ag181
((lp25694
(lp25695
g187
ag184
aa(lp25696
g189
ag190
aa(lp25697
g192
ag193
aa(lp25698
g195
ag196
aa(lp25699
g198
ag199
aa(lp25700
g201
ag106
aa(lp25701
g203
ag204
aa(lp25702
g206
ag207
aatp25703
Rp25704
aa(lp25705
g211
ag181
((lp25706
(lp25707
g187
ag211
aa(lp25708
g215
ag216
aa(lp25709
g218
ag219
aa(lp25710
g221
ag222
aa(lp25711
g224
ag225
aa(lp25712
g227
ag228
aa(lp25713
g230
ag231
aa(lp25714
g233
ag234
aa(lp25715
g236
ag237
aa(lp25716
g239
ag240
aa(lp25717
g242
ag243
aa(lp25718
g245
ag246
aa(lp25719
g248
ag249
aa(lp25720
g251
ag252
aa(lp25721
g254
ag255
aa(lp25722
g257
ag258
aa(lp25723
g260
ag261
aa(lp25724
g263
ag264
aa(lp25725
g266
ag267
aatp25726
Rp25727
aa(lp25728
g271
ag181
((lp25729
(lp25730
g187
ag271
aa(lp25731
g275
ag276
aatp25732
Rp25733
aatp25734
Rp25735
sg80
Nsbtp25736
a(g24487
g4670
tp25737
a(g24487
g12016
tp25738
a(g24487
g24160
tp25739
a(g22072
g17003
tp25740
a(g24160
g1
(g81
g3
Ntp25741
Rp25742
(dp25743
g85
g1
(g86
g3
Ntp25744
Rp25745
(dp25746
g90
(dp25747
g1
(g92
g3
Ntp25748
Rp25749
(dp25750
g7
(dp25751
sg9
g1
(g97
g3
Ntp25752
Rp25753
(dp25754
g14
g15
(g53
tp25755
Rp25756
(dp25757
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g24182
sbsg108
(lp25758
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp25759
sg65
S'log_gen_motion_stats_0'
p25760
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp25761
sg79
Nsg80
Nsb(dp25762
sg1
(g92
g3
Ntp25763
Rp25764
(dp25765
g7
(dp25766
sg9
g1
(g97
g3
Ntp25767
Rp25768
(dp25769
g14
g15
(g53
tp25770
Rp25771
(dp25772
g28
g29
sg25
g23
sbsg108
(lp25773
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25774
sg65
g25760
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25775
sg79
Nsg80
Nsb(dp25776
sg1
(g92
g3
Ntp25777
Rp25778
(dp25779
g7
(dp25780
sg9
g1
(g135
g3
Ntp25781
Rp25782
(dp25783
g139
(lp25784
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp25785
Rp25786
(dp25787
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p25788
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp25789
g25
Nssg150
(lp25790
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp25791
sg65
g25760
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp25792
sg79
Nsg80
Nsb(dp25793
ssg157
(dp25794
sg159
(dp25795
g25749
(dp25796
g25778
(dp25797
g163
(lp25798
(g107
g107
tp25799
a(g105
g105
tp25800
a(g104
g104
tp25801
a(g14
g14
tp25802
asssg25764
(dp25803
sg25778
(dp25804
g25764
(dp25805
g163
(lp25806
(g25
g25
tp25807
assssg174
g25795
sg175
(dp25808
g25749
(dp25809
sg25764
(dp25810
g25778
g25805
ssg25778
(dp25811
g25749
g25797
sssg180
g25795
sbsg43
g25760
sg65
g66
sg75
g25760
sg76
g181
((lp25812
(lp25813
g184
ag181
((lp25814
(lp25815
g187
ag184
aa(lp25816
g189
ag190
aa(lp25817
g192
ag193
aa(lp25818
g195
ag196
aa(lp25819
g198
ag199
aa(lp25820
g201
ag106
aa(lp25821
g203
ag204
aa(lp25822
g206
ag207
aatp25823
Rp25824
aa(lp25825
g211
ag181
((lp25826
(lp25827
g187
ag211
aa(lp25828
g215
ag216
aa(lp25829
g218
ag219
aa(lp25830
g221
ag222
aa(lp25831
g224
ag225
aa(lp25832
g227
ag228
aa(lp25833
g230
ag231
aa(lp25834
g233
ag234
aa(lp25835
g236
ag237
aa(lp25836
g239
ag240
aa(lp25837
g242
ag243
aa(lp25838
g245
ag246
aa(lp25839
g248
ag249
aa(lp25840
g251
ag252
aa(lp25841
g254
ag255
aa(lp25842
g257
ag258
aa(lp25843
g260
ag261
aa(lp25844
g263
ag264
aa(lp25845
g266
ag267
aatp25846
Rp25847
aa(lp25848
g271
ag181
((lp25849
(lp25850
g187
ag271
aa(lp25851
g275
ag276
aatp25852
Rp25853
aatp25854
Rp25855
sg80
Nsbtp25856
a(g24160
g4670
tp25857
a(g4670
g1
(g81
g3
Ntp25858
Rp25859
(dp25860
g85
g1
(g86
g3
Ntp25861
Rp25862
(dp25863
g90
(dp25864
g1
(g92
g3
Ntp25865
Rp25866
(dp25867
g7
(dp25868
sg9
g1
(g3632
g3
Ntp25869
Rp25870
(dp25871
g14
g15
(g3636
tp25872
Rp25873
(dp25874
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp25875
tp25876
Rp25877
(dp25878
g41
S'environ_items'
p25879
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp25880
sg65
S'apply_ants_warp_functional_mni_1'
p25881
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp25882
sg79
Nsg80
Nsb(dp25883
sg1
(g92
g3
Ntp25884
Rp25885
(dp25886
g7
(dp25887
sg9
g1
(g97
g3
Ntp25888
Rp25889
(dp25890
g14
g15
(g53
tp25891
Rp25892
(dp25893
g28
g29
sg3620
I3
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp25894
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp25895
sg65
g25881
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp25896
sg79
Nsg80
Nsb(dp25897
sg1
(g92
g3
Ntp25898
Rp25899
(dp25900
g7
(dp25901
sg9
g1
(g97
g3
Ntp25902
Rp25903
(dp25904
g14
g15
(g53
tp25905
Rp25906
(dp25907
g28
g29
sg3640
g23
sbsg108
(lp25908
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp25909
sg65
g25881
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp25910
sg79
Nsg80
Nsb(dp25911
ssg157
(dp25912
sg159
(dp25913
g25866
(dp25914
g25899
(dp25915
g163
(lp25916
(g3640
g3640
tp25917
asssg25885
(dp25918
g25866
(dp25919
g163
(lp25920
(g3622
g3622
tp25921
a(g3621
g3621
tp25922
a(g3320
g3320
tp25923
a(g3371
g3371
tp25924
a(g3620
g3620
tp25925
a(g3344
g3344
tp25926
asssg25899
(dp25927
ssg174
g25913
sg175
(dp25928
g25866
(dp25929
g25885
g25919
ssg25885
(dp25930
sg25899
(dp25931
g25866
g25915
sssg180
g25913
sbsg43
g25881
sg65
g66
sg75
g25881
sg76
g181
((lp25932
(lp25933
g184
ag181
((lp25934
(lp25935
g187
ag184
aa(lp25936
g189
ag190
aa(lp25937
g192
ag193
aa(lp25938
g195
ag196
aa(lp25939
g198
ag199
aa(lp25940
g201
ag106
aa(lp25941
g203
ag204
aa(lp25942
g206
ag207
aatp25943
Rp25944
aa(lp25945
g211
ag181
((lp25946
(lp25947
g187
ag211
aa(lp25948
g215
ag216
aa(lp25949
g218
ag219
aa(lp25950
g221
ag222
aa(lp25951
g224
ag225
aa(lp25952
g227
ag228
aa(lp25953
g230
ag231
aa(lp25954
g233
ag234
aa(lp25955
g236
ag237
aa(lp25956
g239
ag240
aa(lp25957
g242
ag243
aa(lp25958
g245
ag246
aa(lp25959
g248
ag249
aa(lp25960
g251
ag252
aa(lp25961
g254
ag255
aa(lp25962
g257
ag258
aa(lp25963
g260
ag261
aa(lp25964
g263
ag264
aa(lp25965
g266
ag267
aatp25966
Rp25967
aa(lp25968
g271
ag181
((lp25969
(lp25970
g187
ag271
aa(lp25971
g275
ag276
aatp25972
Rp25973
aatp25974
Rp25975
sg80
Nsbtp25976
a(g4670
g25082
tp25977
a(g4670
g22585
tp25978
a(g4670
g24734
tp25979
a(g4670
g1
(g81
g3
Ntp25980
Rp25981
(dp25982
g85
g1
(g86
g3
Ntp25983
Rp25984
(dp25985
g90
(dp25986
g1
(g92
g3
Ntp25987
Rp25988
(dp25989
g7
(dp25990
sg9
g1
(g4280
g3
Ntp25991
Rp25992
(dp25993
g14
g15
(g4284
tp25994
Rp25995
(dp25996
g20
I00
sg4288
g23
sg2830
I01
sg25
g23
sg4289
g23
sg4290
g23
sg26
g23
sg2831
g23
sg752
g1875
sg4291
g23
sg30
g31
sg32
g1
(g33
g34
(dp25997
tp25998
Rp25999
(dp26000
g41
S'environ_items'
p26001
sg43
g32
sbsg28
g29
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
g4297
sg63
(dp26002
sg65
S'sca_roi_1'
p26003
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4297
sg76
Nsg77
(lp26004
sg79
Nsg80
Nsb(dp26005
sg1
(g92
g3
Ntp26006
Rp26007
(dp26008
g7
(dp26009
sg9
g1
(g97
g3
Ntp26010
Rp26011
(dp26012
g14
g15
(g53
tp26013
Rp26014
(dp26015
g28
g29
sg4311
g23
sg4312
g23
sbsg108
(lp26016
g4312
ag4311
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26017
sg65
g26003
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26018
sg79
Nsg80
Nsb(dp26019
sg1
(g92
g3
Ntp26020
Rp26021
(dp26022
g7
(dp26023
sg9
g1
(g97
g3
Ntp26024
Rp26025
(dp26026
g14
g15
(g53
tp26027
Rp26028
(dp26029
g4269
g23
sg28
g29
sg4270
g23
sbsg108
(lp26030
g4269
ag4270
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26031
sg65
g26003
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26032
sg79
Nsg80
Nsb(dp26033
sg1
(g92
g3
Ntp26034
Rp26035
(dp26036
g7
(dp26037
sg9
g1
(g135
g3
Ntp26038
Rp26039
(dp26040
g139
(lp26041
g4312
ag4269
asg14
g15
(g142
tp26042
Rp26043
(dp26044
g20
I00
sg4269
g23
sg146
S'S\'def compute_fisher_z_score(correlation_file, timeseries_one_d):\\n\\n    """\\n    Computes the fisher z transform of the input correlation map\\n    If the correlation map contains data for multiple ROIs then \\n    the function returns z score for each ROI as a seperate nifti \\n    file\\n\\n\\n    Parameters\\n    ----------\\n\\n    correlation_file: string\\n        Input correlations file\\n\\n\\n    Returns\\n    -------\\n\\n    out_file : list (nifti files)\\n        list of z_scores for mask or ROI\\n    """\\n\\n    import nibabel as nb\\n    import numpy as np\\n    import os\\n\\n    roi_numbers = []\\n    if \\\'#\\\' in open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\'):\\n        roi_numbers = open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\').replace(\\\'#\\\', \\\'\\\').split(\\\'\\\\t\\\')\\n\\n    corr_img = nb.load(correlation_file)\\n    corr_data = corr_img.get_data()\\n\\n    hdr = corr_img.get_header()\\n\\n    corr_data = np.log((1 + corr_data) / (1 - corr_data)) / 2.0\\n\\n    dims = corr_data.shape\\n\\n    out_file = []\\n\\n    if len(dims) == 5 or len(roi_numbers) > 0:\\n\\n        if len(dims) == 5:\\n            x, y, z, one, roi_number = dims\\n\\n            corr_data = np.reshape(corr_data, (x * y * z, roi_number), order=\\\'F\\\')\\n\\n\\n        for i in range(0, len(roi_numbers)):\\n\\n            sub_data = corr_data\\n            if len(dims) == 5:\\n                sub_data = np.reshape(corr_data[:, i], (x, y, z), order=\\\'F\\\')\\n\\n            sub_img = nb.Nifti1Image(sub_data, header=corr_img.get_header(), affine=corr_img.get_affine())\\n\\n            sub_z_score_file = os.path.join(os.getcwd(), \\\'z_score_ROI_number_%s.nii.gz\\\' % (roi_numbers[i]))\\n\\n            sub_img.to_filename(sub_z_score_file)\\n\\n            out_file.append(sub_z_score_file)\\n\\n    else:\\n\\n        z_score_img = nb.Nifti1Image(corr_data, header=hdr, affine=corr_img.get_affine())\\n\\n        z_score_file = os.path.join(os.getcwd(), \\\'z_score.nii.gz\\\')\\n\\n        z_score_img.to_filename(z_score_file)\\n\\n        out_file.append(z_score_file)\\n\\n\\n    return out_file\\n\'\n.'
p26045
sg4312
g23
sg28
g29
sbsg148
(dp26046
g25
Nssg150
(lp26047
g25
asg152
Nsbsg51
Nsg43
g2549
sg63
(dp26048
sg65
g26003
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp26049
sg79
Nsg80
Nsb(dp26050
ssg157
(dp26051
sg159
(dp26052
g25988
(dp26053
g26007
(dp26054
g163
(lp26055
(g25
g4312
tp26056
assg26035
(dp26057
g163
(lp26058
(g25
g4312
tp26059
asssg26007
(dp26060
sg26021
(dp26061
g25988
(dp26062
g163
(lp26063
(g4269
g4289
tp26064
a(g4270
g2831
tp26065
assg26035
(dp26066
g163
(lp26067
(g4269
g4269
tp26068
asssg26035
(dp26069
g26007
(dp26070
g163
(lp26071
(g25
g4311
tp26072
assssg174
g26052
sg175
(dp26073
g25988
(dp26074
g26021
g26062
ssg26007
(dp26075
g25988
g26054
sg26035
g26070
ssg26021
(dp26076
sg26035
(dp26077
g25988
g26057
sg26021
g26066
sssg180
g26052
sbsg43
g26003
sg65
g66
sg75
g26003
sg76
g181
((lp26078
(lp26079
g184
ag181
((lp26080
(lp26081
g187
ag184
aa(lp26082
g189
ag190
aa(lp26083
g192
ag193
aa(lp26084
g195
ag196
aa(lp26085
g198
ag199
aa(lp26086
g201
ag106
aa(lp26087
g203
ag204
aa(lp26088
g206
ag207
aatp26089
Rp26090
aa(lp26091
g211
ag181
((lp26092
(lp26093
g187
ag211
aa(lp26094
g215
ag216
aa(lp26095
g218
ag219
aa(lp26096
g221
ag222
aa(lp26097
g224
ag225
aa(lp26098
g227
ag228
aa(lp26099
g230
ag231
aa(lp26100
g233
ag234
aa(lp26101
g236
ag237
aa(lp26102
g239
ag240
aa(lp26103
g242
ag243
aa(lp26104
g245
ag246
aa(lp26105
g248
ag249
aa(lp26106
g251
ag252
aa(lp26107
g254
ag255
aa(lp26108
g257
ag258
aa(lp26109
g260
ag261
aa(lp26110
g263
ag264
aa(lp26111
g266
ag267
aatp26112
Rp26113
aa(lp26114
g271
ag181
((lp26115
(lp26116
g187
ag271
aa(lp26117
g275
ag276
aatp26118
Rp26119
aatp26120
Rp26121
sg80
Nsbtp26122
a(g4670
g1
(g81
g3
Ntp26123
Rp26124
(dp26125
g85
g1
(g86
g3
Ntp26126
Rp26127
(dp26128
g90
(dp26129
g1
(g92
g3
Ntp26130
Rp26131
(dp26132
g7
(dp26133
sg9
g1
(g135
g3
Ntp26134
Rp26135
(dp26136
g139
(lp26137
g4312
ag4269
asg14
g15
(g142
tp26138
Rp26139
(dp26140
g20
I00
sg4269
g23
sg146
S'S\'def compute_fisher_z_score(correlation_file, timeseries_one_d):\\n\\n    """\\n    Computes the fisher z transform of the input correlation map\\n    If the correlation map contains data for multiple ROIs then \\n    the function returns z score for each ROI as a seperate nifti \\n    file\\n\\n\\n    Parameters\\n    ----------\\n\\n    correlation_file: string\\n        Input correlations file\\n\\n\\n    Returns\\n    -------\\n\\n    out_file : list (nifti files)\\n        list of z_scores for mask or ROI\\n    """\\n\\n    import nibabel as nb\\n    import numpy as np\\n    import os\\n\\n    roi_numbers = []\\n    if \\\'#\\\' in open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\'):\\n        roi_numbers = open(timeseries_one_d, \\\'r\\\').readline().rstrip(\\\'\\\\r\\\\n\\\').replace(\\\'#\\\', \\\'\\\').split(\\\'\\\\t\\\')\\n\\n    corr_img = nb.load(correlation_file)\\n    corr_data = corr_img.get_data()\\n\\n    hdr = corr_img.get_header()\\n\\n    corr_data = np.log((1 + corr_data) / (1 - corr_data)) / 2.0\\n\\n    dims = corr_data.shape\\n\\n    out_file = []\\n\\n    if len(dims) == 5 or len(roi_numbers) > 0:\\n\\n        if len(dims) == 5:\\n            x, y, z, one, roi_number = dims\\n\\n            corr_data = np.reshape(corr_data, (x * y * z, roi_number), order=\\\'F\\\')\\n\\n\\n        for i in range(0, len(roi_numbers)):\\n\\n            sub_data = corr_data\\n            if len(dims) == 5:\\n                sub_data = np.reshape(corr_data[:, i], (x, y, z), order=\\\'F\\\')\\n\\n            sub_img = nb.Nifti1Image(sub_data, header=corr_img.get_header(), affine=corr_img.get_affine())\\n\\n            sub_z_score_file = os.path.join(os.getcwd(), \\\'z_score_ROI_number_%s.nii.gz\\\' % (roi_numbers[i]))\\n\\n            sub_img.to_filename(sub_z_score_file)\\n\\n            out_file.append(sub_z_score_file)\\n\\n    else:\\n\\n        z_score_img = nb.Nifti1Image(corr_data, header=hdr, affine=corr_img.get_affine())\\n\\n        z_score_file = os.path.join(os.getcwd(), \\\'z_score.nii.gz\\\')\\n\\n        z_score_img.to_filename(z_score_file)\\n\\n        out_file.append(z_score_file)\\n\\n\\n    return out_file\\n\'\n.'
p26141
sg4312
g23
sg28
g29
sbsg148
(dp26142
g25
Nssg150
(lp26143
g25
asg152
Nsbsg51
Nsg43
g2549
sg63
(dp26144
sg65
S'sca_seed_1'
p26145
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g2549
sg76
Nsg77
(lp26146
sg79
Nsg80
Nsb(dp26147
sg1
(g92
g3
Ntp26148
Rp26149
(dp26150
g7
(dp26151
sg9
g1
(g97
g3
Ntp26152
Rp26153
(dp26154
g14
g15
(g53
tp26155
Rp26156
(dp26157
g28
g29
sg4311
g23
sg4312
g23
sbsg108
(lp26158
g4312
ag4311
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26159
sg65
g26145
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26160
sg79
Nsg80
Nsb(dp26161
sg1
(g92
g3
Ntp26162
Rp26163
(dp26164
g7
(dp26165
sg9
g1
(g97
g3
Ntp26166
Rp26167
(dp26168
g14
g15
(g53
tp26169
Rp26170
(dp26171
g4269
g23
sg28
g29
sg4270
g23
sbsg108
(lp26172
g4269
ag4270
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26173
sg65
g26145
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26174
sg79
Nsg80
Nsb(dp26175
sg1
(g92
g3
Ntp26176
Rp26177
(dp26178
g7
(dp26179
sg9
g1
(g4280
g3
Ntp26180
Rp26181
(dp26182
g14
g15
(g4284
tp26183
Rp26184
(dp26185
g20
I00
sg4288
g23
sg2830
I01
sg25
g23
sg4289
g23
sg4290
g23
sg26
g23
sg2831
g23
sg752
g1875
sg4291
g23
sg30
g31
sg32
g1
(g33
g34
(dp26186
tp26187
Rp26188
(dp26189
g41
S'environ_items'
p26190
sg43
g32
sbsg28
g29
sbsg759
g1875
sg49
Nsg50
g31
sbsg51
Nsg43
g4297
sg63
(dp26191
sg65
g26145
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4297
sg76
Nsg77
(lp26192
sg79
Nsg80
Nsb(dp26193
ssg157
(dp26194
sg159
(dp26195
g26131
(dp26196
g26149
(dp26197
g163
(lp26198
(g25
g4311
tp26199
asssg26149
(dp26200
sg26163
(dp26201
g26177
(dp26202
g163
(lp26203
(g4269
g4289
tp26204
a(g4270
g2831
tp26205
assg26131
(dp26206
g163
(lp26207
(g4269
g4269
tp26208
asssg26177
(dp26209
g26131
(dp26210
g163
(lp26211
(g25
g4312
tp26212
assg26149
(dp26213
g163
(lp26214
(g25
g4312
tp26215
assssg174
g26195
sg175
(dp26216
g26131
(dp26217
g26177
g26210
sg26163
g26206
ssg26149
(dp26218
g26177
g26213
sg26131
g26197
ssg26163
(dp26219
sg26177
(dp26220
g26163
g26202
sssg180
g26195
sbsg43
g26145
sg65
g66
sg75
g26145
sg76
g181
((lp26221
(lp26222
g184
ag181
((lp26223
(lp26224
g187
ag184
aa(lp26225
g189
ag190
aa(lp26226
g192
ag193
aa(lp26227
g195
ag196
aa(lp26228
g198
ag199
aa(lp26229
g201
ag106
aa(lp26230
g203
ag204
aa(lp26231
g206
ag207
aatp26232
Rp26233
aa(lp26234
g211
ag181
((lp26235
(lp26236
g187
ag211
aa(lp26237
g215
ag216
aa(lp26238
g218
ag219
aa(lp26239
g221
ag222
aa(lp26240
g224
ag225
aa(lp26241
g227
ag228
aa(lp26242
g230
ag231
aa(lp26243
g233
ag234
aa(lp26244
g236
ag237
aa(lp26245
g239
ag240
aa(lp26246
g242
ag243
aa(lp26247
g245
ag246
aa(lp26248
g248
ag249
aa(lp26249
g251
ag252
aa(lp26250
g254
ag255
aa(lp26251
g257
ag258
aa(lp26252
g260
ag261
aa(lp26253
g263
ag264
aa(lp26254
g266
ag267
aatp26255
Rp26256
aa(lp26257
g271
ag181
((lp26258
(lp26259
g187
ag271
aa(lp26260
g275
ag276
aatp26261
Rp26262
aatp26263
Rp26264
sg80
Nsbtp26265
a(g4670
g1
(g81
g3
Ntp26266
Rp26267
(dp26268
g85
g1
(g86
g3
Ntp26269
Rp26270
(dp26271
g90
(dp26272
g1
(g92
g3
Ntp26273
Rp26274
(dp26275
g7
(dp26276
sg9
g1
(g135
g3
Ntp26277
Rp26278
(dp26279
g139
(lp26280
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp26281
Rp26282
(dp26283
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p26284
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp26285
g25
Nssg150
(lp26286
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp26287
sg65
S'log_scrubbing_0'
p26288
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp26289
sg79
Nsg80
Nsb(dp26290
sg1
(g92
g3
Ntp26291
Rp26292
(dp26293
g7
(dp26294
sg9
g1
(g97
g3
Ntp26295
Rp26296
(dp26297
g14
g15
(g53
tp26298
Rp26299
(dp26300
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g4693
sbsg108
(lp26301
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26302
sg65
g26288
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26303
sg79
Nsg80
Nsb(dp26304
sg1
(g92
g3
Ntp26305
Rp26306
(dp26307
g7
(dp26308
sg9
g1
(g97
g3
Ntp26309
Rp26310
(dp26311
g14
g15
(g53
tp26312
Rp26313
(dp26314
g28
g29
sg25
g23
sbsg108
(lp26315
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26316
sg65
g26288
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26317
sg79
Nsg80
Nsb(dp26318
ssg157
(dp26319
sg159
(dp26320
g26274
(dp26321
g26306
(dp26322
g163
(lp26323
(g25
g25
tp26324
asssg26292
(dp26325
g26274
(dp26326
g163
(lp26327
(g107
g107
tp26328
a(g105
g105
tp26329
a(g104
g104
tp26330
a(g14
g14
tp26331
asssg26306
(dp26332
ssg174
g26320
sg175
(dp26333
g26274
(dp26334
g26292
g26326
ssg26292
(dp26335
sg26306
(dp26336
g26274
g26322
sssg180
g26320
sbsg43
g26288
sg65
g66
sg75
g26288
sg76
g181
((lp26337
(lp26338
g184
ag181
((lp26339
(lp26340
g187
ag184
aa(lp26341
g189
ag190
aa(lp26342
g192
ag193
aa(lp26343
g195
ag196
aa(lp26344
g198
ag199
aa(lp26345
g201
ag106
aa(lp26346
g203
ag204
aa(lp26347
g206
ag207
aatp26348
Rp26349
aa(lp26350
g211
ag181
((lp26351
(lp26352
g187
ag211
aa(lp26353
g215
ag216
aa(lp26354
g218
ag219
aa(lp26355
g221
ag222
aa(lp26356
g224
ag225
aa(lp26357
g227
ag228
aa(lp26358
g230
ag231
aa(lp26359
g233
ag234
aa(lp26360
g236
ag237
aa(lp26361
g239
ag240
aa(lp26362
g242
ag243
aa(lp26363
g245
ag246
aa(lp26364
g248
ag249
aa(lp26365
g251
ag252
aa(lp26366
g254
ag255
aa(lp26367
g257
ag258
aa(lp26368
g260
ag261
aa(lp26369
g263
ag264
aa(lp26370
g266
ag267
aatp26371
Rp26372
aa(lp26373
g271
ag181
((lp26374
(lp26375
g187
ag271
aa(lp26376
g275
ag276
aatp26377
Rp26378
aatp26379
Rp26380
sg80
Nsbtp26381
a(g17277
g1
(g81
g3
Ntp26382
Rp26383
(dp26384
g85
g1
(g86
g3
Ntp26385
Rp26386
(dp26387
g90
(dp26388
g1
(g92
g3
Ntp26389
Rp26390
(dp26391
g7
(dp26392
sg9
g1
(g3632
g3
Ntp26393
Rp26394
(dp26395
g14
g15
(g3636
tp26396
Rp26397
(dp26398
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp26399
tp26400
Rp26401
(dp26402
g41
S'environ_items'
p26403
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp26404
sg65
S'alff_to_standard_1'
p26405
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp26406
sg79
Nsg80
Nsb(dp26407
sg1
(g92
g3
Ntp26408
Rp26409
(dp26410
g7
(dp26411
sg9
g1
(g97
g3
Ntp26412
Rp26413
(dp26414
g14
g15
(g53
tp26415
Rp26416
(dp26417
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp26418
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26419
sg65
g26405
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26420
sg79
Nsg80
Nsb(dp26421
sg1
(g92
g3
Ntp26422
Rp26423
(dp26424
g7
(dp26425
sg9
g1
(g97
g3
Ntp26426
Rp26427
(dp26428
g14
g15
(g53
tp26429
Rp26430
(dp26431
g28
g29
sg3640
g23
sbsg108
(lp26432
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26433
sg65
g26405
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26434
sg79
Nsg80
Nsb(dp26435
ssg157
(dp26436
sg159
(dp26437
g26390
(dp26438
g26423
(dp26439
g163
(lp26440
(g3640
g3640
tp26441
asssg26409
(dp26442
g26390
(dp26443
g163
(lp26444
(g3622
g3622
tp26445
a(g3621
g3621
tp26446
a(g3320
g3320
tp26447
a(g3371
g3371
tp26448
a(g3620
g3620
tp26449
a(g3344
g3344
tp26450
asssg26423
(dp26451
ssg174
g26437
sg175
(dp26452
g26390
(dp26453
g26409
g26443
ssg26409
(dp26454
sg26423
(dp26455
g26390
g26439
sssg180
g26437
sbsg43
g26405
sg65
g66
sg75
g26405
sg76
g181
((lp26456
(lp26457
g184
ag181
((lp26458
(lp26459
g187
ag184
aa(lp26460
g189
ag190
aa(lp26461
g192
ag193
aa(lp26462
g195
ag196
aa(lp26463
g198
ag199
aa(lp26464
g201
ag106
aa(lp26465
g203
ag204
aa(lp26466
g206
ag207
aatp26467
Rp26468
aa(lp26469
g211
ag181
((lp26470
(lp26471
g187
ag211
aa(lp26472
g215
ag216
aa(lp26473
g218
ag219
aa(lp26474
g221
ag222
aa(lp26475
g224
ag225
aa(lp26476
g227
ag228
aa(lp26477
g230
ag231
aa(lp26478
g233
ag234
aa(lp26479
g236
ag237
aa(lp26480
g239
ag240
aa(lp26481
g242
ag243
aa(lp26482
g245
ag246
aa(lp26483
g248
ag249
aa(lp26484
g251
ag252
aa(lp26485
g254
ag255
aa(lp26486
g257
ag258
aa(lp26487
g260
ag261
aa(lp26488
g263
ag264
aa(lp26489
g266
ag267
aatp26490
Rp26491
aa(lp26492
g271
ag181
((lp26493
(lp26494
g187
ag271
aa(lp26495
g275
ag276
aatp26496
Rp26497
aatp26498
Rp26499
sg80
Nsbtp26500
a(g17277
g18554
tp26501
a(g17277
g1
(g81
g3
Ntp26502
Rp26503
(dp26504
g85
g1
(g86
g3
Ntp26505
Rp26506
(dp26507
g90
(dp26508
g1
(g92
g3
Ntp26509
Rp26510
(dp26511
g7
(dp26512
sg9
g1
(g97
g3
Ntp26513
Rp26514
(dp26515
g14
g15
(g53
tp26516
Rp26517
(dp26518
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp26519
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26520
sg65
S'falff_Z_to_standard_0'
p26521
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26522
sg79
Nsg80
Nsb(dp26523
sg1
(g92
g3
Ntp26524
Rp26525
(dp26526
g7
(dp26527
sg9
g1
(g3632
g3
Ntp26528
Rp26529
(dp26530
g14
g15
(g3636
tp26531
Rp26532
(dp26533
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp26534
tp26535
Rp26536
(dp26537
g41
S'environ_items'
p26538
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp26539
sg65
g26521
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp26540
sg79
Nsg80
Nsb(dp26541
sg1
(g92
g3
Ntp26542
Rp26543
(dp26544
g7
(dp26545
sg9
g1
(g97
g3
Ntp26546
Rp26547
(dp26548
g14
g15
(g53
tp26549
Rp26550
(dp26551
g28
g29
sg3640
g23
sbsg108
(lp26552
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26553
sg65
g26521
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26554
sg79
Nsg80
Nsb(dp26555
ssg157
(dp26556
sg159
(dp26557
g26510
(dp26558
g26525
(dp26559
g163
(lp26560
(g3622
g3622
tp26561
a(g3621
g3621
tp26562
a(g3320
g3320
tp26563
a(g3371
g3371
tp26564
a(g3620
g3620
tp26565
a(g3344
g3344
tp26566
asssg26525
(dp26567
g26543
(dp26568
g163
(lp26569
(g3640
g3640
tp26570
asssg26543
(dp26571
ssg174
g26557
sg175
(dp26572
g26510
(dp26573
sg26525
(dp26574
g26510
g26559
ssg26543
(dp26575
g26525
g26568
sssg180
g26557
sbsg43
g26521
sg65
g66
sg75
g26521
sg76
g181
((lp26576
(lp26577
g184
ag181
((lp26578
(lp26579
g187
ag184
aa(lp26580
g189
ag190
aa(lp26581
g192
ag193
aa(lp26582
g195
ag196
aa(lp26583
g198
ag199
aa(lp26584
g201
ag106
aa(lp26585
g203
ag204
aa(lp26586
g206
ag207
aatp26587
Rp26588
aa(lp26589
g211
ag181
((lp26590
(lp26591
g187
ag211
aa(lp26592
g215
ag216
aa(lp26593
g218
ag219
aa(lp26594
g221
ag222
aa(lp26595
g224
ag225
aa(lp26596
g227
ag228
aa(lp26597
g230
ag231
aa(lp26598
g233
ag234
aa(lp26599
g236
ag237
aa(lp26600
g239
ag240
aa(lp26601
g242
ag243
aa(lp26602
g245
ag246
aa(lp26603
g248
ag249
aa(lp26604
g251
ag252
aa(lp26605
g254
ag255
aa(lp26606
g257
ag258
aa(lp26607
g260
ag261
aa(lp26608
g263
ag264
aa(lp26609
g266
ag267
aatp26610
Rp26611
aa(lp26612
g271
ag181
((lp26613
(lp26614
g187
ag271
aa(lp26615
g275
ag276
aatp26616
Rp26617
aatp26618
Rp26619
sg80
Nsbtp26620
a(g17277
g5013
tp26621
a(g17277
g5417
tp26622
a(g17277
g1
(g81
g3
Ntp26623
Rp26624
(dp26625
g85
g1
(g86
g3
Ntp26626
Rp26627
(dp26628
g90
(dp26629
g1
(g92
g3
Ntp26630
Rp26631
(dp26632
g7
(dp26633
sg9
g1
(g3632
g3
Ntp26634
Rp26635
(dp26636
g14
g15
(g3636
tp26637
Rp26638
(dp26639
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp26640
tp26641
Rp26642
(dp26643
g41
S'environ_items'
p26644
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp26645
sg65
S'alff_to_standard_0'
p26646
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp26647
sg79
Nsg80
Nsb(dp26648
sg1
(g92
g3
Ntp26649
Rp26650
(dp26651
g7
(dp26652
sg9
g1
(g97
g3
Ntp26653
Rp26654
(dp26655
g14
g15
(g53
tp26656
Rp26657
(dp26658
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp26659
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26660
sg65
g26646
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26661
sg79
Nsg80
Nsb(dp26662
sg1
(g92
g3
Ntp26663
Rp26664
(dp26665
g7
(dp26666
sg9
g1
(g97
g3
Ntp26667
Rp26668
(dp26669
g14
g15
(g53
tp26670
Rp26671
(dp26672
g28
g29
sg3640
g23
sbsg108
(lp26673
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26674
sg65
g26646
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26675
sg79
Nsg80
Nsb(dp26676
ssg157
(dp26677
sg159
(dp26678
g26631
(dp26679
g26664
(dp26680
g163
(lp26681
(g3640
g3640
tp26682
asssg26650
(dp26683
g26631
(dp26684
g163
(lp26685
(g3622
g3622
tp26686
a(g3621
g3621
tp26687
a(g3320
g3320
tp26688
a(g3371
g3371
tp26689
a(g3620
g3620
tp26690
a(g3344
g3344
tp26691
asssg26664
(dp26692
ssg174
g26678
sg175
(dp26693
g26631
(dp26694
g26650
g26684
ssg26650
(dp26695
sg26664
(dp26696
g26631
g26680
sssg180
g26678
sbsg43
g26646
sg65
g66
sg75
g26646
sg76
g181
((lp26697
(lp26698
g184
ag181
((lp26699
(lp26700
g187
ag184
aa(lp26701
g189
ag190
aa(lp26702
g192
ag193
aa(lp26703
g195
ag196
aa(lp26704
g198
ag199
aa(lp26705
g201
ag106
aa(lp26706
g203
ag204
aa(lp26707
g206
ag207
aatp26708
Rp26709
aa(lp26710
g211
ag181
((lp26711
(lp26712
g187
ag211
aa(lp26713
g215
ag216
aa(lp26714
g218
ag219
aa(lp26715
g221
ag222
aa(lp26716
g224
ag225
aa(lp26717
g227
ag228
aa(lp26718
g230
ag231
aa(lp26719
g233
ag234
aa(lp26720
g236
ag237
aa(lp26721
g239
ag240
aa(lp26722
g242
ag243
aa(lp26723
g245
ag246
aa(lp26724
g248
ag249
aa(lp26725
g251
ag252
aa(lp26726
g254
ag255
aa(lp26727
g257
ag258
aa(lp26728
g260
ag261
aa(lp26729
g263
ag264
aa(lp26730
g266
ag267
aatp26731
Rp26732
aa(lp26733
g271
ag181
((lp26734
(lp26735
g187
ag271
aa(lp26736
g275
ag276
aatp26737
Rp26738
aatp26739
Rp26740
sg80
Nsbtp26741
a(g17277
g5137
tp26742
a(g17277
g1
(g81
g3
Ntp26743
Rp26744
(dp26745
g85
g1
(g86
g3
Ntp26746
Rp26747
(dp26748
g90
(dp26749
g1
(g92
g3
Ntp26750
Rp26751
(dp26752
g7
(dp26753
sg9
g1
(g97
g3
Ntp26754
Rp26755
(dp26756
g14
g15
(g53
tp26757
Rp26758
(dp26759
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g17301
sbsg108
(lp26760
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26761
sg65
S'log_alff_falff_0'
p26762
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26763
sg79
Nsg80
Nsb(dp26764
sg1
(g92
g3
Ntp26765
Rp26766
(dp26767
g7
(dp26768
sg9
g1
(g135
g3
Ntp26769
Rp26770
(dp26771
g139
(lp26772
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp26773
Rp26774
(dp26775
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p26776
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp26777
g25
Nssg150
(lp26778
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp26779
sg65
g26762
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp26780
sg79
Nsg80
Nsb(dp26781
sg1
(g92
g3
Ntp26782
Rp26783
(dp26784
g7
(dp26785
sg9
g1
(g97
g3
Ntp26786
Rp26787
(dp26788
g14
g15
(g53
tp26789
Rp26790
(dp26791
g28
g29
sg25
g23
sbsg108
(lp26792
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26793
sg65
g26762
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26794
sg79
Nsg80
Nsb(dp26795
ssg157
(dp26796
sg159
(dp26797
g26751
(dp26798
g26766
(dp26799
g163
(lp26800
(g107
g107
tp26801
a(g105
g105
tp26802
a(g104
g104
tp26803
a(g14
g14
tp26804
asssg26766
(dp26805
g26783
(dp26806
g163
(lp26807
(g25
g25
tp26808
asssg26783
(dp26809
ssg174
g26797
sg175
(dp26810
g26751
(dp26811
sg26766
(dp26812
g26751
g26799
ssg26783
(dp26813
g26766
g26806
sssg180
g26797
sbsg43
g26762
sg65
g66
sg75
g26762
sg76
g181
((lp26814
(lp26815
g184
ag181
((lp26816
(lp26817
g187
ag184
aa(lp26818
g189
ag190
aa(lp26819
g192
ag193
aa(lp26820
g195
ag196
aa(lp26821
g198
ag199
aa(lp26822
g201
ag106
aa(lp26823
g203
ag204
aa(lp26824
g206
ag207
aatp26825
Rp26826
aa(lp26827
g211
ag181
((lp26828
(lp26829
g187
ag211
aa(lp26830
g215
ag216
aa(lp26831
g218
ag219
aa(lp26832
g221
ag222
aa(lp26833
g224
ag225
aa(lp26834
g227
ag228
aa(lp26835
g230
ag231
aa(lp26836
g233
ag234
aa(lp26837
g236
ag237
aa(lp26838
g239
ag240
aa(lp26839
g242
ag243
aa(lp26840
g245
ag246
aa(lp26841
g248
ag249
aa(lp26842
g251
ag252
aa(lp26843
g254
ag255
aa(lp26844
g257
ag258
aa(lp26845
g260
ag261
aa(lp26846
g263
ag264
aa(lp26847
g266
ag267
aatp26848
Rp26849
aa(lp26850
g271
ag181
((lp26851
(lp26852
g187
ag271
aa(lp26853
g275
ag276
aatp26854
Rp26855
aatp26856
Rp26857
sg80
Nsbtp26858
a(g17277
g5051
tp26859
a(g17277
g4890
tp26860
a(g17277
g1
(g81
g3
Ntp26861
Rp26862
(dp26863
g85
g1
(g86
g3
Ntp26864
Rp26865
(dp26866
g90
(dp26867
g1
(g92
g3
Ntp26868
Rp26869
(dp26870
g7
(dp26871
sg9
g1
(g97
g3
Ntp26872
Rp26873
(dp26874
g14
g15
(g53
tp26875
Rp26876
(dp26877
g28
g29
sg3640
g23
sbsg108
(lp26878
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp26879
sg65
S'alff_Z_to_standard_0'
p26880
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp26881
sg79
Nsg80
Nsb(dp26882
sg1
(g92
g3
Ntp26883
Rp26884
(dp26885
g7
(dp26886
sg9
g1
(g97
g3
Ntp26887
Rp26888
(dp26889
g14
g15
(g53
tp26890
Rp26891
(dp26892
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp26893
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp26894
sg65
g26880
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp26895
sg79
Nsg80
Nsb(dp26896
sg1
(g92
g3
Ntp26897
Rp26898
(dp26899
g7
(dp26900
sg9
g1
(g3632
g3
Ntp26901
Rp26902
(dp26903
g14
g15
(g3636
tp26904
Rp26905
(dp26906
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp26907
tp26908
Rp26909
(dp26910
g41
S'environ_items'
p26911
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp26912
sg65
g26880
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp26913
sg79
Nsg80
Nsb(dp26914
ssg157
(dp26915
sg159
(dp26916
g26869
(dp26917
sg26884
(dp26918
g26898
(dp26919
g163
(lp26920
(g3622
g3622
tp26921
a(g3621
g3621
tp26922
a(g3320
g3320
tp26923
a(g3371
g3371
tp26924
a(g3620
g3620
tp26925
a(g3344
g3344
tp26926
asssg26898
(dp26927
g26869
(dp26928
g163
(lp26929
(g3640
g3640
tp26930
assssg174
g26916
sg175
(dp26931
g26869
(dp26932
g26898
g26928
ssg26884
(dp26933
sg26898
(dp26934
g26884
g26919
sssg180
g26916
sbsg43
g26880
sg65
g66
sg75
g26880
sg76
g181
((lp26935
(lp26936
g184
ag181
((lp26937
(lp26938
g187
ag184
aa(lp26939
g189
ag190
aa(lp26940
g192
ag193
aa(lp26941
g195
ag196
aa(lp26942
g198
ag199
aa(lp26943
g201
ag106
aa(lp26944
g203
ag204
aa(lp26945
g206
ag207
aatp26946
Rp26947
aa(lp26948
g211
ag181
((lp26949
(lp26950
g187
ag211
aa(lp26951
g215
ag216
aa(lp26952
g218
ag219
aa(lp26953
g221
ag222
aa(lp26954
g224
ag225
aa(lp26955
g227
ag228
aa(lp26956
g230
ag231
aa(lp26957
g233
ag234
aa(lp26958
g236
ag237
aa(lp26959
g239
ag240
aa(lp26960
g242
ag243
aa(lp26961
g245
ag246
aa(lp26962
g248
ag249
aa(lp26963
g251
ag252
aa(lp26964
g254
ag255
aa(lp26965
g257
ag258
aa(lp26966
g260
ag261
aa(lp26967
g263
ag264
aa(lp26968
g266
ag267
aatp26969
Rp26970
aa(lp26971
g271
ag181
((lp26972
(lp26973
g187
ag271
aa(lp26974
g275
ag276
aatp26975
Rp26976
aatp26977
Rp26978
sg80
Nsbtp26979
a(g17277
g20239
tp26980
a(g17277
g4994
tp26981
a(g17277
g22193
tp26982
a(g17277
g1
(g81
g3
Ntp26983
Rp26984
(dp26985
g85
g1
(g86
g3
Ntp26986
Rp26987
(dp26988
g90
(dp26989
g1
(g92
g3
Ntp26990
Rp26991
(dp26992
g7
(dp26993
sg9
g1
(g97
g3
Ntp26994
Rp26995
(dp26996
g14
g15
(g53
tp26997
Rp26998
(dp26999
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp27000
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27001
sg65
S'falff_Z_to_standard_1'
p27002
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27003
sg79
Nsg80
Nsb(dp27004
sg1
(g92
g3
Ntp27005
Rp27006
(dp27007
g7
(dp27008
sg9
g1
(g3632
g3
Ntp27009
Rp27010
(dp27011
g14
g15
(g3636
tp27012
Rp27013
(dp27014
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp27015
tp27016
Rp27017
(dp27018
g41
S'environ_items'
p27019
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp27020
sg65
g27002
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp27021
sg79
Nsg80
Nsb(dp27022
sg1
(g92
g3
Ntp27023
Rp27024
(dp27025
g7
(dp27026
sg9
g1
(g97
g3
Ntp27027
Rp27028
(dp27029
g14
g15
(g53
tp27030
Rp27031
(dp27032
g28
g29
sg3640
g23
sbsg108
(lp27033
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27034
sg65
g27002
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27035
sg79
Nsg80
Nsb(dp27036
ssg157
(dp27037
sg159
(dp27038
g26991
(dp27039
g27006
(dp27040
g163
(lp27041
(g3622
g3622
tp27042
a(g3621
g3621
tp27043
a(g3320
g3320
tp27044
a(g3371
g3371
tp27045
a(g3620
g3620
tp27046
a(g3344
g3344
tp27047
asssg27006
(dp27048
g27024
(dp27049
g163
(lp27050
(g3640
g3640
tp27051
asssg27024
(dp27052
ssg174
g27038
sg175
(dp27053
g26991
(dp27054
sg27006
(dp27055
g26991
g27040
ssg27024
(dp27056
g27006
g27049
sssg180
g27038
sbsg43
g27002
sg65
g66
sg75
g27002
sg76
g181
((lp27057
(lp27058
g184
ag181
((lp27059
(lp27060
g187
ag184
aa(lp27061
g189
ag190
aa(lp27062
g192
ag193
aa(lp27063
g195
ag196
aa(lp27064
g198
ag199
aa(lp27065
g201
ag106
aa(lp27066
g203
ag204
aa(lp27067
g206
ag207
aatp27068
Rp27069
aa(lp27070
g211
ag181
((lp27071
(lp27072
g187
ag211
aa(lp27073
g215
ag216
aa(lp27074
g218
ag219
aa(lp27075
g221
ag222
aa(lp27076
g224
ag225
aa(lp27077
g227
ag228
aa(lp27078
g230
ag231
aa(lp27079
g233
ag234
aa(lp27080
g236
ag237
aa(lp27081
g239
ag240
aa(lp27082
g242
ag243
aa(lp27083
g245
ag246
aa(lp27084
g248
ag249
aa(lp27085
g251
ag252
aa(lp27086
g254
ag255
aa(lp27087
g257
ag258
aa(lp27088
g260
ag261
aa(lp27089
g263
ag264
aa(lp27090
g266
ag267
aatp27091
Rp27092
aa(lp27093
g271
ag181
((lp27094
(lp27095
g187
ag271
aa(lp27096
g275
ag276
aatp27097
Rp27098
aatp27099
Rp27100
sg80
Nsbtp27101
a(g17277
g21244
tp27102
a(g17277
g21520
tp27103
a(g17277
g21658
tp27104
a(g17277
g5398
tp27105
a(g17277
g21934
tp27106
a(g17277
g20653
tp27107
a(g17277
g1
(g81
g3
Ntp27108
Rp27109
(dp27110
g85
g1
(g86
g3
Ntp27111
Rp27112
(dp27113
g90
(dp27114
g1
(g92
g3
Ntp27115
Rp27116
(dp27117
g7
(dp27118
sg9
g1
(g97
g3
Ntp27119
Rp27120
(dp27121
g14
g15
(g53
tp27122
Rp27123
(dp27124
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp27125
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27126
sg65
S'falff_to_standard_1'
p27127
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27128
sg79
Nsg80
Nsb(dp27129
sg1
(g92
g3
Ntp27130
Rp27131
(dp27132
g7
(dp27133
sg9
g1
(g3632
g3
Ntp27134
Rp27135
(dp27136
g14
g15
(g3636
tp27137
Rp27138
(dp27139
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp27140
tp27141
Rp27142
(dp27143
g41
S'environ_items'
p27144
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp27145
sg65
g27127
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp27146
sg79
Nsg80
Nsb(dp27147
sg1
(g92
g3
Ntp27148
Rp27149
(dp27150
g7
(dp27151
sg9
g1
(g97
g3
Ntp27152
Rp27153
(dp27154
g14
g15
(g53
tp27155
Rp27156
(dp27157
g28
g29
sg3640
g23
sbsg108
(lp27158
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27159
sg65
g27127
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27160
sg79
Nsg80
Nsb(dp27161
ssg157
(dp27162
sg159
(dp27163
g27116
(dp27164
g27131
(dp27165
g163
(lp27166
(g3622
g3622
tp27167
a(g3621
g3621
tp27168
a(g3320
g3320
tp27169
a(g3371
g3371
tp27170
a(g3620
g3620
tp27171
a(g3344
g3344
tp27172
asssg27131
(dp27173
g27149
(dp27174
g163
(lp27175
(g3640
g3640
tp27176
asssg27149
(dp27177
ssg174
g27163
sg175
(dp27178
g27116
(dp27179
sg27131
(dp27180
g27116
g27165
ssg27149
(dp27181
g27131
g27174
sssg180
g27163
sbsg43
g27127
sg65
g66
sg75
g27127
sg76
g181
((lp27182
(lp27183
g184
ag181
((lp27184
(lp27185
g187
ag184
aa(lp27186
g189
ag190
aa(lp27187
g192
ag193
aa(lp27188
g195
ag196
aa(lp27189
g198
ag199
aa(lp27190
g201
ag106
aa(lp27191
g203
ag204
aa(lp27192
g206
ag207
aatp27193
Rp27194
aa(lp27195
g211
ag181
((lp27196
(lp27197
g187
ag211
aa(lp27198
g215
ag216
aa(lp27199
g218
ag219
aa(lp27200
g221
ag222
aa(lp27201
g224
ag225
aa(lp27202
g227
ag228
aa(lp27203
g230
ag231
aa(lp27204
g233
ag234
aa(lp27205
g236
ag237
aa(lp27206
g239
ag240
aa(lp27207
g242
ag243
aa(lp27208
g245
ag246
aa(lp27209
g248
ag249
aa(lp27210
g251
ag252
aa(lp27211
g254
ag255
aa(lp27212
g257
ag258
aa(lp27213
g260
ag261
aa(lp27214
g263
ag264
aa(lp27215
g266
ag267
aatp27216
Rp27217
aa(lp27218
g271
ag181
((lp27219
(lp27220
g187
ag271
aa(lp27221
g275
ag276
aatp27222
Rp27223
aatp27224
Rp27225
sg80
Nsbtp27226
a(g17277
g5560
tp27227
a(g17277
g1
(g81
g3
Ntp27228
Rp27229
(dp27230
g85
g1
(g86
g3
Ntp27231
Rp27232
(dp27233
g90
(dp27234
g1
(g92
g3
Ntp27235
Rp27236
(dp27237
g7
(dp27238
sg9
g1
(g97
g3
Ntp27239
Rp27240
(dp27241
g14
g15
(g53
tp27242
Rp27243
(dp27244
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp27245
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27246
sg65
S'alff_Z_to_standard_1'
p27247
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27248
sg79
Nsg80
Nsb(dp27249
sg1
(g92
g3
Ntp27250
Rp27251
(dp27252
g7
(dp27253
sg9
g1
(g3632
g3
Ntp27254
Rp27255
(dp27256
g14
g15
(g3636
tp27257
Rp27258
(dp27259
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp27260
tp27261
Rp27262
(dp27263
g41
S'environ_items'
p27264
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp27265
sg65
g27247
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp27266
sg79
Nsg80
Nsb(dp27267
sg1
(g92
g3
Ntp27268
Rp27269
(dp27270
g7
(dp27271
sg9
g1
(g97
g3
Ntp27272
Rp27273
(dp27274
g14
g15
(g53
tp27275
Rp27276
(dp27277
g28
g29
sg3640
g23
sbsg108
(lp27278
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27279
sg65
g27247
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27280
sg79
Nsg80
Nsb(dp27281
ssg157
(dp27282
sg159
(dp27283
g27236
(dp27284
g27251
(dp27285
g163
(lp27286
(g3622
g3622
tp27287
a(g3621
g3621
tp27288
a(g3320
g3320
tp27289
a(g3371
g3371
tp27290
a(g3620
g3620
tp27291
a(g3344
g3344
tp27292
asssg27251
(dp27293
g27269
(dp27294
g163
(lp27295
(g3640
g3640
tp27296
asssg27269
(dp27297
ssg174
g27283
sg175
(dp27298
g27236
(dp27299
sg27251
(dp27300
g27236
g27285
ssg27269
(dp27301
g27251
g27294
sssg180
g27283
sbsg43
g27247
sg65
g66
sg75
g27247
sg76
g181
((lp27302
(lp27303
g184
ag181
((lp27304
(lp27305
g187
ag184
aa(lp27306
g189
ag190
aa(lp27307
g192
ag193
aa(lp27308
g195
ag196
aa(lp27309
g198
ag199
aa(lp27310
g201
ag106
aa(lp27311
g203
ag204
aa(lp27312
g206
ag207
aatp27313
Rp27314
aa(lp27315
g211
ag181
((lp27316
(lp27317
g187
ag211
aa(lp27318
g215
ag216
aa(lp27319
g218
ag219
aa(lp27320
g221
ag222
aa(lp27321
g224
ag225
aa(lp27322
g227
ag228
aa(lp27323
g230
ag231
aa(lp27324
g233
ag234
aa(lp27325
g236
ag237
aa(lp27326
g239
ag240
aa(lp27327
g242
ag243
aa(lp27328
g245
ag246
aa(lp27329
g248
ag249
aa(lp27330
g251
ag252
aa(lp27331
g254
ag255
aa(lp27332
g257
ag258
aa(lp27333
g260
ag261
aa(lp27334
g263
ag264
aa(lp27335
g266
ag267
aatp27336
Rp27337
aa(lp27338
g271
ag181
((lp27339
(lp27340
g187
ag271
aa(lp27341
g275
ag276
aatp27342
Rp27343
aatp27344
Rp27345
sg80
Nsbtp27346
a(g17277
g1
(g81
g3
Ntp27347
Rp27348
(dp27349
g85
g1
(g86
g3
Ntp27350
Rp27351
(dp27352
g90
(dp27353
g1
(g92
g3
Ntp27354
Rp27355
(dp27356
g7
(dp27357
sg9
g1
(g97
g3
Ntp27358
Rp27359
(dp27360
g14
g15
(g53
tp27361
Rp27362
(dp27363
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp27364
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27365
sg65
S'falff_to_standard_0'
p27366
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27367
sg79
Nsg80
Nsb(dp27368
sg1
(g92
g3
Ntp27369
Rp27370
(dp27371
g7
(dp27372
sg9
g1
(g3632
g3
Ntp27373
Rp27374
(dp27375
g14
g15
(g3636
tp27376
Rp27377
(dp27378
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp27379
tp27380
Rp27381
(dp27382
g41
S'environ_items'
p27383
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp27384
sg65
g27366
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp27385
sg79
Nsg80
Nsb(dp27386
sg1
(g92
g3
Ntp27387
Rp27388
(dp27389
g7
(dp27390
sg9
g1
(g97
g3
Ntp27391
Rp27392
(dp27393
g14
g15
(g53
tp27394
Rp27395
(dp27396
g28
g29
sg3640
g23
sbsg108
(lp27397
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27398
sg65
g27366
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27399
sg79
Nsg80
Nsb(dp27400
ssg157
(dp27401
sg159
(dp27402
g27355
(dp27403
g27370
(dp27404
g163
(lp27405
(g3622
g3622
tp27406
a(g3621
g3621
tp27407
a(g3320
g3320
tp27408
a(g3371
g3371
tp27409
a(g3620
g3620
tp27410
a(g3344
g3344
tp27411
asssg27370
(dp27412
g27388
(dp27413
g163
(lp27414
(g3640
g3640
tp27415
asssg27388
(dp27416
ssg174
g27402
sg175
(dp27417
g27355
(dp27418
sg27370
(dp27419
g27355
g27404
ssg27388
(dp27420
g27370
g27413
sssg180
g27402
sbsg43
g27366
sg65
g66
sg75
g27366
sg76
g181
((lp27421
(lp27422
g184
ag181
((lp27423
(lp27424
g187
ag184
aa(lp27425
g189
ag190
aa(lp27426
g192
ag193
aa(lp27427
g195
ag196
aa(lp27428
g198
ag199
aa(lp27429
g201
ag106
aa(lp27430
g203
ag204
aa(lp27431
g206
ag207
aatp27432
Rp27433
aa(lp27434
g211
ag181
((lp27435
(lp27436
g187
ag211
aa(lp27437
g215
ag216
aa(lp27438
g218
ag219
aa(lp27439
g221
ag222
aa(lp27440
g224
ag225
aa(lp27441
g227
ag228
aa(lp27442
g230
ag231
aa(lp27443
g233
ag234
aa(lp27444
g236
ag237
aa(lp27445
g239
ag240
aa(lp27446
g242
ag243
aa(lp27447
g245
ag246
aa(lp27448
g248
ag249
aa(lp27449
g251
ag252
aa(lp27450
g254
ag255
aa(lp27451
g257
ag258
aa(lp27452
g260
ag261
aa(lp27453
g263
ag264
aa(lp27454
g266
ag267
aatp27455
Rp27456
aa(lp27457
g271
ag181
((lp27458
(lp27459
g187
ag271
aa(lp27460
g275
ag276
aatp27461
Rp27462
aatp27463
Rp27464
sg80
Nsbtp27465
a(g19673
g16663
tp27466
a(g19673
g1
(g81
g3
Ntp27467
Rp27468
(dp27469
g85
g1
(g86
g3
Ntp27470
Rp27471
(dp27472
g90
(dp27473
g1
(g92
g3
Ntp27474
Rp27475
(dp27476
g7
(dp27477
sg9
g1
(g97
g3
Ntp27478
Rp27479
(dp27480
g14
g15
(g53
tp27481
Rp27482
(dp27483
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g19694
sbsg108
(lp27484
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27485
sg65
S'log_fsl_to_itk_functional_mni_0'
p27486
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27487
sg79
Nsg80
Nsb(dp27488
sg1
(g92
g3
Ntp27489
Rp27490
(dp27491
g7
(dp27492
sg9
g1
(g135
g3
Ntp27493
Rp27494
(dp27495
g139
(lp27496
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp27497
Rp27498
(dp27499
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p27500
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp27501
g25
Nssg150
(lp27502
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp27503
sg65
g27486
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp27504
sg79
Nsg80
Nsb(dp27505
sg1
(g92
g3
Ntp27506
Rp27507
(dp27508
g7
(dp27509
sg9
g1
(g97
g3
Ntp27510
Rp27511
(dp27512
g14
g15
(g53
tp27513
Rp27514
(dp27515
g28
g29
sg25
g23
sbsg108
(lp27516
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27517
sg65
g27486
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27518
sg79
Nsg80
Nsb(dp27519
ssg157
(dp27520
sg159
(dp27521
g27475
(dp27522
g27490
(dp27523
g163
(lp27524
(g107
g107
tp27525
a(g105
g105
tp27526
a(g104
g104
tp27527
a(g14
g14
tp27528
asssg27490
(dp27529
g27507
(dp27530
g163
(lp27531
(g25
g25
tp27532
asssg27507
(dp27533
ssg174
g27521
sg175
(dp27534
g27475
(dp27535
sg27490
(dp27536
g27475
g27523
ssg27507
(dp27537
g27490
g27530
sssg180
g27521
sbsg43
g27486
sg65
g66
sg75
g27486
sg76
g181
((lp27538
(lp27539
g184
ag181
((lp27540
(lp27541
g187
ag184
aa(lp27542
g189
ag190
aa(lp27543
g192
ag193
aa(lp27544
g195
ag196
aa(lp27545
g198
ag199
aa(lp27546
g201
ag106
aa(lp27547
g203
ag204
aa(lp27548
g206
ag207
aatp27549
Rp27550
aa(lp27551
g211
ag181
((lp27552
(lp27553
g187
ag211
aa(lp27554
g215
ag216
aa(lp27555
g218
ag219
aa(lp27556
g221
ag222
aa(lp27557
g224
ag225
aa(lp27558
g227
ag228
aa(lp27559
g230
ag231
aa(lp27560
g233
ag234
aa(lp27561
g236
ag237
aa(lp27562
g239
ag240
aa(lp27563
g242
ag243
aa(lp27564
g245
ag246
aa(lp27565
g248
ag249
aa(lp27566
g251
ag252
aa(lp27567
g254
ag255
aa(lp27568
g257
ag258
aa(lp27569
g260
ag261
aa(lp27570
g263
ag264
aa(lp27571
g266
ag267
aatp27572
Rp27573
aa(lp27574
g271
ag181
((lp27575
(lp27576
g187
ag271
aa(lp27577
g275
ag276
aatp27578
Rp27579
aatp27580
Rp27581
sg80
Nsbtp27582
a(g18830
g1
(g81
g3
Ntp27583
Rp27584
(dp27585
g85
g1
(g86
g3
Ntp27586
Rp27587
(dp27588
g90
(dp27589
g1
(g92
g3
Ntp27590
Rp27591
(dp27592
g7
(dp27593
sg9
g1
(g97
g3
Ntp27594
Rp27595
(dp27596
g14
g15
(g53
tp27597
Rp27598
(dp27599
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g18848
sbsg108
(lp27600
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27601
sg65
S'log_fsl_to_itk_functional_mni_1'
p27602
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27603
sg79
Nsg80
Nsb(dp27604
sg1
(g92
g3
Ntp27605
Rp27606
(dp27607
g7
(dp27608
sg9
g1
(g135
g3
Ntp27609
Rp27610
(dp27611
g139
(lp27612
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp27613
Rp27614
(dp27615
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p27616
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp27617
g25
Nssg150
(lp27618
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp27619
sg65
g27602
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp27620
sg79
Nsg80
Nsb(dp27621
sg1
(g92
g3
Ntp27622
Rp27623
(dp27624
g7
(dp27625
sg9
g1
(g97
g3
Ntp27626
Rp27627
(dp27628
g14
g15
(g53
tp27629
Rp27630
(dp27631
g28
g29
sg25
g23
sbsg108
(lp27632
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27633
sg65
g27602
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27634
sg79
Nsg80
Nsb(dp27635
ssg157
(dp27636
sg159
(dp27637
g27591
(dp27638
g27606
(dp27639
g163
(lp27640
(g107
g107
tp27641
a(g105
g105
tp27642
a(g104
g104
tp27643
a(g14
g14
tp27644
asssg27606
(dp27645
g27623
(dp27646
g163
(lp27647
(g25
g25
tp27648
asssg27623
(dp27649
ssg174
g27637
sg175
(dp27650
g27591
(dp27651
sg27606
(dp27652
g27591
g27639
ssg27623
(dp27653
g27606
g27646
sssg180
g27637
sbsg43
g27602
sg65
g66
sg75
g27602
sg76
g181
((lp27654
(lp27655
g184
ag181
((lp27656
(lp27657
g187
ag184
aa(lp27658
g189
ag190
aa(lp27659
g192
ag193
aa(lp27660
g195
ag196
aa(lp27661
g198
ag199
aa(lp27662
g201
ag106
aa(lp27663
g203
ag204
aa(lp27664
g206
ag207
aatp27665
Rp27666
aa(lp27667
g211
ag181
((lp27668
(lp27669
g187
ag211
aa(lp27670
g215
ag216
aa(lp27671
g218
ag219
aa(lp27672
g221
ag222
aa(lp27673
g224
ag225
aa(lp27674
g227
ag228
aa(lp27675
g230
ag231
aa(lp27676
g233
ag234
aa(lp27677
g236
ag237
aa(lp27678
g239
ag240
aa(lp27679
g242
ag243
aa(lp27680
g245
ag246
aa(lp27681
g248
ag249
aa(lp27682
g251
ag252
aa(lp27683
g254
ag255
aa(lp27684
g257
ag258
aa(lp27685
g260
ag261
aa(lp27686
g263
ag264
aa(lp27687
g266
ag267
aatp27688
Rp27689
aa(lp27690
g271
ag181
((lp27691
(lp27692
g187
ag271
aa(lp27693
g275
ag276
aatp27694
Rp27695
aatp27696
Rp27697
sg80
Nsbtp27698
a(g18830
g15759
tp27699
a(g16663
g1
(g81
g3
Ntp27700
Rp27701
(dp27702
g85
g1
(g86
g3
Ntp27703
Rp27704
(dp27705
g90
(dp27706
g1
(g92
g3
Ntp27707
Rp27708
(dp27709
g7
(dp27710
sg9
g1
(g97
g3
Ntp27711
Rp27712
(dp27713
g14
g15
(g53
tp27714
Rp27715
(dp27716
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g16680
sbsg108
(lp27717
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27718
sg65
S'log_collect_transforms_functional_mni_0'
p27719
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27720
sg79
Nsg80
Nsb(dp27721
sg1
(g92
g3
Ntp27722
Rp27723
(dp27724
g7
(dp27725
sg9
g1
(g97
g3
Ntp27726
Rp27727
(dp27728
g14
g15
(g53
tp27729
Rp27730
(dp27731
g28
g29
sg25
g23
sbsg108
(lp27732
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27733
sg65
g27719
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27734
sg79
Nsg80
Nsb(dp27735
sg1
(g92
g3
Ntp27736
Rp27737
(dp27738
g7
(dp27739
sg9
g1
(g135
g3
Ntp27740
Rp27741
(dp27742
g139
(lp27743
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp27744
Rp27745
(dp27746
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p27747
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp27748
g25
Nssg150
(lp27749
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp27750
sg65
g27719
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp27751
sg79
Nsg80
Nsb(dp27752
ssg157
(dp27753
sg159
(dp27754
g27708
(dp27755
g27737
(dp27756
g163
(lp27757
(g107
g107
tp27758
a(g105
g105
tp27759
a(g104
g104
tp27760
a(g14
g14
tp27761
asssg27723
(dp27762
sg27737
(dp27763
g27723
(dp27764
g163
(lp27765
(g25
g25
tp27766
assssg174
g27754
sg175
(dp27767
g27708
(dp27768
sg27723
(dp27769
g27737
g27764
ssg27737
(dp27770
g27708
g27756
sssg180
g27754
sbsg43
g27719
sg65
g66
sg75
g27719
sg76
g181
((lp27771
(lp27772
g184
ag181
((lp27773
(lp27774
g187
ag184
aa(lp27775
g189
ag190
aa(lp27776
g192
ag193
aa(lp27777
g195
ag196
aa(lp27778
g198
ag199
aa(lp27779
g201
ag106
aa(lp27780
g203
ag204
aa(lp27781
g206
ag207
aatp27782
Rp27783
aa(lp27784
g211
ag181
((lp27785
(lp27786
g187
ag211
aa(lp27787
g215
ag216
aa(lp27788
g218
ag219
aa(lp27789
g221
ag222
aa(lp27790
g224
ag225
aa(lp27791
g227
ag228
aa(lp27792
g230
ag231
aa(lp27793
g233
ag234
aa(lp27794
g236
ag237
aa(lp27795
g239
ag240
aa(lp27796
g242
ag243
aa(lp27797
g245
ag246
aa(lp27798
g248
ag249
aa(lp27799
g251
ag252
aa(lp27800
g254
ag255
aa(lp27801
g257
ag258
aa(lp27802
g260
ag261
aa(lp27803
g263
ag264
aa(lp27804
g266
ag267
aatp27805
Rp27806
aa(lp27807
g271
ag181
((lp27808
(lp27809
g187
ag271
aa(lp27810
g275
ag276
aatp27811
Rp27812
aatp27813
Rp27814
sg80
Nsbtp27815
a(g16663
g4407
tp27816
a(g4407
g6626
tp27817
a(g4407
g6170
tp27818
a(g4407
g1
(g81
g3
Ntp27819
Rp27820
(dp27821
g85
g1
(g86
g3
Ntp27822
Rp27823
(dp27824
g90
(dp27825
g1
(g92
g3
Ntp27826
Rp27827
(dp27828
g7
(dp27829
sg9
g1
(g97
g3
Ntp27830
Rp27831
(dp27832
g14
g15
(g53
tp27833
Rp27834
(dp27835
g28
g29
sg25
g23
sbsg108
(lp27836
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp27837
sg65
S'log_apply_ants_warp_functional_mni_0'
p27838
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp27839
sg79
Nsg80
Nsb(dp27840
sg1
(g92
g3
Ntp27841
Rp27842
(dp27843
g7
(dp27844
sg9
g1
(g97
g3
Ntp27845
Rp27846
(dp27847
g14
g15
(g53
tp27848
Rp27849
(dp27850
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g4426
sbsg108
(lp27851
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27852
sg65
g27838
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27853
sg79
Nsg80
Nsb(dp27854
sg1
(g92
g3
Ntp27855
Rp27856
(dp27857
g7
(dp27858
sg9
g1
(g135
g3
Ntp27859
Rp27860
(dp27861
g139
(lp27862
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp27863
Rp27864
(dp27865
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p27866
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp27867
g25
Nssg150
(lp27868
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp27869
sg65
g27838
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp27870
sg79
Nsg80
Nsb(dp27871
ssg157
(dp27872
sg159
(dp27873
g27827
(dp27874
sg27842
(dp27875
g27856
(dp27876
g163
(lp27877
(g107
g107
tp27878
a(g105
g105
tp27879
a(g104
g104
tp27880
a(g14
g14
tp27881
asssg27856
(dp27882
g27827
(dp27883
g163
(lp27884
(g25
g25
tp27885
assssg174
g27873
sg175
(dp27886
g27827
(dp27887
g27856
g27883
ssg27842
(dp27888
sg27856
(dp27889
g27842
g27876
sssg180
g27873
sbsg43
g27838
sg65
g66
sg75
g27838
sg76
g181
((lp27890
(lp27891
g184
ag181
((lp27892
(lp27893
g187
ag184
aa(lp27894
g189
ag190
aa(lp27895
g192
ag193
aa(lp27896
g195
ag196
aa(lp27897
g198
ag199
aa(lp27898
g201
ag106
aa(lp27899
g203
ag204
aa(lp27900
g206
ag207
aatp27901
Rp27902
aa(lp27903
g211
ag181
((lp27904
(lp27905
g187
ag211
aa(lp27906
g215
ag216
aa(lp27907
g218
ag219
aa(lp27908
g221
ag222
aa(lp27909
g224
ag225
aa(lp27910
g227
ag228
aa(lp27911
g230
ag231
aa(lp27912
g233
ag234
aa(lp27913
g236
ag237
aa(lp27914
g239
ag240
aa(lp27915
g242
ag243
aa(lp27916
g245
ag246
aa(lp27917
g248
ag249
aa(lp27918
g251
ag252
aa(lp27919
g254
ag255
aa(lp27920
g257
ag258
aa(lp27921
g260
ag261
aa(lp27922
g263
ag264
aa(lp27923
g266
ag267
aatp27924
Rp27925
aa(lp27926
g271
ag181
((lp27927
(lp27928
g187
ag271
aa(lp27929
g275
ag276
aatp27930
Rp27931
aatp27932
Rp27933
sg80
Nsbtp27934
a(g4407
g1
(g81
g3
Ntp27935
Rp27936
(dp27937
g85
g1
(g86
g3
Ntp27938
Rp27939
(dp27940
g90
(dp27941
g1
(g92
g3
Ntp27942
Rp27943
(dp27944
g7
(dp27945
sg9
g1
(g3959
g3
Ntp27946
Rp27947
(dp27948
g14
g15
(g3963
tp27949
Rp27950
(dp27951
g20
I00
sg28
g29
sg26
g23
sg3967
g3968
sg30
g31
sg32
g1
(g33
g34
(dp27952
g36
g37
stp27953
Rp27954
(dp27955
g41
S'environ_items'
p27956
sg43
g32
sbsg44
g23
sg45
g37
sg3371
g3974
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g3975
sg63
(dp27957
sg65
S'temporal_regression_sca_0'
p27958
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3975
sg76
Nsg77
(lp27959
sg79
Nsg80
Nsb(dp27960
sg1
(g92
g3
Ntp27961
Rp27962
(dp27963
g7
(dp27964
sg9
g1
(g97
g3
Ntp27965
Rp27966
(dp27967
g14
g15
(g53
tp27968
Rp27969
(dp27970
g3945
I01
sg3946
g23
sg3947
g23
sg3948
g23
sg3949
I01
sg28
g29
sbsg108
(lp27971
g3946
ag3947
ag3948
ag3949
ag3945
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp27972
sg65
g27958
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp27973
sg79
Nsg80
Nsb(dp27974
sg1
(g2
g3
Ntp27975
Rp27976
(dp27977
g7
(dp27978
sg9
g1
(cnipype.interfaces.utility
Rename
p27979
g3
Ntp27980
Rp27981
(dp27982
g14
g15
(cnipype.interfaces.utility
RenameInputSpec
p27983
tp27984
Rp27985
(dp27986
g28
g29
sS'format_string'
p27987
g23
sS'parse_string'
p27988
g23
sS'keep_ext'
p27989
I01
sg44
g23
sS'use_fullpath'
p27990
I00
sbsS'fmt_fields'
p27991
(lp27992
sbsg51
Nsg52
g15
(g53
tp27993
Rp27994
(dp27995
g28
g29
sg27987
g23
sg27988
g23
sg27989
I01
sg44
g23
sg27990
I00
sbsg43
S'rename_maps'
p27996
sg63
(dp27997
sg65
g27958
sg67
(lp27998
g44
ag27987
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g27996
sg76
Nsg77
(lp27999
sg79
Nsg80
Nsb(dp28000
sg1
(g92
g3
Ntp28001
Rp28002
(dp28003
g7
(dp28004
sg9
g1
(g135
g3
Ntp28005
Rp28006
(dp28007
g139
(lp28008
g44
asg14
g15
(g142
tp28009
Rp28010
(dp28011
g20
I00
sg28
g29
sg146
S'S"def check_ts(in_file):\\n    import numpy as np\\n    timepoints, rois = np.loadtxt(in_file).shape\\n    if rois > timepoints:\\n        message = (\'\\\\n\\\\n\\\\n****The number of timepoints (\' + str(timepoints)\\n                   + \') is smaller than the number of ROIs to run (\'\\n                   + str(rois) + \') - therefore the GLM is\'\\n                   + \' underspecified and can\\\\\'t run.****\\\\n\\\\n\\\\n\')\\n        print(message)\\n        raise Exception(message)\\n    else:\\n        return in_file\\n"\n.'
p28012
sg44
g23
sbsg148
(dp28013
g25
Nssg150
(lp28014
g25
asg152
Nsbsg51
Nsg43
g4050
sg63
(dp28015
sg65
g27958
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4050
sg76
Nsg77
(lp28016
sg79
Nsg80
Nsb(dp28017
sg1
(g92
g3
Ntp28018
Rp28019
(dp28020
g7
(dp28021
sg9
g1
(g97
g3
Ntp28022
Rp28023
(dp28024
g14
g15
(g53
tp28025
Rp28026
(dp28027
g3989
g23
sg28
g29
sg3990
g23
sg3991
g23
sbsg108
(lp28028
g3990
ag3991
ag3989
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28029
sg65
g27958
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28030
sg79
Nsg80
Nsb(dp28031
sg1
(g92
g3
Ntp28032
Rp28033
(dp28034
g7
(dp28035
sg9
g1
(g135
g3
Ntp28036
Rp28037
(dp28038
g139
(lp28039
S'maps'
p28040
aS'timeseries'
p28041
asg14
g15
(g142
tp28042
Rp28043
(dp28044
g20
I00
sg28040
g23
sg28
g29
sg146
S'S\'def map_to_roi(timeseries, maps):\\n    """\\n    Renames the outputs of the temporal multiple regression workflow for sca \\n    according to the header information of the timeseries.txt file that was \\n    passed\\n\\n    NOTE: This is only run if the temporal regression is run as part of sca\\n          (which = \\\'RT\\\') when calling the temporal regression workflow.\\n          If you run the temporal regression workflow manually, don\\\\\\\'t set \\n          (which = \\\'RT\\\') unless you provide a timeseries.txt file with a header\\n          containing the names of the timeseries\\n\\n\\n    Parameters\\n    ----------\\n\\n    timeseries: string\\n        Input timeseries.txt file\\n\\n    maps: List (nifti files)\\n        List of output files generated by the temporal regression workflow if\\n        (which == \\\'RT\\\')\\n\\n\\n    Returns\\n    -------\\n\\n    labels : List (strings)\\n        List of names that the output files should be renamed to\\n\\n    maps: List (nifti files)\\n        List of output files generated by the temporal regression workflow if\\n        (which == \\\'RT\\\')\\n    """\\n\\n    try:\\n        import os\\n        import numpy as np\\n        testMat = np.loadtxt(timeseries)\\n        timepoints, rois = testMat.shape\\n\\n        if rois > timepoints:\\n            raise Exception(\\\'The number of timepoints is smaller than the\\\'\\n                            + \\\' number of ROIs to run - therefore the\\\'\\n                            + \\\' GLM is underspecified and can\\\\\\\'t run.\\\')\\n        labels = open(timeseries, \\\'r\\\').readline().split()\\n        labels = [os.path.join(os.getcwd(), \\\'sca_tempreg_z_maps_roi_\\\' + str(l)) \\\\\\n                  for l in labels]\\n        numMaps = len(maps)\\n        maps.sort()\\n        if not numMaps / 2 == rois:\\n            raise Exception(\\\'You specified \\\' + str(rois) + \\\' timeseries but \\\'\\n                            + \\\' only \\\' + str(numMaps / 2) + \\\' spatial maps were\\\'\\n                            + \\\' generated\\\')\\n        maps = maps[:rois]\\n        # output = zip(labels, component_maps)\\n        print "labels, maps", labels, maps\\n    except Exception:\\n        print "Error while mapping roi to dual regression split 3d volumes"\\n    return labels, maps\\n\'\n.'
p28045
sg28041
g23
sbsg148
(dp28046
g28040
NsS'labels'
p28047
Nssg150
(lp28048
g28047
ag28040
asg152
Nsbsg51
Nsg43
S'get_roi_order'
p28049
sg63
(dp28050
sg65
g27958
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g28049
sg76
Nsg77
(lp28051
sg79
Nsg80
Nsb(dp28052
sg1
(g92
g3
Ntp28053
Rp28054
(dp28055
g7
(dp28056
sg9
g1
(g4000
g3
Ntp28057
Rp28058
(dp28059
g14
g15
(g4004
tp28060
Rp28061
(dp28062
g28
g29
sg4008
g23
sg4009
g23
sg750
g23
sg4010
g23
sg4011
g23
sg4012
g23
sg4013
g23
sg4014
g23
sg44
g23
sg3949
g23
sg4015
g23
sg20
I00
sg4016
g23
sg26
g23
sg4017
g4018
sg30
g31
sg4019
g23
sg4020
g23
sg4021
g23
sg4022
g23
sg25
g4023
sg4024
g23
sg32
g1
(g33
g34
(dp28063
g36
g37
stp28064
Rp28065
(dp28066
g41
S'environ_items'
p28067
sg43
g32
sbsg45
g37
sg4030
g23
sg4031
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g4032
sg63
(dp28068
sg65
g27958
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4032
sg76
Nsg77
(lp28069
sg79
Nsg80
Nsb(dp28070
ssg157
(dp28071
sg159
(dp28072
g27943
(dp28073
g28033
(dp28074
g163
(lp28075
(g4069
g28040
tp28076
asssg27962
(dp28077
g28054
(dp28078
g163
(lp28079
(g3946
g44
tp28080
a(g3949
g3949
tp28081
a(g3945
g4030
tp28082
a(g3948
g750
tp28083
assg28002
(dp28084
g163
(lp28085
(g3947
g44
tp28086
assg28033
(dp28087
g163
(lp28088
(g3947
g28041
tp28089
asssg27976
(dp28090
g28019
(dp28091
g163
(lp28092
(g25
g3989
tp28093
asssg28002
(dp28094
g28054
(dp28095
g163
(lp28096
(g25
g4013
tp28097
asssg28019
(dp28098
sg28033
(dp28099
g27976
(dp28100
g163
(lp28101
(g28047
g27987
tp28102
a(g28040
g44
tp28103
asssg28054
(dp28104
g28019
(dp28105
g163
(lp28106
(g25
g3990
tp28107
a(g4076
g3991
tp28108
assg27943
(dp28109
g163
(lp28110
(g4076
g44
tp28111
assssg174
g28072
sg175
(dp28112
g27943
(dp28113
g28054
g28109
ssg27962
(dp28114
sg27976
(dp28115
g28033
g28100
ssg28002
(dp28116
g27962
g28084
ssg28019
(dp28117
g28054
g28105
sg27976
g28091
ssg28033
(dp28118
g27943
g28074
sg27962
g28087
ssg28054
(dp28119
g27962
g28078
sg28002
g28095
sssg180
g28072
sbsg43
g27958
sg65
g66
sg75
g27958
sg76
g181
((lp28120
(lp28121
g184
ag181
((lp28122
(lp28123
g187
ag184
aa(lp28124
g189
ag190
aa(lp28125
g192
ag193
aa(lp28126
g195
ag196
aa(lp28127
g198
ag199
aa(lp28128
g201
ag106
aa(lp28129
g203
ag204
aa(lp28130
g206
ag207
aatp28131
Rp28132
aa(lp28133
g211
ag181
((lp28134
(lp28135
g187
ag211
aa(lp28136
g215
ag216
aa(lp28137
g218
ag219
aa(lp28138
g221
ag222
aa(lp28139
g224
ag225
aa(lp28140
g227
ag228
aa(lp28141
g230
ag231
aa(lp28142
g233
ag234
aa(lp28143
g236
ag237
aa(lp28144
g239
ag240
aa(lp28145
g242
ag243
aa(lp28146
g245
ag246
aa(lp28147
g248
ag249
aa(lp28148
g251
ag252
aa(lp28149
g254
ag255
aa(lp28150
g257
ag258
aa(lp28151
g260
ag261
aa(lp28152
g263
ag264
aa(lp28153
g266
ag267
aatp28154
Rp28155
aa(lp28156
g271
ag181
((lp28157
(lp28158
g187
ag271
aa(lp28159
g275
ag276
aatp28160
Rp28161
aatp28162
Rp28163
sg80
Nsbtp28164
a(g4407
g5694
tp28165
a(g4407
g7238
tp28166
a(g4407
g5757
tp28167
a(g4407
g6012
tp28168
a(g4407
g6782
tp28169
a(g19534
g1
(g81
g3
Ntp28170
Rp28171
(dp28172
g85
g1
(g86
g3
Ntp28173
Rp28174
(dp28175
g90
(dp28176
g1
(g92
g3
Ntp28177
Rp28178
(dp28179
g7
(dp28180
sg9
g1
(g97
g3
Ntp28181
Rp28182
(dp28183
g14
g15
(g53
tp28184
Rp28185
(dp28186
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g19552
sbsg108
(lp28187
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp28188
sg65
S'log_fsl_to_itk_functional_brain_mask_to_standard_0'
p28189
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp28190
sg79
Nsg80
Nsb(dp28191
sg1
(g92
g3
Ntp28192
Rp28193
(dp28194
g7
(dp28195
sg9
g1
(g97
g3
Ntp28196
Rp28197
(dp28198
g14
g15
(g53
tp28199
Rp28200
(dp28201
g28
g29
sg25
g23
sbsg108
(lp28202
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28203
sg65
g28189
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28204
sg79
Nsg80
Nsb(dp28205
sg1
(g92
g3
Ntp28206
Rp28207
(dp28208
g7
(dp28209
sg9
g1
(g135
g3
Ntp28210
Rp28211
(dp28212
g139
(lp28213
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp28214
Rp28215
(dp28216
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p28217
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp28218
g25
Nssg150
(lp28219
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp28220
sg65
g28189
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp28221
sg79
Nsg80
Nsb(dp28222
ssg157
(dp28223
sg159
(dp28224
g28178
(dp28225
g28207
(dp28226
g163
(lp28227
(g107
g107
tp28228
a(g105
g105
tp28229
a(g104
g104
tp28230
a(g14
g14
tp28231
asssg28193
(dp28232
sg28207
(dp28233
g28193
(dp28234
g163
(lp28235
(g25
g25
tp28236
assssg174
g28224
sg175
(dp28237
g28178
(dp28238
sg28193
(dp28239
g28207
g28234
ssg28207
(dp28240
g28178
g28226
sssg180
g28224
sbsg43
g28189
sg65
g66
sg75
g28189
sg76
g181
((lp28241
(lp28242
g184
ag181
((lp28243
(lp28244
g187
ag184
aa(lp28245
g189
ag190
aa(lp28246
g192
ag193
aa(lp28247
g195
ag196
aa(lp28248
g198
ag199
aa(lp28249
g201
ag106
aa(lp28250
g203
ag204
aa(lp28251
g206
ag207
aatp28252
Rp28253
aa(lp28254
g211
ag181
((lp28255
(lp28256
g187
ag211
aa(lp28257
g215
ag216
aa(lp28258
g218
ag219
aa(lp28259
g221
ag222
aa(lp28260
g224
ag225
aa(lp28261
g227
ag228
aa(lp28262
g230
ag231
aa(lp28263
g233
ag234
aa(lp28264
g236
ag237
aa(lp28265
g239
ag240
aa(lp28266
g242
ag243
aa(lp28267
g245
ag246
aa(lp28268
g248
ag249
aa(lp28269
g251
ag252
aa(lp28270
g254
ag255
aa(lp28271
g257
ag258
aa(lp28272
g260
ag261
aa(lp28273
g263
ag264
aa(lp28274
g266
ag267
aatp28275
Rp28276
aa(lp28277
g271
ag181
((lp28278
(lp28279
g187
ag271
aa(lp28280
g275
ag276
aatp28281
Rp28282
aatp28283
Rp28284
sg80
Nsbtp28285
a(g19534
g16775
tp28286
a(g16775
g1
(g81
g3
Ntp28287
Rp28288
(dp28289
g85
g1
(g86
g3
Ntp28290
Rp28291
(dp28292
g90
(dp28293
g1
(g92
g3
Ntp28294
Rp28295
(dp28296
g7
(dp28297
sg9
g1
(g97
g3
Ntp28298
Rp28299
(dp28300
g14
g15
(g53
tp28301
Rp28302
(dp28303
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g16793
sbsg108
(lp28304
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp28305
sg65
S'log_collect_transforms_functional_brain_mask_to_standard_0'
p28306
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp28307
sg79
Nsg80
Nsb(dp28308
sg1
(g92
g3
Ntp28309
Rp28310
(dp28311
g7
(dp28312
sg9
g1
(g135
g3
Ntp28313
Rp28314
(dp28315
g139
(lp28316
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp28317
Rp28318
(dp28319
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p28320
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp28321
g25
Nssg150
(lp28322
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp28323
sg65
g28306
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp28324
sg79
Nsg80
Nsb(dp28325
sg1
(g92
g3
Ntp28326
Rp28327
(dp28328
g7
(dp28329
sg9
g1
(g97
g3
Ntp28330
Rp28331
(dp28332
g14
g15
(g53
tp28333
Rp28334
(dp28335
g28
g29
sg25
g23
sbsg108
(lp28336
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28337
sg65
g28306
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28338
sg79
Nsg80
Nsb(dp28339
ssg157
(dp28340
sg159
(dp28341
g28295
(dp28342
g28310
(dp28343
g163
(lp28344
(g107
g107
tp28345
a(g105
g105
tp28346
a(g104
g104
tp28347
a(g14
g14
tp28348
asssg28310
(dp28349
g28327
(dp28350
g163
(lp28351
(g25
g25
tp28352
asssg28327
(dp28353
ssg174
g28341
sg175
(dp28354
g28295
(dp28355
sg28310
(dp28356
g28295
g28343
ssg28327
(dp28357
g28310
g28350
sssg180
g28341
sbsg43
g28306
sg65
g66
sg75
g28306
sg76
g181
((lp28358
(lp28359
g184
ag181
((lp28360
(lp28361
g187
ag184
aa(lp28362
g189
ag190
aa(lp28363
g192
ag193
aa(lp28364
g195
ag196
aa(lp28365
g198
ag199
aa(lp28366
g201
ag106
aa(lp28367
g203
ag204
aa(lp28368
g206
ag207
aatp28369
Rp28370
aa(lp28371
g211
ag181
((lp28372
(lp28373
g187
ag211
aa(lp28374
g215
ag216
aa(lp28375
g218
ag219
aa(lp28376
g221
ag222
aa(lp28377
g224
ag225
aa(lp28378
g227
ag228
aa(lp28379
g230
ag231
aa(lp28380
g233
ag234
aa(lp28381
g236
ag237
aa(lp28382
g239
ag240
aa(lp28383
g242
ag243
aa(lp28384
g245
ag246
aa(lp28385
g248
ag249
aa(lp28386
g251
ag252
aa(lp28387
g254
ag255
aa(lp28388
g257
ag258
aa(lp28389
g260
ag261
aa(lp28390
g263
ag264
aa(lp28391
g266
ag267
aatp28392
Rp28393
aa(lp28394
g271
ag181
((lp28395
(lp28396
g187
ag271
aa(lp28397
g275
ag276
aatp28398
Rp28399
aatp28400
Rp28401
sg80
Nsbtp28402
a(g16775
g25489
tp28403
a(g25489
g712
tp28404
a(g25489
g1
(g81
g3
Ntp28405
Rp28406
(dp28407
g85
g1
(g86
g3
Ntp28408
Rp28409
(dp28410
g90
(dp28411
g1
(g92
g3
Ntp28412
Rp28413
(dp28414
g7
(dp28415
sg9
g1
(g135
g3
Ntp28416
Rp28417
(dp28418
g139
(lp28419
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp28420
Rp28421
(dp28422
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p28423
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp28424
g25
Nssg150
(lp28425
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp28426
sg65
S'log_apply_ants_warp_functional_brain_mask_to_standard_0'
p28427
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp28428
sg79
Nsg80
Nsb(dp28429
sg1
(g92
g3
Ntp28430
Rp28431
(dp28432
g7
(dp28433
sg9
g1
(g97
g3
Ntp28434
Rp28435
(dp28436
g14
g15
(g53
tp28437
Rp28438
(dp28439
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g25507
sbsg108
(lp28440
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp28441
sg65
g28427
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp28442
sg79
Nsg80
Nsb(dp28443
sg1
(g92
g3
Ntp28444
Rp28445
(dp28446
g7
(dp28447
sg9
g1
(g97
g3
Ntp28448
Rp28449
(dp28450
g14
g15
(g53
tp28451
Rp28452
(dp28453
g28
g29
sg25
g23
sbsg108
(lp28454
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28455
sg65
g28427
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28456
sg79
Nsg80
Nsb(dp28457
ssg157
(dp28458
sg159
(dp28459
g28413
(dp28460
g28445
(dp28461
g163
(lp28462
(g25
g25
tp28463
asssg28431
(dp28464
g28413
(dp28465
g163
(lp28466
(g107
g107
tp28467
a(g105
g105
tp28468
a(g104
g104
tp28469
a(g14
g14
tp28470
asssg28445
(dp28471
ssg174
g28459
sg175
(dp28472
g28413
(dp28473
g28431
g28465
ssg28431
(dp28474
sg28445
(dp28475
g28413
g28461
sssg180
g28459
sbsg43
g28427
sg65
g66
sg75
g28427
sg76
g181
((lp28476
(lp28477
g184
ag181
((lp28478
(lp28479
g187
ag184
aa(lp28480
g189
ag190
aa(lp28481
g192
ag193
aa(lp28482
g195
ag196
aa(lp28483
g198
ag199
aa(lp28484
g201
ag106
aa(lp28485
g203
ag204
aa(lp28486
g206
ag207
aatp28487
Rp28488
aa(lp28489
g211
ag181
((lp28490
(lp28491
g187
ag211
aa(lp28492
g215
ag216
aa(lp28493
g218
ag219
aa(lp28494
g221
ag222
aa(lp28495
g224
ag225
aa(lp28496
g227
ag228
aa(lp28497
g230
ag231
aa(lp28498
g233
ag234
aa(lp28499
g236
ag237
aa(lp28500
g239
ag240
aa(lp28501
g242
ag243
aa(lp28502
g245
ag246
aa(lp28503
g248
ag249
aa(lp28504
g251
ag252
aa(lp28505
g254
ag255
aa(lp28506
g257
ag258
aa(lp28507
g260
ag261
aa(lp28508
g263
ag264
aa(lp28509
g266
ag267
aatp28510
Rp28511
aa(lp28512
g271
ag181
((lp28513
(lp28514
g187
ag271
aa(lp28515
g275
ag276
aatp28516
Rp28517
aatp28518
Rp28519
sg80
Nsbtp28520
a(g25489
g1320
tp28521
a(g25489
g5580
tp28522
a(g25489
g5281
tp28523
a(g25489
g5437
tp28524
a(g25489
g426
tp28525
a(g25489
g5329
tp28526
a(g25489
g5070
tp28527
a(g25489
g4852
tp28528
a(g25489
g4830
tp28529
a(g25489
g5310
tp28530
a(g25489
g5377
tp28531
a(g25489
g5156
tp28532
a(g25489
g5475
tp28533
a(g25489
g5757
tp28534
a(g25489
g27936
tp28535
a(g25489
g5222
tp28536
a(g25489
g5032
tp28537
a(g20101
g1
(g81
g3
Ntp28538
Rp28539
(dp28540
g85
g1
(g86
g3
Ntp28541
Rp28542
(dp28543
g90
(dp28544
g1
(g92
g3
Ntp28545
Rp28546
(dp28547
g7
(dp28548
sg9
g1
(g135
g3
Ntp28549
Rp28550
(dp28551
g139
(lp28552
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp28553
Rp28554
(dp28555
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p28556
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp28557
g25
Nssg150
(lp28558
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp28559
sg65
S'log_fsl_to_itk_mean_functional_in_mni_0'
p28560
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp28561
sg79
Nsg80
Nsb(dp28562
sg1
(g92
g3
Ntp28563
Rp28564
(dp28565
g7
(dp28566
sg9
g1
(g97
g3
Ntp28567
Rp28568
(dp28569
g14
g15
(g53
tp28570
Rp28571
(dp28572
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g20123
sbsg108
(lp28573
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp28574
sg65
g28560
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp28575
sg79
Nsg80
Nsb(dp28576
sg1
(g92
g3
Ntp28577
Rp28578
(dp28579
g7
(dp28580
sg9
g1
(g97
g3
Ntp28581
Rp28582
(dp28583
g14
g15
(g53
tp28584
Rp28585
(dp28586
g28
g29
sg25
g23
sbsg108
(lp28587
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28588
sg65
g28560
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28589
sg79
Nsg80
Nsb(dp28590
ssg157
(dp28591
sg159
(dp28592
g28546
(dp28593
g28578
(dp28594
g163
(lp28595
(g25
g25
tp28596
asssg28564
(dp28597
g28546
(dp28598
g163
(lp28599
(g107
g107
tp28600
a(g105
g105
tp28601
a(g104
g104
tp28602
a(g14
g14
tp28603
asssg28578
(dp28604
ssg174
g28592
sg175
(dp28605
g28546
(dp28606
g28564
g28598
ssg28564
(dp28607
sg28578
(dp28608
g28546
g28594
sssg180
g28592
sbsg43
g28560
sg65
g66
sg75
g28560
sg76
g181
((lp28609
(lp28610
g184
ag181
((lp28611
(lp28612
g187
ag184
aa(lp28613
g189
ag190
aa(lp28614
g192
ag193
aa(lp28615
g195
ag196
aa(lp28616
g198
ag199
aa(lp28617
g201
ag106
aa(lp28618
g203
ag204
aa(lp28619
g206
ag207
aatp28620
Rp28621
aa(lp28622
g211
ag181
((lp28623
(lp28624
g187
ag211
aa(lp28625
g215
ag216
aa(lp28626
g218
ag219
aa(lp28627
g221
ag222
aa(lp28628
g224
ag225
aa(lp28629
g227
ag228
aa(lp28630
g230
ag231
aa(lp28631
g233
ag234
aa(lp28632
g236
ag237
aa(lp28633
g239
ag240
aa(lp28634
g242
ag243
aa(lp28635
g245
ag246
aa(lp28636
g248
ag249
aa(lp28637
g251
ag252
aa(lp28638
g254
ag255
aa(lp28639
g257
ag258
aa(lp28640
g260
ag261
aa(lp28641
g263
ag264
aa(lp28642
g266
ag267
aatp28643
Rp28644
aa(lp28645
g271
ag181
((lp28646
(lp28647
g187
ag271
aa(lp28648
g275
ag276
aatp28649
Rp28650
aatp28651
Rp28652
sg80
Nsbtp28653
a(g20101
g13175
tp28654
a(g13175
g1
(g81
g3
Ntp28655
Rp28656
(dp28657
g85
g1
(g86
g3
Ntp28658
Rp28659
(dp28660
g90
(dp28661
g1
(g92
g3
Ntp28662
Rp28663
(dp28664
g7
(dp28665
sg9
g1
(g97
g3
Ntp28666
Rp28667
(dp28668
g14
g15
(g53
tp28669
Rp28670
(dp28671
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g13193
sbsg108
(lp28672
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp28673
sg65
S'log_collect_transforms_mean_functional_in_mni_0'
p28674
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp28675
sg79
Nsg80
Nsb(dp28676
sg1
(g92
g3
Ntp28677
Rp28678
(dp28679
g7
(dp28680
sg9
g1
(g97
g3
Ntp28681
Rp28682
(dp28683
g14
g15
(g53
tp28684
Rp28685
(dp28686
g28
g29
sg25
g23
sbsg108
(lp28687
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28688
sg65
g28674
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28689
sg79
Nsg80
Nsb(dp28690
sg1
(g92
g3
Ntp28691
Rp28692
(dp28693
g7
(dp28694
sg9
g1
(g135
g3
Ntp28695
Rp28696
(dp28697
g139
(lp28698
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp28699
Rp28700
(dp28701
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p28702
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp28703
g25
Nssg150
(lp28704
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp28705
sg65
g28674
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp28706
sg79
Nsg80
Nsb(dp28707
ssg157
(dp28708
sg159
(dp28709
g28663
(dp28710
g28692
(dp28711
g163
(lp28712
(g107
g107
tp28713
a(g105
g105
tp28714
a(g104
g104
tp28715
a(g14
g14
tp28716
asssg28678
(dp28717
sg28692
(dp28718
g28678
(dp28719
g163
(lp28720
(g25
g25
tp28721
assssg174
g28709
sg175
(dp28722
g28663
(dp28723
sg28678
(dp28724
g28692
g28719
ssg28692
(dp28725
g28663
g28711
sssg180
g28709
sbsg43
g28674
sg65
g66
sg75
g28674
sg76
g181
((lp28726
(lp28727
g184
ag181
((lp28728
(lp28729
g187
ag184
aa(lp28730
g189
ag190
aa(lp28731
g192
ag193
aa(lp28732
g195
ag196
aa(lp28733
g198
ag199
aa(lp28734
g201
ag106
aa(lp28735
g203
ag204
aa(lp28736
g206
ag207
aatp28737
Rp28738
aa(lp28739
g211
ag181
((lp28740
(lp28741
g187
ag211
aa(lp28742
g215
ag216
aa(lp28743
g218
ag219
aa(lp28744
g221
ag222
aa(lp28745
g224
ag225
aa(lp28746
g227
ag228
aa(lp28747
g230
ag231
aa(lp28748
g233
ag234
aa(lp28749
g236
ag237
aa(lp28750
g239
ag240
aa(lp28751
g242
ag243
aa(lp28752
g245
ag246
aa(lp28753
g248
ag249
aa(lp28754
g251
ag252
aa(lp28755
g254
ag255
aa(lp28756
g257
ag258
aa(lp28757
g260
ag261
aa(lp28758
g263
ag264
aa(lp28759
g266
ag267
aatp28760
Rp28761
aa(lp28762
g271
ag181
((lp28763
(lp28764
g187
ag271
aa(lp28765
g275
ag276
aatp28766
Rp28767
aatp28768
Rp28769
sg80
Nsbtp28770
a(g13175
g24606
tp28771
a(g21382
g16323
tp28772
a(g21382
g1
(g81
g3
Ntp28773
Rp28774
(dp28775
g85
g1
(g86
g3
Ntp28776
Rp28777
(dp28778
g90
(dp28779
g1
(g92
g3
Ntp28780
Rp28781
(dp28782
g7
(dp28783
sg9
g1
(g97
g3
Ntp28784
Rp28785
(dp28786
g14
g15
(g53
tp28787
Rp28788
(dp28789
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g21400
sbsg108
(lp28790
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp28791
sg65
S'log_fsl_to_itk_functional_brain_mask_to_standard_1'
p28792
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp28793
sg79
Nsg80
Nsb(dp28794
sg1
(g92
g3
Ntp28795
Rp28796
(dp28797
g7
(dp28798
sg9
g1
(g135
g3
Ntp28799
Rp28800
(dp28801
g139
(lp28802
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp28803
Rp28804
(dp28805
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p28806
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp28807
g25
Nssg150
(lp28808
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp28809
sg65
g28792
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp28810
sg79
Nsg80
Nsb(dp28811
sg1
(g92
g3
Ntp28812
Rp28813
(dp28814
g7
(dp28815
sg9
g1
(g97
g3
Ntp28816
Rp28817
(dp28818
g14
g15
(g53
tp28819
Rp28820
(dp28821
g28
g29
sg25
g23
sbsg108
(lp28822
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28823
sg65
g28792
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28824
sg79
Nsg80
Nsb(dp28825
ssg157
(dp28826
sg159
(dp28827
g28781
(dp28828
g28796
(dp28829
g163
(lp28830
(g107
g107
tp28831
a(g105
g105
tp28832
a(g104
g104
tp28833
a(g14
g14
tp28834
asssg28796
(dp28835
g28813
(dp28836
g163
(lp28837
(g25
g25
tp28838
asssg28813
(dp28839
ssg174
g28827
sg175
(dp28840
g28781
(dp28841
sg28796
(dp28842
g28781
g28829
ssg28813
(dp28843
g28796
g28836
sssg180
g28827
sbsg43
g28792
sg65
g66
sg75
g28792
sg76
g181
((lp28844
(lp28845
g184
ag181
((lp28846
(lp28847
g187
ag184
aa(lp28848
g189
ag190
aa(lp28849
g192
ag193
aa(lp28850
g195
ag196
aa(lp28851
g198
ag199
aa(lp28852
g201
ag106
aa(lp28853
g203
ag204
aa(lp28854
g206
ag207
aatp28855
Rp28856
aa(lp28857
g211
ag181
((lp28858
(lp28859
g187
ag211
aa(lp28860
g215
ag216
aa(lp28861
g218
ag219
aa(lp28862
g221
ag222
aa(lp28863
g224
ag225
aa(lp28864
g227
ag228
aa(lp28865
g230
ag231
aa(lp28866
g233
ag234
aa(lp28867
g236
ag237
aa(lp28868
g239
ag240
aa(lp28869
g242
ag243
aa(lp28870
g245
ag246
aa(lp28871
g248
ag249
aa(lp28872
g251
ag252
aa(lp28873
g254
ag255
aa(lp28874
g257
ag258
aa(lp28875
g260
ag261
aa(lp28876
g263
ag264
aa(lp28877
g266
ag267
aatp28878
Rp28879
aa(lp28880
g271
ag181
((lp28881
(lp28882
g187
ag271
aa(lp28883
g275
ag276
aatp28884
Rp28885
aatp28886
Rp28887
sg80
Nsbtp28888
a(g24606
g1
(g81
g3
Ntp28889
Rp28890
(dp28891
g85
g1
(g86
g3
Ntp28892
Rp28893
(dp28894
g90
(dp28895
g1
(g92
g3
Ntp28896
Rp28897
(dp28898
g7
(dp28899
sg9
g1
(g97
g3
Ntp28900
Rp28901
(dp28902
g14
g15
(g53
tp28903
Rp28904
(dp28905
g28
g29
sg25
g23
sbsg108
(lp28906
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp28907
sg65
S'log_apply_ants_warp_mean_functional_in_mni_0'
p28908
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp28909
sg79
Nsg80
Nsb(dp28910
sg1
(g92
g3
Ntp28911
Rp28912
(dp28913
g7
(dp28914
sg9
g1
(g97
g3
Ntp28915
Rp28916
(dp28917
g14
g15
(g53
tp28918
Rp28919
(dp28920
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g24628
sbsg108
(lp28921
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp28922
sg65
g28908
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp28923
sg79
Nsg80
Nsb(dp28924
sg1
(g92
g3
Ntp28925
Rp28926
(dp28927
g7
(dp28928
sg9
g1
(g135
g3
Ntp28929
Rp28930
(dp28931
g139
(lp28932
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp28933
Rp28934
(dp28935
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p28936
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp28937
g25
Nssg150
(lp28938
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp28939
sg65
g28908
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp28940
sg79
Nsg80
Nsb(dp28941
ssg157
(dp28942
sg159
(dp28943
g28897
(dp28944
sg28912
(dp28945
g28926
(dp28946
g163
(lp28947
(g107
g107
tp28948
a(g105
g105
tp28949
a(g104
g104
tp28950
a(g14
g14
tp28951
asssg28926
(dp28952
g28897
(dp28953
g163
(lp28954
(g25
g25
tp28955
assssg174
g28943
sg175
(dp28956
g28897
(dp28957
g28926
g28953
ssg28912
(dp28958
sg28926
(dp28959
g28912
g28946
sssg180
g28943
sbsg43
g28908
sg65
g66
sg75
g28908
sg76
g181
((lp28960
(lp28961
g184
ag181
((lp28962
(lp28963
g187
ag184
aa(lp28964
g189
ag190
aa(lp28965
g192
ag193
aa(lp28966
g195
ag196
aa(lp28967
g198
ag199
aa(lp28968
g201
ag106
aa(lp28969
g203
ag204
aa(lp28970
g206
ag207
aatp28971
Rp28972
aa(lp28973
g211
ag181
((lp28974
(lp28975
g187
ag211
aa(lp28976
g215
ag216
aa(lp28977
g218
ag219
aa(lp28978
g221
ag222
aa(lp28979
g224
ag225
aa(lp28980
g227
ag228
aa(lp28981
g230
ag231
aa(lp28982
g233
ag234
aa(lp28983
g236
ag237
aa(lp28984
g239
ag240
aa(lp28985
g242
ag243
aa(lp28986
g245
ag246
aa(lp28987
g248
ag249
aa(lp28988
g251
ag252
aa(lp28989
g254
ag255
aa(lp28990
g257
ag258
aa(lp28991
g260
ag261
aa(lp28992
g263
ag264
aa(lp28993
g266
ag267
aatp28994
Rp28995
aa(lp28996
g271
ag181
((lp28997
(lp28998
g187
ag271
aa(lp28999
g275
ag276
aatp29000
Rp29001
aatp29002
Rp29003
sg80
Nsbtp29004
a(g15759
g25859
tp29005
a(g15759
g1
(g81
g3
Ntp29006
Rp29007
(dp29008
g85
g1
(g86
g3
Ntp29009
Rp29010
(dp29011
g90
(dp29012
g1
(g92
g3
Ntp29013
Rp29014
(dp29015
g7
(dp29016
sg9
g1
(g97
g3
Ntp29017
Rp29018
(dp29019
g14
g15
(g53
tp29020
Rp29021
(dp29022
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g15777
sbsg108
(lp29023
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29024
sg65
S'log_collect_transforms_functional_mni_1'
p29025
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29026
sg79
Nsg80
Nsb(dp29027
sg1
(g92
g3
Ntp29028
Rp29029
(dp29030
g7
(dp29031
sg9
g1
(g135
g3
Ntp29032
Rp29033
(dp29034
g139
(lp29035
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp29036
Rp29037
(dp29038
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p29039
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp29040
g25
Nssg150
(lp29041
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp29042
sg65
g29025
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp29043
sg79
Nsg80
Nsb(dp29044
sg1
(g92
g3
Ntp29045
Rp29046
(dp29047
g7
(dp29048
sg9
g1
(g97
g3
Ntp29049
Rp29050
(dp29051
g14
g15
(g53
tp29052
Rp29053
(dp29054
g28
g29
sg25
g23
sbsg108
(lp29055
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29056
sg65
g29025
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29057
sg79
Nsg80
Nsb(dp29058
ssg157
(dp29059
sg159
(dp29060
g29014
(dp29061
g29029
(dp29062
g163
(lp29063
(g107
g107
tp29064
a(g105
g105
tp29065
a(g104
g104
tp29066
a(g14
g14
tp29067
asssg29029
(dp29068
g29046
(dp29069
g163
(lp29070
(g25
g25
tp29071
asssg29046
(dp29072
ssg174
g29060
sg175
(dp29073
g29014
(dp29074
sg29029
(dp29075
g29014
g29062
ssg29046
(dp29076
g29029
g29069
sssg180
g29060
sbsg43
g29025
sg65
g66
sg75
g29025
sg76
g181
((lp29077
(lp29078
g184
ag181
((lp29079
(lp29080
g187
ag184
aa(lp29081
g189
ag190
aa(lp29082
g192
ag193
aa(lp29083
g195
ag196
aa(lp29084
g198
ag199
aa(lp29085
g201
ag106
aa(lp29086
g203
ag204
aa(lp29087
g206
ag207
aatp29088
Rp29089
aa(lp29090
g211
ag181
((lp29091
(lp29092
g187
ag211
aa(lp29093
g215
ag216
aa(lp29094
g218
ag219
aa(lp29095
g221
ag222
aa(lp29096
g224
ag225
aa(lp29097
g227
ag228
aa(lp29098
g230
ag231
aa(lp29099
g233
ag234
aa(lp29100
g236
ag237
aa(lp29101
g239
ag240
aa(lp29102
g242
ag243
aa(lp29103
g245
ag246
aa(lp29104
g248
ag249
aa(lp29105
g251
ag252
aa(lp29106
g254
ag255
aa(lp29107
g257
ag258
aa(lp29108
g260
ag261
aa(lp29109
g263
ag264
aa(lp29110
g266
ag267
aatp29111
Rp29112
aa(lp29113
g271
ag181
((lp29114
(lp29115
g187
ag271
aa(lp29116
g275
ag276
aatp29117
Rp29118
aatp29119
Rp29120
sg80
Nsbtp29121
a(g25859
g6934
tp29122
a(g25859
g5877
tp29123
a(g25859
g7753
tp29124
a(g25859
g1
(g81
g3
Ntp29125
Rp29126
(dp29127
g85
g1
(g86
g3
Ntp29128
Rp29129
(dp29130
g90
(dp29131
g1
(g92
g3
Ntp29132
Rp29133
(dp29134
g7
(dp29135
sg9
g1
(g3959
g3
Ntp29136
Rp29137
(dp29138
g14
g15
(g3963
tp29139
Rp29140
(dp29141
g20
I00
sg28
g29
sg26
g23
sg3967
g3968
sg30
g31
sg32
g1
(g33
g34
(dp29142
g36
g37
stp29143
Rp29144
(dp29145
g41
S'environ_items'
p29146
sg43
g32
sbsg44
g23
sg45
g37
sg3371
g3974
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g3975
sg63
(dp29147
sg65
S'temporal_regression_sca_1'
p29148
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3975
sg76
Nsg77
(lp29149
sg79
Nsg80
Nsb(dp29150
sg1
(g92
g3
Ntp29151
Rp29152
(dp29153
g7
(dp29154
sg9
g1
(g135
g3
Ntp29155
Rp29156
(dp29157
g139
(lp29158
g28040
ag28041
asg14
g15
(g142
tp29159
Rp29160
(dp29161
g20
I00
sg28040
g23
sg28
g29
sg146
S'S\'def map_to_roi(timeseries, maps):\\n    """\\n    Renames the outputs of the temporal multiple regression workflow for sca \\n    according to the header information of the timeseries.txt file that was \\n    passed\\n\\n    NOTE: This is only run if the temporal regression is run as part of sca\\n          (which = \\\'RT\\\') when calling the temporal regression workflow.\\n          If you run the temporal regression workflow manually, don\\\\\\\'t set \\n          (which = \\\'RT\\\') unless you provide a timeseries.txt file with a header\\n          containing the names of the timeseries\\n\\n\\n    Parameters\\n    ----------\\n\\n    timeseries: string\\n        Input timeseries.txt file\\n\\n    maps: List (nifti files)\\n        List of output files generated by the temporal regression workflow if\\n        (which == \\\'RT\\\')\\n\\n\\n    Returns\\n    -------\\n\\n    labels : List (strings)\\n        List of names that the output files should be renamed to\\n\\n    maps: List (nifti files)\\n        List of output files generated by the temporal regression workflow if\\n        (which == \\\'RT\\\')\\n    """\\n\\n    try:\\n        import os\\n        import numpy as np\\n        testMat = np.loadtxt(timeseries)\\n        timepoints, rois = testMat.shape\\n\\n        if rois > timepoints:\\n            raise Exception(\\\'The number of timepoints is smaller than the\\\'\\n                            + \\\' number of ROIs to run - therefore the\\\'\\n                            + \\\' GLM is underspecified and can\\\\\\\'t run.\\\')\\n        labels = open(timeseries, \\\'r\\\').readline().split()\\n        labels = [os.path.join(os.getcwd(), \\\'sca_tempreg_z_maps_roi_\\\' + str(l)) \\\\\\n                  for l in labels]\\n        numMaps = len(maps)\\n        maps.sort()\\n        if not numMaps / 2 == rois:\\n            raise Exception(\\\'You specified \\\' + str(rois) + \\\' timeseries but \\\'\\n                            + \\\' only \\\' + str(numMaps / 2) + \\\' spatial maps were\\\'\\n                            + \\\' generated\\\')\\n        maps = maps[:rois]\\n        # output = zip(labels, component_maps)\\n        print "labels, maps", labels, maps\\n    except Exception:\\n        print "Error while mapping roi to dual regression split 3d volumes"\\n    return labels, maps\\n\'\n.'
p29162
sg28041
g23
sbsg148
(dp29163
g28040
Nsg28047
Nssg150
(lp29164
g28047
ag28040
asg152
Nsbsg51
Nsg43
g28049
sg63
(dp29165
sg65
g29148
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g28049
sg76
Nsg77
(lp29166
sg79
Nsg80
Nsb(dp29167
sg1
(g92
g3
Ntp29168
Rp29169
(dp29170
g7
(dp29171
sg9
g1
(g97
g3
Ntp29172
Rp29173
(dp29174
g14
g15
(g53
tp29175
Rp29176
(dp29177
g3945
I01
sg3946
g23
sg3947
g23
sg3948
g23
sg3949
I01
sg28
g29
sbsg108
(lp29178
g3946
ag3947
ag3948
ag3949
ag3945
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29179
sg65
g29148
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29180
sg79
Nsg80
Nsb(dp29181
sg1
(g92
g3
Ntp29182
Rp29183
(dp29184
g7
(dp29185
sg9
g1
(g4000
g3
Ntp29186
Rp29187
(dp29188
g14
g15
(g4004
tp29189
Rp29190
(dp29191
g28
g29
sg4008
g23
sg4009
g23
sg750
g23
sg4010
g23
sg4011
g23
sg4012
g23
sg4013
g23
sg4014
g23
sg44
g23
sg3949
g23
sg4015
g23
sg20
I00
sg4016
g23
sg26
g23
sg4017
g4018
sg30
g31
sg4019
g23
sg4020
g23
sg4021
g23
sg4022
g23
sg25
g4023
sg4024
g23
sg32
g1
(g33
g34
(dp29192
g36
g37
stp29193
Rp29194
(dp29195
g41
S'environ_items'
p29196
sg43
g32
sbsg45
g37
sg4030
g23
sg4031
g23
sbsg48
g37
sg49
Nsg50
g31
sbsg51
Nsg43
g4032
sg63
(dp29197
sg65
g29148
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4032
sg76
Nsg77
(lp29198
sg79
Nsg80
Nsb(dp29199
sg1
(g2
g3
Ntp29200
Rp29201
(dp29202
g7
(dp29203
sg9
g1
(g27979
g3
Ntp29204
Rp29205
(dp29206
g14
g15
(g27983
tp29207
Rp29208
(dp29209
g28
g29
sg27987
g23
sg27988
g23
sg27989
I01
sg44
g23
sg27990
I00
sbsg27991
(lp29210
sbsg51
Nsg52
g15
(g53
tp29211
Rp29212
(dp29213
g28
g29
sg27987
g23
sg27988
g23
sg27989
I01
sg44
g23
sg27990
I00
sbsg43
g27996
sg63
(dp29214
sg65
g29148
sg67
(lp29215
g44
ag27987
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g27996
sg76
Nsg77
(lp29216
sg79
Nsg80
Nsb(dp29217
sg1
(g92
g3
Ntp29218
Rp29219
(dp29220
g7
(dp29221
sg9
g1
(g135
g3
Ntp29222
Rp29223
(dp29224
g139
(lp29225
g44
asg14
g15
(g142
tp29226
Rp29227
(dp29228
g20
I00
sg28
g29
sg146
S'S"def check_ts(in_file):\\n    import numpy as np\\n    timepoints, rois = np.loadtxt(in_file).shape\\n    if rois > timepoints:\\n        message = (\'\\\\n\\\\n\\\\n****The number of timepoints (\' + str(timepoints)\\n                   + \') is smaller than the number of ROIs to run (\'\\n                   + str(rois) + \') - therefore the GLM is\'\\n                   + \' underspecified and can\\\\\'t run.****\\\\n\\\\n\\\\n\')\\n        print(message)\\n        raise Exception(message)\\n    else:\\n        return in_file\\n"\n.'
p29229
sg44
g23
sbsg148
(dp29230
g25
Nssg150
(lp29231
g25
asg152
Nsbsg51
Nsg43
g4050
sg63
(dp29232
sg65
g29148
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g4050
sg76
Nsg77
(lp29233
sg79
Nsg80
Nsb(dp29234
sg1
(g92
g3
Ntp29235
Rp29236
(dp29237
g7
(dp29238
sg9
g1
(g97
g3
Ntp29239
Rp29240
(dp29241
g14
g15
(g53
tp29242
Rp29243
(dp29244
g3989
g23
sg28
g29
sg3990
g23
sg3991
g23
sbsg108
(lp29245
g3990
ag3991
ag3989
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29246
sg65
g29148
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29247
sg79
Nsg80
Nsb(dp29248
ssg157
(dp29249
sg159
(dp29250
g29133
(dp29251
g29152
(dp29252
g163
(lp29253
(g4069
g28040
tp29254
asssg29152
(dp29255
g29201
(dp29256
g163
(lp29257
(g28047
g27987
tp29258
a(g28040
g44
tp29259
asssg29169
(dp29260
g29219
(dp29261
g163
(lp29262
(g3947
g44
tp29263
assg29183
(dp29264
g163
(lp29265
(g3946
g44
tp29266
a(g3949
g3949
tp29267
a(g3945
g4030
tp29268
a(g3948
g750
tp29269
assg29152
(dp29270
g163
(lp29271
(g3947
g28041
tp29272
asssg29183
(dp29273
g29236
(dp29274
g163
(lp29275
(g25
g3990
tp29276
a(g4076
g3991
tp29277
assg29133
(dp29278
g163
(lp29279
(g4076
g44
tp29280
asssg29201
(dp29281
g29236
(dp29282
g163
(lp29283
(g25
g3989
tp29284
asssg29219
(dp29285
g29183
(dp29286
g163
(lp29287
(g25
g4013
tp29288
asssg29236
(dp29289
ssg174
g29250
sg175
(dp29290
g29133
(dp29291
g29183
g29278
ssg29152
(dp29292
g29133
g29252
sg29169
g29270
ssg29169
(dp29293
sg29183
(dp29294
g29219
g29286
sg29169
g29264
ssg29201
(dp29295
g29152
g29256
ssg29219
(dp29296
g29169
g29261
ssg29236
(dp29297
g29183
g29274
sg29201
g29282
sssg180
g29250
sbsg43
g29148
sg65
g66
sg75
g29148
sg76
g181
((lp29298
(lp29299
g184
ag181
((lp29300
(lp29301
g187
ag184
aa(lp29302
g189
ag190
aa(lp29303
g192
ag193
aa(lp29304
g195
ag196
aa(lp29305
g198
ag199
aa(lp29306
g201
ag106
aa(lp29307
g203
ag204
aa(lp29308
g206
ag207
aatp29309
Rp29310
aa(lp29311
g211
ag181
((lp29312
(lp29313
g187
ag211
aa(lp29314
g215
ag216
aa(lp29315
g218
ag219
aa(lp29316
g221
ag222
aa(lp29317
g224
ag225
aa(lp29318
g227
ag228
aa(lp29319
g230
ag231
aa(lp29320
g233
ag234
aa(lp29321
g236
ag237
aa(lp29322
g239
ag240
aa(lp29323
g242
ag243
aa(lp29324
g245
ag246
aa(lp29325
g248
ag249
aa(lp29326
g251
ag252
aa(lp29327
g254
ag255
aa(lp29328
g257
ag258
aa(lp29329
g260
ag261
aa(lp29330
g263
ag264
aa(lp29331
g266
ag267
aatp29332
Rp29333
aa(lp29334
g271
ag181
((lp29335
(lp29336
g187
ag271
aa(lp29337
g275
ag276
aatp29338
Rp29339
aatp29340
Rp29341
sg80
Nsbtp29342
a(g25859
g6474
tp29343
a(g25859
g5895
tp29344
a(g25859
g7086
tp29345
a(g25859
g1
(g81
g3
Ntp29346
Rp29347
(dp29348
g85
g1
(g86
g3
Ntp29349
Rp29350
(dp29351
g90
(dp29352
g1
(g92
g3
Ntp29353
Rp29354
(dp29355
g7
(dp29356
sg9
g1
(g97
g3
Ntp29357
Rp29358
(dp29359
g14
g15
(g53
tp29360
Rp29361
(dp29362
g28
g29
sg25
g23
sbsg108
(lp29363
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29364
sg65
S'log_apply_ants_warp_functional_mni_1'
p29365
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29366
sg79
Nsg80
Nsb(dp29367
sg1
(g92
g3
Ntp29368
Rp29369
(dp29370
g7
(dp29371
sg9
g1
(g97
g3
Ntp29372
Rp29373
(dp29374
g14
g15
(g53
tp29375
Rp29376
(dp29377
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g25881
sbsg108
(lp29378
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29379
sg65
g29365
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29380
sg79
Nsg80
Nsb(dp29381
sg1
(g92
g3
Ntp29382
Rp29383
(dp29384
g7
(dp29385
sg9
g1
(g135
g3
Ntp29386
Rp29387
(dp29388
g139
(lp29389
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp29390
Rp29391
(dp29392
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p29393
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp29394
g25
Nssg150
(lp29395
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp29396
sg65
g29365
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp29397
sg79
Nsg80
Nsb(dp29398
ssg157
(dp29399
sg159
(dp29400
g29354
(dp29401
sg29369
(dp29402
g29383
(dp29403
g163
(lp29404
(g107
g107
tp29405
a(g105
g105
tp29406
a(g104
g104
tp29407
a(g14
g14
tp29408
asssg29383
(dp29409
g29354
(dp29410
g163
(lp29411
(g25
g25
tp29412
assssg174
g29400
sg175
(dp29413
g29354
(dp29414
g29383
g29410
ssg29369
(dp29415
sg29383
(dp29416
g29369
g29403
sssg180
g29400
sbsg43
g29365
sg65
g66
sg75
g29365
sg76
g181
((lp29417
(lp29418
g184
ag181
((lp29419
(lp29420
g187
ag184
aa(lp29421
g189
ag190
aa(lp29422
g192
ag193
aa(lp29423
g195
ag196
aa(lp29424
g198
ag199
aa(lp29425
g201
ag106
aa(lp29426
g203
ag204
aa(lp29427
g206
ag207
aatp29428
Rp29429
aa(lp29430
g211
ag181
((lp29431
(lp29432
g187
ag211
aa(lp29433
g215
ag216
aa(lp29434
g218
ag219
aa(lp29435
g221
ag222
aa(lp29436
g224
ag225
aa(lp29437
g227
ag228
aa(lp29438
g230
ag231
aa(lp29439
g233
ag234
aa(lp29440
g236
ag237
aa(lp29441
g239
ag240
aa(lp29442
g242
ag243
aa(lp29443
g245
ag246
aa(lp29444
g248
ag249
aa(lp29445
g251
ag252
aa(lp29446
g254
ag255
aa(lp29447
g257
ag258
aa(lp29448
g260
ag261
aa(lp29449
g263
ag264
aa(lp29450
g266
ag267
aatp29451
Rp29452
aa(lp29453
g271
ag181
((lp29454
(lp29455
g187
ag271
aa(lp29456
g275
ag276
aatp29457
Rp29458
aatp29459
Rp29460
sg80
Nsbtp29461
a(g25859
g6322
tp29462
a(g16323
g1
(g81
g3
Ntp29463
Rp29464
(dp29465
g85
g1
(g86
g3
Ntp29466
Rp29467
(dp29468
g90
(dp29469
g1
(g92
g3
Ntp29470
Rp29471
(dp29472
g7
(dp29473
sg9
g1
(g97
g3
Ntp29474
Rp29475
(dp29476
g14
g15
(g53
tp29477
Rp29478
(dp29479
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g16341
sbsg108
(lp29480
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29481
sg65
S'log_collect_transforms_functional_brain_mask_to_standard_1'
p29482
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29483
sg79
Nsg80
Nsb(dp29484
sg1
(g92
g3
Ntp29485
Rp29486
(dp29487
g7
(dp29488
sg9
g1
(g135
g3
Ntp29489
Rp29490
(dp29491
g139
(lp29492
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp29493
Rp29494
(dp29495
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p29496
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp29497
g25
Nssg150
(lp29498
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp29499
sg65
g29482
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp29500
sg79
Nsg80
Nsb(dp29501
sg1
(g92
g3
Ntp29502
Rp29503
(dp29504
g7
(dp29505
sg9
g1
(g97
g3
Ntp29506
Rp29507
(dp29508
g14
g15
(g53
tp29509
Rp29510
(dp29511
g28
g29
sg25
g23
sbsg108
(lp29512
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29513
sg65
g29482
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29514
sg79
Nsg80
Nsb(dp29515
ssg157
(dp29516
sg159
(dp29517
g29471
(dp29518
g29486
(dp29519
g163
(lp29520
(g107
g107
tp29521
a(g105
g105
tp29522
a(g104
g104
tp29523
a(g14
g14
tp29524
asssg29486
(dp29525
g29503
(dp29526
g163
(lp29527
(g25
g25
tp29528
asssg29503
(dp29529
ssg174
g29517
sg175
(dp29530
g29471
(dp29531
sg29486
(dp29532
g29471
g29519
ssg29503
(dp29533
g29486
g29526
sssg180
g29517
sbsg43
g29482
sg65
g66
sg75
g29482
sg76
g181
((lp29534
(lp29535
g184
ag181
((lp29536
(lp29537
g187
ag184
aa(lp29538
g189
ag190
aa(lp29539
g192
ag193
aa(lp29540
g195
ag196
aa(lp29541
g198
ag199
aa(lp29542
g201
ag106
aa(lp29543
g203
ag204
aa(lp29544
g206
ag207
aatp29545
Rp29546
aa(lp29547
g211
ag181
((lp29548
(lp29549
g187
ag211
aa(lp29550
g215
ag216
aa(lp29551
g218
ag219
aa(lp29552
g221
ag222
aa(lp29553
g224
ag225
aa(lp29554
g227
ag228
aa(lp29555
g230
ag231
aa(lp29556
g233
ag234
aa(lp29557
g236
ag237
aa(lp29558
g239
ag240
aa(lp29559
g242
ag243
aa(lp29560
g245
ag246
aa(lp29561
g248
ag249
aa(lp29562
g251
ag252
aa(lp29563
g254
ag255
aa(lp29564
g257
ag258
aa(lp29565
g260
ag261
aa(lp29566
g263
ag264
aa(lp29567
g266
ag267
aatp29568
Rp29569
aa(lp29570
g271
ag181
((lp29571
(lp29572
g187
ag271
aa(lp29573
g275
ag276
aatp29574
Rp29575
aatp29576
Rp29577
sg80
Nsbtp29578
a(g16323
g24958
tp29579
a(g24958
g993
tp29580
a(g24958
g5262
tp29581
a(g24958
g5541
tp29582
a(g24958
g5637
tp29583
a(g24958
g5184
tp29584
a(g24958
g5494
tp29585
a(g24958
g5656
tp29586
a(g24958
g5089
tp29587
a(g24958
g5358
tp29588
a(g24958
g5513
tp29589
a(g24958
g1
(g81
g3
Ntp29590
Rp29591
(dp29592
g85
g1
(g86
g3
Ntp29593
Rp29594
(dp29595
g90
(dp29596
g1
(g92
g3
Ntp29597
Rp29598
(dp29599
g7
(dp29600
sg9
g1
(g97
g3
Ntp29601
Rp29602
(dp29603
g14
g15
(g53
tp29604
Rp29605
(dp29606
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g24980
sbsg108
(lp29607
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29608
sg65
S'log_apply_ants_warp_functional_brain_mask_to_standard_1'
p29609
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29610
sg79
Nsg80
Nsb(dp29611
sg1
(g92
g3
Ntp29612
Rp29613
(dp29614
g7
(dp29615
sg9
g1
(g135
g3
Ntp29616
Rp29617
(dp29618
g139
(lp29619
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp29620
Rp29621
(dp29622
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p29623
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp29624
g25
Nssg150
(lp29625
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp29626
sg65
g29609
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp29627
sg79
Nsg80
Nsb(dp29628
sg1
(g92
g3
Ntp29629
Rp29630
(dp29631
g7
(dp29632
sg9
g1
(g97
g3
Ntp29633
Rp29634
(dp29635
g14
g15
(g53
tp29636
Rp29637
(dp29638
g28
g29
sg25
g23
sbsg108
(lp29639
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29640
sg65
g29609
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29641
sg79
Nsg80
Nsb(dp29642
ssg157
(dp29643
sg159
(dp29644
g29598
(dp29645
g29613
(dp29646
g163
(lp29647
(g107
g107
tp29648
a(g105
g105
tp29649
a(g104
g104
tp29650
a(g14
g14
tp29651
asssg29613
(dp29652
g29630
(dp29653
g163
(lp29654
(g25
g25
tp29655
asssg29630
(dp29656
ssg174
g29644
sg175
(dp29657
g29598
(dp29658
sg29613
(dp29659
g29598
g29646
ssg29630
(dp29660
g29613
g29653
sssg180
g29644
sbsg43
g29609
sg65
g66
sg75
g29609
sg76
g181
((lp29661
(lp29662
g184
ag181
((lp29663
(lp29664
g187
ag184
aa(lp29665
g189
ag190
aa(lp29666
g192
ag193
aa(lp29667
g195
ag196
aa(lp29668
g198
ag199
aa(lp29669
g201
ag106
aa(lp29670
g203
ag204
aa(lp29671
g206
ag207
aatp29672
Rp29673
aa(lp29674
g211
ag181
((lp29675
(lp29676
g187
ag211
aa(lp29677
g215
ag216
aa(lp29678
g218
ag219
aa(lp29679
g221
ag222
aa(lp29680
g224
ag225
aa(lp29681
g227
ag228
aa(lp29682
g230
ag231
aa(lp29683
g233
ag234
aa(lp29684
g236
ag237
aa(lp29685
g239
ag240
aa(lp29686
g242
ag243
aa(lp29687
g245
ag246
aa(lp29688
g248
ag249
aa(lp29689
g251
ag252
aa(lp29690
g254
ag255
aa(lp29691
g257
ag258
aa(lp29692
g260
ag261
aa(lp29693
g263
ag264
aa(lp29694
g266
ag267
aatp29695
Rp29696
aa(lp29697
g271
ag181
((lp29698
(lp29699
g187
ag271
aa(lp29700
g275
ag276
aatp29701
Rp29702
aatp29703
Rp29704
sg80
Nsbtp29705
a(g24958
g5117
tp29706
a(g24958
g4956
tp29707
a(g24958
g5895
tp29708
a(g24958
g4928
tp29709
a(g24958
g1537
tp29710
a(g24958
g29126
tp29711
a(g24958
g569
tp29712
a(g24958
g4975
tp29713
a(g21796
g1
(g81
g3
Ntp29714
Rp29715
(dp29716
g85
g1
(g86
g3
Ntp29717
Rp29718
(dp29719
g90
(dp29720
g1
(g92
g3
Ntp29721
Rp29722
(dp29723
g7
(dp29724
sg9
g1
(g97
g3
Ntp29725
Rp29726
(dp29727
g14
g15
(g53
tp29728
Rp29729
(dp29730
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g21814
sbsg108
(lp29731
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29732
sg65
S'log_fsl_to_itk_mean_functional_in_mni_1'
p29733
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29734
sg79
Nsg80
Nsb(dp29735
sg1
(g92
g3
Ntp29736
Rp29737
(dp29738
g7
(dp29739
sg9
g1
(g135
g3
Ntp29740
Rp29741
(dp29742
g139
(lp29743
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp29744
Rp29745
(dp29746
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p29747
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp29748
g25
Nssg150
(lp29749
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp29750
sg65
g29733
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp29751
sg79
Nsg80
Nsb(dp29752
sg1
(g92
g3
Ntp29753
Rp29754
(dp29755
g7
(dp29756
sg9
g1
(g97
g3
Ntp29757
Rp29758
(dp29759
g14
g15
(g53
tp29760
Rp29761
(dp29762
g28
g29
sg25
g23
sbsg108
(lp29763
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29764
sg65
g29733
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29765
sg79
Nsg80
Nsb(dp29766
ssg157
(dp29767
sg159
(dp29768
g29722
(dp29769
g29737
(dp29770
g163
(lp29771
(g107
g107
tp29772
a(g105
g105
tp29773
a(g104
g104
tp29774
a(g14
g14
tp29775
asssg29737
(dp29776
g29754
(dp29777
g163
(lp29778
(g25
g25
tp29779
asssg29754
(dp29780
ssg174
g29768
sg175
(dp29781
g29722
(dp29782
sg29737
(dp29783
g29722
g29770
ssg29754
(dp29784
g29737
g29777
sssg180
g29768
sbsg43
g29733
sg65
g66
sg75
g29733
sg76
g181
((lp29785
(lp29786
g184
ag181
((lp29787
(lp29788
g187
ag184
aa(lp29789
g189
ag190
aa(lp29790
g192
ag193
aa(lp29791
g195
ag196
aa(lp29792
g198
ag199
aa(lp29793
g201
ag106
aa(lp29794
g203
ag204
aa(lp29795
g206
ag207
aatp29796
Rp29797
aa(lp29798
g211
ag181
((lp29799
(lp29800
g187
ag211
aa(lp29801
g215
ag216
aa(lp29802
g218
ag219
aa(lp29803
g221
ag222
aa(lp29804
g224
ag225
aa(lp29805
g227
ag228
aa(lp29806
g230
ag231
aa(lp29807
g233
ag234
aa(lp29808
g236
ag237
aa(lp29809
g239
ag240
aa(lp29810
g242
ag243
aa(lp29811
g245
ag246
aa(lp29812
g248
ag249
aa(lp29813
g251
ag252
aa(lp29814
g254
ag255
aa(lp29815
g257
ag258
aa(lp29816
g260
ag261
aa(lp29817
g263
ag264
aa(lp29818
g266
ag267
aatp29819
Rp29820
aa(lp29821
g271
ag181
((lp29822
(lp29823
g187
ag271
aa(lp29824
g275
ag276
aatp29825
Rp29826
aatp29827
Rp29828
sg80
Nsbtp29829
a(g21796
g13287
tp29830
a(g13287
g1
(g81
g3
Ntp29831
Rp29832
(dp29833
g85
g1
(g86
g3
Ntp29834
Rp29835
(dp29836
g90
(dp29837
g1
(g92
g3
Ntp29838
Rp29839
(dp29840
g7
(dp29841
sg9
g1
(g97
g3
Ntp29842
Rp29843
(dp29844
g14
g15
(g53
tp29845
Rp29846
(dp29847
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g13305
sbsg108
(lp29848
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29849
sg65
S'log_collect_transforms_mean_functional_in_mni_1'
p29850
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29851
sg79
Nsg80
Nsb(dp29852
sg1
(g92
g3
Ntp29853
Rp29854
(dp29855
g7
(dp29856
sg9
g1
(g97
g3
Ntp29857
Rp29858
(dp29859
g14
g15
(g53
tp29860
Rp29861
(dp29862
g28
g29
sg25
g23
sbsg108
(lp29863
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29864
sg65
g29850
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29865
sg79
Nsg80
Nsb(dp29866
sg1
(g92
g3
Ntp29867
Rp29868
(dp29869
g7
(dp29870
sg9
g1
(g135
g3
Ntp29871
Rp29872
(dp29873
g139
(lp29874
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp29875
Rp29876
(dp29877
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p29878
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp29879
g25
Nssg150
(lp29880
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp29881
sg65
g29850
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp29882
sg79
Nsg80
Nsb(dp29883
ssg157
(dp29884
sg159
(dp29885
g29839
(dp29886
g29868
(dp29887
g163
(lp29888
(g107
g107
tp29889
a(g105
g105
tp29890
a(g104
g104
tp29891
a(g14
g14
tp29892
asssg29854
(dp29893
sg29868
(dp29894
g29854
(dp29895
g163
(lp29896
(g25
g25
tp29897
assssg174
g29885
sg175
(dp29898
g29839
(dp29899
sg29854
(dp29900
g29868
g29895
ssg29868
(dp29901
g29839
g29887
sssg180
g29885
sbsg43
g29850
sg65
g66
sg75
g29850
sg76
g181
((lp29902
(lp29903
g184
ag181
((lp29904
(lp29905
g187
ag184
aa(lp29906
g189
ag190
aa(lp29907
g192
ag193
aa(lp29908
g195
ag196
aa(lp29909
g198
ag199
aa(lp29910
g201
ag106
aa(lp29911
g203
ag204
aa(lp29912
g206
ag207
aatp29913
Rp29914
aa(lp29915
g211
ag181
((lp29916
(lp29917
g187
ag211
aa(lp29918
g215
ag216
aa(lp29919
g218
ag219
aa(lp29920
g221
ag222
aa(lp29921
g224
ag225
aa(lp29922
g227
ag228
aa(lp29923
g230
ag231
aa(lp29924
g233
ag234
aa(lp29925
g236
ag237
aa(lp29926
g239
ag240
aa(lp29927
g242
ag243
aa(lp29928
g245
ag246
aa(lp29929
g248
ag249
aa(lp29930
g251
ag252
aa(lp29931
g254
ag255
aa(lp29932
g257
ag258
aa(lp29933
g260
ag261
aa(lp29934
g263
ag264
aa(lp29935
g266
ag267
aatp29936
Rp29937
aa(lp29938
g271
ag181
((lp29939
(lp29940
g187
ag271
aa(lp29941
g275
ag276
aatp29942
Rp29943
aatp29944
Rp29945
sg80
Nsbtp29946
a(g13287
g25251
tp29947
a(g22585
g1
(g81
g3
Ntp29948
Rp29949
(dp29950
g85
g1
(g86
g3
Ntp29951
Rp29952
(dp29953
g90
(dp29954
g1
(g92
g3
Ntp29955
Rp29956
(dp29957
g7
(dp29958
sg9
g1
(g97
g3
Ntp29959
Rp29960
(dp29961
g14
g15
(g53
tp29962
Rp29963
(dp29964
g28
g29
sg25
g23
sbsg108
(lp29965
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp29966
sg65
S'log_vmhc_1'
p29967
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp29968
sg79
Nsg80
Nsb(dp29969
sg1
(g92
g3
Ntp29970
Rp29971
(dp29972
g7
(dp29973
sg9
g1
(g97
g3
Ntp29974
Rp29975
(dp29976
g14
g15
(g53
tp29977
Rp29978
(dp29979
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g22720
sbsg108
(lp29980
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp29981
sg65
g29967
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp29982
sg79
Nsg80
Nsb(dp29983
sg1
(g92
g3
Ntp29984
Rp29985
(dp29986
g7
(dp29987
sg9
g1
(g135
g3
Ntp29988
Rp29989
(dp29990
g139
(lp29991
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp29992
Rp29993
(dp29994
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p29995
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp29996
g25
Nssg150
(lp29997
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp29998
sg65
g29967
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp29999
sg79
Nsg80
Nsb(dp30000
ssg157
(dp30001
sg159
(dp30002
g29956
(dp30003
sg29971
(dp30004
g29985
(dp30005
g163
(lp30006
(g107
g107
tp30007
a(g105
g105
tp30008
a(g104
g104
tp30009
a(g14
g14
tp30010
asssg29985
(dp30011
g29956
(dp30012
g163
(lp30013
(g25
g25
tp30014
assssg174
g30002
sg175
(dp30015
g29956
(dp30016
g29985
g30012
ssg29971
(dp30017
sg29985
(dp30018
g29971
g30005
sssg180
g30002
sbsg43
g29967
sg65
g66
sg75
g29967
sg76
g181
((lp30019
(lp30020
g184
ag181
((lp30021
(lp30022
g187
ag184
aa(lp30023
g189
ag190
aa(lp30024
g192
ag193
aa(lp30025
g195
ag196
aa(lp30026
g198
ag199
aa(lp30027
g201
ag106
aa(lp30028
g203
ag204
aa(lp30029
g206
ag207
aatp30030
Rp30031
aa(lp30032
g211
ag181
((lp30033
(lp30034
g187
ag211
aa(lp30035
g215
ag216
aa(lp30036
g218
ag219
aa(lp30037
g221
ag222
aa(lp30038
g224
ag225
aa(lp30039
g227
ag228
aa(lp30040
g230
ag231
aa(lp30041
g233
ag234
aa(lp30042
g236
ag237
aa(lp30043
g239
ag240
aa(lp30044
g242
ag243
aa(lp30045
g245
ag246
aa(lp30046
g248
ag249
aa(lp30047
g251
ag252
aa(lp30048
g254
ag255
aa(lp30049
g257
ag258
aa(lp30050
g260
ag261
aa(lp30051
g263
ag264
aa(lp30052
g266
ag267
aatp30053
Rp30054
aa(lp30055
g271
ag181
((lp30056
(lp30057
g187
ag271
aa(lp30058
g275
ag276
aatp30059
Rp30060
aatp30061
Rp30062
sg80
Nsbtp30063
a(g25251
g1
(g81
g3
Ntp30064
Rp30065
(dp30066
g85
g1
(g86
g3
Ntp30067
Rp30068
(dp30069
g90
(dp30070
g1
(g92
g3
Ntp30071
Rp30072
(dp30073
g7
(dp30074
sg9
g1
(g97
g3
Ntp30075
Rp30076
(dp30077
g14
g15
(g53
tp30078
Rp30079
(dp30080
g28
g29
sg25
g23
sbsg108
(lp30081
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp30082
sg65
S'log_apply_ants_warp_mean_functional_in_mni_1'
p30083
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp30084
sg79
Nsg80
Nsb(dp30085
sg1
(g92
g3
Ntp30086
Rp30087
(dp30088
g7
(dp30089
sg9
g1
(g97
g3
Ntp30090
Rp30091
(dp30092
g14
g15
(g53
tp30093
Rp30094
(dp30095
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g25269
sbsg108
(lp30096
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30097
sg65
g30083
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp30098
sg79
Nsg80
Nsb(dp30099
sg1
(g92
g3
Ntp30100
Rp30101
(dp30102
g7
(dp30103
sg9
g1
(g135
g3
Ntp30104
Rp30105
(dp30106
g139
(lp30107
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp30108
Rp30109
(dp30110
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p30111
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp30112
g25
Nssg150
(lp30113
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp30114
sg65
g30083
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp30115
sg79
Nsg80
Nsb(dp30116
ssg157
(dp30117
sg159
(dp30118
g30072
(dp30119
sg30087
(dp30120
g30101
(dp30121
g163
(lp30122
(g107
g107
tp30123
a(g105
g105
tp30124
a(g104
g104
tp30125
a(g14
g14
tp30126
asssg30101
(dp30127
g30072
(dp30128
g163
(lp30129
(g25
g25
tp30130
assssg174
g30118
sg175
(dp30131
g30072
(dp30132
g30101
g30128
ssg30087
(dp30133
sg30101
(dp30134
g30087
g30121
sssg180
g30118
sbsg43
g30083
sg65
g66
sg75
g30083
sg76
g181
((lp30135
(lp30136
g184
ag181
((lp30137
(lp30138
g187
ag184
aa(lp30139
g189
ag190
aa(lp30140
g192
ag193
aa(lp30141
g195
ag196
aa(lp30142
g198
ag199
aa(lp30143
g201
ag106
aa(lp30144
g203
ag204
aa(lp30145
g206
ag207
aatp30146
Rp30147
aa(lp30148
g211
ag181
((lp30149
(lp30150
g187
ag211
aa(lp30151
g215
ag216
aa(lp30152
g218
ag219
aa(lp30153
g221
ag222
aa(lp30154
g224
ag225
aa(lp30155
g227
ag228
aa(lp30156
g230
ag231
aa(lp30157
g233
ag234
aa(lp30158
g236
ag237
aa(lp30159
g239
ag240
aa(lp30160
g242
ag243
aa(lp30161
g245
ag246
aa(lp30162
g248
ag249
aa(lp30163
g251
ag252
aa(lp30164
g254
ag255
aa(lp30165
g257
ag258
aa(lp30166
g260
ag261
aa(lp30167
g263
ag264
aa(lp30168
g266
ag267
aatp30169
Rp30170
aa(lp30171
g271
ag181
((lp30172
(lp30173
g187
ag271
aa(lp30174
g275
ag276
aatp30175
Rp30176
aatp30177
Rp30178
sg80
Nsbtp30179
a(g2754
g1
(g81
g3
Ntp30180
Rp30181
(dp30182
g85
g1
(g86
g3
Ntp30183
Rp30184
(dp30185
g90
(dp30186
g1
(g92
g3
Ntp30187
Rp30188
(dp30189
g7
(dp30190
sg9
g1
(g97
g3
Ntp30191
Rp30192
(dp30193
g14
g15
(g53
tp30194
Rp30195
(dp30196
g28
g29
sg25
g23
sbsg108
(lp30197
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp30198
sg65
S'log_vmhc_0'
p30199
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp30200
sg79
Nsg80
Nsb(dp30201
sg1
(g92
g3
Ntp30202
Rp30203
(dp30204
g7
(dp30205
sg9
g1
(g97
g3
Ntp30206
Rp30207
(dp30208
g14
g15
(g53
tp30209
Rp30210
(dp30211
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g2775
sbsg108
(lp30212
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30213
sg65
g30199
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp30214
sg79
Nsg80
Nsb(dp30215
sg1
(g92
g3
Ntp30216
Rp30217
(dp30218
g7
(dp30219
sg9
g1
(g135
g3
Ntp30220
Rp30221
(dp30222
g139
(lp30223
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp30224
Rp30225
(dp30226
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p30227
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp30228
g25
Nssg150
(lp30229
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp30230
sg65
g30199
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp30231
sg79
Nsg80
Nsb(dp30232
ssg157
(dp30233
sg159
(dp30234
g30188
(dp30235
sg30203
(dp30236
g30217
(dp30237
g163
(lp30238
(g107
g107
tp30239
a(g105
g105
tp30240
a(g104
g104
tp30241
a(g14
g14
tp30242
asssg30217
(dp30243
g30188
(dp30244
g163
(lp30245
(g25
g25
tp30246
assssg174
g30234
sg175
(dp30247
g30188
(dp30248
g30217
g30244
ssg30203
(dp30249
sg30217
(dp30250
g30203
g30237
sssg180
g30234
sbsg43
g30199
sg65
g66
sg75
g30199
sg76
g181
((lp30251
(lp30252
g184
ag181
((lp30253
(lp30254
g187
ag184
aa(lp30255
g189
ag190
aa(lp30256
g192
ag193
aa(lp30257
g195
ag196
aa(lp30258
g198
ag199
aa(lp30259
g201
ag106
aa(lp30260
g203
ag204
aa(lp30261
g206
ag207
aatp30262
Rp30263
aa(lp30264
g211
ag181
((lp30265
(lp30266
g187
ag211
aa(lp30267
g215
ag216
aa(lp30268
g218
ag219
aa(lp30269
g221
ag222
aa(lp30270
g224
ag225
aa(lp30271
g227
ag228
aa(lp30272
g230
ag231
aa(lp30273
g233
ag234
aa(lp30274
g236
ag237
aa(lp30275
g239
ag240
aa(lp30276
g242
ag243
aa(lp30277
g245
ag246
aa(lp30278
g248
ag249
aa(lp30279
g251
ag252
aa(lp30280
g254
ag255
aa(lp30281
g257
ag258
aa(lp30282
g260
ag261
aa(lp30283
g263
ag264
aa(lp30284
g266
ag267
aatp30285
Rp30286
aa(lp30287
g271
ag181
((lp30288
(lp30289
g187
ag271
aa(lp30290
g275
ag276
aatp30291
Rp30292
aatp30293
Rp30294
sg80
Nsbtp30295
a(g1
(g81
g3
Ntp30296
Rp30297
(dp30298
g85
g1
(g86
g3
Ntp30299
Rp30300
(dp30301
g90
(dp30302
g1
(g92
g3
Ntp30303
Rp30304
(dp30305
g7
(dp30306
sg9
g1
(g97
g3
Ntp30307
Rp30308
(dp30309
g14
g15
(g53
tp30310
Rp30311
(dp30312
g5788
g23
sg28
g29
sbsg108
(lp30313
g5788
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30314
sg65
S'spatial_map_dataflow_1'
p30315
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp30316
(g5788
(lp30317
S'rsn8_3mm'
p30318
atp30319
asg74
I00
sg75
g111
sg76
Nsg77
(lp30320
sg79
Nsg80
Nsb(dp30321
sg1
(g92
g3
Ntp30322
Rp30323
(dp30324
g7
(dp30325
sg9
g1
(g135
g3
Ntp30326
Rp30327
(dp30328
g139
(lp30329
g1817
ag24083
asg14
g15
(g142
tp30330
Rp30331
(dp30332
g20
I00
sg24083
(dp30333
g30318
S'/home/rtungaraza/CPAC_testData/rsn8_3mm.nii.gz'
p30334
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p30335
sg28
g29
sg1817
g23
sbsg148
(dp30336
g25
Nssg150
(lp30337
g25
asg152
Nsbsg51
Nsg43
S'select_spatial_map'
p30338
sg63
(dp30339
sg65
g30315
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30338
sg76
Nsg77
(lp30340
sg79
Nsg80
Nsb(dp30341
ssg157
(dp30342
sg159
(dp30343
g30304
(dp30344
g30323
(dp30345
g163
(lp30346
(g5788
g1817
tp30347
asssg30323
(dp30348
ssg174
g30343
sg175
(dp30349
g30304
(dp30350
sg30323
(dp30351
g30304
g30345
sssg180
g30343
sbsg43
g30315
sg65
g66
sg75
g30315
sg76
g181
((lp30352
(lp30353
g184
ag181
((lp30354
(lp30355
g187
ag184
aa(lp30356
g189
ag190
aa(lp30357
g192
ag193
aa(lp30358
g195
ag196
aa(lp30359
g198
ag199
aa(lp30360
g201
ag106
aa(lp30361
g203
ag204
aa(lp30362
g206
ag207
aatp30363
Rp30364
aa(lp30365
g211
ag181
((lp30366
(lp30367
g187
ag211
aa(lp30368
g215
ag216
aa(lp30369
g218
ag219
aa(lp30370
g221
ag222
aa(lp30371
g224
ag225
aa(lp30372
g227
ag228
aa(lp30373
g230
ag231
aa(lp30374
g233
ag234
aa(lp30375
g236
ag237
aa(lp30376
g239
ag240
aa(lp30377
g242
ag243
aa(lp30378
g245
ag246
aa(lp30379
g248
ag249
aa(lp30380
g251
ag252
aa(lp30381
g254
ag255
aa(lp30382
g257
ag258
aa(lp30383
g260
ag261
aa(lp30384
g263
ag264
aa(lp30385
g266
ag267
aatp30386
Rp30387
aa(lp30388
g271
ag181
((lp30389
(lp30390
g187
ag271
aa(lp30391
g275
ag276
aatp30392
Rp30393
aatp30394
Rp30395
sg80
Nsbg5877
tp30396
a(g26124
g1
(g81
g3
Ntp30397
Rp30398
(dp30399
g85
g1
(g86
g3
Ntp30400
Rp30401
(dp30402
g90
(dp30403
g1
(g92
g3
Ntp30404
Rp30405
(dp30406
g7
(dp30407
sg9
g1
(g97
g3
Ntp30408
Rp30409
(dp30410
g14
g15
(g53
tp30411
Rp30412
(dp30413
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp30414
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30415
sg65
S'sca_seed_Z_to_standard_1'
p30416
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp30417
sg79
Nsg80
Nsb(dp30418
sg1
(g2
g3
Ntp30419
Rp30420
(dp30421
g7
(dp30422
sg9
g1
(g3632
g3
Ntp30423
Rp30424
(dp30425
g14
g15
(g3636
tp30426
Rp30427
(dp30428
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp30429
tp30430
Rp30431
(dp30432
g41
S'environ_items'
p30433
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp30434
Rp30435
(dp30436
g3649
F0.0
sg20
I00
sg3640
g23
sg3352
I-1
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg3641
g3642
sg32
g1
(g33
g34
(dp30437
tp30438
Rp30439
(dp30440
g41
S'environ_items'
p30441
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3344
g3345
sg3371
g23
sg30
g31
sg3650
g23
sbsg43
S'apply_ants_warp_mapnode'
p30442
sg63
(dp30443
sg65
g30416
sg67
(lp30444
g3622
ag3320
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30442
sg76
Nsg77
(lp30445
sg79
Nsg80
Nsb(dp30446
sg1
(g92
g3
Ntp30447
Rp30448
(dp30449
g7
(dp30450
sg9
g1
(g97
g3
Ntp30451
Rp30452
(dp30453
g14
g15
(g53
tp30454
Rp30455
(dp30456
g28
g29
sg3640
g23
sbsg108
(lp30457
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp30458
sg65
g30416
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp30459
sg79
Nsg80
Nsb(dp30460
ssg157
(dp30461
sg159
(dp30462
g30405
(dp30463
g30420
(dp30464
g163
(lp30465
(g3622
g3622
tp30466
a(g3621
g3621
tp30467
a(g3320
g3320
tp30468
a(g3371
g3371
tp30469
a(g3620
g3620
tp30470
a(g3344
g3344
tp30471
asssg30420
(dp30472
g30448
(dp30473
g163
(lp30474
(g3640
g3640
tp30475
asssg30448
(dp30476
ssg174
g30462
sg175
(dp30477
g30405
(dp30478
sg30420
(dp30479
g30405
g30464
ssg30448
(dp30480
g30420
g30473
sssg180
g30462
sbsg43
g30416
sg65
g66
sg75
g30416
sg76
g181
((lp30481
(lp30482
g184
ag181
((lp30483
(lp30484
g187
ag184
aa(lp30485
g189
ag190
aa(lp30486
g192
ag193
aa(lp30487
g195
ag196
aa(lp30488
g198
ag199
aa(lp30489
g201
ag106
aa(lp30490
g203
ag204
aa(lp30491
g206
ag207
aatp30492
Rp30493
aa(lp30494
g211
ag181
((lp30495
(lp30496
g187
ag211
aa(lp30497
g215
ag216
aa(lp30498
g218
ag219
aa(lp30499
g221
ag222
aa(lp30500
g224
ag225
aa(lp30501
g227
ag228
aa(lp30502
g230
ag231
aa(lp30503
g233
ag234
aa(lp30504
g236
ag237
aa(lp30505
g239
ag240
aa(lp30506
g242
ag243
aa(lp30507
g245
ag246
aa(lp30508
g248
ag249
aa(lp30509
g251
ag252
aa(lp30510
g254
ag255
aa(lp30511
g257
ag258
aa(lp30512
g260
ag261
aa(lp30513
g263
ag264
aa(lp30514
g266
ag267
aatp30515
Rp30516
aa(lp30517
g271
ag181
((lp30518
(lp30519
g187
ag271
aa(lp30520
g275
ag276
aatp30521
Rp30522
aatp30523
Rp30524
sg80
Nsbtp30525
a(g26124
g5456
tp30526
a(g26124
g1708
tp30527
a(g26124
g19949
tp30528
a(g26124
g1
(g81
g3
Ntp30529
Rp30530
(dp30531
g85
g1
(g86
g3
Ntp30532
Rp30533
(dp30534
g90
(dp30535
g1
(g92
g3
Ntp30536
Rp30537
(dp30538
g7
(dp30539
sg9
g1
(g97
g3
Ntp30540
Rp30541
(dp30542
g14
g15
(g53
tp30543
Rp30544
(dp30545
g28
g29
sg3640
g23
sbsg108
(lp30546
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp30547
sg65
S'sca_seed_to_standard_1'
p30548
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp30549
sg79
Nsg80
Nsb(dp30550
sg1
(g92
g3
Ntp30551
Rp30552
(dp30553
g7
(dp30554
sg9
g1
(g97
g3
Ntp30555
Rp30556
(dp30557
g14
g15
(g53
tp30558
Rp30559
(dp30560
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp30561
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30562
sg65
g30548
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp30563
sg79
Nsg80
Nsb(dp30564
sg1
(g92
g3
Ntp30565
Rp30566
(dp30567
g7
(dp30568
sg9
g1
(g3632
g3
Ntp30569
Rp30570
(dp30571
g14
g15
(g3636
tp30572
Rp30573
(dp30574
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp30575
tp30576
Rp30577
(dp30578
g41
S'environ_items'
p30579
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp30580
sg65
g30548
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp30581
sg79
Nsg80
Nsb(dp30582
ssg157
(dp30583
sg159
(dp30584
g30537
(dp30585
sg30552
(dp30586
g30566
(dp30587
g163
(lp30588
(g3622
g3622
tp30589
a(g3621
g3621
tp30590
a(g3320
g3320
tp30591
a(g3371
g3371
tp30592
a(g3620
g3620
tp30593
a(g3344
g3344
tp30594
asssg30566
(dp30595
g30537
(dp30596
g163
(lp30597
(g3640
g3640
tp30598
assssg174
g30584
sg175
(dp30599
g30537
(dp30600
g30566
g30596
ssg30552
(dp30601
sg30566
(dp30602
g30552
g30587
sssg180
g30584
sbsg43
g30548
sg65
g66
sg75
g30548
sg76
g181
((lp30603
(lp30604
g184
ag181
((lp30605
(lp30606
g187
ag184
aa(lp30607
g189
ag190
aa(lp30608
g192
ag193
aa(lp30609
g195
ag196
aa(lp30610
g198
ag199
aa(lp30611
g201
ag106
aa(lp30612
g203
ag204
aa(lp30613
g206
ag207
aatp30614
Rp30615
aa(lp30616
g211
ag181
((lp30617
(lp30618
g187
ag211
aa(lp30619
g215
ag216
aa(lp30620
g218
ag219
aa(lp30621
g221
ag222
aa(lp30622
g224
ag225
aa(lp30623
g227
ag228
aa(lp30624
g230
ag231
aa(lp30625
g233
ag234
aa(lp30626
g236
ag237
aa(lp30627
g239
ag240
aa(lp30628
g242
ag243
aa(lp30629
g245
ag246
aa(lp30630
g248
ag249
aa(lp30631
g251
ag252
aa(lp30632
g254
ag255
aa(lp30633
g257
ag258
aa(lp30634
g260
ag261
aa(lp30635
g263
ag264
aa(lp30636
g266
ag267
aatp30637
Rp30638
aa(lp30639
g271
ag181
((lp30640
(lp30641
g187
ag271
aa(lp30642
g275
ag276
aatp30643
Rp30644
aatp30645
Rp30646
sg80
Nsbtp30647
a(g26124
g19106
tp30648
a(g24734
g1
(g81
g3
Ntp30649
Rp30650
(dp30651
g85
g1
(g86
g3
Ntp30652
Rp30653
(dp30654
g90
(dp30655
g1
(g92
g3
Ntp30656
Rp30657
(dp30658
g7
(dp30659
sg9
g1
(g97
g3
Ntp30660
Rp30661
(dp30662
g14
g15
(g53
tp30663
Rp30664
(dp30665
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp30666
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30667
sg65
S'reho_to_standard_1'
p30668
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp30669
sg79
Nsg80
Nsb(dp30670
sg1
(g92
g3
Ntp30671
Rp30672
(dp30673
g7
(dp30674
sg9
g1
(g3632
g3
Ntp30675
Rp30676
(dp30677
g14
g15
(g3636
tp30678
Rp30679
(dp30680
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp30681
tp30682
Rp30683
(dp30684
g41
S'environ_items'
p30685
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp30686
sg65
g30668
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp30687
sg79
Nsg80
Nsb(dp30688
sg1
(g92
g3
Ntp30689
Rp30690
(dp30691
g7
(dp30692
sg9
g1
(g97
g3
Ntp30693
Rp30694
(dp30695
g14
g15
(g53
tp30696
Rp30697
(dp30698
g28
g29
sg3640
g23
sbsg108
(lp30699
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp30700
sg65
g30668
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp30701
sg79
Nsg80
Nsb(dp30702
ssg157
(dp30703
sg159
(dp30704
g30657
(dp30705
g30672
(dp30706
g163
(lp30707
(g3622
g3622
tp30708
a(g3621
g3621
tp30709
a(g3320
g3320
tp30710
a(g3371
g3371
tp30711
a(g3620
g3620
tp30712
a(g3344
g3344
tp30713
asssg30672
(dp30714
g30690
(dp30715
g163
(lp30716
(g3640
g3640
tp30717
asssg30690
(dp30718
ssg174
g30704
sg175
(dp30719
g30657
(dp30720
sg30672
(dp30721
g30657
g30706
ssg30690
(dp30722
g30672
g30715
sssg180
g30704
sbsg43
g30668
sg65
g66
sg75
g30668
sg76
g181
((lp30723
(lp30724
g184
ag181
((lp30725
(lp30726
g187
ag184
aa(lp30727
g189
ag190
aa(lp30728
g192
ag193
aa(lp30729
g195
ag196
aa(lp30730
g198
ag199
aa(lp30731
g201
ag106
aa(lp30732
g203
ag204
aa(lp30733
g206
ag207
aatp30734
Rp30735
aa(lp30736
g211
ag181
((lp30737
(lp30738
g187
ag211
aa(lp30739
g215
ag216
aa(lp30740
g218
ag219
aa(lp30741
g221
ag222
aa(lp30742
g224
ag225
aa(lp30743
g227
ag228
aa(lp30744
g230
ag231
aa(lp30745
g233
ag234
aa(lp30746
g236
ag237
aa(lp30747
g239
ag240
aa(lp30748
g242
ag243
aa(lp30749
g245
ag246
aa(lp30750
g248
ag249
aa(lp30751
g251
ag252
aa(lp30752
g254
ag255
aa(lp30753
g257
ag258
aa(lp30754
g260
ag261
aa(lp30755
g263
ag264
aa(lp30756
g266
ag267
aatp30757
Rp30758
aa(lp30759
g271
ag181
((lp30760
(lp30761
g187
ag271
aa(lp30762
g275
ag276
aatp30763
Rp30764
aatp30765
Rp30766
sg80
Nsbtp30767
a(g24734
g1
(g81
g3
Ntp30768
Rp30769
(dp30770
g85
g1
(g86
g3
Ntp30771
Rp30772
(dp30773
g90
(dp30774
g1
(g92
g3
Ntp30775
Rp30776
(dp30777
g7
(dp30778
sg9
g1
(g3632
g3
Ntp30779
Rp30780
(dp30781
g14
g15
(g3636
tp30782
Rp30783
(dp30784
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp30785
tp30786
Rp30787
(dp30788
g41
S'environ_items'
p30789
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp30790
sg65
S'reho_Z_to_standard_1'
p30791
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp30792
sg79
Nsg80
Nsb(dp30793
sg1
(g92
g3
Ntp30794
Rp30795
(dp30796
g7
(dp30797
sg9
g1
(g97
g3
Ntp30798
Rp30799
(dp30800
g14
g15
(g53
tp30801
Rp30802
(dp30803
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp30804
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30805
sg65
g30791
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp30806
sg79
Nsg80
Nsb(dp30807
sg1
(g92
g3
Ntp30808
Rp30809
(dp30810
g7
(dp30811
sg9
g1
(g97
g3
Ntp30812
Rp30813
(dp30814
g14
g15
(g53
tp30815
Rp30816
(dp30817
g28
g29
sg3640
g23
sbsg108
(lp30818
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp30819
sg65
g30791
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp30820
sg79
Nsg80
Nsb(dp30821
ssg157
(dp30822
sg159
(dp30823
g30776
(dp30824
g30809
(dp30825
g163
(lp30826
(g3640
g3640
tp30827
asssg30795
(dp30828
g30776
(dp30829
g163
(lp30830
(g3622
g3622
tp30831
a(g3621
g3621
tp30832
a(g3320
g3320
tp30833
a(g3371
g3371
tp30834
a(g3620
g3620
tp30835
a(g3344
g3344
tp30836
asssg30809
(dp30837
ssg174
g30823
sg175
(dp30838
g30776
(dp30839
g30795
g30829
ssg30795
(dp30840
sg30809
(dp30841
g30776
g30825
sssg180
g30823
sbsg43
g30791
sg65
g66
sg75
g30791
sg76
g181
((lp30842
(lp30843
g184
ag181
((lp30844
(lp30845
g187
ag184
aa(lp30846
g189
ag190
aa(lp30847
g192
ag193
aa(lp30848
g195
ag196
aa(lp30849
g198
ag199
aa(lp30850
g201
ag106
aa(lp30851
g203
ag204
aa(lp30852
g206
ag207
aatp30853
Rp30854
aa(lp30855
g211
ag181
((lp30856
(lp30857
g187
ag211
aa(lp30858
g215
ag216
aa(lp30859
g218
ag219
aa(lp30860
g221
ag222
aa(lp30861
g224
ag225
aa(lp30862
g227
ag228
aa(lp30863
g230
ag231
aa(lp30864
g233
ag234
aa(lp30865
g236
ag237
aa(lp30866
g239
ag240
aa(lp30867
g242
ag243
aa(lp30868
g245
ag246
aa(lp30869
g248
ag249
aa(lp30870
g251
ag252
aa(lp30871
g254
ag255
aa(lp30872
g257
ag258
aa(lp30873
g260
ag261
aa(lp30874
g263
ag264
aa(lp30875
g266
ag267
aatp30876
Rp30877
aa(lp30878
g271
ag181
((lp30879
(lp30880
g187
ag271
aa(lp30881
g275
ag276
aatp30882
Rp30883
aatp30884
Rp30885
sg80
Nsbtp30886
a(g24734
g22331
tp30887
a(g24734
g1
(g81
g3
Ntp30888
Rp30889
(dp30890
g85
g1
(g86
g3
Ntp30891
Rp30892
(dp30893
g90
(dp30894
g1
(g92
g3
Ntp30895
Rp30896
(dp30897
g7
(dp30898
sg9
g1
(g97
g3
Ntp30899
Rp30900
(dp30901
g14
g15
(g53
tp30902
Rp30903
(dp30904
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g24755
sbsg108
(lp30905
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp30906
sg65
S'log_reho_1'
p30907
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp30908
sg79
Nsg80
Nsb(dp30909
sg1
(g92
g3
Ntp30910
Rp30911
(dp30912
g7
(dp30913
sg9
g1
(g135
g3
Ntp30914
Rp30915
(dp30916
g139
(lp30917
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp30918
Rp30919
(dp30920
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p30921
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp30922
g25
Nssg150
(lp30923
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp30924
sg65
g30907
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp30925
sg79
Nsg80
Nsb(dp30926
sg1
(g92
g3
Ntp30927
Rp30928
(dp30929
g7
(dp30930
sg9
g1
(g97
g3
Ntp30931
Rp30932
(dp30933
g14
g15
(g53
tp30934
Rp30935
(dp30936
g28
g29
sg25
g23
sbsg108
(lp30937
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp30938
sg65
g30907
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp30939
sg79
Nsg80
Nsb(dp30940
ssg157
(dp30941
sg159
(dp30942
g30896
(dp30943
g30911
(dp30944
g163
(lp30945
(g107
g107
tp30946
a(g105
g105
tp30947
a(g104
g104
tp30948
a(g14
g14
tp30949
asssg30911
(dp30950
g30928
(dp30951
g163
(lp30952
(g25
g25
tp30953
asssg30928
(dp30954
ssg174
g30942
sg175
(dp30955
g30896
(dp30956
sg30911
(dp30957
g30896
g30944
ssg30928
(dp30958
g30911
g30951
sssg180
g30942
sbsg43
g30907
sg65
g66
sg75
g30907
sg76
g181
((lp30959
(lp30960
g184
ag181
((lp30961
(lp30962
g187
ag184
aa(lp30963
g189
ag190
aa(lp30964
g192
ag193
aa(lp30965
g195
ag196
aa(lp30966
g198
ag199
aa(lp30967
g201
ag106
aa(lp30968
g203
ag204
aa(lp30969
g206
ag207
aatp30970
Rp30971
aa(lp30972
g211
ag181
((lp30973
(lp30974
g187
ag211
aa(lp30975
g215
ag216
aa(lp30976
g218
ag219
aa(lp30977
g221
ag222
aa(lp30978
g224
ag225
aa(lp30979
g227
ag228
aa(lp30980
g230
ag231
aa(lp30981
g233
ag234
aa(lp30982
g236
ag237
aa(lp30983
g239
ag240
aa(lp30984
g242
ag243
aa(lp30985
g245
ag246
aa(lp30986
g248
ag249
aa(lp30987
g251
ag252
aa(lp30988
g254
ag255
aa(lp30989
g257
ag258
aa(lp30990
g260
ag261
aa(lp30991
g263
ag264
aa(lp30992
g266
ag267
aatp30993
Rp30994
aa(lp30995
g271
ag181
((lp30996
(lp30997
g187
ag271
aa(lp30998
g275
ag276
aatp30999
Rp31000
aatp31001
Rp31002
sg80
Nsbtp31003
a(g24734
g19811
tp31004
a(g24734
g4909
tp31005
a(g24734
g4871
tp31006
a(g5757
g1
(g81
g3
Ntp31007
Rp31008
(dp31009
g85
g1
(g86
g3
Ntp31010
Rp31011
(dp31012
g90
(dp31013
g1
(g92
g3
Ntp31014
Rp31015
(dp31016
g7
(dp31017
sg9
g1
(g97
g3
Ntp31018
Rp31019
(dp31020
g14
g15
(g53
tp31021
Rp31022
(dp31023
g28
g29
sg25
g23
sbsg108
(lp31024
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp31025
sg65
S'log_spatial_map_timeseries_0'
p31026
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp31027
sg79
Nsg80
Nsb(dp31028
sg1
(g92
g3
Ntp31029
Rp31030
(dp31031
g7
(dp31032
sg9
g1
(g97
g3
Ntp31033
Rp31034
(dp31035
g14
g15
(g53
tp31036
Rp31037
(dp31038
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g5775
sbsg108
(lp31039
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31040
sg65
g31026
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp31041
sg79
Nsg80
Nsb(dp31042
sg1
(g92
g3
Ntp31043
Rp31044
(dp31045
g7
(dp31046
sg9
g1
(g135
g3
Ntp31047
Rp31048
(dp31049
g139
(lp31050
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp31051
Rp31052
(dp31053
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p31054
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp31055
g25
Nssg150
(lp31056
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp31057
sg65
g31026
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp31058
sg79
Nsg80
Nsb(dp31059
ssg157
(dp31060
sg159
(dp31061
g31015
(dp31062
sg31030
(dp31063
g31044
(dp31064
g163
(lp31065
(g107
g107
tp31066
a(g105
g105
tp31067
a(g104
g104
tp31068
a(g14
g14
tp31069
asssg31044
(dp31070
g31015
(dp31071
g163
(lp31072
(g25
g25
tp31073
assssg174
g31061
sg175
(dp31074
g31015
(dp31075
g31044
g31071
ssg31030
(dp31076
sg31044
(dp31077
g31030
g31064
sssg180
g31061
sbsg43
g31026
sg65
g66
sg75
g31026
sg76
g181
((lp31078
(lp31079
g184
ag181
((lp31080
(lp31081
g187
ag184
aa(lp31082
g189
ag190
aa(lp31083
g192
ag193
aa(lp31084
g195
ag196
aa(lp31085
g198
ag199
aa(lp31086
g201
ag106
aa(lp31087
g203
ag204
aa(lp31088
g206
ag207
aatp31089
Rp31090
aa(lp31091
g211
ag181
((lp31092
(lp31093
g187
ag211
aa(lp31094
g215
ag216
aa(lp31095
g218
ag219
aa(lp31096
g221
ag222
aa(lp31097
g224
ag225
aa(lp31098
g227
ag228
aa(lp31099
g230
ag231
aa(lp31100
g233
ag234
aa(lp31101
g236
ag237
aa(lp31102
g239
ag240
aa(lp31103
g242
ag243
aa(lp31104
g245
ag246
aa(lp31105
g248
ag249
aa(lp31106
g251
ag252
aa(lp31107
g254
ag255
aa(lp31108
g257
ag258
aa(lp31109
g260
ag261
aa(lp31110
g263
ag264
aa(lp31111
g266
ag267
aatp31112
Rp31113
aa(lp31114
g271
ag181
((lp31115
(lp31116
g187
ag271
aa(lp31117
g275
ag276
aatp31118
Rp31119
aatp31120
Rp31121
sg80
Nsbtp31122
a(g5757
g3929
tp31123
a(g1
(g81
g3
Ntp31124
Rp31125
(dp31126
g85
g1
(g86
g3
Ntp31127
Rp31128
(dp31129
g90
(dp31130
g1
(g92
g3
Ntp31131
Rp31132
(dp31133
g7
(dp31134
sg9
g1
(g97
g3
Ntp31135
Rp31136
(dp31137
g14
g15
(g53
tp31138
Rp31139
(dp31140
g5788
g23
sg28
g29
sbsg108
(lp31141
g5788
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31142
sg65
S'spatial_map_dataflow_0'
p31143
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp31144
(g5788
(lp31145
S'rsn8_3mm'
p31146
atp31147
asg74
I00
sg75
g111
sg76
Nsg77
(lp31148
sg79
Nsg80
Nsb(dp31149
sg1
(g92
g3
Ntp31150
Rp31151
(dp31152
g7
(dp31153
sg9
g1
(g135
g3
Ntp31154
Rp31155
(dp31156
g139
(lp31157
g1817
ag24083
asg14
g15
(g142
tp31158
Rp31159
(dp31160
g20
I00
sg24083
(dp31161
g31146
S'/home/rtungaraza/CPAC_testData/rsn8_3mm.nii.gz'
p31162
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p31163
sg28
g29
sg1817
g23
sbsg148
(dp31164
g25
Nssg150
(lp31165
g25
asg152
Nsbsg51
Nsg43
g30338
sg63
(dp31166
sg65
g31143
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30338
sg76
Nsg77
(lp31167
sg79
Nsg80
Nsb(dp31168
ssg157
(dp31169
sg159
(dp31170
g31132
(dp31171
g31151
(dp31172
g163
(lp31173
(g5788
g1817
tp31174
asssg31151
(dp31175
ssg174
g31170
sg175
(dp31176
g31132
(dp31177
sg31151
(dp31178
g31132
g31172
sssg180
g31170
sbsg43
g31143
sg65
g66
sg75
g31143
sg76
g181
((lp31179
(lp31180
g184
ag181
((lp31181
(lp31182
g187
ag184
aa(lp31183
g189
ag190
aa(lp31184
g192
ag193
aa(lp31185
g195
ag196
aa(lp31186
g198
ag199
aa(lp31187
g201
ag106
aa(lp31188
g203
ag204
aa(lp31189
g206
ag207
aatp31190
Rp31191
aa(lp31192
g211
ag181
((lp31193
(lp31194
g187
ag211
aa(lp31195
g215
ag216
aa(lp31196
g218
ag219
aa(lp31197
g221
ag222
aa(lp31198
g224
ag225
aa(lp31199
g227
ag228
aa(lp31200
g230
ag231
aa(lp31201
g233
ag234
aa(lp31202
g236
ag237
aa(lp31203
g239
ag240
aa(lp31204
g242
ag243
aa(lp31205
g245
ag246
aa(lp31206
g248
ag249
aa(lp31207
g251
ag252
aa(lp31208
g254
ag255
aa(lp31209
g257
ag258
aa(lp31210
g260
ag261
aa(lp31211
g263
ag264
aa(lp31212
g266
ag267
aatp31213
Rp31214
aa(lp31215
g271
ag181
((lp31216
(lp31217
g187
ag271
aa(lp31218
g275
ag276
aatp31219
Rp31220
aatp31221
Rp31222
sg80
Nsbg5694
tp31223
a(g2514
g5618
tp31224
a(g2514
g1
(g81
g3
Ntp31225
Rp31226
(dp31227
g85
g1
(g86
g3
Ntp31228
Rp31229
(dp31230
g90
(dp31231
g1
(g92
g3
Ntp31232
Rp31233
(dp31234
g7
(dp31235
sg9
g1
(g3632
g3
Ntp31236
Rp31237
(dp31238
g14
g15
(g3636
tp31239
Rp31240
(dp31241
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp31242
tp31243
Rp31244
(dp31245
g41
S'environ_items'
p31246
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp31247
sg65
S'reho_to_standard_0'
p31248
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp31249
sg79
Nsg80
Nsb(dp31250
sg1
(g92
g3
Ntp31251
Rp31252
(dp31253
g7
(dp31254
sg9
g1
(g97
g3
Ntp31255
Rp31256
(dp31257
g14
g15
(g53
tp31258
Rp31259
(dp31260
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp31261
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31262
sg65
g31248
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp31263
sg79
Nsg80
Nsb(dp31264
sg1
(g92
g3
Ntp31265
Rp31266
(dp31267
g7
(dp31268
sg9
g1
(g97
g3
Ntp31269
Rp31270
(dp31271
g14
g15
(g53
tp31272
Rp31273
(dp31274
g28
g29
sg3640
g23
sbsg108
(lp31275
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp31276
sg65
g31248
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp31277
sg79
Nsg80
Nsb(dp31278
ssg157
(dp31279
sg159
(dp31280
g31233
(dp31281
g31266
(dp31282
g163
(lp31283
(g3640
g3640
tp31284
asssg31252
(dp31285
g31233
(dp31286
g163
(lp31287
(g3622
g3622
tp31288
a(g3621
g3621
tp31289
a(g3320
g3320
tp31290
a(g3371
g3371
tp31291
a(g3620
g3620
tp31292
a(g3344
g3344
tp31293
asssg31266
(dp31294
ssg174
g31280
sg175
(dp31295
g31233
(dp31296
g31252
g31286
ssg31252
(dp31297
sg31266
(dp31298
g31233
g31282
sssg180
g31280
sbsg43
g31248
sg65
g66
sg75
g31248
sg76
g181
((lp31299
(lp31300
g184
ag181
((lp31301
(lp31302
g187
ag184
aa(lp31303
g189
ag190
aa(lp31304
g192
ag193
aa(lp31305
g195
ag196
aa(lp31306
g198
ag199
aa(lp31307
g201
ag106
aa(lp31308
g203
ag204
aa(lp31309
g206
ag207
aatp31310
Rp31311
aa(lp31312
g211
ag181
((lp31313
(lp31314
g187
ag211
aa(lp31315
g215
ag216
aa(lp31316
g218
ag219
aa(lp31317
g221
ag222
aa(lp31318
g224
ag225
aa(lp31319
g227
ag228
aa(lp31320
g230
ag231
aa(lp31321
g233
ag234
aa(lp31322
g236
ag237
aa(lp31323
g239
ag240
aa(lp31324
g242
ag243
aa(lp31325
g245
ag246
aa(lp31326
g248
ag249
aa(lp31327
g251
ag252
aa(lp31328
g254
ag255
aa(lp31329
g257
ag258
aa(lp31330
g260
ag261
aa(lp31331
g263
ag264
aa(lp31332
g266
ag267
aatp31333
Rp31334
aa(lp31335
g271
ag181
((lp31336
(lp31337
g187
ag271
aa(lp31338
g275
ag276
aatp31339
Rp31340
aatp31341
Rp31342
sg80
Nsbtp31343
a(g2514
g23725
tp31344
a(g2514
g1
(g81
g3
Ntp31345
Rp31346
(dp31347
g85
g1
(g86
g3
Ntp31348
Rp31349
(dp31350
g90
(dp31351
g1
(g92
g3
Ntp31352
Rp31353
(dp31354
g7
(dp31355
sg9
g1
(g97
g3
Ntp31356
Rp31357
(dp31358
g14
g15
(g53
tp31359
Rp31360
(dp31361
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g2535
sbsg108
(lp31362
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31363
sg65
S'log_reho_0'
p31364
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp31365
sg79
Nsg80
Nsb(dp31366
sg1
(g92
g3
Ntp31367
Rp31368
(dp31369
g7
(dp31370
sg9
g1
(g97
g3
Ntp31371
Rp31372
(dp31373
g14
g15
(g53
tp31374
Rp31375
(dp31376
g28
g29
sg25
g23
sbsg108
(lp31377
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp31378
sg65
g31364
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp31379
sg79
Nsg80
Nsb(dp31380
sg1
(g92
g3
Ntp31381
Rp31382
(dp31383
g7
(dp31384
sg9
g1
(g135
g3
Ntp31385
Rp31386
(dp31387
g139
(lp31388
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp31389
Rp31390
(dp31391
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p31392
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp31393
g25
Nssg150
(lp31394
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp31395
sg65
g31364
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp31396
sg79
Nsg80
Nsb(dp31397
ssg157
(dp31398
sg159
(dp31399
g31353
(dp31400
g31382
(dp31401
g163
(lp31402
(g107
g107
tp31403
a(g105
g105
tp31404
a(g104
g104
tp31405
a(g14
g14
tp31406
asssg31368
(dp31407
sg31382
(dp31408
g31368
(dp31409
g163
(lp31410
(g25
g25
tp31411
assssg174
g31399
sg175
(dp31412
g31353
(dp31413
sg31368
(dp31414
g31382
g31409
ssg31382
(dp31415
g31353
g31401
sssg180
g31399
sbsg43
g31364
sg65
g66
sg75
g31364
sg76
g181
((lp31416
(lp31417
g184
ag181
((lp31418
(lp31419
g187
ag184
aa(lp31420
g189
ag190
aa(lp31421
g192
ag193
aa(lp31422
g195
ag196
aa(lp31423
g198
ag199
aa(lp31424
g201
ag106
aa(lp31425
g203
ag204
aa(lp31426
g206
ag207
aatp31427
Rp31428
aa(lp31429
g211
ag181
((lp31430
(lp31431
g187
ag211
aa(lp31432
g215
ag216
aa(lp31433
g218
ag219
aa(lp31434
g221
ag222
aa(lp31435
g224
ag225
aa(lp31436
g227
ag228
aa(lp31437
g230
ag231
aa(lp31438
g233
ag234
aa(lp31439
g236
ag237
aa(lp31440
g239
ag240
aa(lp31441
g242
ag243
aa(lp31442
g245
ag246
aa(lp31443
g248
ag249
aa(lp31444
g251
ag252
aa(lp31445
g254
ag255
aa(lp31446
g257
ag258
aa(lp31447
g260
ag261
aa(lp31448
g263
ag264
aa(lp31449
g266
ag267
aatp31450
Rp31451
aa(lp31452
g271
ag181
((lp31453
(lp31454
g187
ag271
aa(lp31455
g275
ag276
aatp31456
Rp31457
aatp31458
Rp31459
sg80
Nsbtp31460
a(g2514
g5203
tp31461
a(g2514
g18692
tp31462
a(g2514
g1
(g81
g3
Ntp31463
Rp31464
(dp31465
g85
g1
(g86
g3
Ntp31466
Rp31467
(dp31468
g90
(dp31469
g1
(g92
g3
Ntp31470
Rp31471
(dp31472
g7
(dp31473
sg9
g1
(g97
g3
Ntp31474
Rp31475
(dp31476
g14
g15
(g53
tp31477
Rp31478
(dp31479
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp31480
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31481
sg65
S'reho_Z_to_standard_0'
p31482
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp31483
sg79
Nsg80
Nsb(dp31484
sg1
(g92
g3
Ntp31485
Rp31486
(dp31487
g7
(dp31488
sg9
g1
(g97
g3
Ntp31489
Rp31490
(dp31491
g14
g15
(g53
tp31492
Rp31493
(dp31494
g28
g29
sg3640
g23
sbsg108
(lp31495
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp31496
sg65
g31482
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp31497
sg79
Nsg80
Nsb(dp31498
sg1
(g92
g3
Ntp31499
Rp31500
(dp31501
g7
(dp31502
sg9
g1
(g3632
g3
Ntp31503
Rp31504
(dp31505
g14
g15
(g3636
tp31506
Rp31507
(dp31508
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp31509
tp31510
Rp31511
(dp31512
g41
S'environ_items'
p31513
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp31514
sg65
g31482
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp31515
sg79
Nsg80
Nsb(dp31516
ssg157
(dp31517
sg159
(dp31518
g31471
(dp31519
g31500
(dp31520
g163
(lp31521
(g3622
g3622
tp31522
a(g3621
g3621
tp31523
a(g3320
g3320
tp31524
a(g3371
g3371
tp31525
a(g3620
g3620
tp31526
a(g3344
g3344
tp31527
asssg31486
(dp31528
sg31500
(dp31529
g31486
(dp31530
g163
(lp31531
(g3640
g3640
tp31532
assssg174
g31518
sg175
(dp31533
g31471
(dp31534
sg31486
(dp31535
g31500
g31530
ssg31500
(dp31536
g31471
g31520
sssg180
g31518
sbsg43
g31482
sg65
g66
sg75
g31482
sg76
g181
((lp31537
(lp31538
g184
ag181
((lp31539
(lp31540
g187
ag184
aa(lp31541
g189
ag190
aa(lp31542
g192
ag193
aa(lp31543
g195
ag196
aa(lp31544
g198
ag199
aa(lp31545
g201
ag106
aa(lp31546
g203
ag204
aa(lp31547
g206
ag207
aatp31548
Rp31549
aa(lp31550
g211
ag181
((lp31551
(lp31552
g187
ag211
aa(lp31553
g215
ag216
aa(lp31554
g218
ag219
aa(lp31555
g221
ag222
aa(lp31556
g224
ag225
aa(lp31557
g227
ag228
aa(lp31558
g230
ag231
aa(lp31559
g233
ag234
aa(lp31560
g236
ag237
aa(lp31561
g239
ag240
aa(lp31562
g242
ag243
aa(lp31563
g245
ag246
aa(lp31564
g248
ag249
aa(lp31565
g251
ag252
aa(lp31566
g254
ag255
aa(lp31567
g257
ag258
aa(lp31568
g260
ag261
aa(lp31569
g263
ag264
aa(lp31570
g266
ag267
aatp31571
Rp31572
aa(lp31573
g271
ag181
((lp31574
(lp31575
g187
ag271
aa(lp31576
g275
ag276
aatp31577
Rp31578
aatp31579
Rp31580
sg80
Nsbtp31581
a(g5895
g1
(g81
g3
Ntp31582
Rp31583
(dp31584
g85
g1
(g86
g3
Ntp31585
Rp31586
(dp31587
g90
(dp31588
g1
(g92
g3
Ntp31589
Rp31590
(dp31591
g7
(dp31592
sg9
g1
(g97
g3
Ntp31593
Rp31594
(dp31595
g14
g15
(g53
tp31596
Rp31597
(dp31598
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g5913
sbsg108
(lp31599
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31600
sg65
S'log_spatial_map_timeseries_1'
p31601
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp31602
sg79
Nsg80
Nsb(dp31603
sg1
(g92
g3
Ntp31604
Rp31605
(dp31606
g7
(dp31607
sg9
g1
(g97
g3
Ntp31608
Rp31609
(dp31610
g14
g15
(g53
tp31611
Rp31612
(dp31613
g28
g29
sg25
g23
sbsg108
(lp31614
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp31615
sg65
g31601
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp31616
sg79
Nsg80
Nsb(dp31617
sg1
(g92
g3
Ntp31618
Rp31619
(dp31620
g7
(dp31621
sg9
g1
(g135
g3
Ntp31622
Rp31623
(dp31624
g139
(lp31625
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp31626
Rp31627
(dp31628
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p31629
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp31630
g25
Nssg150
(lp31631
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp31632
sg65
g31601
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp31633
sg79
Nsg80
Nsb(dp31634
ssg157
(dp31635
sg159
(dp31636
g31590
(dp31637
g31619
(dp31638
g163
(lp31639
(g107
g107
tp31640
a(g105
g105
tp31641
a(g104
g104
tp31642
a(g14
g14
tp31643
asssg31605
(dp31644
sg31619
(dp31645
g31605
(dp31646
g163
(lp31647
(g25
g25
tp31648
assssg174
g31636
sg175
(dp31649
g31590
(dp31650
sg31605
(dp31651
g31619
g31646
ssg31619
(dp31652
g31590
g31638
sssg180
g31636
sbsg43
g31601
sg65
g66
sg75
g31601
sg76
g181
((lp31653
(lp31654
g184
ag181
((lp31655
(lp31656
g187
ag184
aa(lp31657
g189
ag190
aa(lp31658
g192
ag193
aa(lp31659
g195
ag196
aa(lp31660
g198
ag199
aa(lp31661
g201
ag106
aa(lp31662
g203
ag204
aa(lp31663
g206
ag207
aatp31664
Rp31665
aa(lp31666
g211
ag181
((lp31667
(lp31668
g187
ag211
aa(lp31669
g215
ag216
aa(lp31670
g218
ag219
aa(lp31671
g221
ag222
aa(lp31672
g224
ag225
aa(lp31673
g227
ag228
aa(lp31674
g230
ag231
aa(lp31675
g233
ag234
aa(lp31676
g236
ag237
aa(lp31677
g239
ag240
aa(lp31678
g242
ag243
aa(lp31679
g245
ag246
aa(lp31680
g248
ag249
aa(lp31681
g251
ag252
aa(lp31682
g254
ag255
aa(lp31683
g257
ag258
aa(lp31684
g260
ag261
aa(lp31685
g263
ag264
aa(lp31686
g266
ag267
aatp31687
Rp31688
aa(lp31689
g271
ag181
((lp31690
(lp31691
g187
ag271
aa(lp31692
g275
ag276
aatp31693
Rp31694
aatp31695
Rp31696
sg80
Nsbtp31697
a(g5895
g25082
tp31698
a(g1
(g81
g3
Ntp31699
Rp31700
(dp31701
g85
g1
(g86
g3
Ntp31702
Rp31703
(dp31704
g90
(dp31705
g1
(g92
g3
Ntp31706
Rp31707
(dp31708
g7
(dp31709
sg9
g1
(g97
g3
Ntp31710
Rp31711
(dp31712
g14
g15
(g53
tp31713
Rp31714
(dp31715
g28
g29
sg750
g23
sbsg108
(lp31716
g750
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31717
sg65
S'mask_dataflow_0'
p31718
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp31719
(g750
(lp31720
S'LTC'
p31721
aS'PCC'
p31722
aS'dMPFC'
p31723
aS'TPJ'
p31724
aS'aMPFC'
p31725
atp31726
asg74
I00
sg75
g111
sg76
Nsg77
(lp31727
sg79
Nsg80
Nsb(dp31728
sg1
(g92
g3
Ntp31729
Rp31730
(dp31731
g7
(dp31732
sg9
g1
(g97
g3
Ntp31733
Rp31734
(dp31735
g14
g15
(g53
tp31736
Rp31737
(dp31738
g28
g29
sg25
g23
sbsg108
(lp31739
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp31740
sg65
g31718
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp31741
sg79
Nsg80
Nsb(dp31742
sg1
(g92
g3
Ntp31743
Rp31744
(dp31745
g7
(dp31746
sg9
g1
(g135
g3
Ntp31747
Rp31748
(dp31749
g139
(lp31750
g1817
ag24083
asg14
g15
(g142
tp31751
Rp31752
(dp31753
g20
I00
sg24083
(dp31754
g31721
S'/home/rtungaraza/CPAC_testData/LTC.nii.gz'
p31755
sg31722
S'/home/rtungaraza/CPAC_testData/PCC.nii.gz'
p31756
sg31723
S'/home/rtungaraza/CPAC_testData/dMPFC.nii.gz'
p31757
sg31724
S'/home/rtungaraza/CPAC_testData/TPJ.nii.gz'
p31758
sg31725
S'/home/rtungaraza/CPAC_testData/aMPFC.nii.gz'
p31759
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p31760
sg28
g29
sg1817
g23
sbsg148
(dp31761
g25
Nssg150
(lp31762
g25
asg152
Nsbsg51
Nsg43
S'select_mask'
p31763
sg63
(dp31764
sg65
g31718
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g31763
sg76
Nsg77
(lp31765
sg79
Nsg80
Nsb(dp31766
ssg157
(dp31767
sg159
(dp31768
g31707
(dp31769
g31744
(dp31770
g163
(lp31771
(g750
g1817
tp31772
asssg31730
(dp31773
sg31744
(dp31774
g31730
(dp31775
g163
(lp31776
(g25
g25
tp31777
assssg174
g31768
sg175
(dp31778
g31707
(dp31779
sg31730
(dp31780
g31744
g31775
ssg31744
(dp31781
g31707
g31770
sssg180
g31768
sbsg43
g31718
sg65
g66
sg75
g31718
sg76
g181
((lp31782
(lp31783
g184
ag181
((lp31784
(lp31785
g187
ag184
aa(lp31786
g189
ag190
aa(lp31787
g192
ag193
aa(lp31788
g195
ag196
aa(lp31789
g198
ag199
aa(lp31790
g201
ag106
aa(lp31791
g203
ag204
aa(lp31792
g206
ag207
aatp31793
Rp31794
aa(lp31795
g211
ag181
((lp31796
(lp31797
g187
ag211
aa(lp31798
g215
ag216
aa(lp31799
g218
ag219
aa(lp31800
g221
ag222
aa(lp31801
g224
ag225
aa(lp31802
g227
ag228
aa(lp31803
g230
ag231
aa(lp31804
g233
ag234
aa(lp31805
g236
ag237
aa(lp31806
g239
ag240
aa(lp31807
g242
ag243
aa(lp31808
g245
ag246
aa(lp31809
g248
ag249
aa(lp31810
g251
ag252
aa(lp31811
g254
ag255
aa(lp31812
g257
ag258
aa(lp31813
g260
ag261
aa(lp31814
g263
ag264
aa(lp31815
g266
ag267
aatp31816
Rp31817
aa(lp31818
g271
ag181
((lp31819
(lp31820
g187
ag271
aa(lp31821
g275
ag276
aatp31822
Rp31823
aatp31824
Rp31825
sg80
Nsbg6012
tp31826
a(g31700
g6031
tp31827
a(g6031
g1
(g81
g3
Ntp31828
Rp31829
(dp31830
g85
g1
(g86
g3
Ntp31831
Rp31832
(dp31833
g90
(dp31834
g1
(g92
g3
Ntp31835
Rp31836
(dp31837
g7
(dp31838
sg9
g1
(g97
g3
Ntp31839
Rp31840
(dp31841
g14
g15
(g53
tp31842
Rp31843
(dp31844
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g6050
sbsg108
(lp31845
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31846
sg65
S'log_voxel_timeseries_0'
p31847
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp31848
sg79
Nsg80
Nsb(dp31849
sg1
(g92
g3
Ntp31850
Rp31851
(dp31852
g7
(dp31853
sg9
g1
(g135
g3
Ntp31854
Rp31855
(dp31856
g139
(lp31857
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp31858
Rp31859
(dp31860
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p31861
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp31862
g25
Nssg150
(lp31863
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp31864
sg65
g31847
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp31865
sg79
Nsg80
Nsb(dp31866
sg1
(g92
g3
Ntp31867
Rp31868
(dp31869
g7
(dp31870
sg9
g1
(g97
g3
Ntp31871
Rp31872
(dp31873
g14
g15
(g53
tp31874
Rp31875
(dp31876
g28
g29
sg25
g23
sbsg108
(lp31877
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp31878
sg65
g31847
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp31879
sg79
Nsg80
Nsb(dp31880
ssg157
(dp31881
sg159
(dp31882
g31836
(dp31883
g31851
(dp31884
g163
(lp31885
(g107
g107
tp31886
a(g105
g105
tp31887
a(g104
g104
tp31888
a(g14
g14
tp31889
asssg31851
(dp31890
g31868
(dp31891
g163
(lp31892
(g25
g25
tp31893
asssg31868
(dp31894
ssg174
g31882
sg175
(dp31895
g31836
(dp31896
sg31851
(dp31897
g31836
g31884
ssg31868
(dp31898
g31851
g31891
sssg180
g31882
sbsg43
g31847
sg65
g66
sg75
g31847
sg76
g181
((lp31899
(lp31900
g184
ag181
((lp31901
(lp31902
g187
ag184
aa(lp31903
g189
ag190
aa(lp31904
g192
ag193
aa(lp31905
g195
ag196
aa(lp31906
g198
ag199
aa(lp31907
g201
ag106
aa(lp31908
g203
ag204
aa(lp31909
g206
ag207
aatp31910
Rp31911
aa(lp31912
g211
ag181
((lp31913
(lp31914
g187
ag211
aa(lp31915
g215
ag216
aa(lp31916
g218
ag219
aa(lp31917
g221
ag222
aa(lp31918
g224
ag225
aa(lp31919
g227
ag228
aa(lp31920
g230
ag231
aa(lp31921
g233
ag234
aa(lp31922
g236
ag237
aa(lp31923
g239
ag240
aa(lp31924
g242
ag243
aa(lp31925
g245
ag246
aa(lp31926
g248
ag249
aa(lp31927
g251
ag252
aa(lp31928
g254
ag255
aa(lp31929
g257
ag258
aa(lp31930
g260
ag261
aa(lp31931
g263
ag264
aa(lp31932
g266
ag267
aatp31933
Rp31934
aa(lp31935
g271
ag181
((lp31936
(lp31937
g187
ag271
aa(lp31938
g275
ag276
aatp31939
Rp31940
aatp31941
Rp31942
sg80
Nsbtp31943
a(g1
(g81
g3
Ntp31944
Rp31945
(dp31946
g85
g1
(g86
g3
Ntp31947
Rp31948
(dp31949
g90
(dp31950
g1
(g92
g3
Ntp31951
Rp31952
(dp31953
g7
(dp31954
sg9
g1
(g97
g3
Ntp31955
Rp31956
(dp31957
g14
g15
(g53
tp31958
Rp31959
(dp31960
g28
g29
sg750
g23
sbsg108
(lp31961
g750
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp31962
sg65
S'mask_dataflow_for_sca_0'
p31963
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp31964
(g750
(lp31965
S'LTC'
p31966
aS'PCC'
p31967
aS'dMPFC'
p31968
aS'TPJ'
p31969
aS'aMPFC'
p31970
atp31971
asg74
I00
sg75
g111
sg76
Nsg77
(lp31972
sg79
Nsg80
Nsb(dp31973
sg1
(g92
g3
Ntp31974
Rp31975
(dp31976
g7
(dp31977
sg9
g1
(g135
g3
Ntp31978
Rp31979
(dp31980
g139
(lp31981
g1817
ag24083
asg14
g15
(g142
tp31982
Rp31983
(dp31984
g20
I00
sg24083
(dp31985
g31966
S'/home/rtungaraza/CPAC_testData/LTC.nii.gz'
p31986
sg31967
S'/home/rtungaraza/CPAC_testData/PCC.nii.gz'
p31987
sg31968
S'/home/rtungaraza/CPAC_testData/dMPFC.nii.gz'
p31988
sg31969
S'/home/rtungaraza/CPAC_testData/TPJ.nii.gz'
p31989
sg31970
S'/home/rtungaraza/CPAC_testData/aMPFC.nii.gz'
p31990
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p31991
sg28
g29
sg1817
g23
sbsg148
(dp31992
g25
Nssg150
(lp31993
g25
asg152
Nsbsg51
Nsg43
g31763
sg63
(dp31994
sg65
g31963
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g31763
sg76
Nsg77
(lp31995
sg79
Nsg80
Nsb(dp31996
sg1
(g92
g3
Ntp31997
Rp31998
(dp31999
g7
(dp32000
sg9
g1
(g97
g3
Ntp32001
Rp32002
(dp32003
g14
g15
(g53
tp32004
Rp32005
(dp32006
g28
g29
sg25
g23
sbsg108
(lp32007
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp32008
sg65
g31963
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp32009
sg79
Nsg80
Nsb(dp32010
ssg157
(dp32011
sg159
(dp32012
g31952
(dp32013
g31975
(dp32014
g163
(lp32015
(g750
g1817
tp32016
asssg31975
(dp32017
g31998
(dp32018
g163
(lp32019
(g25
g25
tp32020
asssg31998
(dp32021
ssg174
g32012
sg175
(dp32022
g31952
(dp32023
sg31975
(dp32024
g31952
g32014
ssg31998
(dp32025
g31975
g32018
sssg180
g32012
sbsg43
g31963
sg65
g66
sg75
g31963
sg76
g181
((lp32026
(lp32027
g184
ag181
((lp32028
(lp32029
g187
ag184
aa(lp32030
g189
ag190
aa(lp32031
g192
ag193
aa(lp32032
g195
ag196
aa(lp32033
g198
ag199
aa(lp32034
g201
ag106
aa(lp32035
g203
ag204
aa(lp32036
g206
ag207
aatp32037
Rp32038
aa(lp32039
g211
ag181
((lp32040
(lp32041
g187
ag211
aa(lp32042
g215
ag216
aa(lp32043
g218
ag219
aa(lp32044
g221
ag222
aa(lp32045
g224
ag225
aa(lp32046
g227
ag228
aa(lp32047
g230
ag231
aa(lp32048
g233
ag234
aa(lp32049
g236
ag237
aa(lp32050
g239
ag240
aa(lp32051
g242
ag243
aa(lp32052
g245
ag246
aa(lp32053
g248
ag249
aa(lp32054
g251
ag252
aa(lp32055
g254
ag255
aa(lp32056
g257
ag258
aa(lp32057
g260
ag261
aa(lp32058
g263
ag264
aa(lp32059
g266
ag267
aatp32060
Rp32061
aa(lp32062
g271
ag181
((lp32063
(lp32064
g187
ag271
aa(lp32065
g275
ag276
aatp32066
Rp32067
aatp32068
Rp32069
sg80
Nsbg6188
tp32070
a(g31945
g6170
tp32071
a(g6188
g4253
tp32072
a(g1
(g81
g3
Ntp32073
Rp32074
(dp32075
g85
g1
(g86
g3
Ntp32076
Rp32077
(dp32078
g90
(dp32079
g1
(g92
g3
Ntp32080
Rp32081
(dp32082
g7
(dp32083
sg9
g1
(g97
g3
Ntp32084
Rp32085
(dp32086
g14
g15
(g53
tp32087
Rp32088
(dp32089
g28
g29
sg25
g23
sbsg108
(lp32090
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp32091
sg65
S'mask_dataflow_1'
p32092
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp32093
sg79
Nsg80
Nsb(dp32094
sg1
(g92
g3
Ntp32095
Rp32096
(dp32097
g7
(dp32098
sg9
g1
(g97
g3
Ntp32099
Rp32100
(dp32101
g14
g15
(g53
tp32102
Rp32103
(dp32104
g28
g29
sg750
g23
sbsg108
(lp32105
g750
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32106
sg65
g32092
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp32107
(g750
(lp32108
S'LTC'
p32109
aS'PCC'
p32110
aS'dMPFC'
p32111
aS'TPJ'
p32112
aS'aMPFC'
p32113
atp32114
asg74
I00
sg75
g111
sg76
Nsg77
(lp32115
sg79
Nsg80
Nsb(dp32116
sg1
(g92
g3
Ntp32117
Rp32118
(dp32119
g7
(dp32120
sg9
g1
(g135
g3
Ntp32121
Rp32122
(dp32123
g139
(lp32124
g1817
ag24083
asg14
g15
(g142
tp32125
Rp32126
(dp32127
g20
I00
sg24083
(dp32128
g32109
S'/home/rtungaraza/CPAC_testData/LTC.nii.gz'
p32129
sg32110
S'/home/rtungaraza/CPAC_testData/PCC.nii.gz'
p32130
sg32111
S'/home/rtungaraza/CPAC_testData/dMPFC.nii.gz'
p32131
sg32112
S'/home/rtungaraza/CPAC_testData/TPJ.nii.gz'
p32132
sg32113
S'/home/rtungaraza/CPAC_testData/aMPFC.nii.gz'
p32133
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p32134
sg28
g29
sg1817
g23
sbsg148
(dp32135
g25
Nssg150
(lp32136
g25
asg152
Nsbsg51
Nsg43
g31763
sg63
(dp32137
sg65
g32092
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g31763
sg76
Nsg77
(lp32138
sg79
Nsg80
Nsb(dp32139
ssg157
(dp32140
sg159
(dp32141
g32081
(dp32142
sg32096
(dp32143
g32118
(dp32144
g163
(lp32145
(g750
g1817
tp32146
asssg32118
(dp32147
g32081
(dp32148
g163
(lp32149
(g25
g25
tp32150
assssg174
g32141
sg175
(dp32151
g32081
(dp32152
g32118
g32148
ssg32096
(dp32153
sg32118
(dp32154
g32096
g32144
sssg180
g32141
sbsg43
g32092
sg65
g66
sg75
g32092
sg76
g181
((lp32155
(lp32156
g184
ag181
((lp32157
(lp32158
g187
ag184
aa(lp32159
g189
ag190
aa(lp32160
g192
ag193
aa(lp32161
g195
ag196
aa(lp32162
g198
ag199
aa(lp32163
g201
ag106
aa(lp32164
g203
ag204
aa(lp32165
g206
ag207
aatp32166
Rp32167
aa(lp32168
g211
ag181
((lp32169
(lp32170
g187
ag211
aa(lp32171
g215
ag216
aa(lp32172
g218
ag219
aa(lp32173
g221
ag222
aa(lp32174
g224
ag225
aa(lp32175
g227
ag228
aa(lp32176
g230
ag231
aa(lp32177
g233
ag234
aa(lp32178
g236
ag237
aa(lp32179
g239
ag240
aa(lp32180
g242
ag243
aa(lp32181
g245
ag246
aa(lp32182
g248
ag249
aa(lp32183
g251
ag252
aa(lp32184
g254
ag255
aa(lp32185
g257
ag258
aa(lp32186
g260
ag261
aa(lp32187
g263
ag264
aa(lp32188
g266
ag267
aatp32189
Rp32190
aa(lp32191
g271
ag181
((lp32192
(lp32193
g187
ag271
aa(lp32194
g275
ag276
aatp32195
Rp32196
aatp32197
Rp32198
sg80
Nsbg6322
tp32199
a(g32074
g6340
tp32200
a(g6340
g1
(g81
g3
Ntp32201
Rp32202
(dp32203
g85
g1
(g86
g3
Ntp32204
Rp32205
(dp32206
g90
(dp32207
g1
(g92
g3
Ntp32208
Rp32209
(dp32210
g7
(dp32211
sg9
g1
(g97
g3
Ntp32212
Rp32213
(dp32214
g14
g15
(g53
tp32215
Rp32216
(dp32217
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g6361
sbsg108
(lp32218
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32219
sg65
S'log_voxel_timeseries_1'
p32220
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp32221
sg79
Nsg80
Nsb(dp32222
sg1
(g92
g3
Ntp32223
Rp32224
(dp32225
g7
(dp32226
sg9
g1
(g97
g3
Ntp32227
Rp32228
(dp32229
g14
g15
(g53
tp32230
Rp32231
(dp32232
g28
g29
sg25
g23
sbsg108
(lp32233
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp32234
sg65
g32220
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp32235
sg79
Nsg80
Nsb(dp32236
sg1
(g92
g3
Ntp32237
Rp32238
(dp32239
g7
(dp32240
sg9
g1
(g135
g3
Ntp32241
Rp32242
(dp32243
g139
(lp32244
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp32245
Rp32246
(dp32247
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p32248
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp32249
g25
Nssg150
(lp32250
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp32251
sg65
g32220
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp32252
sg79
Nsg80
Nsb(dp32253
ssg157
(dp32254
sg159
(dp32255
g32209
(dp32256
g32238
(dp32257
g163
(lp32258
(g107
g107
tp32259
a(g105
g105
tp32260
a(g104
g104
tp32261
a(g14
g14
tp32262
asssg32224
(dp32263
sg32238
(dp32264
g32224
(dp32265
g163
(lp32266
(g25
g25
tp32267
assssg174
g32255
sg175
(dp32268
g32209
(dp32269
sg32224
(dp32270
g32238
g32265
ssg32238
(dp32271
g32209
g32257
sssg180
g32255
sbsg43
g32220
sg65
g66
sg75
g32220
sg76
g181
((lp32272
(lp32273
g184
ag181
((lp32274
(lp32275
g187
ag184
aa(lp32276
g189
ag190
aa(lp32277
g192
ag193
aa(lp32278
g195
ag196
aa(lp32279
g198
ag199
aa(lp32280
g201
ag106
aa(lp32281
g203
ag204
aa(lp32282
g206
ag207
aatp32283
Rp32284
aa(lp32285
g211
ag181
((lp32286
(lp32287
g187
ag211
aa(lp32288
g215
ag216
aa(lp32289
g218
ag219
aa(lp32290
g221
ag222
aa(lp32291
g224
ag225
aa(lp32292
g227
ag228
aa(lp32293
g230
ag231
aa(lp32294
g233
ag234
aa(lp32295
g236
ag237
aa(lp32296
g239
ag240
aa(lp32297
g242
ag243
aa(lp32298
g245
ag246
aa(lp32299
g248
ag249
aa(lp32300
g251
ag252
aa(lp32301
g254
ag255
aa(lp32302
g257
ag258
aa(lp32303
g260
ag261
aa(lp32304
g263
ag264
aa(lp32305
g266
ag267
aatp32306
Rp32307
aa(lp32308
g271
ag181
((lp32309
(lp32310
g187
ag271
aa(lp32311
g275
ag276
aatp32312
Rp32313
aatp32314
Rp32315
sg80
Nsbtp32316
a(g1
(g81
g3
Ntp32317
Rp32318
(dp32319
g85
g1
(g86
g3
Ntp32320
Rp32321
(dp32322
g90
(dp32323
g1
(g92
g3
Ntp32324
Rp32325
(dp32326
g7
(dp32327
sg9
g1
(g97
g3
Ntp32328
Rp32329
(dp32330
g14
g15
(g53
tp32331
Rp32332
(dp32333
g28
g29
sg750
g23
sbsg108
(lp32334
g750
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32335
sg65
S'mask_dataflow_for_sca_1'
p32336
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp32337
(g750
(lp32338
S'LTC'
p32339
aS'PCC'
p32340
aS'dMPFC'
p32341
aS'TPJ'
p32342
aS'aMPFC'
p32343
atp32344
asg74
I00
sg75
g111
sg76
Nsg77
(lp32345
sg79
Nsg80
Nsb(dp32346
sg1
(g92
g3
Ntp32347
Rp32348
(dp32349
g7
(dp32350
sg9
g1
(g135
g3
Ntp32351
Rp32352
(dp32353
g139
(lp32354
g1817
ag24083
asg14
g15
(g142
tp32355
Rp32356
(dp32357
g20
I00
sg24083
(dp32358
g32339
S'/home/rtungaraza/CPAC_testData/LTC.nii.gz'
p32359
sg32340
S'/home/rtungaraza/CPAC_testData/PCC.nii.gz'
p32360
sg32341
S'/home/rtungaraza/CPAC_testData/dMPFC.nii.gz'
p32361
sg32342
S'/home/rtungaraza/CPAC_testData/TPJ.nii.gz'
p32362
sg32343
S'/home/rtungaraza/CPAC_testData/aMPFC.nii.gz'
p32363
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p32364
sg28
g29
sg1817
g23
sbsg148
(dp32365
g25
Nssg150
(lp32366
g25
asg152
Nsbsg51
Nsg43
g31763
sg63
(dp32367
sg65
g32336
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g31763
sg76
Nsg77
(lp32368
sg79
Nsg80
Nsb(dp32369
sg1
(g92
g3
Ntp32370
Rp32371
(dp32372
g7
(dp32373
sg9
g1
(g97
g3
Ntp32374
Rp32375
(dp32376
g14
g15
(g53
tp32377
Rp32378
(dp32379
g28
g29
sg25
g23
sbsg108
(lp32380
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp32381
sg65
g32336
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp32382
sg79
Nsg80
Nsb(dp32383
ssg157
(dp32384
sg159
(dp32385
g32325
(dp32386
g32348
(dp32387
g163
(lp32388
(g750
g1817
tp32389
asssg32348
(dp32390
g32371
(dp32391
g163
(lp32392
(g25
g25
tp32393
asssg32371
(dp32394
ssg174
g32385
sg175
(dp32395
g32325
(dp32396
sg32348
(dp32397
g32325
g32387
ssg32371
(dp32398
g32348
g32391
sssg180
g32385
sbsg43
g32336
sg65
g66
sg75
g32336
sg76
g181
((lp32399
(lp32400
g184
ag181
((lp32401
(lp32402
g187
ag184
aa(lp32403
g189
ag190
aa(lp32404
g192
ag193
aa(lp32405
g195
ag196
aa(lp32406
g198
ag199
aa(lp32407
g201
ag106
aa(lp32408
g203
ag204
aa(lp32409
g206
ag207
aatp32410
Rp32411
aa(lp32412
g211
ag181
((lp32413
(lp32414
g187
ag211
aa(lp32415
g215
ag216
aa(lp32416
g218
ag219
aa(lp32417
g221
ag222
aa(lp32418
g224
ag225
aa(lp32419
g227
ag228
aa(lp32420
g230
ag231
aa(lp32421
g233
ag234
aa(lp32422
g236
ag237
aa(lp32423
g239
ag240
aa(lp32424
g242
ag243
aa(lp32425
g245
ag246
aa(lp32426
g248
ag249
aa(lp32427
g251
ag252
aa(lp32428
g254
ag255
aa(lp32429
g257
ag258
aa(lp32430
g260
ag261
aa(lp32431
g263
ag264
aa(lp32432
g266
ag267
aatp32433
Rp32434
aa(lp32435
g271
ag181
((lp32436
(lp32437
g187
ag271
aa(lp32438
g275
ag276
aatp32439
Rp32440
aatp32441
Rp32442
sg80
Nsbg6474
tp32443
a(g32318
g6492
tp32444
a(g6492
g26124
tp32445
a(g1
(g81
g3
Ntp32446
Rp32447
(dp32448
g85
g1
(g86
g3
Ntp32449
Rp32450
(dp32451
g90
(dp32452
g1
(g92
g3
Ntp32453
Rp32454
(dp32455
g7
(dp32456
sg9
g1
(g97
g3
Ntp32457
Rp32458
(dp32459
g14
g15
(g53
tp32460
Rp32461
(dp32462
g28
g29
sg6709
g23
sbsg108
(lp32463
g6709
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32464
sg65
S'roi_dataflow_0'
p32465
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp32466
(g6709
(lp32467
S'HarvardOxford-sub-maxprob-thr50-2mm'
p32468
aS'HarvardOxford-cort-maxprob-thr50-2mm'
p32469
aS'rois_2mm'
p32470
atp32471
asg74
I00
sg75
g111
sg76
Nsg77
(lp32472
sg79
Nsg80
Nsb(dp32473
sg1
(g92
g3
Ntp32474
Rp32475
(dp32476
g7
(dp32477
sg9
g1
(g135
g3
Ntp32478
Rp32479
(dp32480
g139
(lp32481
g1817
ag24083
asg14
g15
(g142
tp32482
Rp32483
(dp32484
g20
I00
sg24083
(dp32485
g32468
S'/home/rtungaraza/CPAC_testData/HarvardOxford-sub-maxprob-thr50-2mm.nii.gz'
p32486
sg32469
S'/home/rtungaraza/CPAC_testData/HarvardOxford-cort-maxprob-thr50-2mm.nii.gz'
p32487
sg32470
S'/home/rtungaraza/CPAC_testData/ROIs/rois_2mm.nii.gz'
p32488
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p32489
sg28
g29
sg1817
g23
sbsg148
(dp32490
g25
Nssg150
(lp32491
g25
asg152
Nsbsg51
Nsg43
S'select_roi'
p32492
sg63
(dp32493
sg65
g32465
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g32492
sg76
Nsg77
(lp32494
sg79
Nsg80
Nsb(dp32495
ssg157
(dp32496
sg159
(dp32497
g32454
(dp32498
g32475
(dp32499
g163
(lp32500
(g6709
g1817
tp32501
asssg32475
(dp32502
ssg174
g32497
sg175
(dp32503
g32454
(dp32504
sg32475
(dp32505
g32454
g32499
sssg180
g32497
sbsg43
g32465
sg65
g66
sg75
g32465
sg76
g181
((lp32506
(lp32507
g184
ag181
((lp32508
(lp32509
g187
ag184
aa(lp32510
g189
ag190
aa(lp32511
g192
ag193
aa(lp32512
g195
ag196
aa(lp32513
g198
ag199
aa(lp32514
g201
ag106
aa(lp32515
g203
ag204
aa(lp32516
g206
ag207
aatp32517
Rp32518
aa(lp32519
g211
ag181
((lp32520
(lp32521
g187
ag211
aa(lp32522
g215
ag216
aa(lp32523
g218
ag219
aa(lp32524
g221
ag222
aa(lp32525
g224
ag225
aa(lp32526
g227
ag228
aa(lp32527
g230
ag231
aa(lp32528
g233
ag234
aa(lp32529
g236
ag237
aa(lp32530
g239
ag240
aa(lp32531
g242
ag243
aa(lp32532
g245
ag246
aa(lp32533
g248
ag249
aa(lp32534
g251
ag252
aa(lp32535
g254
ag255
aa(lp32536
g257
ag258
aa(lp32537
g260
ag261
aa(lp32538
g263
ag264
aa(lp32539
g266
ag267
aatp32540
Rp32541
aa(lp32542
g271
ag181
((lp32543
(lp32544
g187
ag271
aa(lp32545
g275
ag276
aatp32546
Rp32547
aatp32548
Rp32549
sg80
Nsbg6626
tp32550
a(g32447
g6644
tp32551
a(g6644
g1
(g81
g3
Ntp32552
Rp32553
(dp32554
g85
g1
(g86
g3
Ntp32555
Rp32556
(dp32557
g90
(dp32558
g1
(g92
g3
Ntp32559
Rp32560
(dp32561
g7
(dp32562
sg9
g1
(g97
g3
Ntp32563
Rp32564
(dp32565
g14
g15
(g53
tp32566
Rp32567
(dp32568
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g6663
sbsg108
(lp32569
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32570
sg65
S'log_roi_timeseries_0'
p32571
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp32572
sg79
Nsg80
Nsb(dp32573
sg1
(g92
g3
Ntp32574
Rp32575
(dp32576
g7
(dp32577
sg9
g1
(g97
g3
Ntp32578
Rp32579
(dp32580
g14
g15
(g53
tp32581
Rp32582
(dp32583
g28
g29
sg25
g23
sbsg108
(lp32584
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp32585
sg65
g32571
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp32586
sg79
Nsg80
Nsb(dp32587
sg1
(g92
g3
Ntp32588
Rp32589
(dp32590
g7
(dp32591
sg9
g1
(g135
g3
Ntp32592
Rp32593
(dp32594
g139
(lp32595
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp32596
Rp32597
(dp32598
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p32599
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp32600
g25
Nssg150
(lp32601
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp32602
sg65
g32571
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp32603
sg79
Nsg80
Nsb(dp32604
ssg157
(dp32605
sg159
(dp32606
g32560
(dp32607
g32589
(dp32608
g163
(lp32609
(g107
g107
tp32610
a(g105
g105
tp32611
a(g104
g104
tp32612
a(g14
g14
tp32613
asssg32575
(dp32614
sg32589
(dp32615
g32575
(dp32616
g163
(lp32617
(g25
g25
tp32618
assssg174
g32606
sg175
(dp32619
g32560
(dp32620
sg32575
(dp32621
g32589
g32616
ssg32589
(dp32622
g32560
g32608
sssg180
g32606
sbsg43
g32571
sg65
g66
sg75
g32571
sg76
g181
((lp32623
(lp32624
g184
ag181
((lp32625
(lp32626
g187
ag184
aa(lp32627
g189
ag190
aa(lp32628
g192
ag193
aa(lp32629
g195
ag196
aa(lp32630
g198
ag199
aa(lp32631
g201
ag106
aa(lp32632
g203
ag204
aa(lp32633
g206
ag207
aatp32634
Rp32635
aa(lp32636
g211
ag181
((lp32637
(lp32638
g187
ag211
aa(lp32639
g215
ag216
aa(lp32640
g218
ag219
aa(lp32641
g221
ag222
aa(lp32642
g224
ag225
aa(lp32643
g227
ag228
aa(lp32644
g230
ag231
aa(lp32645
g233
ag234
aa(lp32646
g236
ag237
aa(lp32647
g239
ag240
aa(lp32648
g242
ag243
aa(lp32649
g245
ag246
aa(lp32650
g248
ag249
aa(lp32651
g251
ag252
aa(lp32652
g254
ag255
aa(lp32653
g257
ag258
aa(lp32654
g260
ag261
aa(lp32655
g263
ag264
aa(lp32656
g266
ag267
aatp32657
Rp32658
aa(lp32659
g271
ag181
((lp32660
(lp32661
g187
ag271
aa(lp32662
g275
ag276
aatp32663
Rp32664
aatp32665
Rp32666
sg80
Nsbtp32667
a(g1
(g81
g3
Ntp32668
Rp32669
(dp32670
g85
g1
(g86
g3
Ntp32671
Rp32672
(dp32673
g90
(dp32674
g1
(g92
g3
Ntp32675
Rp32676
(dp32677
g7
(dp32678
sg9
g1
(g135
g3
Ntp32679
Rp32680
(dp32681
g139
(lp32682
g1817
ag24083
asg14
g15
(g142
tp32683
Rp32684
(dp32685
g20
I00
sg24083
(dp32686
S'HarvardOxford-sub-maxprob-thr50-2mm'
p32687
S'/home/rtungaraza/CPAC_testData/HarvardOxford-sub-maxprob-thr50-2mm.nii.gz'
p32688
sS'HarvardOxford-cort-maxprob-thr50-2mm'
p32689
S'/home/rtungaraza/CPAC_testData/HarvardOxford-cort-maxprob-thr50-2mm.nii.gz'
p32690
sS'rois_2mm'
p32691
S'/home/rtungaraza/CPAC_testData/ROIs/rois_2mm.nii.gz'
p32692
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p32693
sg28
g29
sg1817
g23
sbsg148
(dp32694
g25
Nssg150
(lp32695
g25
asg152
Nsbsg51
Nsg43
g32492
sg63
(dp32696
sg65
S'roi_dataflow_for_sca_0'
p32697
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g32492
sg76
Nsg77
(lp32698
sg79
Nsg80
Nsb(dp32699
sg1
(g92
g3
Ntp32700
Rp32701
(dp32702
g7
(dp32703
sg9
g1
(g97
g3
Ntp32704
Rp32705
(dp32706
g14
g15
(g53
tp32707
Rp32708
(dp32709
g28
g29
sg6709
g23
sbsg108
(lp32710
g6709
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32711
sg65
g32697
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp32712
(g6709
(lp32713
g32687
ag32689
ag32691
atp32714
asg74
I00
sg75
g111
sg76
Nsg77
(lp32715
sg79
Nsg80
Nsb(dp32716
ssg157
(dp32717
sg159
(dp32718
g32676
(dp32719
sg32701
(dp32720
g32676
(dp32721
g163
(lp32722
(g6709
g1817
tp32723
assssg174
g32718
sg175
(dp32724
g32676
(dp32725
g32701
g32721
ssg32701
(dp32726
ssg180
g32718
sbsg43
g32697
sg65
g66
sg75
g32697
sg76
g181
((lp32727
(lp32728
g184
ag181
((lp32729
(lp32730
g187
ag184
aa(lp32731
g189
ag190
aa(lp32732
g192
ag193
aa(lp32733
g195
ag196
aa(lp32734
g198
ag199
aa(lp32735
g201
ag106
aa(lp32736
g203
ag204
aa(lp32737
g206
ag207
aatp32738
Rp32739
aa(lp32740
g211
ag181
((lp32741
(lp32742
g187
ag211
aa(lp32743
g215
ag216
aa(lp32744
g218
ag219
aa(lp32745
g221
ag222
aa(lp32746
g224
ag225
aa(lp32747
g227
ag228
aa(lp32748
g230
ag231
aa(lp32749
g233
ag234
aa(lp32750
g236
ag237
aa(lp32751
g239
ag240
aa(lp32752
g242
ag243
aa(lp32753
g245
ag246
aa(lp32754
g248
ag249
aa(lp32755
g251
ag252
aa(lp32756
g254
ag255
aa(lp32757
g257
ag258
aa(lp32758
g260
ag261
aa(lp32759
g263
ag264
aa(lp32760
g266
ag267
aatp32761
Rp32762
aa(lp32763
g271
ag181
((lp32764
(lp32765
g187
ag271
aa(lp32766
g275
ag276
aatp32767
Rp32768
aatp32769
Rp32770
sg80
Nsbg6782
tp32771
a(g32669
g6800
tp32772
a(g6800
g4527
tp32773
a(g6800
g27936
tp32774
a(g1
(g81
g3
Ntp32775
Rp32776
(dp32777
g85
g1
(g86
g3
Ntp32778
Rp32779
(dp32780
g90
(dp32781
g1
(g92
g3
Ntp32782
Rp32783
(dp32784
g7
(dp32785
sg9
g1
(g97
g3
Ntp32786
Rp32787
(dp32788
g14
g15
(g53
tp32789
Rp32790
(dp32791
g28
g29
sg6709
g23
sbsg108
(lp32792
g6709
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32793
sg65
S'roi_dataflow_1'
p32794
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp32795
(g6709
(lp32796
S'HarvardOxford-sub-maxprob-thr50-2mm'
p32797
aS'HarvardOxford-cort-maxprob-thr50-2mm'
p32798
aS'rois_2mm'
p32799
atp32800
asg74
I00
sg75
g111
sg76
Nsg77
(lp32801
sg79
Nsg80
Nsb(dp32802
sg1
(g92
g3
Ntp32803
Rp32804
(dp32805
g7
(dp32806
sg9
g1
(g135
g3
Ntp32807
Rp32808
(dp32809
g139
(lp32810
g1817
ag24083
asg14
g15
(g142
tp32811
Rp32812
(dp32813
g20
I00
sg24083
(dp32814
g32797
S'/home/rtungaraza/CPAC_testData/HarvardOxford-sub-maxprob-thr50-2mm.nii.gz'
p32815
sg32798
S'/home/rtungaraza/CPAC_testData/HarvardOxford-cort-maxprob-thr50-2mm.nii.gz'
p32816
sg32799
S'/home/rtungaraza/CPAC_testData/ROIs/rois_2mm.nii.gz'
p32817
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p32818
sg28
g29
sg1817
g23
sbsg148
(dp32819
g25
Nssg150
(lp32820
g25
asg152
Nsbsg51
Nsg43
g32492
sg63
(dp32821
sg65
g32794
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g32492
sg76
Nsg77
(lp32822
sg79
Nsg80
Nsb(dp32823
ssg157
(dp32824
sg159
(dp32825
g32783
(dp32826
g32804
(dp32827
g163
(lp32828
(g6709
g1817
tp32829
asssg32804
(dp32830
ssg174
g32825
sg175
(dp32831
g32783
(dp32832
sg32804
(dp32833
g32783
g32827
sssg180
g32825
sbsg43
g32794
sg65
g66
sg75
g32794
sg76
g181
((lp32834
(lp32835
g184
ag181
((lp32836
(lp32837
g187
ag184
aa(lp32838
g189
ag190
aa(lp32839
g192
ag193
aa(lp32840
g195
ag196
aa(lp32841
g198
ag199
aa(lp32842
g201
ag106
aa(lp32843
g203
ag204
aa(lp32844
g206
ag207
aatp32845
Rp32846
aa(lp32847
g211
ag181
((lp32848
(lp32849
g187
ag211
aa(lp32850
g215
ag216
aa(lp32851
g218
ag219
aa(lp32852
g221
ag222
aa(lp32853
g224
ag225
aa(lp32854
g227
ag228
aa(lp32855
g230
ag231
aa(lp32856
g233
ag234
aa(lp32857
g236
ag237
aa(lp32858
g239
ag240
aa(lp32859
g242
ag243
aa(lp32860
g245
ag246
aa(lp32861
g248
ag249
aa(lp32862
g251
ag252
aa(lp32863
g254
ag255
aa(lp32864
g257
ag258
aa(lp32865
g260
ag261
aa(lp32866
g263
ag264
aa(lp32867
g266
ag267
aatp32868
Rp32869
aa(lp32870
g271
ag181
((lp32871
(lp32872
g187
ag271
aa(lp32873
g275
ag276
aatp32874
Rp32875
aatp32876
Rp32877
sg80
Nsbg6934
tp32878
a(g32776
g6952
tp32879
a(g6952
g1
(g81
g3
Ntp32880
Rp32881
(dp32882
g85
g1
(g86
g3
Ntp32883
Rp32884
(dp32885
g90
(dp32886
g1
(g92
g3
Ntp32887
Rp32888
(dp32889
g7
(dp32890
sg9
g1
(g97
g3
Ntp32891
Rp32892
(dp32893
g14
g15
(g53
tp32894
Rp32895
(dp32896
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g6971
sbsg108
(lp32897
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp32898
sg65
S'log_roi_timeseries_1'
p32899
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp32900
sg79
Nsg80
Nsb(dp32901
sg1
(g92
g3
Ntp32902
Rp32903
(dp32904
g7
(dp32905
sg9
g1
(g135
g3
Ntp32906
Rp32907
(dp32908
g139
(lp32909
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp32910
Rp32911
(dp32912
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p32913
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp32914
g25
Nssg150
(lp32915
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp32916
sg65
g32899
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp32917
sg79
Nsg80
Nsb(dp32918
sg1
(g92
g3
Ntp32919
Rp32920
(dp32921
g7
(dp32922
sg9
g1
(g97
g3
Ntp32923
Rp32924
(dp32925
g14
g15
(g53
tp32926
Rp32927
(dp32928
g28
g29
sg25
g23
sbsg108
(lp32929
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp32930
sg65
g32899
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp32931
sg79
Nsg80
Nsb(dp32932
ssg157
(dp32933
sg159
(dp32934
g32888
(dp32935
g32903
(dp32936
g163
(lp32937
(g107
g107
tp32938
a(g105
g105
tp32939
a(g104
g104
tp32940
a(g14
g14
tp32941
asssg32903
(dp32942
g32920
(dp32943
g163
(lp32944
(g25
g25
tp32945
asssg32920
(dp32946
ssg174
g32934
sg175
(dp32947
g32888
(dp32948
sg32903
(dp32949
g32888
g32936
ssg32920
(dp32950
g32903
g32943
sssg180
g32934
sbsg43
g32899
sg65
g66
sg75
g32899
sg76
g181
((lp32951
(lp32952
g184
ag181
((lp32953
(lp32954
g187
ag184
aa(lp32955
g189
ag190
aa(lp32956
g192
ag193
aa(lp32957
g195
ag196
aa(lp32958
g198
ag199
aa(lp32959
g201
ag106
aa(lp32960
g203
ag204
aa(lp32961
g206
ag207
aatp32962
Rp32963
aa(lp32964
g211
ag181
((lp32965
(lp32966
g187
ag211
aa(lp32967
g215
ag216
aa(lp32968
g218
ag219
aa(lp32969
g221
ag222
aa(lp32970
g224
ag225
aa(lp32971
g227
ag228
aa(lp32972
g230
ag231
aa(lp32973
g233
ag234
aa(lp32974
g236
ag237
aa(lp32975
g239
ag240
aa(lp32976
g242
ag243
aa(lp32977
g245
ag246
aa(lp32978
g248
ag249
aa(lp32979
g251
ag252
aa(lp32980
g254
ag255
aa(lp32981
g257
ag258
aa(lp32982
g260
ag261
aa(lp32983
g263
ag264
aa(lp32984
g266
ag267
aatp32985
Rp32986
aa(lp32987
g271
ag181
((lp32988
(lp32989
g187
ag271
aa(lp32990
g275
ag276
aatp32991
Rp32992
aatp32993
Rp32994
sg80
Nsbtp32995
a(g1
(g81
g3
Ntp32996
Rp32997
(dp32998
g85
g1
(g86
g3
Ntp32999
Rp33000
(dp33001
g90
(dp33002
g1
(g92
g3
Ntp33003
Rp33004
(dp33005
g7
(dp33006
sg9
g1
(g97
g3
Ntp33007
Rp33008
(dp33009
g14
g15
(g53
tp33010
Rp33011
(dp33012
g28
g29
sg6709
g23
sbsg108
(lp33013
g6709
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33014
sg65
S'roi_dataflow_for_sca_1'
p33015
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp33016
(g6709
(lp33017
S'HarvardOxford-sub-maxprob-thr50-2mm'
p33018
aS'HarvardOxford-cort-maxprob-thr50-2mm'
p33019
aS'rois_2mm'
p33020
atp33021
asg74
I00
sg75
g111
sg76
Nsg77
(lp33022
sg79
Nsg80
Nsb(dp33023
sg1
(g92
g3
Ntp33024
Rp33025
(dp33026
g7
(dp33027
sg9
g1
(g135
g3
Ntp33028
Rp33029
(dp33030
g139
(lp33031
g1817
ag24083
asg14
g15
(g142
tp33032
Rp33033
(dp33034
g20
I00
sg24083
(dp33035
g33018
S'/home/rtungaraza/CPAC_testData/HarvardOxford-sub-maxprob-thr50-2mm.nii.gz'
p33036
sg33019
S'/home/rtungaraza/CPAC_testData/HarvardOxford-cort-maxprob-thr50-2mm.nii.gz'
p33037
sg33020
S'/home/rtungaraza/CPAC_testData/ROIs/rois_2mm.nii.gz'
p33038
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p33039
sg28
g29
sg1817
g23
sbsg148
(dp33040
g25
Nssg150
(lp33041
g25
asg152
Nsbsg51
Nsg43
g32492
sg63
(dp33042
sg65
g33015
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g32492
sg76
Nsg77
(lp33043
sg79
Nsg80
Nsb(dp33044
ssg157
(dp33045
sg159
(dp33046
g33004
(dp33047
g33025
(dp33048
g163
(lp33049
(g6709
g1817
tp33050
asssg33025
(dp33051
ssg174
g33046
sg175
(dp33052
g33004
(dp33053
sg33025
(dp33054
g33004
g33048
sssg180
g33046
sbsg43
g33015
sg65
g66
sg75
g33015
sg76
g181
((lp33055
(lp33056
g184
ag181
((lp33057
(lp33058
g187
ag184
aa(lp33059
g189
ag190
aa(lp33060
g192
ag193
aa(lp33061
g195
ag196
aa(lp33062
g198
ag199
aa(lp33063
g201
ag106
aa(lp33064
g203
ag204
aa(lp33065
g206
ag207
aatp33066
Rp33067
aa(lp33068
g211
ag181
((lp33069
(lp33070
g187
ag211
aa(lp33071
g215
ag216
aa(lp33072
g218
ag219
aa(lp33073
g221
ag222
aa(lp33074
g224
ag225
aa(lp33075
g227
ag228
aa(lp33076
g230
ag231
aa(lp33077
g233
ag234
aa(lp33078
g236
ag237
aa(lp33079
g239
ag240
aa(lp33080
g242
ag243
aa(lp33081
g245
ag246
aa(lp33082
g248
ag249
aa(lp33083
g251
ag252
aa(lp33084
g254
ag255
aa(lp33085
g257
ag258
aa(lp33086
g260
ag261
aa(lp33087
g263
ag264
aa(lp33088
g266
ag267
aatp33089
Rp33090
aa(lp33091
g271
ag181
((lp33092
(lp33093
g187
ag271
aa(lp33094
g275
ag276
aatp33095
Rp33096
aatp33097
Rp33098
sg80
Nsbg7086
tp33099
a(g32997
g7104
tp33100
a(g7104
g29126
tp33101
a(g7104
g25981
tp33102
a(g4527
g1
(g81
g3
Ntp33103
Rp33104
(dp33105
g85
g1
(g86
g3
Ntp33106
Rp33107
(dp33108
g90
(dp33109
g1
(g92
g3
Ntp33110
Rp33111
(dp33112
g7
(dp33113
sg9
g1
(g97
g3
Ntp33114
Rp33115
(dp33116
g14
g15
(g53
tp33117
Rp33118
(dp33119
g28
g29
sg3640
g23
sbsg108
(lp33120
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp33121
sg65
S'sca_roi_to_standard_0'
p33122
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp33123
sg79
Nsg80
Nsb(dp33124
sg1
(g92
g3
Ntp33125
Rp33126
(dp33127
g7
(dp33128
sg9
g1
(g97
g3
Ntp33129
Rp33130
(dp33131
g14
g15
(g53
tp33132
Rp33133
(dp33134
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp33135
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33136
sg65
g33122
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33137
sg79
Nsg80
Nsb(dp33138
sg1
(g92
g3
Ntp33139
Rp33140
(dp33141
g7
(dp33142
sg9
g1
(g3632
g3
Ntp33143
Rp33144
(dp33145
g14
g15
(g3636
tp33146
Rp33147
(dp33148
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp33149
tp33150
Rp33151
(dp33152
g41
S'environ_items'
p33153
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp33154
sg65
g33122
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp33155
sg79
Nsg80
Nsb(dp33156
ssg157
(dp33157
sg159
(dp33158
g33111
(dp33159
sg33126
(dp33160
g33140
(dp33161
g163
(lp33162
(g3622
g3622
tp33163
a(g3621
g3621
tp33164
a(g3320
g3320
tp33165
a(g3371
g3371
tp33166
a(g3620
g3620
tp33167
a(g3344
g3344
tp33168
asssg33140
(dp33169
g33111
(dp33170
g163
(lp33171
(g3640
g3640
tp33172
assssg174
g33158
sg175
(dp33173
g33111
(dp33174
g33140
g33170
ssg33126
(dp33175
sg33140
(dp33176
g33126
g33161
sssg180
g33158
sbsg43
g33122
sg65
g66
sg75
g33122
sg76
g181
((lp33177
(lp33178
g184
ag181
((lp33179
(lp33180
g187
ag184
aa(lp33181
g189
ag190
aa(lp33182
g192
ag193
aa(lp33183
g195
ag196
aa(lp33184
g198
ag199
aa(lp33185
g201
ag106
aa(lp33186
g203
ag204
aa(lp33187
g206
ag207
aatp33188
Rp33189
aa(lp33190
g211
ag181
((lp33191
(lp33192
g187
ag211
aa(lp33193
g215
ag216
aa(lp33194
g218
ag219
aa(lp33195
g221
ag222
aa(lp33196
g224
ag225
aa(lp33197
g227
ag228
aa(lp33198
g230
ag231
aa(lp33199
g233
ag234
aa(lp33200
g236
ag237
aa(lp33201
g239
ag240
aa(lp33202
g242
ag243
aa(lp33203
g245
ag246
aa(lp33204
g248
ag249
aa(lp33205
g251
ag252
aa(lp33206
g254
ag255
aa(lp33207
g257
ag258
aa(lp33208
g260
ag261
aa(lp33209
g263
ag264
aa(lp33210
g266
ag267
aatp33211
Rp33212
aa(lp33213
g271
ag181
((lp33214
(lp33215
g187
ag271
aa(lp33216
g275
ag276
aatp33217
Rp33218
aatp33219
Rp33220
sg80
Nsbtp33221
a(g4527
g5241
tp33222
a(g4527
g890
tp33223
a(g4527
g21093
tp33224
a(g4527
g23863
tp33225
a(g4527
g1
(g81
g3
Ntp33226
Rp33227
(dp33228
g85
g1
(g86
g3
Ntp33229
Rp33230
(dp33231
g90
(dp33232
g1
(g2
g3
Ntp33233
Rp33234
(dp33235
g7
(dp33236
sg9
g1
(g3632
g3
Ntp33237
Rp33238
(dp33239
g14
g15
(g3636
tp33240
Rp33241
(dp33242
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp33243
tp33244
Rp33245
(dp33246
g41
S'environ_items'
p33247
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp33248
Rp33249
(dp33250
g3649
F0.0
sg20
I00
sg3640
g23
sg3352
I-1
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg3641
g3642
sg32
g1
(g33
g34
(dp33251
tp33252
Rp33253
(dp33254
g41
S'environ_items'
p33255
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3344
g3345
sg3371
g23
sg30
g31
sg3650
g23
sbsg43
g30442
sg63
(dp33256
sg65
S'sca_roi_Z_to_standard_0'
p33257
sg67
(lp33258
g3622
ag3320
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30442
sg76
Nsg77
(lp33259
sg79
Nsg80
Nsb(dp33260
sg1
(g92
g3
Ntp33261
Rp33262
(dp33263
g7
(dp33264
sg9
g1
(g97
g3
Ntp33265
Rp33266
(dp33267
g14
g15
(g53
tp33268
Rp33269
(dp33270
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp33271
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33272
sg65
g33257
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33273
sg79
Nsg80
Nsb(dp33274
sg1
(g92
g3
Ntp33275
Rp33276
(dp33277
g7
(dp33278
sg9
g1
(g97
g3
Ntp33279
Rp33280
(dp33281
g14
g15
(g53
tp33282
Rp33283
(dp33284
g28
g29
sg3640
g23
sbsg108
(lp33285
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp33286
sg65
g33257
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp33287
sg79
Nsg80
Nsb(dp33288
ssg157
(dp33289
sg159
(dp33290
g33234
(dp33291
g33276
(dp33292
g163
(lp33293
(g3640
g3640
tp33294
asssg33262
(dp33295
g33234
(dp33296
g163
(lp33297
(g3622
g3622
tp33298
a(g3621
g3621
tp33299
a(g3320
g3320
tp33300
a(g3371
g3371
tp33301
a(g3620
g3620
tp33302
a(g3344
g3344
tp33303
asssg33276
(dp33304
ssg174
g33290
sg175
(dp33305
g33234
(dp33306
g33262
g33296
ssg33262
(dp33307
sg33276
(dp33308
g33234
g33292
sssg180
g33290
sbsg43
g33257
sg65
g66
sg75
g33257
sg76
g181
((lp33309
(lp33310
g184
ag181
((lp33311
(lp33312
g187
ag184
aa(lp33313
g189
ag190
aa(lp33314
g192
ag193
aa(lp33315
g195
ag196
aa(lp33316
g198
ag199
aa(lp33317
g201
ag106
aa(lp33318
g203
ag204
aa(lp33319
g206
ag207
aatp33320
Rp33321
aa(lp33322
g211
ag181
((lp33323
(lp33324
g187
ag211
aa(lp33325
g215
ag216
aa(lp33326
g218
ag219
aa(lp33327
g221
ag222
aa(lp33328
g224
ag225
aa(lp33329
g227
ag228
aa(lp33330
g230
ag231
aa(lp33331
g233
ag234
aa(lp33332
g236
ag237
aa(lp33333
g239
ag240
aa(lp33334
g242
ag243
aa(lp33335
g245
ag246
aa(lp33336
g248
ag249
aa(lp33337
g251
ag252
aa(lp33338
g254
ag255
aa(lp33339
g257
ag258
aa(lp33340
g260
ag261
aa(lp33341
g263
ag264
aa(lp33342
g266
ag267
aatp33343
Rp33344
aa(lp33345
g271
ag181
((lp33346
(lp33347
g187
ag271
aa(lp33348
g275
ag276
aatp33349
Rp33350
aatp33351
Rp33352
sg80
Nsbtp33353
a(g4527
g1
(g81
g3
Ntp33354
Rp33355
(dp33356
g85
g1
(g86
g3
Ntp33357
Rp33358
(dp33359
g90
(dp33360
g1
(g92
g3
Ntp33361
Rp33362
(dp33363
g7
(dp33364
sg9
g1
(g135
g3
Ntp33365
Rp33366
(dp33367
g139
(lp33368
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp33369
Rp33370
(dp33371
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p33372
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp33373
g25
Nssg150
(lp33374
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp33375
sg65
S'log_sca_roi_0'
p33376
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp33377
sg79
Nsg80
Nsb(dp33378
sg1
(g92
g3
Ntp33379
Rp33380
(dp33381
g7
(dp33382
sg9
g1
(g97
g3
Ntp33383
Rp33384
(dp33385
g14
g15
(g53
tp33386
Rp33387
(dp33388
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g4545
sbsg108
(lp33389
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33390
sg65
g33376
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33391
sg79
Nsg80
Nsb(dp33392
sg1
(g92
g3
Ntp33393
Rp33394
(dp33395
g7
(dp33396
sg9
g1
(g97
g3
Ntp33397
Rp33398
(dp33399
g14
g15
(g53
tp33400
Rp33401
(dp33402
g28
g29
sg25
g23
sbsg108
(lp33403
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp33404
sg65
g33376
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp33405
sg79
Nsg80
Nsb(dp33406
ssg157
(dp33407
sg159
(dp33408
g33362
(dp33409
g33394
(dp33410
g163
(lp33411
(g25
g25
tp33412
asssg33380
(dp33413
g33362
(dp33414
g163
(lp33415
(g107
g107
tp33416
a(g105
g105
tp33417
a(g104
g104
tp33418
a(g14
g14
tp33419
asssg33394
(dp33420
ssg174
g33408
sg175
(dp33421
g33362
(dp33422
g33380
g33414
ssg33380
(dp33423
sg33394
(dp33424
g33362
g33410
sssg180
g33408
sbsg43
g33376
sg65
g66
sg75
g33376
sg76
g181
((lp33425
(lp33426
g184
ag181
((lp33427
(lp33428
g187
ag184
aa(lp33429
g189
ag190
aa(lp33430
g192
ag193
aa(lp33431
g195
ag196
aa(lp33432
g198
ag199
aa(lp33433
g201
ag106
aa(lp33434
g203
ag204
aa(lp33435
g206
ag207
aatp33436
Rp33437
aa(lp33438
g211
ag181
((lp33439
(lp33440
g187
ag211
aa(lp33441
g215
ag216
aa(lp33442
g218
ag219
aa(lp33443
g221
ag222
aa(lp33444
g224
ag225
aa(lp33445
g227
ag228
aa(lp33446
g230
ag231
aa(lp33447
g233
ag234
aa(lp33448
g236
ag237
aa(lp33449
g239
ag240
aa(lp33450
g242
ag243
aa(lp33451
g245
ag246
aa(lp33452
g248
ag249
aa(lp33453
g251
ag252
aa(lp33454
g254
ag255
aa(lp33455
g257
ag258
aa(lp33456
g260
ag261
aa(lp33457
g263
ag264
aa(lp33458
g266
ag267
aatp33459
Rp33460
aa(lp33461
g271
ag181
((lp33462
(lp33463
g187
ag271
aa(lp33464
g275
ag276
aatp33465
Rp33466
aatp33467
Rp33468
sg80
Nsbtp33469
a(g25981
g1
(g81
g3
Ntp33470
Rp33471
(dp33472
g85
g1
(g86
g3
Ntp33473
Rp33474
(dp33475
g90
(dp33476
g1
(g92
g3
Ntp33477
Rp33478
(dp33479
g7
(dp33480
sg9
g1
(g97
g3
Ntp33481
Rp33482
(dp33483
g14
g15
(g53
tp33484
Rp33485
(dp33486
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp33487
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33488
sg65
S'sca_roi_Z_to_standard_1'
p33489
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33490
sg79
Nsg80
Nsb(dp33491
sg1
(g2
g3
Ntp33492
Rp33493
(dp33494
g7
(dp33495
sg9
g1
(g3632
g3
Ntp33496
Rp33497
(dp33498
g14
g15
(g3636
tp33499
Rp33500
(dp33501
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp33502
tp33503
Rp33504
(dp33505
g41
S'environ_items'
p33506
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp33507
Rp33508
(dp33509
g3649
F0.0
sg20
I00
sg3640
g23
sg3352
I-1
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg3641
g3642
sg32
g1
(g33
g34
(dp33510
tp33511
Rp33512
(dp33513
g41
S'environ_items'
p33514
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3344
g3345
sg3371
g23
sg30
g31
sg3650
g23
sbsg43
g30442
sg63
(dp33515
sg65
g33489
sg67
(lp33516
g3622
ag3320
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30442
sg76
Nsg77
(lp33517
sg79
Nsg80
Nsb(dp33518
sg1
(g92
g3
Ntp33519
Rp33520
(dp33521
g7
(dp33522
sg9
g1
(g97
g3
Ntp33523
Rp33524
(dp33525
g14
g15
(g53
tp33526
Rp33527
(dp33528
g28
g29
sg3640
g23
sbsg108
(lp33529
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp33530
sg65
g33489
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp33531
sg79
Nsg80
Nsb(dp33532
ssg157
(dp33533
sg159
(dp33534
g33478
(dp33535
g33493
(dp33536
g163
(lp33537
(g3622
g3622
tp33538
a(g3621
g3621
tp33539
a(g3320
g3320
tp33540
a(g3371
g3371
tp33541
a(g3620
g3620
tp33542
a(g3344
g3344
tp33543
asssg33493
(dp33544
g33520
(dp33545
g163
(lp33546
(g3640
g3640
tp33547
asssg33520
(dp33548
ssg174
g33534
sg175
(dp33549
g33478
(dp33550
sg33493
(dp33551
g33478
g33536
ssg33520
(dp33552
g33493
g33545
sssg180
g33534
sbsg43
g33489
sg65
g66
sg75
g33489
sg76
g181
((lp33553
(lp33554
g184
ag181
((lp33555
(lp33556
g187
ag184
aa(lp33557
g189
ag190
aa(lp33558
g192
ag193
aa(lp33559
g195
ag196
aa(lp33560
g198
ag199
aa(lp33561
g201
ag106
aa(lp33562
g203
ag204
aa(lp33563
g206
ag207
aatp33564
Rp33565
aa(lp33566
g211
ag181
((lp33567
(lp33568
g187
ag211
aa(lp33569
g215
ag216
aa(lp33570
g218
ag219
aa(lp33571
g221
ag222
aa(lp33572
g224
ag225
aa(lp33573
g227
ag228
aa(lp33574
g230
ag231
aa(lp33575
g233
ag234
aa(lp33576
g236
ag237
aa(lp33577
g239
ag240
aa(lp33578
g242
ag243
aa(lp33579
g245
ag246
aa(lp33580
g248
ag249
aa(lp33581
g251
ag252
aa(lp33582
g254
ag255
aa(lp33583
g257
ag258
aa(lp33584
g260
ag261
aa(lp33585
g263
ag264
aa(lp33586
g266
ag267
aatp33587
Rp33588
aa(lp33589
g271
ag181
((lp33590
(lp33591
g187
ag271
aa(lp33592
g275
ag276
aatp33593
Rp33594
aatp33595
Rp33596
sg80
Nsbtp33597
a(g25981
g18278
tp33598
a(g25981
g1
(g81
g3
Ntp33599
Rp33600
(dp33601
g85
g1
(g86
g3
Ntp33602
Rp33603
(dp33604
g90
(dp33605
g1
(g92
g3
Ntp33606
Rp33607
(dp33608
g7
(dp33609
sg9
g1
(g97
g3
Ntp33610
Rp33611
(dp33612
g14
g15
(g53
tp33613
Rp33614
(dp33615
g28
g29
sg3640
g23
sbsg108
(lp33616
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp33617
sg65
S'sca_roi_to_standard_1'
p33618
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp33619
sg79
Nsg80
Nsb(dp33620
sg1
(g92
g3
Ntp33621
Rp33622
(dp33623
g7
(dp33624
sg9
g1
(g97
g3
Ntp33625
Rp33626
(dp33627
g14
g15
(g53
tp33628
Rp33629
(dp33630
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp33631
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33632
sg65
g33618
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33633
sg79
Nsg80
Nsb(dp33634
sg1
(g92
g3
Ntp33635
Rp33636
(dp33637
g7
(dp33638
sg9
g1
(g3632
g3
Ntp33639
Rp33640
(dp33641
g14
g15
(g3636
tp33642
Rp33643
(dp33644
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp33645
tp33646
Rp33647
(dp33648
g41
S'environ_items'
p33649
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp33650
sg65
g33618
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp33651
sg79
Nsg80
Nsb(dp33652
ssg157
(dp33653
sg159
(dp33654
g33607
(dp33655
sg33622
(dp33656
g33636
(dp33657
g163
(lp33658
(g3622
g3622
tp33659
a(g3621
g3621
tp33660
a(g3320
g3320
tp33661
a(g3371
g3371
tp33662
a(g3620
g3620
tp33663
a(g3344
g3344
tp33664
asssg33636
(dp33665
g33607
(dp33666
g163
(lp33667
(g3640
g3640
tp33668
assssg174
g33654
sg175
(dp33669
g33607
(dp33670
g33636
g33666
ssg33622
(dp33671
sg33636
(dp33672
g33622
g33657
sssg180
g33654
sbsg43
g33618
sg65
g66
sg75
g33618
sg76
g181
((lp33673
(lp33674
g184
ag181
((lp33675
(lp33676
g187
ag184
aa(lp33677
g189
ag190
aa(lp33678
g192
ag193
aa(lp33679
g195
ag196
aa(lp33680
g198
ag199
aa(lp33681
g201
ag106
aa(lp33682
g203
ag204
aa(lp33683
g206
ag207
aatp33684
Rp33685
aa(lp33686
g211
ag181
((lp33687
(lp33688
g187
ag211
aa(lp33689
g215
ag216
aa(lp33690
g218
ag219
aa(lp33691
g221
ag222
aa(lp33692
g224
ag225
aa(lp33693
g227
ag228
aa(lp33694
g230
ag231
aa(lp33695
g233
ag234
aa(lp33696
g236
ag237
aa(lp33697
g239
ag240
aa(lp33698
g242
ag243
aa(lp33699
g245
ag246
aa(lp33700
g248
ag249
aa(lp33701
g251
ag252
aa(lp33702
g254
ag255
aa(lp33703
g257
ag258
aa(lp33704
g260
ag261
aa(lp33705
g263
ag264
aa(lp33706
g266
ag267
aatp33707
Rp33708
aa(lp33709
g271
ag181
((lp33710
(lp33711
g187
ag271
aa(lp33712
g275
ag276
aatp33713
Rp33714
aatp33715
Rp33716
sg80
Nsbtp33717
a(g25981
g5599
tp33718
a(g25981
g1164
tp33719
a(g25981
g1
(g81
g3
Ntp33720
Rp33721
(dp33722
g85
g1
(g86
g3
Ntp33723
Rp33724
(dp33725
g90
(dp33726
g1
(g92
g3
Ntp33727
Rp33728
(dp33729
g7
(dp33730
sg9
g1
(g97
g3
Ntp33731
Rp33732
(dp33733
g14
g15
(g53
tp33734
Rp33735
(dp33736
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g26003
sbsg108
(lp33737
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33738
sg65
S'log_sca_roi_1'
p33739
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33740
sg79
Nsg80
Nsb(dp33741
sg1
(g92
g3
Ntp33742
Rp33743
(dp33744
g7
(dp33745
sg9
g1
(g97
g3
Ntp33746
Rp33747
(dp33748
g14
g15
(g53
tp33749
Rp33750
(dp33751
g28
g29
sg25
g23
sbsg108
(lp33752
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp33753
sg65
g33739
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp33754
sg79
Nsg80
Nsb(dp33755
sg1
(g92
g3
Ntp33756
Rp33757
(dp33758
g7
(dp33759
sg9
g1
(g135
g3
Ntp33760
Rp33761
(dp33762
g139
(lp33763
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp33764
Rp33765
(dp33766
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p33767
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp33768
g25
Nssg150
(lp33769
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp33770
sg65
g33739
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp33771
sg79
Nsg80
Nsb(dp33772
ssg157
(dp33773
sg159
(dp33774
g33728
(dp33775
g33757
(dp33776
g163
(lp33777
(g107
g107
tp33778
a(g105
g105
tp33779
a(g104
g104
tp33780
a(g14
g14
tp33781
asssg33743
(dp33782
sg33757
(dp33783
g33743
(dp33784
g163
(lp33785
(g25
g25
tp33786
assssg174
g33774
sg175
(dp33787
g33728
(dp33788
sg33743
(dp33789
g33757
g33784
ssg33757
(dp33790
g33728
g33776
sssg180
g33774
sbsg43
g33739
sg65
g66
sg75
g33739
sg76
g181
((lp33791
(lp33792
g184
ag181
((lp33793
(lp33794
g187
ag184
aa(lp33795
g189
ag190
aa(lp33796
g192
ag193
aa(lp33797
g195
ag196
aa(lp33798
g198
ag199
aa(lp33799
g201
ag106
aa(lp33800
g203
ag204
aa(lp33801
g206
ag207
aatp33802
Rp33803
aa(lp33804
g211
ag181
((lp33805
(lp33806
g187
ag211
aa(lp33807
g215
ag216
aa(lp33808
g218
ag219
aa(lp33809
g221
ag222
aa(lp33810
g224
ag225
aa(lp33811
g227
ag228
aa(lp33812
g230
ag231
aa(lp33813
g233
ag234
aa(lp33814
g236
ag237
aa(lp33815
g239
ag240
aa(lp33816
g242
ag243
aa(lp33817
g245
ag246
aa(lp33818
g248
ag249
aa(lp33819
g251
ag252
aa(lp33820
g254
ag255
aa(lp33821
g257
ag258
aa(lp33822
g260
ag261
aa(lp33823
g263
ag264
aa(lp33824
g266
ag267
aatp33825
Rp33826
aa(lp33827
g271
ag181
((lp33828
(lp33829
g187
ag271
aa(lp33830
g275
ag276
aatp33831
Rp33832
aatp33833
Rp33834
sg80
Nsbtp33835
a(g25981
g20791
tp33836
a(g4253
g5675
tp33837
a(g4253
g1265
tp33838
a(g4253
g20377
tp33839
a(g4253
g19382
tp33840
a(g4253
g1
(g81
g3
Ntp33841
Rp33842
(dp33843
g85
g1
(g86
g3
Ntp33844
Rp33845
(dp33846
g90
(dp33847
g1
(g2
g3
Ntp33848
Rp33849
(dp33850
g7
(dp33851
sg9
g1
(g3632
g3
Ntp33852
Rp33853
(dp33854
g14
g15
(g3636
tp33855
Rp33856
(dp33857
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp33858
tp33859
Rp33860
(dp33861
g41
S'environ_items'
p33862
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp33863
Rp33864
(dp33865
g3649
F0.0
sg20
I00
sg3640
g23
sg3352
I-1
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg3641
g3642
sg32
g1
(g33
g34
(dp33866
tp33867
Rp33868
(dp33869
g41
S'environ_items'
p33870
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3344
g3345
sg3371
g23
sg30
g31
sg3650
g23
sbsg43
g30442
sg63
(dp33871
sg65
S'sca_seed_Z_to_standard_0'
p33872
sg67
(lp33873
g3622
ag3320
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30442
sg76
Nsg77
(lp33874
sg79
Nsg80
Nsb(dp33875
sg1
(g92
g3
Ntp33876
Rp33877
(dp33878
g7
(dp33879
sg9
g1
(g97
g3
Ntp33880
Rp33881
(dp33882
g14
g15
(g53
tp33883
Rp33884
(dp33885
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp33886
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33887
sg65
g33872
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33888
sg79
Nsg80
Nsb(dp33889
sg1
(g92
g3
Ntp33890
Rp33891
(dp33892
g7
(dp33893
sg9
g1
(g97
g3
Ntp33894
Rp33895
(dp33896
g14
g15
(g53
tp33897
Rp33898
(dp33899
g28
g29
sg3640
g23
sbsg108
(lp33900
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp33901
sg65
g33872
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp33902
sg79
Nsg80
Nsb(dp33903
ssg157
(dp33904
sg159
(dp33905
g33849
(dp33906
g33891
(dp33907
g163
(lp33908
(g3640
g3640
tp33909
asssg33877
(dp33910
g33849
(dp33911
g163
(lp33912
(g3622
g3622
tp33913
a(g3621
g3621
tp33914
a(g3320
g3320
tp33915
a(g3371
g3371
tp33916
a(g3620
g3620
tp33917
a(g3344
g3344
tp33918
asssg33891
(dp33919
ssg174
g33905
sg175
(dp33920
g33849
(dp33921
g33877
g33911
ssg33877
(dp33922
sg33891
(dp33923
g33849
g33907
sssg180
g33905
sbsg43
g33872
sg65
g66
sg75
g33872
sg76
g181
((lp33924
(lp33925
g184
ag181
((lp33926
(lp33927
g187
ag184
aa(lp33928
g189
ag190
aa(lp33929
g192
ag193
aa(lp33930
g195
ag196
aa(lp33931
g198
ag199
aa(lp33932
g201
ag106
aa(lp33933
g203
ag204
aa(lp33934
g206
ag207
aatp33935
Rp33936
aa(lp33937
g211
ag181
((lp33938
(lp33939
g187
ag211
aa(lp33940
g215
ag216
aa(lp33941
g218
ag219
aa(lp33942
g221
ag222
aa(lp33943
g224
ag225
aa(lp33944
g227
ag228
aa(lp33945
g230
ag231
aa(lp33946
g233
ag234
aa(lp33947
g236
ag237
aa(lp33948
g239
ag240
aa(lp33949
g242
ag243
aa(lp33950
g245
ag246
aa(lp33951
g248
ag249
aa(lp33952
g251
ag252
aa(lp33953
g254
ag255
aa(lp33954
g257
ag258
aa(lp33955
g260
ag261
aa(lp33956
g263
ag264
aa(lp33957
g266
ag267
aatp33958
Rp33959
aa(lp33960
g271
ag181
((lp33961
(lp33962
g187
ag271
aa(lp33963
g275
ag276
aatp33964
Rp33965
aatp33966
Rp33967
sg80
Nsbtp33968
a(g4253
g1
(g81
g3
Ntp33969
Rp33970
(dp33971
g85
g1
(g86
g3
Ntp33972
Rp33973
(dp33974
g90
(dp33975
g1
(g92
g3
Ntp33976
Rp33977
(dp33978
g7
(dp33979
sg9
g1
(g97
g3
Ntp33980
Rp33981
(dp33982
g14
g15
(g53
tp33983
Rp33984
(dp33985
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp33986
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp33987
sg65
S'sca_seed_to_standard_0'
p33988
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp33989
sg79
Nsg80
Nsb(dp33990
sg1
(g92
g3
Ntp33991
Rp33992
(dp33993
g7
(dp33994
sg9
g1
(g97
g3
Ntp33995
Rp33996
(dp33997
g14
g15
(g53
tp33998
Rp33999
(dp34000
g28
g29
sg3640
g23
sbsg108
(lp34001
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34002
sg65
g33988
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34003
sg79
Nsg80
Nsb(dp34004
sg1
(g92
g3
Ntp34005
Rp34006
(dp34007
g7
(dp34008
sg9
g1
(g3632
g3
Ntp34009
Rp34010
(dp34011
g14
g15
(g3636
tp34012
Rp34013
(dp34014
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp34015
tp34016
Rp34017
(dp34018
g41
S'environ_items'
p34019
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp34020
sg65
g33988
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp34021
sg79
Nsg80
Nsb(dp34022
ssg157
(dp34023
sg159
(dp34024
g33977
(dp34025
g34006
(dp34026
g163
(lp34027
(g3622
g3622
tp34028
a(g3621
g3621
tp34029
a(g3320
g3320
tp34030
a(g3371
g3371
tp34031
a(g3620
g3620
tp34032
a(g3344
g3344
tp34033
asssg33992
(dp34034
sg34006
(dp34035
g33992
(dp34036
g163
(lp34037
(g3640
g3640
tp34038
assssg174
g34024
sg175
(dp34039
g33977
(dp34040
sg33992
(dp34041
g34006
g34036
ssg34006
(dp34042
g33977
g34026
sssg180
g34024
sbsg43
g33988
sg65
g66
sg75
g33988
sg76
g181
((lp34043
(lp34044
g184
ag181
((lp34045
(lp34046
g187
ag184
aa(lp34047
g189
ag190
aa(lp34048
g192
ag193
aa(lp34049
g195
ag196
aa(lp34050
g198
ag199
aa(lp34051
g201
ag106
aa(lp34052
g203
ag204
aa(lp34053
g206
ag207
aatp34054
Rp34055
aa(lp34056
g211
ag181
((lp34057
(lp34058
g187
ag211
aa(lp34059
g215
ag216
aa(lp34060
g218
ag219
aa(lp34061
g221
ag222
aa(lp34062
g224
ag225
aa(lp34063
g227
ag228
aa(lp34064
g230
ag231
aa(lp34065
g233
ag234
aa(lp34066
g236
ag237
aa(lp34067
g239
ag240
aa(lp34068
g242
ag243
aa(lp34069
g245
ag246
aa(lp34070
g248
ag249
aa(lp34071
g251
ag252
aa(lp34072
g254
ag255
aa(lp34073
g257
ag258
aa(lp34074
g260
ag261
aa(lp34075
g263
ag264
aa(lp34076
g266
ag267
aatp34077
Rp34078
aa(lp34079
g271
ag181
((lp34080
(lp34081
g187
ag271
aa(lp34082
g275
ag276
aatp34083
Rp34084
aatp34085
Rp34086
sg80
Nsbtp34087
a(g3929
g23573
tp34088
a(g3929
g19244
tp34089
a(g3929
g1
(g81
g3
Ntp34090
Rp34091
(dp34092
g85
g1
(g86
g3
Ntp34093
Rp34094
(dp34095
g90
(dp34096
g1
(g2
g3
Ntp34097
Rp34098
(dp34099
g7
(dp34100
sg9
g1
(g3632
g3
Ntp34101
Rp34102
(dp34103
g14
g15
(g3636
tp34104
Rp34105
(dp34106
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp34107
tp34108
Rp34109
(dp34110
g41
S'environ_items'
p34111
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp34112
Rp34113
(dp34114
g3649
F0.0
sg20
I00
sg3640
g23
sg3352
I-1
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg3641
g3642
sg32
g1
(g33
g34
(dp34115
tp34116
Rp34117
(dp34118
g41
S'environ_items'
p34119
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3344
g3345
sg3371
g23
sg30
g31
sg3650
g23
sbsg43
g30442
sg63
(dp34120
sg65
S'dr_tempreg_maps_z_files_to_standard_0'
p34121
sg67
(lp34122
g3622
ag3320
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30442
sg76
Nsg77
(lp34123
sg79
Nsg80
Nsb(dp34124
sg1
(g92
g3
Ntp34125
Rp34126
(dp34127
g7
(dp34128
sg9
g1
(g97
g3
Ntp34129
Rp34130
(dp34131
g14
g15
(g53
tp34132
Rp34133
(dp34134
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp34135
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34136
sg65
g34121
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34137
sg79
Nsg80
Nsb(dp34138
sg1
(g92
g3
Ntp34139
Rp34140
(dp34141
g7
(dp34142
sg9
g1
(g97
g3
Ntp34143
Rp34144
(dp34145
g14
g15
(g53
tp34146
Rp34147
(dp34148
g28
g29
sg3640
g23
sbsg108
(lp34149
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34150
sg65
g34121
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34151
sg79
Nsg80
Nsb(dp34152
ssg157
(dp34153
sg159
(dp34154
g34098
(dp34155
g34140
(dp34156
g163
(lp34157
(g3640
g3640
tp34158
asssg34126
(dp34159
g34098
(dp34160
g163
(lp34161
(g3622
g3622
tp34162
a(g3621
g3621
tp34163
a(g3320
g3320
tp34164
a(g3371
g3371
tp34165
a(g3620
g3620
tp34166
a(g3344
g3344
tp34167
asssg34140
(dp34168
ssg174
g34154
sg175
(dp34169
g34098
(dp34170
g34126
g34160
ssg34126
(dp34171
sg34140
(dp34172
g34098
g34156
sssg180
g34154
sbsg43
g34121
sg65
g66
sg75
g34121
sg76
g181
((lp34173
(lp34174
g184
ag181
((lp34175
(lp34176
g187
ag184
aa(lp34177
g189
ag190
aa(lp34178
g192
ag193
aa(lp34179
g195
ag196
aa(lp34180
g198
ag199
aa(lp34181
g201
ag106
aa(lp34182
g203
ag204
aa(lp34183
g206
ag207
aatp34184
Rp34185
aa(lp34186
g211
ag181
((lp34187
(lp34188
g187
ag211
aa(lp34189
g215
ag216
aa(lp34190
g218
ag219
aa(lp34191
g221
ag222
aa(lp34192
g224
ag225
aa(lp34193
g227
ag228
aa(lp34194
g230
ag231
aa(lp34195
g233
ag234
aa(lp34196
g236
ag237
aa(lp34197
g239
ag240
aa(lp34198
g242
ag243
aa(lp34199
g245
ag246
aa(lp34200
g248
ag249
aa(lp34201
g251
ag252
aa(lp34202
g254
ag255
aa(lp34203
g257
ag258
aa(lp34204
g260
ag261
aa(lp34205
g263
ag264
aa(lp34206
g266
ag267
aatp34207
Rp34208
aa(lp34209
g271
ag181
((lp34210
(lp34211
g187
ag271
aa(lp34212
g275
ag276
aatp34213
Rp34214
aatp34215
Rp34216
sg80
Nsbtp34217
a(g3929
g1
(g81
g3
Ntp34218
Rp34219
(dp34220
g85
g1
(g86
g3
Ntp34221
Rp34222
(dp34223
g90
(dp34224
g1
(g92
g3
Ntp34225
Rp34226
(dp34227
g7
(dp34228
sg9
g1
(g3632
g3
Ntp34229
Rp34230
(dp34231
g14
g15
(g3636
tp34232
Rp34233
(dp34234
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp34235
tp34236
Rp34237
(dp34238
g41
S'environ_items'
p34239
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp34240
sg65
S'dr_tempreg_maps_z_stack_to_standard_0'
p34241
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp34242
sg79
Nsg80
Nsb(dp34243
sg1
(g92
g3
Ntp34244
Rp34245
(dp34246
g7
(dp34247
sg9
g1
(g97
g3
Ntp34248
Rp34249
(dp34250
g14
g15
(g53
tp34251
Rp34252
(dp34253
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp34254
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34255
sg65
g34241
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34256
sg79
Nsg80
Nsb(dp34257
sg1
(g92
g3
Ntp34258
Rp34259
(dp34260
g7
(dp34261
sg9
g1
(g97
g3
Ntp34262
Rp34263
(dp34264
g14
g15
(g53
tp34265
Rp34266
(dp34267
g28
g29
sg3640
g23
sbsg108
(lp34268
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34269
sg65
g34241
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34270
sg79
Nsg80
Nsb(dp34271
ssg157
(dp34272
sg159
(dp34273
g34226
(dp34274
g34259
(dp34275
g163
(lp34276
(g3640
g3640
tp34277
asssg34245
(dp34278
g34226
(dp34279
g163
(lp34280
(g3622
g3622
tp34281
a(g3621
g3621
tp34282
a(g3320
g3320
tp34283
a(g3371
g3371
tp34284
a(g3620
g3620
tp34285
a(g3344
g3344
tp34286
asssg34259
(dp34287
ssg174
g34273
sg175
(dp34288
g34226
(dp34289
g34245
g34279
ssg34245
(dp34290
sg34259
(dp34291
g34226
g34275
sssg180
g34273
sbsg43
g34241
sg65
g66
sg75
g34241
sg76
g181
((lp34292
(lp34293
g184
ag181
((lp34294
(lp34295
g187
ag184
aa(lp34296
g189
ag190
aa(lp34297
g192
ag193
aa(lp34298
g195
ag196
aa(lp34299
g198
ag199
aa(lp34300
g201
ag106
aa(lp34301
g203
ag204
aa(lp34302
g206
ag207
aatp34303
Rp34304
aa(lp34305
g211
ag181
((lp34306
(lp34307
g187
ag211
aa(lp34308
g215
ag216
aa(lp34309
g218
ag219
aa(lp34310
g221
ag222
aa(lp34311
g224
ag225
aa(lp34312
g227
ag228
aa(lp34313
g230
ag231
aa(lp34314
g233
ag234
aa(lp34315
g236
ag237
aa(lp34316
g239
ag240
aa(lp34317
g242
ag243
aa(lp34318
g245
ag246
aa(lp34319
g248
ag249
aa(lp34320
g251
ag252
aa(lp34321
g254
ag255
aa(lp34322
g257
ag258
aa(lp34323
g260
ag261
aa(lp34324
g263
ag264
aa(lp34325
g266
ag267
aatp34326
Rp34327
aa(lp34328
g271
ag181
((lp34329
(lp34330
g187
ag271
aa(lp34331
g275
ag276
aatp34332
Rp34333
aatp34334
Rp34335
sg80
Nsbtp34336
a(g3929
g1
(g81
g3
Ntp34337
Rp34338
(dp34339
g85
g1
(g86
g3
Ntp34340
Rp34341
(dp34342
g90
(dp34343
g1
(g92
g3
Ntp34344
Rp34345
(dp34346
g7
(dp34347
sg9
g1
(g135
g3
Ntp34348
Rp34349
(dp34350
g139
(lp34351
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp34352
Rp34353
(dp34354
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p34355
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp34356
g25
Nssg150
(lp34357
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp34358
sg65
S'log_temporal_dual_regression_0'
p34359
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp34360
sg79
Nsg80
Nsb(dp34361
sg1
(g92
g3
Ntp34362
Rp34363
(dp34364
g7
(dp34365
sg9
g1
(g97
g3
Ntp34366
Rp34367
(dp34368
g14
g15
(g53
tp34369
Rp34370
(dp34371
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g3952
sbsg108
(lp34372
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34373
sg65
g34359
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34374
sg79
Nsg80
Nsb(dp34375
sg1
(g92
g3
Ntp34376
Rp34377
(dp34378
g7
(dp34379
sg9
g1
(g97
g3
Ntp34380
Rp34381
(dp34382
g14
g15
(g53
tp34383
Rp34384
(dp34385
g28
g29
sg25
g23
sbsg108
(lp34386
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34387
sg65
g34359
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34388
sg79
Nsg80
Nsb(dp34389
ssg157
(dp34390
sg159
(dp34391
g34345
(dp34392
g34377
(dp34393
g163
(lp34394
(g25
g25
tp34395
asssg34363
(dp34396
g34345
(dp34397
g163
(lp34398
(g107
g107
tp34399
a(g105
g105
tp34400
a(g104
g104
tp34401
a(g14
g14
tp34402
asssg34377
(dp34403
ssg174
g34391
sg175
(dp34404
g34345
(dp34405
g34363
g34397
ssg34363
(dp34406
sg34377
(dp34407
g34345
g34393
sssg180
g34391
sbsg43
g34359
sg65
g66
sg75
g34359
sg76
g181
((lp34408
(lp34409
g184
ag181
((lp34410
(lp34411
g187
ag184
aa(lp34412
g189
ag190
aa(lp34413
g192
ag193
aa(lp34414
g195
ag196
aa(lp34415
g198
ag199
aa(lp34416
g201
ag106
aa(lp34417
g203
ag204
aa(lp34418
g206
ag207
aatp34419
Rp34420
aa(lp34421
g211
ag181
((lp34422
(lp34423
g187
ag211
aa(lp34424
g215
ag216
aa(lp34425
g218
ag219
aa(lp34426
g221
ag222
aa(lp34427
g224
ag225
aa(lp34428
g227
ag228
aa(lp34429
g230
ag231
aa(lp34430
g233
ag234
aa(lp34431
g236
ag237
aa(lp34432
g239
ag240
aa(lp34433
g242
ag243
aa(lp34434
g245
ag246
aa(lp34435
g248
ag249
aa(lp34436
g251
ag252
aa(lp34437
g254
ag255
aa(lp34438
g257
ag258
aa(lp34439
g260
ag261
aa(lp34440
g263
ag264
aa(lp34441
g266
ag267
aatp34442
Rp34443
aa(lp34444
g271
ag181
((lp34445
(lp34446
g187
ag271
aa(lp34447
g275
ag276
aatp34448
Rp34449
aatp34450
Rp34451
sg80
Nsbtp34452
a(g3929
g1
(g81
g3
Ntp34453
Rp34454
(dp34455
g85
g1
(g86
g3
Ntp34456
Rp34457
(dp34458
g90
(dp34459
g1
(g92
g3
Ntp34460
Rp34461
(dp34462
g7
(dp34463
sg9
g1
(g97
g3
Ntp34464
Rp34465
(dp34466
g14
g15
(g53
tp34467
Rp34468
(dp34469
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp34470
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34471
sg65
S'dr_tempreg_maps_stack_to_standard_0'
p34472
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34473
sg79
Nsg80
Nsb(dp34474
sg1
(g92
g3
Ntp34475
Rp34476
(dp34477
g7
(dp34478
sg9
g1
(g97
g3
Ntp34479
Rp34480
(dp34481
g14
g15
(g53
tp34482
Rp34483
(dp34484
g28
g29
sg3640
g23
sbsg108
(lp34485
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34486
sg65
g34472
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34487
sg79
Nsg80
Nsb(dp34488
sg1
(g92
g3
Ntp34489
Rp34490
(dp34491
g7
(dp34492
sg9
g1
(g3632
g3
Ntp34493
Rp34494
(dp34495
g14
g15
(g3636
tp34496
Rp34497
(dp34498
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp34499
tp34500
Rp34501
(dp34502
g41
S'environ_items'
p34503
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp34504
sg65
g34472
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp34505
sg79
Nsg80
Nsb(dp34506
ssg157
(dp34507
sg159
(dp34508
g34461
(dp34509
g34490
(dp34510
g163
(lp34511
(g3622
g3622
tp34512
a(g3621
g3621
tp34513
a(g3320
g3320
tp34514
a(g3371
g3371
tp34515
a(g3620
g3620
tp34516
a(g3344
g3344
tp34517
asssg34476
(dp34518
sg34490
(dp34519
g34476
(dp34520
g163
(lp34521
(g3640
g3640
tp34522
assssg174
g34508
sg175
(dp34523
g34461
(dp34524
sg34476
(dp34525
g34490
g34520
ssg34490
(dp34526
g34461
g34510
sssg180
g34508
sbsg43
g34472
sg65
g66
sg75
g34472
sg76
g181
((lp34527
(lp34528
g184
ag181
((lp34529
(lp34530
g187
ag184
aa(lp34531
g189
ag190
aa(lp34532
g192
ag193
aa(lp34533
g195
ag196
aa(lp34534
g198
ag199
aa(lp34535
g201
ag106
aa(lp34536
g203
ag204
aa(lp34537
g206
ag207
aatp34538
Rp34539
aa(lp34540
g211
ag181
((lp34541
(lp34542
g187
ag211
aa(lp34543
g215
ag216
aa(lp34544
g218
ag219
aa(lp34545
g221
ag222
aa(lp34546
g224
ag225
aa(lp34547
g227
ag228
aa(lp34548
g230
ag231
aa(lp34549
g233
ag234
aa(lp34550
g236
ag237
aa(lp34551
g239
ag240
aa(lp34552
g242
ag243
aa(lp34553
g245
ag246
aa(lp34554
g248
ag249
aa(lp34555
g251
ag252
aa(lp34556
g254
ag255
aa(lp34557
g257
ag258
aa(lp34558
g260
ag261
aa(lp34559
g263
ag264
aa(lp34560
g266
ag267
aatp34561
Rp34562
aa(lp34563
g271
ag181
((lp34564
(lp34565
g187
ag271
aa(lp34566
g275
ag276
aatp34567
Rp34568
aatp34569
Rp34570
sg80
Nsbtp34571
a(g3929
g18968
tp34572
a(g25082
g1
(g81
g3
Ntp34573
Rp34574
(dp34575
g85
g1
(g86
g3
Ntp34576
Rp34577
(dp34578
g90
(dp34579
g1
(g92
g3
Ntp34580
Rp34581
(dp34582
g7
(dp34583
sg9
g1
(g3632
g3
Ntp34584
Rp34585
(dp34586
g14
g15
(g3636
tp34587
Rp34588
(dp34589
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp34590
tp34591
Rp34592
(dp34593
g41
S'environ_items'
p34594
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp34595
sg65
S'dr_tempreg_maps_stack_to_standard_1'
p34596
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp34597
sg79
Nsg80
Nsb(dp34598
sg1
(g92
g3
Ntp34599
Rp34600
(dp34601
g7
(dp34602
sg9
g1
(g97
g3
Ntp34603
Rp34604
(dp34605
g14
g15
(g53
tp34606
Rp34607
(dp34608
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp34609
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34610
sg65
g34596
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34611
sg79
Nsg80
Nsb(dp34612
sg1
(g92
g3
Ntp34613
Rp34614
(dp34615
g7
(dp34616
sg9
g1
(g97
g3
Ntp34617
Rp34618
(dp34619
g14
g15
(g53
tp34620
Rp34621
(dp34622
g28
g29
sg3640
g23
sbsg108
(lp34623
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34624
sg65
g34596
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34625
sg79
Nsg80
Nsb(dp34626
ssg157
(dp34627
sg159
(dp34628
g34581
(dp34629
g34614
(dp34630
g163
(lp34631
(g3640
g3640
tp34632
asssg34600
(dp34633
g34581
(dp34634
g163
(lp34635
(g3622
g3622
tp34636
a(g3621
g3621
tp34637
a(g3320
g3320
tp34638
a(g3371
g3371
tp34639
a(g3620
g3620
tp34640
a(g3344
g3344
tp34641
asssg34614
(dp34642
ssg174
g34628
sg175
(dp34643
g34581
(dp34644
g34600
g34634
ssg34600
(dp34645
sg34614
(dp34646
g34581
g34630
sssg180
g34628
sbsg43
g34596
sg65
g66
sg75
g34596
sg76
g181
((lp34647
(lp34648
g184
ag181
((lp34649
(lp34650
g187
ag184
aa(lp34651
g189
ag190
aa(lp34652
g192
ag193
aa(lp34653
g195
ag196
aa(lp34654
g198
ag199
aa(lp34655
g201
ag106
aa(lp34656
g203
ag204
aa(lp34657
g206
ag207
aatp34658
Rp34659
aa(lp34660
g211
ag181
((lp34661
(lp34662
g187
ag211
aa(lp34663
g215
ag216
aa(lp34664
g218
ag219
aa(lp34665
g221
ag222
aa(lp34666
g224
ag225
aa(lp34667
g227
ag228
aa(lp34668
g230
ag231
aa(lp34669
g233
ag234
aa(lp34670
g236
ag237
aa(lp34671
g239
ag240
aa(lp34672
g242
ag243
aa(lp34673
g245
ag246
aa(lp34674
g248
ag249
aa(lp34675
g251
ag252
aa(lp34676
g254
ag255
aa(lp34677
g257
ag258
aa(lp34678
g260
ag261
aa(lp34679
g263
ag264
aa(lp34680
g266
ag267
aatp34681
Rp34682
aa(lp34683
g271
ag181
((lp34684
(lp34685
g187
ag271
aa(lp34686
g275
ag276
aatp34687
Rp34688
aatp34689
Rp34690
sg80
Nsbtp34691
a(g25082
g1
(g81
g3
Ntp34692
Rp34693
(dp34694
g85
g1
(g86
g3
Ntp34695
Rp34696
(dp34697
g90
(dp34698
g1
(g92
g3
Ntp34699
Rp34700
(dp34701
g7
(dp34702
sg9
g1
(g97
g3
Ntp34703
Rp34704
(dp34705
g14
g15
(g53
tp34706
Rp34707
(dp34708
g28
g29
sg3640
g23
sbsg108
(lp34709
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34710
sg65
S'dr_tempreg_maps_z_files_to_standard_1'
p34711
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34712
sg79
Nsg80
Nsb(dp34713
sg1
(g92
g3
Ntp34714
Rp34715
(dp34716
g7
(dp34717
sg9
g1
(g97
g3
Ntp34718
Rp34719
(dp34720
g14
g15
(g53
tp34721
Rp34722
(dp34723
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp34724
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34725
sg65
g34711
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34726
sg79
Nsg80
Nsb(dp34727
sg1
(g2
g3
Ntp34728
Rp34729
(dp34730
g7
(dp34731
sg9
g1
(g3632
g3
Ntp34732
Rp34733
(dp34734
g14
g15
(g3636
tp34735
Rp34736
(dp34737
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp34738
tp34739
Rp34740
(dp34741
g41
S'environ_items'
p34742
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg52
g15
(g53
tp34743
Rp34744
(dp34745
g3649
F0.0
sg20
I00
sg3640
g23
sg3352
I-1
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg3641
g3642
sg32
g1
(g33
g34
(dp34746
tp34747
Rp34748
(dp34749
g41
S'environ_items'
p34750
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3344
g3345
sg3371
g23
sg30
g31
sg3650
g23
sbsg43
g30442
sg63
(dp34751
sg65
g34711
sg67
(lp34752
g3622
ag3320
asg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g30442
sg76
Nsg77
(lp34753
sg79
Nsg80
Nsb(dp34754
ssg157
(dp34755
sg159
(dp34756
g34700
(dp34757
sg34715
(dp34758
g34729
(dp34759
g163
(lp34760
(g3622
g3622
tp34761
a(g3621
g3621
tp34762
a(g3320
g3320
tp34763
a(g3371
g3371
tp34764
a(g3620
g3620
tp34765
a(g3344
g3344
tp34766
asssg34729
(dp34767
g34700
(dp34768
g163
(lp34769
(g3640
g3640
tp34770
assssg174
g34756
sg175
(dp34771
g34700
(dp34772
g34729
g34768
ssg34715
(dp34773
sg34729
(dp34774
g34715
g34759
sssg180
g34756
sbsg43
g34711
sg65
g66
sg75
g34711
sg76
g181
((lp34775
(lp34776
g184
ag181
((lp34777
(lp34778
g187
ag184
aa(lp34779
g189
ag190
aa(lp34780
g192
ag193
aa(lp34781
g195
ag196
aa(lp34782
g198
ag199
aa(lp34783
g201
ag106
aa(lp34784
g203
ag204
aa(lp34785
g206
ag207
aatp34786
Rp34787
aa(lp34788
g211
ag181
((lp34789
(lp34790
g187
ag211
aa(lp34791
g215
ag216
aa(lp34792
g218
ag219
aa(lp34793
g221
ag222
aa(lp34794
g224
ag225
aa(lp34795
g227
ag228
aa(lp34796
g230
ag231
aa(lp34797
g233
ag234
aa(lp34798
g236
ag237
aa(lp34799
g239
ag240
aa(lp34800
g242
ag243
aa(lp34801
g245
ag246
aa(lp34802
g248
ag249
aa(lp34803
g251
ag252
aa(lp34804
g254
ag255
aa(lp34805
g257
ag258
aa(lp34806
g260
ag261
aa(lp34807
g263
ag264
aa(lp34808
g266
ag267
aatp34809
Rp34810
aa(lp34811
g271
ag181
((lp34812
(lp34813
g187
ag271
aa(lp34814
g275
ag276
aatp34815
Rp34816
aatp34817
Rp34818
sg80
Nsbtp34819
a(g25082
g20942
tp34820
a(g25082
g1
(g81
g3
Ntp34821
Rp34822
(dp34823
g85
g1
(g86
g3
Ntp34824
Rp34825
(dp34826
g90
(dp34827
g1
(g92
g3
Ntp34828
Rp34829
(dp34830
g7
(dp34831
sg9
g1
(g97
g3
Ntp34832
Rp34833
(dp34834
g14
g15
(g53
tp34835
Rp34836
(dp34837
g28
g29
sg25
g23
sbsg108
(lp34838
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34839
sg65
S'log_temporal_dual_regression_1'
p34840
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34841
sg79
Nsg80
Nsb(dp34842
sg1
(g92
g3
Ntp34843
Rp34844
(dp34845
g7
(dp34846
sg9
g1
(g97
g3
Ntp34847
Rp34848
(dp34849
g14
g15
(g53
tp34850
Rp34851
(dp34852
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g25100
sbsg108
(lp34853
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34854
sg65
g34840
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34855
sg79
Nsg80
Nsb(dp34856
sg1
(g92
g3
Ntp34857
Rp34858
(dp34859
g7
(dp34860
sg9
g1
(g135
g3
Ntp34861
Rp34862
(dp34863
g139
(lp34864
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp34865
Rp34866
(dp34867
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p34868
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp34869
g25
Nssg150
(lp34870
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp34871
sg65
g34840
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp34872
sg79
Nsg80
Nsb(dp34873
ssg157
(dp34874
sg159
(dp34875
g34829
(dp34876
sg34844
(dp34877
g34858
(dp34878
g163
(lp34879
(g107
g107
tp34880
a(g105
g105
tp34881
a(g104
g104
tp34882
a(g14
g14
tp34883
asssg34858
(dp34884
g34829
(dp34885
g163
(lp34886
(g25
g25
tp34887
assssg174
g34875
sg175
(dp34888
g34829
(dp34889
g34858
g34885
ssg34844
(dp34890
sg34858
(dp34891
g34844
g34878
sssg180
g34875
sbsg43
g34840
sg65
g66
sg75
g34840
sg76
g181
((lp34892
(lp34893
g184
ag181
((lp34894
(lp34895
g187
ag184
aa(lp34896
g189
ag190
aa(lp34897
g192
ag193
aa(lp34898
g195
ag196
aa(lp34899
g198
ag199
aa(lp34900
g201
ag106
aa(lp34901
g203
ag204
aa(lp34902
g206
ag207
aatp34903
Rp34904
aa(lp34905
g211
ag181
((lp34906
(lp34907
g187
ag211
aa(lp34908
g215
ag216
aa(lp34909
g218
ag219
aa(lp34910
g221
ag222
aa(lp34911
g224
ag225
aa(lp34912
g227
ag228
aa(lp34913
g230
ag231
aa(lp34914
g233
ag234
aa(lp34915
g236
ag237
aa(lp34916
g239
ag240
aa(lp34917
g242
ag243
aa(lp34918
g245
ag246
aa(lp34919
g248
ag249
aa(lp34920
g251
ag252
aa(lp34921
g254
ag255
aa(lp34922
g257
ag258
aa(lp34923
g260
ag261
aa(lp34924
g263
ag264
aa(lp34925
g266
ag267
aatp34926
Rp34927
aa(lp34928
g271
ag181
((lp34929
(lp34930
g187
ag271
aa(lp34931
g275
ag276
aatp34932
Rp34933
aatp34934
Rp34935
sg80
Nsbtp34936
a(g25082
g18416
tp34937
a(g25082
g1
(g81
g3
Ntp34938
Rp34939
(dp34940
g85
g1
(g86
g3
Ntp34941
Rp34942
(dp34943
g90
(dp34944
g1
(g92
g3
Ntp34945
Rp34946
(dp34947
g7
(dp34948
sg9
g1
(g97
g3
Ntp34949
Rp34950
(dp34951
g14
g15
(g53
tp34952
Rp34953
(dp34954
g28
g29
sg3620
g23
sg3320
g23
sg3621
g4423
sg3622
g23
sg3371
I3
sg3344
g3345
sbsg108
(lp34955
g3622
ag3621
ag3320
ag3371
ag3620
ag3344
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp34956
sg65
S'dr_tempreg_maps_z_stack_to_standard_1'
p34957
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp34958
sg79
Nsg80
Nsb(dp34959
sg1
(g92
g3
Ntp34960
Rp34961
(dp34962
g7
(dp34963
sg9
g1
(g97
g3
Ntp34964
Rp34965
(dp34966
g14
g15
(g53
tp34967
Rp34968
(dp34969
g28
g29
sg3640
g23
sbsg108
(lp34970
g3640
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp34971
sg65
g34957
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp34972
sg79
Nsg80
Nsb(dp34973
sg1
(g92
g3
Ntp34974
Rp34975
(dp34976
g7
(dp34977
sg9
g1
(g3632
g3
Ntp34978
Rp34979
(dp34980
g14
g15
(g3636
tp34981
Rp34982
(dp34983
g20
I00
sg3352
I-1
sg3640
g23
sg3641
g3642
sg26
g23
sg3643
g23
sg28
g29
sg3620
g23
sg30
g31
sg32
g1
(g33
g34
(dp34984
tp34985
Rp34986
(dp34987
g41
S'environ_items'
p34988
sg43
g32
sbsg3320
g23
sg3621
g23
sg3622
g23
sg3649
F0.0
sg3371
g23
sg3650
g23
sg3344
g3345
sbsg3374
I-1
sg49
Nsg50
g31
sbsg51
Nsg43
g3652
sg63
(dp34989
sg65
g34957
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g3652
sg76
Nsg77
(lp34990
sg79
Nsg80
Nsb(dp34991
ssg157
(dp34992
sg159
(dp34993
g34946
(dp34994
g34975
(dp34995
g163
(lp34996
(g3622
g3622
tp34997
a(g3621
g3621
tp34998
a(g3320
g3320
tp34999
a(g3371
g3371
tp35000
a(g3620
g3620
tp35001
a(g3344
g3344
tp35002
asssg34961
(dp35003
sg34975
(dp35004
g34961
(dp35005
g163
(lp35006
(g3640
g3640
tp35007
assssg174
g34993
sg175
(dp35008
g34946
(dp35009
sg34961
(dp35010
g34975
g35005
ssg34975
(dp35011
g34946
g34995
sssg180
g34993
sbsg43
g34957
sg65
g66
sg75
g34957
sg76
g181
((lp35012
(lp35013
g184
ag181
((lp35014
(lp35015
g187
ag184
aa(lp35016
g189
ag190
aa(lp35017
g192
ag193
aa(lp35018
g195
ag196
aa(lp35019
g198
ag199
aa(lp35020
g201
ag106
aa(lp35021
g203
ag204
aa(lp35022
g206
ag207
aatp35023
Rp35024
aa(lp35025
g211
ag181
((lp35026
(lp35027
g187
ag211
aa(lp35028
g215
ag216
aa(lp35029
g218
ag219
aa(lp35030
g221
ag222
aa(lp35031
g224
ag225
aa(lp35032
g227
ag228
aa(lp35033
g230
ag231
aa(lp35034
g233
ag234
aa(lp35035
g236
ag237
aa(lp35036
g239
ag240
aa(lp35037
g242
ag243
aa(lp35038
g245
ag246
aa(lp35039
g248
ag249
aa(lp35040
g251
ag252
aa(lp35041
g254
ag255
aa(lp35042
g257
ag258
aa(lp35043
g260
ag261
aa(lp35044
g263
ag264
aa(lp35045
g266
ag267
aatp35046
Rp35047
aa(lp35048
g271
ag181
((lp35049
(lp35050
g187
ag271
aa(lp35051
g275
ag276
aatp35052
Rp35053
aatp35054
Rp35055
sg80
Nsbtp35056
a(g25082
g20515
tp35057
a(g27936
g1
(g81
g3
Ntp35058
Rp35059
(dp35060
g85
g1
(g86
g3
Ntp35061
Rp35062
(dp35063
g90
(dp35064
g1
(g92
g3
Ntp35065
Rp35066
(dp35067
g7
(dp35068
sg9
g1
(g97
g3
Ntp35069
Rp35070
(dp35071
g14
g15
(g53
tp35072
Rp35073
(dp35074
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g27958
sbsg108
(lp35075
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35076
sg65
S'log_temporal_regression_sca_0'
p35077
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp35078
sg79
Nsg80
Nsb(dp35079
sg1
(g92
g3
Ntp35080
Rp35081
(dp35082
g7
(dp35083
sg9
g1
(g135
g3
Ntp35084
Rp35085
(dp35086
g139
(lp35087
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp35088
Rp35089
(dp35090
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p35091
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp35092
g25
Nssg150
(lp35093
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp35094
sg65
g35077
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp35095
sg79
Nsg80
Nsb(dp35096
sg1
(g92
g3
Ntp35097
Rp35098
(dp35099
g7
(dp35100
sg9
g1
(g97
g3
Ntp35101
Rp35102
(dp35103
g14
g15
(g53
tp35104
Rp35105
(dp35106
g28
g29
sg25
g23
sbsg108
(lp35107
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35108
sg65
g35077
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35109
sg79
Nsg80
Nsb(dp35110
ssg157
(dp35111
sg159
(dp35112
g35066
(dp35113
g35081
(dp35114
g163
(lp35115
(g107
g107
tp35116
a(g105
g105
tp35117
a(g104
g104
tp35118
a(g14
g14
tp35119
asssg35081
(dp35120
g35098
(dp35121
g163
(lp35122
(g25
g25
tp35123
asssg35098
(dp35124
ssg174
g35112
sg175
(dp35125
g35066
(dp35126
sg35081
(dp35127
g35066
g35114
ssg35098
(dp35128
g35081
g35121
sssg180
g35112
sbsg43
g35077
sg65
g66
sg75
g35077
sg76
g181
((lp35129
(lp35130
g184
ag181
((lp35131
(lp35132
g187
ag184
aa(lp35133
g189
ag190
aa(lp35134
g192
ag193
aa(lp35135
g195
ag196
aa(lp35136
g198
ag199
aa(lp35137
g201
ag106
aa(lp35138
g203
ag204
aa(lp35139
g206
ag207
aatp35140
Rp35141
aa(lp35142
g211
ag181
((lp35143
(lp35144
g187
ag211
aa(lp35145
g215
ag216
aa(lp35146
g218
ag219
aa(lp35147
g221
ag222
aa(lp35148
g224
ag225
aa(lp35149
g227
ag228
aa(lp35150
g230
ag231
aa(lp35151
g233
ag234
aa(lp35152
g236
ag237
aa(lp35153
g239
ag240
aa(lp35154
g242
ag243
aa(lp35155
g245
ag246
aa(lp35156
g248
ag249
aa(lp35157
g251
ag252
aa(lp35158
g254
ag255
aa(lp35159
g257
ag258
aa(lp35160
g260
ag261
aa(lp35161
g263
ag264
aa(lp35162
g266
ag267
aatp35163
Rp35164
aa(lp35165
g271
ag181
((lp35166
(lp35167
g187
ag271
aa(lp35168
g275
ag276
aatp35169
Rp35170
aatp35171
Rp35172
sg80
Nsbtp35173
a(g27936
g5329
tp35174
a(g27936
g5281
tp35175
a(g27936
g426
tp35176
a(g1
(g81
g3
Ntp35177
Rp35178
(dp35179
g85
g1
(g86
g3
Ntp35180
Rp35181
(dp35182
g90
(dp35183
g1
(g92
g3
Ntp35184
Rp35185
(dp35186
g7
(dp35187
sg9
g1
(g97
g3
Ntp35188
Rp35189
(dp35190
g14
g15
(g53
tp35191
Rp35192
(dp35193
g28
g29
sg25
g23
sbsg108
(lp35194
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35195
sg65
S'template_dataflow_0'
p35196
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35197
sg79
Nsg80
Nsb(dp35198
sg1
(g92
g3
Ntp35199
Rp35200
(dp35201
g7
(dp35202
sg9
g1
(g97
g3
Ntp35203
Rp35204
(dp35205
g14
g15
(g53
tp35206
Rp35207
(dp35208
g28
g29
sg750
g23
sbsg108
(lp35209
g750
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35210
sg65
g35196
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp35211
(g750
(lp35212
S'mask-thr50-3mm'
p35213
atp35214
asg74
I00
sg75
g111
sg76
Nsg77
(lp35215
sg79
Nsg80
Nsb(dp35216
sg1
(g92
g3
Ntp35217
Rp35218
(dp35219
g7
(dp35220
sg9
g1
(g135
g3
Ntp35221
Rp35222
(dp35223
g139
(lp35224
g1817
ag24083
asg14
g15
(g142
tp35225
Rp35226
(dp35227
g20
I00
sg24083
(dp35228
g35213
S'/home/rtungaraza/CPAC_testData/mask-thr50-3mm.nii.gz'
p35229
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p35230
sg28
g29
sg1817
g23
sbsg148
(dp35231
g25
Nssg150
(lp35232
g25
asg152
Nsbsg51
Nsg43
g31763
sg63
(dp35233
sg65
g35196
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g31763
sg76
Nsg77
(lp35234
sg79
Nsg80
Nsb(dp35235
ssg157
(dp35236
sg159
(dp35237
g35185
(dp35238
sg35200
(dp35239
g35218
(dp35240
g163
(lp35241
(g750
g1817
tp35242
asssg35218
(dp35243
g35185
(dp35244
g163
(lp35245
(g25
g25
tp35246
assssg174
g35237
sg175
(dp35247
g35185
(dp35248
g35218
g35244
ssg35200
(dp35249
sg35218
(dp35250
g35200
g35240
sssg180
g35237
sbsg43
g35196
sg65
g66
sg75
g35196
sg76
g181
((lp35251
(lp35252
g184
ag181
((lp35253
(lp35254
g187
ag184
aa(lp35255
g189
ag190
aa(lp35256
g192
ag193
aa(lp35257
g195
ag196
aa(lp35258
g198
ag199
aa(lp35259
g201
ag106
aa(lp35260
g203
ag204
aa(lp35261
g206
ag207
aatp35262
Rp35263
aa(lp35264
g211
ag181
((lp35265
(lp35266
g187
ag211
aa(lp35267
g215
ag216
aa(lp35268
g218
ag219
aa(lp35269
g221
ag222
aa(lp35270
g224
ag225
aa(lp35271
g227
ag228
aa(lp35272
g230
ag231
aa(lp35273
g233
ag234
aa(lp35274
g236
ag237
aa(lp35275
g239
ag240
aa(lp35276
g242
ag243
aa(lp35277
g245
ag246
aa(lp35278
g248
ag249
aa(lp35279
g251
ag252
aa(lp35280
g254
ag255
aa(lp35281
g257
ag258
aa(lp35282
g260
ag261
aa(lp35283
g263
ag264
aa(lp35284
g266
ag267
aatp35285
Rp35286
aa(lp35287
g271
ag181
((lp35288
(lp35289
g187
ag271
aa(lp35290
g275
ag276
aatp35291
Rp35292
aatp35293
Rp35294
sg80
Nsbg7527
tp35295
a(g35178
g7238
tp35296
a(g35178
g7256
tp35297
a(g35178
g5
tp35298
a(g35178
g7387
tp35299
a(g29126
g5089
tp35300
a(g29126
g1
(g81
g3
Ntp35301
Rp35302
(dp35303
g85
g1
(g86
g3
Ntp35304
Rp35305
(dp35306
g90
(dp35307
g1
(g92
g3
Ntp35308
Rp35309
(dp35310
g7
(dp35311
sg9
g1
(g97
g3
Ntp35312
Rp35313
(dp35314
g14
g15
(g53
tp35315
Rp35316
(dp35317
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g29148
sbsg108
(lp35318
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35319
sg65
S'log_temporal_regression_sca_1'
p35320
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp35321
sg79
Nsg80
Nsb(dp35322
sg1
(g92
g3
Ntp35323
Rp35324
(dp35325
g7
(dp35326
sg9
g1
(g135
g3
Ntp35327
Rp35328
(dp35329
g139
(lp35330
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp35331
Rp35332
(dp35333
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p35334
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp35335
g25
Nssg150
(lp35336
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp35337
sg65
g35320
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp35338
sg79
Nsg80
Nsb(dp35339
sg1
(g92
g3
Ntp35340
Rp35341
(dp35342
g7
(dp35343
sg9
g1
(g97
g3
Ntp35344
Rp35345
(dp35346
g14
g15
(g53
tp35347
Rp35348
(dp35349
g28
g29
sg25
g23
sbsg108
(lp35350
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35351
sg65
g35320
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35352
sg79
Nsg80
Nsb(dp35353
ssg157
(dp35354
sg159
(dp35355
g35309
(dp35356
g35324
(dp35357
g163
(lp35358
(g107
g107
tp35359
a(g105
g105
tp35360
a(g104
g104
tp35361
a(g14
g14
tp35362
asssg35324
(dp35363
g35341
(dp35364
g163
(lp35365
(g25
g25
tp35366
asssg35341
(dp35367
ssg174
g35355
sg175
(dp35368
g35309
(dp35369
sg35324
(dp35370
g35309
g35357
ssg35341
(dp35371
g35324
g35364
sssg180
g35355
sbsg43
g35320
sg65
g66
sg75
g35320
sg76
g181
((lp35372
(lp35373
g184
ag181
((lp35374
(lp35375
g187
ag184
aa(lp35376
g189
ag190
aa(lp35377
g192
ag193
aa(lp35378
g195
ag196
aa(lp35379
g198
ag199
aa(lp35380
g201
ag106
aa(lp35381
g203
ag204
aa(lp35382
g206
ag207
aatp35383
Rp35384
aa(lp35385
g211
ag181
((lp35386
(lp35387
g187
ag211
aa(lp35388
g215
ag216
aa(lp35389
g218
ag219
aa(lp35390
g221
ag222
aa(lp35391
g224
ag225
aa(lp35392
g227
ag228
aa(lp35393
g230
ag231
aa(lp35394
g233
ag234
aa(lp35395
g236
ag237
aa(lp35396
g239
ag240
aa(lp35397
g242
ag243
aa(lp35398
g245
ag246
aa(lp35399
g248
ag249
aa(lp35400
g251
ag252
aa(lp35401
g254
ag255
aa(lp35402
g257
ag258
aa(lp35403
g260
ag261
aa(lp35404
g263
ag264
aa(lp35405
g266
ag267
aatp35406
Rp35407
aa(lp35408
g271
ag181
((lp35409
(lp35410
g187
ag271
aa(lp35411
g275
ag276
aatp35412
Rp35413
aatp35414
Rp35415
sg80
Nsbtp35416
a(g29126
g569
tp35417
a(g29126
g5513
tp35418
a(g7256
g1
(g81
g3
Ntp35419
Rp35420
(dp35421
g85
g1
(g86
g3
Ntp35422
Rp35423
(dp35424
g90
(dp35425
g1
(g92
g3
Ntp35426
Rp35427
(dp35428
g7
(dp35429
sg9
g1
(g97
g3
Ntp35430
Rp35431
(dp35432
g14
g15
(g53
tp35433
Rp35434
(dp35435
g28
g29
sg25
g23
sbsg108
(lp35436
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35437
sg65
S'log_network_centrality_0-0'
p35438
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35439
sg79
Nsg80
Nsb(dp35440
sg1
(g92
g3
Ntp35441
Rp35442
(dp35443
g7
(dp35444
sg9
g1
(g97
g3
Ntp35445
Rp35446
(dp35447
g14
g15
(g53
tp35448
Rp35449
(dp35450
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g7285
sbsg108
(lp35451
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35452
sg65
g35438
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp35453
sg79
Nsg80
Nsb(dp35454
sg1
(g92
g3
Ntp35455
Rp35456
(dp35457
g7
(dp35458
sg9
g1
(g135
g3
Ntp35459
Rp35460
(dp35461
g139
(lp35462
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp35463
Rp35464
(dp35465
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p35466
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp35467
g25
Nssg150
(lp35468
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp35469
sg65
g35438
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp35470
sg79
Nsg80
Nsb(dp35471
ssg157
(dp35472
sg159
(dp35473
g35427
(dp35474
sg35442
(dp35475
g35456
(dp35476
g163
(lp35477
(g107
g107
tp35478
a(g105
g105
tp35479
a(g104
g104
tp35480
a(g14
g14
tp35481
asssg35456
(dp35482
g35427
(dp35483
g163
(lp35484
(g25
g25
tp35485
assssg174
g35473
sg175
(dp35486
g35427
(dp35487
g35456
g35483
ssg35442
(dp35488
sg35456
(dp35489
g35442
g35476
sssg180
g35473
sbsg43
g35438
sg65
g66
sg75
g35438
sg76
g181
((lp35490
(lp35491
g184
ag181
((lp35492
(lp35493
g187
ag184
aa(lp35494
g189
ag190
aa(lp35495
g192
ag193
aa(lp35496
g195
ag196
aa(lp35497
g198
ag199
aa(lp35498
g201
ag106
aa(lp35499
g203
ag204
aa(lp35500
g206
ag207
aatp35501
Rp35502
aa(lp35503
g211
ag181
((lp35504
(lp35505
g187
ag211
aa(lp35506
g215
ag216
aa(lp35507
g218
ag219
aa(lp35508
g221
ag222
aa(lp35509
g224
ag225
aa(lp35510
g227
ag228
aa(lp35511
g230
ag231
aa(lp35512
g233
ag234
aa(lp35513
g236
ag237
aa(lp35514
g239
ag240
aa(lp35515
g242
ag243
aa(lp35516
g245
ag246
aa(lp35517
g248
ag249
aa(lp35518
g251
ag252
aa(lp35519
g254
ag255
aa(lp35520
g257
ag258
aa(lp35521
g260
ag261
aa(lp35522
g263
ag264
aa(lp35523
g266
ag267
aatp35524
Rp35525
aa(lp35526
g271
ag181
((lp35527
(lp35528
g187
ag271
aa(lp35529
g275
ag276
aatp35530
Rp35531
aatp35532
Rp35533
sg80
Nsbtp35534
a(g7256
g7506
tp35535
a(g7387
g1
(g81
g3
Ntp35536
Rp35537
(dp35538
g85
g1
(g86
g3
Ntp35539
Rp35540
(dp35541
g90
(dp35542
g1
(g92
g3
Ntp35543
Rp35544
(dp35545
g7
(dp35546
sg9
g1
(g97
g3
Ntp35547
Rp35548
(dp35549
g14
g15
(g53
tp35550
Rp35551
(dp35552
g28
g29
sg104
I0
sg14
g23
sg105
g106
sg107
g7406
sbsg108
(lp35553
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35554
sg65
S'log_network_centrality_0-2'
p35555
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp35556
sg79
Nsg80
Nsb(dp35557
sg1
(g92
g3
Ntp35558
Rp35559
(dp35560
g7
(dp35561
sg9
g1
(g97
g3
Ntp35562
Rp35563
(dp35564
g14
g15
(g53
tp35565
Rp35566
(dp35567
g28
g29
sg25
g23
sbsg108
(lp35568
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35569
sg65
g35555
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35570
sg79
Nsg80
Nsb(dp35571
sg1
(g92
g3
Ntp35572
Rp35573
(dp35574
g7
(dp35575
sg9
g1
(g135
g3
Ntp35576
Rp35577
(dp35578
g139
(lp35579
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp35580
Rp35581
(dp35582
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p35583
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp35584
g25
Nssg150
(lp35585
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp35586
sg65
g35555
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp35587
sg79
Nsg80
Nsb(dp35588
ssg157
(dp35589
sg159
(dp35590
g35544
(dp35591
g35573
(dp35592
g163
(lp35593
(g107
g107
tp35594
a(g105
g105
tp35595
a(g104
g104
tp35596
a(g14
g14
tp35597
asssg35559
(dp35598
sg35573
(dp35599
g35559
(dp35600
g163
(lp35601
(g25
g25
tp35602
assssg174
g35590
sg175
(dp35603
g35544
(dp35604
sg35559
(dp35605
g35573
g35600
ssg35573
(dp35606
g35544
g35592
sssg180
g35590
sbsg43
g35555
sg65
g66
sg75
g35555
sg76
g181
((lp35607
(lp35608
g184
ag181
((lp35609
(lp35610
g187
ag184
aa(lp35611
g189
ag190
aa(lp35612
g192
ag193
aa(lp35613
g195
ag196
aa(lp35614
g198
ag199
aa(lp35615
g201
ag106
aa(lp35616
g203
ag204
aa(lp35617
g206
ag207
aatp35618
Rp35619
aa(lp35620
g211
ag181
((lp35621
(lp35622
g187
ag211
aa(lp35623
g215
ag216
aa(lp35624
g218
ag219
aa(lp35625
g221
ag222
aa(lp35626
g224
ag225
aa(lp35627
g227
ag228
aa(lp35628
g230
ag231
aa(lp35629
g233
ag234
aa(lp35630
g236
ag237
aa(lp35631
g239
ag240
aa(lp35632
g242
ag243
aa(lp35633
g245
ag246
aa(lp35634
g248
ag249
aa(lp35635
g251
ag252
aa(lp35636
g254
ag255
aa(lp35637
g257
ag258
aa(lp35638
g260
ag261
aa(lp35639
g263
ag264
aa(lp35640
g266
ag267
aatp35641
Rp35642
aa(lp35643
g271
ag181
((lp35644
(lp35645
g187
ag271
aa(lp35646
g275
ag276
aatp35647
Rp35648
aatp35649
Rp35650
sg80
Nsbtp35651
a(g7387
g7506
tp35652
a(g7527
g5
tp35653
a(g20653
g11792
tp35654
a(g1
(g81
g3
Ntp35655
Rp35656
(dp35657
g85
g1
(g86
g3
Ntp35658
Rp35659
(dp35660
g90
(dp35661
g1
(g92
g3
Ntp35662
Rp35663
(dp35664
g7
(dp35665
sg9
g1
(g97
g3
Ntp35666
Rp35667
(dp35668
g14
g15
(g53
tp35669
Rp35670
(dp35671
g28
g29
sg750
g23
sbsg108
(lp35672
g750
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35673
sg65
S'template_dataflow_1'
p35674
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
(lp35675
(g750
(lp35676
S'mask-thr50-3mm'
p35677
atp35678
asg74
I00
sg75
g111
sg76
Nsg77
(lp35679
sg79
Nsg80
Nsb(dp35680
sg1
(g92
g3
Ntp35681
Rp35682
(dp35683
g7
(dp35684
sg9
g1
(g135
g3
Ntp35685
Rp35686
(dp35687
g139
(lp35688
g1817
ag24083
asg14
g15
(g142
tp35689
Rp35690
(dp35691
g20
I00
sg24083
(dp35692
g35677
S'/home/rtungaraza/CPAC_testData/mask-thr50-3mm.nii.gz'
p35693
ssg146
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p35694
sg28
g29
sg1817
g23
sbsg148
(dp35695
g25
Nssg150
(lp35696
g25
asg152
Nsbsg51
Nsg43
g31763
sg63
(dp35697
sg65
g35674
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g31763
sg76
Nsg77
(lp35698
sg79
Nsg80
Nsb(dp35699
sg1
(g92
g3
Ntp35700
Rp35701
(dp35702
g7
(dp35703
sg9
g1
(g97
g3
Ntp35704
Rp35705
(dp35706
g14
g15
(g53
tp35707
Rp35708
(dp35709
g28
g29
sg25
g23
sbsg108
(lp35710
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35711
sg65
g35674
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35712
sg79
Nsg80
Nsb(dp35713
ssg157
(dp35714
sg159
(dp35715
g35663
(dp35716
g35682
(dp35717
g163
(lp35718
(g750
g1817
tp35719
asssg35682
(dp35720
g35701
(dp35721
g163
(lp35722
(g25
g25
tp35723
asssg35701
(dp35724
ssg174
g35715
sg175
(dp35725
g35663
(dp35726
sg35682
(dp35727
g35663
g35717
ssg35701
(dp35728
g35682
g35721
sssg180
g35715
sbsg43
g35674
sg65
g66
sg75
g35674
sg76
g181
((lp35729
(lp35730
g184
ag181
((lp35731
(lp35732
g187
ag184
aa(lp35733
g189
ag190
aa(lp35734
g192
ag193
aa(lp35735
g195
ag196
aa(lp35736
g198
ag199
aa(lp35737
g201
ag106
aa(lp35738
g203
ag204
aa(lp35739
g206
ag207
aatp35740
Rp35741
aa(lp35742
g211
ag181
((lp35743
(lp35744
g187
ag211
aa(lp35745
g215
ag216
aa(lp35746
g218
ag219
aa(lp35747
g221
ag222
aa(lp35748
g224
ag225
aa(lp35749
g227
ag228
aa(lp35750
g230
ag231
aa(lp35751
g233
ag234
aa(lp35752
g236
ag237
aa(lp35753
g239
ag240
aa(lp35754
g242
ag243
aa(lp35755
g245
ag246
aa(lp35756
g248
ag249
aa(lp35757
g251
ag252
aa(lp35758
g254
ag255
aa(lp35759
g257
ag258
aa(lp35760
g260
ag261
aa(lp35761
g263
ag264
aa(lp35762
g266
ag267
aatp35763
Rp35764
aa(lp35765
g271
ag181
((lp35766
(lp35767
g187
ag271
aa(lp35768
g275
ag276
aatp35769
Rp35770
aatp35771
Rp35772
sg80
Nsbg8026
tp35773
a(g35656
g7753
tp35774
a(g35656
g283
tp35775
a(g35656
g7771
tp35776
a(g35656
g7890
tp35777
a(g7771
g8009
tp35778
a(g7771
g1
(g81
g3
Ntp35779
Rp35780
(dp35781
g85
g1
(g86
g3
Ntp35782
Rp35783
(dp35784
g90
(dp35785
g1
(g92
g3
Ntp35786
Rp35787
(dp35788
g7
(dp35789
sg9
g1
(g97
g3
Ntp35790
Rp35791
(dp35792
g14
g15
(g53
tp35793
Rp35794
(dp35795
g28
g29
sg25
g23
sbsg108
(lp35796
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35797
sg65
S'log_network_centrality_1-0'
p35798
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35799
sg79
Nsg80
Nsb(dp35800
sg1
(g92
g3
Ntp35801
Rp35802
(dp35803
g7
(dp35804
sg9
g1
(g97
g3
Ntp35805
Rp35806
(dp35807
g14
g15
(g53
tp35808
Rp35809
(dp35810
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g7792
sbsg108
(lp35811
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35812
sg65
g35798
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp35813
sg79
Nsg80
Nsb(dp35814
sg1
(g92
g3
Ntp35815
Rp35816
(dp35817
g7
(dp35818
sg9
g1
(g135
g3
Ntp35819
Rp35820
(dp35821
g139
(lp35822
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp35823
Rp35824
(dp35825
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p35826
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp35827
g25
Nssg150
(lp35828
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp35829
sg65
g35798
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp35830
sg79
Nsg80
Nsb(dp35831
ssg157
(dp35832
sg159
(dp35833
g35787
(dp35834
sg35802
(dp35835
g35816
(dp35836
g163
(lp35837
(g107
g107
tp35838
a(g105
g105
tp35839
a(g104
g104
tp35840
a(g14
g14
tp35841
asssg35816
(dp35842
g35787
(dp35843
g163
(lp35844
(g25
g25
tp35845
assssg174
g35833
sg175
(dp35846
g35787
(dp35847
g35816
g35843
ssg35802
(dp35848
sg35816
(dp35849
g35802
g35836
sssg180
g35833
sbsg43
g35798
sg65
g66
sg75
g35798
sg76
g181
((lp35850
(lp35851
g184
ag181
((lp35852
(lp35853
g187
ag184
aa(lp35854
g189
ag190
aa(lp35855
g192
ag193
aa(lp35856
g195
ag196
aa(lp35857
g198
ag199
aa(lp35858
g201
ag106
aa(lp35859
g203
ag204
aa(lp35860
g206
ag207
aatp35861
Rp35862
aa(lp35863
g211
ag181
((lp35864
(lp35865
g187
ag211
aa(lp35866
g215
ag216
aa(lp35867
g218
ag219
aa(lp35868
g221
ag222
aa(lp35869
g224
ag225
aa(lp35870
g227
ag228
aa(lp35871
g230
ag231
aa(lp35872
g233
ag234
aa(lp35873
g236
ag237
aa(lp35874
g239
ag240
aa(lp35875
g242
ag243
aa(lp35876
g245
ag246
aa(lp35877
g248
ag249
aa(lp35878
g251
ag252
aa(lp35879
g254
ag255
aa(lp35880
g257
ag258
aa(lp35881
g260
ag261
aa(lp35882
g263
ag264
aa(lp35883
g266
ag267
aatp35884
Rp35885
aa(lp35886
g271
ag181
((lp35887
(lp35888
g187
ag271
aa(lp35889
g275
ag276
aatp35890
Rp35891
aatp35892
Rp35893
sg80
Nsbtp35894
a(g7890
g8009
tp35895
a(g7890
g1
(g81
g3
Ntp35896
Rp35897
(dp35898
g85
g1
(g86
g3
Ntp35899
Rp35900
(dp35901
g90
(dp35902
g1
(g92
g3
Ntp35903
Rp35904
(dp35905
g7
(dp35906
sg9
g1
(g97
g3
Ntp35907
Rp35908
(dp35909
g14
g15
(g53
tp35910
Rp35911
(dp35912
g28
g29
sg104
I1
sg14
g23
sg105
g106
sg107
g7909
sbsg108
(lp35913
g107
ag105
ag104
ag14
asg110
I01
sbsg51
Nsg43
g111
sg63
(dp35914
sg65
S'log_network_centrality_1-2'
p35915
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g111
sg76
Nsg77
(lp35916
sg79
Nsg80
Nsb(dp35917
sg1
(g92
g3
Ntp35918
Rp35919
(dp35920
g7
(dp35921
sg9
g1
(g135
g3
Ntp35922
Rp35923
(dp35924
g139
(lp35925
g107
ag105
ag104
ag14
ag141
asg14
g15
(g142
tp35926
Rp35927
(dp35928
g20
I00
sg104
g23
sg141
Nsg107
g23
sg146
S'S\'def write_to_log(workflow, log_dir, index, inputs, scan_id ):\\n    """\\n    Method to write into log file the status of the workflow run.\\n    """\\n\\n    import os\\n    import CPAC\\n    from nipype import logging\\n    iflogger = logging.getLogger(\\\'interface\\\')\\n\\n    version = CPAC.__version__\\n\\n    subject_id = os.path.basename(log_dir)\\n\\n    if scan_id == None:\\n        scan_id = "scan_anat"\\n\\n    strategy = ""\\n\\n    import time\\n    import datetime\\n    ts = time.time()\\n\\n    stamp = datetime.datetime.fromtimestamp(ts).strftime(\\\'%Y-%m-%d %H:%M:%S\\\')\\n    try:\\n        if workflow!= \\\'DONE\\\':\\n            wf_path = os.path.dirname((os.getcwd()).split(workflow)[1]).strip("/")\\n\\n            if wf_path and wf_path != "":\\n                if \\\'/\\\' in wf_path:\\n                    scan_id, strategy = wf_path.split(\\\'/\\\',1)\\n                    scan_id = scan_id.strip(\\\'_\\\')\\n                    strategy = strategy.replace("/","")\\n                else:\\n                    scan_id = wf_path.strip(\\\'_\\\')\\n\\n            file_path = os.path.join(log_dir, scan_id, workflow)\\n\\n            try:\\n                os.makedirs(file_path)\\n            except Exception:\\n                iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n        else:\\n            file_path = os.path.join(log_dir, scan_id)\\n    except Exception:\\n        print "ERROR in write log"\\n        raise\\n\\n    try:\\n        os.makedirs(file_path)\\n    except Exception:\\n        iflogger.info("filepath already exist, filepath- %s, curr_dir - %s"%(file_path, os.getcwd()))\\n\\n    out_file = os.path.join(file_path, \\\'log_%s.yaml\\\'%strategy)\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n\\n    print >>f, "version : %s"%(str(version))\\n    print >>f, "timestamp: %s"%(str(stamp))\\n    print >>f, "pipeline_index: %d"%(index) \\n    print >>f, "subject_id: %s"%(subject_id)\\n    print >>f, "scan_id: %s"%(scan_id)\\n    print >>f, "strategy: %s"%(strategy)\\n    print >>f, "workflow_name: %s"%(workflow)\\n\\n\\n\\n    iflogger.info("CPAC custom log :")\\n\\n    if isinstance(inputs, list):\\n        inputs = inputs[0]\\n\\n    if os.path.exists(inputs):\\n\\n        print >>f,  "wf_status: DONE"\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'COMPLETED\\\') )\\n\\n    else:\\n\\n        iflogger.info(" version - %s, timestamp -%s, subject_id -%s, scan_id - %s, strategy -%s, workflow - %s, status -%s"\\\\\\n                      %(str(version), str(stamp), subject_id, scan_id,strategy,workflow,\\\'ERROR\\\') )\\n\\n        print>>f, "wf_status: ERROR"\\n\\n    f.close()\\n\\n    #os.system("/home2/haipan/tmp/C-PAC/scripts/log_py2js.py %s %s"%(out_file, log_dir))   ###\\n\\n    return out_file\\n\'\n.'
p35929
sg14
g23
sg105
g23
sg28
g29
sbsg148
(dp35930
g25
Nssg150
(lp35931
g25
asg152
Nsbsg51
Nsg43
g153
sg63
(dp35932
sg65
g35915
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g153
sg76
Nsg77
(lp35933
sg79
Nsg80
Nsb(dp35934
sg1
(g92
g3
Ntp35935
Rp35936
(dp35937
g7
(dp35938
sg9
g1
(g97
g3
Ntp35939
Rp35940
(dp35941
g14
g15
(g53
tp35942
Rp35943
(dp35944
g28
g29
sg25
g23
sbsg108
(lp35945
g25
asg110
I01
sbsg51
Nsg43
g127
sg63
(dp35946
sg65
g35915
sg69
Nsg70
I00
sg71
I00
sg72
Nsg73
Nsg74
I00
sg75
g127
sg76
Nsg77
(lp35947
sg79
Nsg80
Nsb(dp35948
ssg157
(dp35949
sg159
(dp35950
g35904
(dp35951
g35919
(dp35952
g163
(lp35953
(g107
g107
tp35954
a(g105
g105
tp35955
a(g104
g104
tp35956
a(g14
g14
tp35957
asssg35919
(dp35958
g35936
(dp35959
g163
(lp35960
(g25
g25
tp35961
asssg35936
(dp35962
ssg174
g35950
sg175
(dp35963
g35904
(dp35964
sg35919
(dp35965
g35904
g35952
ssg35936
(dp35966
g35919
g35959
sssg180
g35950
sbsg43
g35915
sg65
g66
sg75
g35915
sg76
g181
((lp35967
(lp35968
g184
ag181
((lp35969
(lp35970
g187
ag184
aa(lp35971
g189
ag190
aa(lp35972
g192
ag193
aa(lp35973
g195
ag196
aa(lp35974
g198
ag199
aa(lp35975
g201
ag106
aa(lp35976
g203
ag204
aa(lp35977
g206
ag207
aatp35978
Rp35979
aa(lp35980
g211
ag181
((lp35981
(lp35982
g187
ag211
aa(lp35983
g215
ag216
aa(lp35984
g218
ag219
aa(lp35985
g221
ag222
aa(lp35986
g224
ag225
aa(lp35987
g227
ag228
aa(lp35988
g230
ag231
aa(lp35989
g233
ag234
aa(lp35990
g236
ag237
aa(lp35991
g239
ag240
aa(lp35992
g242
ag243
aa(lp35993
g245
ag246
aa(lp35994
g248
ag249
aa(lp35995
g251
ag252
aa(lp35996
g254
ag255
aa(lp35997
g257
ag258
aa(lp35998
g260
ag261
aa(lp35999
g263
ag264
aa(lp36000
g266
ag267
aatp36001
Rp36002
aa(lp36003
g271
ag181
((lp36004
(lp36005
g187
ag271
aa(lp36006
g275
ag276
aatp36007
Rp36008
aatp36009
Rp36010
sg80
Nsbtp36011
a(g8026
g283
tp36012
a(g19244
g13623
tp36013
a(g18416
g16211
tp36014
a(g18968
g12378
tp36015
a(g23573
g12490
tp36016
a(g20515
g12835
tp36017
a(g20942
g15531
tp36018
a(g21244
g12723
tp36019
a(g21520
g15307
tp36020
a(g21658
g13735
tp36021
a(g21934
g11904
tp36022
a(g22193
g13399
tp36023
a(g13623
g34454
tp36024
a(g34454
g5437
tp36025
a(g18692
g15647
tp36026
a(g12378
g34219
tp36027
a(g34219
g5032
tp36028
a(g23725
g15983
tp36029
a(g12490
g34091
tp36030
a(g34091
g5156
tp36031
a(g16211
g34574
tp36032
a(g34574
g5358
tp36033
a(g22331
g15083
tp36034
a(g19811
g12947
tp36035
a(g12835
g34939
tp36036
a(g34939
g4956
tp36037
a(g15531
g34693
tp36038
a(g34693
g4928
tp36039
a(g12723
g26624
tp36040
a(g26624
g4830
tp36041
a(g14971
g26503
tp36042
a(g27348
g5070
tp36043
a(g15307
g27348
tp36044
a(g13735
g26862
tp36045
a(g26862
g4852
tp36046
a(g20239
g14971
tp36047
a(g26503
g5310
tp36048
a(g26383
g5494
tp36049
a(g11904
g26383
tp36050
a(g27109
g5656
tp36051
a(g13399
g27109
tp36052
a(g18554
g15871
tp36053
a(g11792
g27229
tp36054
a(g27229
g5541
tp36055
a(g15871
g26984
tp36056
a(g26984
g5184
tp36057
a(g15983
g31226
tp36058
a(g31226
g5222
tp36059
a(g15647
g31464
tp36060
a(g31464
g5377
tp36061
a(g12947
g30650
tp36062
a(g30650
g5637
tp36063
a(g23863
g13511
tp36064
a(g15083
g30769
tp36065
a(g30769
g5117
tp36066
a(g13511
g33104
tp36067
a(g33104
g5475
tp36068
a(g18278
g15419
tp36069
a(g12607
g33227
tp36070
a(g21093
g12607
tp36071
a(g33227
g712
tp36072
a(g15419
g33600
tp36073
a(g33600
g5262
tp36074
a(g13059
g33471
tp36075
a(g20791
g13059
tp36076
a(g33471
g993
tp36077
a(g20377
g15195
tp36078
a(g15195
g33970
tp36079
a(g33970
g5580
tp36080
a(g19382
g16547
tp36081
a(g16435
g30530
tp36082
a(g16547
g33842
tp36083
a(g33842
g1320
tp36084
a(g19106
g16435
tp36085
a(g30530
g4975
tp36086
a(g19949
g14855
tp36087
a(g14855
g30398
tp36088
a(g30398
g1537
tp36089
a.